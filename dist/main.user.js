/*! */
// ==UserScript==
// @name         save tweet with media contents
// @namespace    http://twitter.com/
// @version      20221215.0
// @description  save tweet with media contents
// @downloadURL  https://raw.githubusercontent.com/rayfill/tweets-downloader/main/dist/main.user.js
// @updateURL    https://raw.githubusercontent.com/rayfill/tweets-downloader/main/dist/main.user.js
// @author       rayfill
// @match        https://twitter.com/*
// @grant        unsafeWindow
// @grant        GM_xmlhttpRequest
// @connect      twimg.com
// @run-at       document-start
// ==/UserScript==

/* */
(()=>{var e={412:(e,t,n)=>{e=n.nmd(e),function(){"use strict";var t=window.Bluebird||window.Promise;let r=void 0===typeof window?n.g:window;if(!r.GM_fetch){u.prototype.append=function(e,t){e=s(e),t=l(t);var n=this.map[e];n||(n=[],this.map[e]=n),n.push(t)},u.prototype.delete=function(e){delete this.map[s(e)]},u.prototype.get=function(e){var t=this.map[s(e)];return t?t[0]:null},u.prototype.getAll=function(e){return this.map[s(e)]||[]},u.prototype.has=function(e){return this.map.hasOwnProperty(s(e))},u.prototype.set=function(e,t){this.map[s(e)]=[l(t)]},u.prototype.forEach=function(e,t){Object.getOwnPropertyNames(this.map).forEach((function(n){this.map[n].forEach((function(r){e.call(t,r,n,this)}),this)}),this)};var o="FileReader"in r&&"Blob"in r&&function(){try{return new Blob,!0}catch(e){return!1}}(),i="FormData"in r,a=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];h.call(p.prototype),h.call(v.prototype),r.Headers=u,r.Request=p,r.Response=v,r.GM_fetch=function(e,n){var r;return r=p.prototype.isPrototypeOf(e)&&!n?e:new p(e,n),new t((function(e,t){var o,i={};function a(e,t,n){return e||(/^X-Request-URL:/m.test(t)?n.get("X-Request-URL"):void 0)}i.method=r.method,i.url=r.url,i.synchronous=!1,i.onload=function(n){var r=n.status;if(r<100||r>599)t(new TypeError("Network request failed"));else{var i,s,l=n.responseHeaders;i=l,s=new u,i.trim().split("\n").forEach((function(e){var t=e.trim().split(":"),n=t.shift().trim(),r=t.join(":").trim();s.append(n,r)})),o=s;var c={status:r,statusText:n.statusText,headers:o,url:a(n.finalUrl,l,o)},d=n.response;e(new v(d,c))}},i.onerror=function(){t(new TypeError("Network request failed"))},i.headers={},r.headers.forEach((function(e,t){i.headers[t]=e})),void 0!==r._bodyInit&&(i.data=r._bodyInit),void 0!==n&&"function"==typeof n.onDownloadProgress&&(i.onprogress=n.onDownloadProgress),i.responseType="blob",GM_xmlhttpRequest(i)}))},r.GM_fetch.polyfill=!0,console.log(`module: ${e}`),e.exports={GM_fetch}}function s(e){if("string"!=typeof e&&(e=e.toString()),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(e))throw new TypeError("Invalid character in header field name");return e.toLowerCase()}function l(e){return"string"!=typeof e&&(e=e.toString()),e}function u(e){this.map={},e instanceof u?e.forEach((function(e,t){this.append(t,e)}),this):e&&Object.getOwnPropertyNames(e).forEach((function(t){this.append(t,e[t])}),this)}function c(e){if(e.bodyUsed)return t.reject(new TypeError("Already read"));e.bodyUsed=!0}function d(e){return new t((function(t,n){e.onload=function(){t(e.result)},e.onerror=function(){n(e.error)}}))}function f(e){var t=new FileReader;return t.readAsArrayBuffer(e),d(t)}function h(){return this.bodyUsed=!1,this._initBody=function(e){if(this._bodyInit=e,"string"==typeof e)this._bodyText=e;else if(o&&Blob.prototype.isPrototypeOf(e))this._bodyBlob=e;else if(i&&FormData.prototype.isPrototypeOf(e))this._bodyFormData=e;else{if(e)throw new Error("unsupported BodyInit type");this._bodyText=""}},o?(this.blob=function(){var e=c(this);if(e)return e;if(this._bodyBlob)return t.resolve(this._bodyBlob);if(this._bodyFormData)throw new Error("could not read FormData body as blob");return t.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this.blob().then(f)},this.text=function(){var e,n,r=c(this);if(r)return r;if(this._bodyBlob)return e=this._bodyBlob,(n=new FileReader).readAsText(e),d(n);if(this._bodyFormData)throw new Error("could not read FormData body as text");return t.resolve(this._bodyText)}):this.text=function(){var e=c(this);return e||t.resolve(this._bodyText)},i&&(this.formData=function(){return this.text().then(m)}),this.json=function(){return this.text().then(JSON.parse)},this}function p(e,t){var n,r;if(t=t||{},this.url=e,this.credentials=t.credentials||"omit",this.headers=new u(t.headers),this.method=(n=t.method||"GET",r=n.toUpperCase(),a.indexOf(r)>-1?r:n),this.mode=t.mode||null,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&t.body)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(t.body)}function m(e){var t=new FormData;return e.trim().split("&").forEach((function(e){if(e){var n=e.split("="),r=n.shift().replace(/\+/g," "),o=n.join("=").replace(/\+/g," ");t.append(decodeURIComponent(r),decodeURIComponent(o))}})),t}function v(e,t){t||(t={}),this._initBody(e),this.type="default",this.url=null,this.status=t.status,this.ok=this.status>=200&&this.status<300,this.statusText=t.statusText,this.headers=t.headers instanceof u?t.headers:new u(t.headers),this.url=t.url||""}}()},804:(e,t,n)=>{const{GM_fetch:r}=n(412),{xhrHook:o,xhrHook2:i}=n(447);e.exports={GM_fetch:r,xhrHook:o,xhrHook2:i}},447:e=>{function t(e){window.addEventListener("message",(t=>{let{type:n,responseType:r,url:o,content:i}=t.data;"trap"===n&&e(o,r,i)}));let t=document.createElement("script");t.text="("+function(){const e=window.XMLHttpRequest.prototype.send;window.XMLHttpRequest.prototype.send=function(){const t=this,n=Array.from(arguments),r=()=>{window.postMessage({type:"trap",responseType:t.responseType,url:t.responseURL,content:t.response},"*"),t.removeEventListener("load",r)};return t.addEventListener("load",r),e.apply(t,n)}}.toString()+")();",unsafeWindow.document.documentElement.appendChild(t)}function n(e){const t=unsafeWindow.XMLHttpRequest;let n={get:(t,n,r)=>{let o=t[n];return"function"==typeof o?"send"===n?(...n)=>{let r=t.onload;t.onload=(...n)=>{if(e.apply(e,[t].concat(n)),t.onload=r,"function"==typeof r)return r.apply(t,n)},t.send.apply(t,n)}:(...e)=>t[n].apply(t,e):o},set:(e,t,n,r)=>(e[t]=n,!0)},r={construct:()=>new Proxy(new t,n)};unsafeWindow.XMLHttpRequest=new Proxy(t,r)}"object"==typeof self&&(self.xhrHook=n,self.xhrHook2=t),e.exports={xhrHook:n,xhrHook2:t}},387:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(537),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([e.id,'/*\n! tailwindcss v3.2.4 | MIT License | https://tailwindcss.com\n*//*\n1. Prevent padding and border from affecting element width. (https://github.com/mozdevs/cssremedy/issues/4)\n2. Allow adding a border to an element by just adding a border-width. (https://github.com/tailwindcss/tailwindcss/pull/116)\n*/\n\n*,\n::before,\n::after {\n  box-sizing: border-box; /* 1 */\n  border-width: 0; /* 2 */\n  border-style: solid; /* 2 */\n  border-color: #e5e7eb; /* 2 */\n}\n\n::before,\n::after {\n  --tw-content: \'\';\n}\n\n/*\n1. Use a consistent sensible line-height in all browsers.\n2. Prevent adjustments of font size after orientation changes in iOS.\n3. Use a more readable tab size.\n4. Use the user\'s configured `sans` font-family by default.\n5. Use the user\'s configured `sans` font-feature-settings by default.\n*/\n\nhtml {\n  line-height: 1.5; /* 1 */\n  -webkit-text-size-adjust: 100%; /* 2 */\n  -moz-tab-size: 4; /* 3 */\n  -o-tab-size: 4;\n     tab-size: 4; /* 3 */\n  font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji"; /* 4 */\n  font-feature-settings: normal; /* 5 */\n}\n\n/*\n1. Remove the margin in all browsers.\n2. Inherit line-height from `html` so users can set them as a class directly on the `html` element.\n*/\n\nbody {\n  margin: 0; /* 1 */\n  line-height: inherit; /* 2 */\n}\n\n/*\n1. Add the correct height in Firefox.\n2. Correct the inheritance of border color in Firefox. (https://bugzilla.mozilla.org/show_bug.cgi?id=190655)\n3. Ensure horizontal rules are visible by default.\n*/\n\nhr {\n  height: 0; /* 1 */\n  color: inherit; /* 2 */\n  border-top-width: 1px; /* 3 */\n}\n\n/*\nAdd the correct text decoration in Chrome, Edge, and Safari.\n*/\n\nabbr:where([title]) {\n  -webkit-text-decoration: underline dotted;\n          text-decoration: underline dotted;\n}\n\n/*\nRemove the default font size and weight for headings.\n*/\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  font-size: inherit;\n  font-weight: inherit;\n}\n\n/*\nReset links to optimize for opt-in styling instead of opt-out.\n*/\n\na {\n  color: inherit;\n  text-decoration: inherit;\n}\n\n/*\nAdd the correct font weight in Edge and Safari.\n*/\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\n/*\n1. Use the user\'s configured `mono` font family by default.\n2. Correct the odd `em` font sizing in all browsers.\n*/\n\ncode,\nkbd,\nsamp,\npre {\n  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/*\nAdd the correct font size in all browsers.\n*/\n\nsmall {\n  font-size: 80%;\n}\n\n/*\nPrevent `sub` and `sup` elements from affecting the line height in all browsers.\n*/\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\n/*\n1. Remove text indentation from table contents in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=999088, https://bugs.webkit.org/show_bug.cgi?id=201297)\n2. Correct table border color inheritance in all Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=935729, https://bugs.webkit.org/show_bug.cgi?id=195016)\n3. Remove gaps between table borders by default.\n*/\n\ntable {\n  text-indent: 0; /* 1 */\n  border-color: inherit; /* 2 */\n  border-collapse: collapse; /* 3 */\n}\n\n/*\n1. Change the font styles in all browsers.\n2. Remove the margin in Firefox and Safari.\n3. Remove default padding in all browsers.\n*/\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: inherit; /* 1 */\n  font-size: 100%; /* 1 */\n  font-weight: inherit; /* 1 */\n  line-height: inherit; /* 1 */\n  color: inherit; /* 1 */\n  margin: 0; /* 2 */\n  padding: 0; /* 3 */\n}\n\n/*\nRemove the inheritance of text transform in Edge and Firefox.\n*/\n\nbutton,\nselect {\n  text-transform: none;\n}\n\n/*\n1. Correct the inability to style clickable types in iOS and Safari.\n2. Remove default button styles.\n*/\n\nbutton,\n[type=\'button\'],\n[type=\'reset\'],\n[type=\'submit\'] {\n  -webkit-appearance: button; /* 1 */\n  background-color: transparent; /* 2 */\n  background-image: none; /* 2 */\n}\n\n/*\nUse the modern Firefox focus style for all focusable elements.\n*/\n\n:-moz-focusring {\n  outline: auto;\n}\n\n/*\nRemove the additional `:invalid` styles in Firefox. (https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737)\n*/\n\n:-moz-ui-invalid {\n  box-shadow: none;\n}\n\n/*\nAdd the correct vertical alignment in Chrome and Firefox.\n*/\n\nprogress {\n  vertical-align: baseline;\n}\n\n/*\nCorrect the cursor style of increment and decrement buttons in Safari.\n*/\n\n::-webkit-inner-spin-button,\n::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/*\n1. Correct the odd appearance in Chrome and Safari.\n2. Correct the outline style in Safari.\n*/\n\n[type=\'search\'] {\n  -webkit-appearance: textfield; /* 1 */\n  outline-offset: -2px; /* 2 */\n}\n\n/*\nRemove the inner padding in Chrome and Safari on macOS.\n*/\n\n::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/*\n1. Correct the inability to style clickable types in iOS and Safari.\n2. Change font properties to `inherit` in Safari.\n*/\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button; /* 1 */\n  font: inherit; /* 2 */\n}\n\n/*\nAdd the correct display in Chrome and Safari.\n*/\n\nsummary {\n  display: list-item;\n}\n\n/*\nRemoves the default spacing and border for appropriate elements.\n*/\n\nblockquote,\ndl,\ndd,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\nhr,\nfigure,\np,\npre {\n  margin: 0;\n}\n\nfieldset {\n  margin: 0;\n  padding: 0;\n}\n\nlegend {\n  padding: 0;\n}\n\nol,\nul,\nmenu {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n\n/*\nPrevent resizing textareas horizontally by default.\n*/\n\ntextarea {\n  resize: vertical;\n}\n\n/*\n1. Reset the default placeholder opacity in Firefox. (https://github.com/tailwindlabs/tailwindcss/issues/3300)\n2. Set the default placeholder color to the user\'s configured gray 400 color.\n*/\n\ninput::-moz-placeholder, textarea::-moz-placeholder {\n  opacity: 1; /* 1 */\n  color: #9ca3af; /* 2 */\n}\n\ninput::placeholder,\ntextarea::placeholder {\n  opacity: 1; /* 1 */\n  color: #9ca3af; /* 2 */\n}\n\n/*\nSet the default cursor for buttons.\n*/\n\nbutton,\n[role="button"] {\n  cursor: pointer;\n}\n\n/*\nMake sure disabled buttons don\'t get the pointer cursor.\n*/\n:disabled {\n  cursor: default;\n}\n\n/*\n1. Make replaced elements `display: block` by default. (https://github.com/mozdevs/cssremedy/issues/14)\n2. Add `vertical-align: middle` to align replaced elements more sensibly by default. (https://github.com/jensimmons/cssremedy/issues/14#issuecomment-634934210)\n   This can trigger a poorly considered lint error in some tools but is included by design.\n*/\n\nimg,\nsvg,\nvideo,\ncanvas,\naudio,\niframe,\nembed,\nobject {\n  display: block; /* 1 */\n  vertical-align: middle; /* 2 */\n}\n\n/*\nConstrain images and videos to the parent width and preserve their intrinsic aspect ratio. (https://github.com/mozdevs/cssremedy/issues/14)\n*/\n\nimg,\nvideo {\n  max-width: 100%;\n  height: auto;\n}\n\n/* Make elements with the HTML hidden attribute stay hidden by default */\n[hidden] {\n  display: none;\n}\n\n*, ::before, ::after {\n  --tw-border-spacing-x: 0;\n  --tw-border-spacing-y: 0;\n  --tw-translate-x: 0;\n  --tw-translate-y: 0;\n  --tw-rotate: 0;\n  --tw-skew-x: 0;\n  --tw-skew-y: 0;\n  --tw-scale-x: 1;\n  --tw-scale-y: 1;\n  --tw-pan-x:  ;\n  --tw-pan-y:  ;\n  --tw-pinch-zoom:  ;\n  --tw-scroll-snap-strictness: proximity;\n  --tw-ordinal:  ;\n  --tw-slashed-zero:  ;\n  --tw-numeric-figure:  ;\n  --tw-numeric-spacing:  ;\n  --tw-numeric-fraction:  ;\n  --tw-ring-inset:  ;\n  --tw-ring-offset-width: 0px;\n  --tw-ring-offset-color: #fff;\n  --tw-ring-color: rgb(59 130 246 / 0.5);\n  --tw-ring-offset-shadow: 0 0 #0000;\n  --tw-ring-shadow: 0 0 #0000;\n  --tw-shadow: 0 0 #0000;\n  --tw-shadow-colored: 0 0 #0000;\n  --tw-blur:  ;\n  --tw-brightness:  ;\n  --tw-contrast:  ;\n  --tw-grayscale:  ;\n  --tw-hue-rotate:  ;\n  --tw-invert:  ;\n  --tw-saturate:  ;\n  --tw-sepia:  ;\n  --tw-drop-shadow:  ;\n  --tw-backdrop-blur:  ;\n  --tw-backdrop-brightness:  ;\n  --tw-backdrop-contrast:  ;\n  --tw-backdrop-grayscale:  ;\n  --tw-backdrop-hue-rotate:  ;\n  --tw-backdrop-invert:  ;\n  --tw-backdrop-opacity:  ;\n  --tw-backdrop-saturate:  ;\n  --tw-backdrop-sepia:  ;\n}\n\n::backdrop {\n  --tw-border-spacing-x: 0;\n  --tw-border-spacing-y: 0;\n  --tw-translate-x: 0;\n  --tw-translate-y: 0;\n  --tw-rotate: 0;\n  --tw-skew-x: 0;\n  --tw-skew-y: 0;\n  --tw-scale-x: 1;\n  --tw-scale-y: 1;\n  --tw-pan-x:  ;\n  --tw-pan-y:  ;\n  --tw-pinch-zoom:  ;\n  --tw-scroll-snap-strictness: proximity;\n  --tw-ordinal:  ;\n  --tw-slashed-zero:  ;\n  --tw-numeric-figure:  ;\n  --tw-numeric-spacing:  ;\n  --tw-numeric-fraction:  ;\n  --tw-ring-inset:  ;\n  --tw-ring-offset-width: 0px;\n  --tw-ring-offset-color: #fff;\n  --tw-ring-color: rgb(59 130 246 / 0.5);\n  --tw-ring-offset-shadow: 0 0 #0000;\n  --tw-ring-shadow: 0 0 #0000;\n  --tw-shadow: 0 0 #0000;\n  --tw-shadow-colored: 0 0 #0000;\n  --tw-blur:  ;\n  --tw-brightness:  ;\n  --tw-contrast:  ;\n  --tw-grayscale:  ;\n  --tw-hue-rotate:  ;\n  --tw-invert:  ;\n  --tw-saturate:  ;\n  --tw-sepia:  ;\n  --tw-drop-shadow:  ;\n  --tw-backdrop-blur:  ;\n  --tw-backdrop-brightness:  ;\n  --tw-backdrop-contrast:  ;\n  --tw-backdrop-grayscale:  ;\n  --tw-backdrop-hue-rotate:  ;\n  --tw-backdrop-invert:  ;\n  --tw-backdrop-opacity:  ;\n  --tw-backdrop-saturate:  ;\n  --tw-backdrop-sepia:  ;\n}\n.fixed {\n  position: fixed;\n}\n.top-16 {\n  top: 4rem;\n}\n.right-16 {\n  right: 4rem;\n}\n.z-10 {\n  z-index: 10;\n}\n.block {\n  display: block;\n}\n.flex {\n  display: flex;\n}\n.select-none {\n  -webkit-user-select: none;\n     -moz-user-select: none;\n          user-select: none;\n}\n.resize {\n  resize: both;\n}\n.flex-row {\n  flex-direction: row;\n}\n.flex-col {\n  flex-direction: column;\n}\n.justify-around {\n  justify-content: space-around;\n}\n.rounded-lg {\n  border-radius: 0.5rem;\n}\n.rounded-full {\n  border-radius: 9999px;\n}\n.border-2 {\n  border-width: 2px;\n}\n.border-black {\n  --tw-border-opacity: 1;\n  border-color: rgb(0 0 0 / var(--tw-border-opacity));\n}\n.bg-white {\n  --tw-bg-opacity: 1;\n  background-color: rgb(255 255 255 / var(--tw-bg-opacity));\n}\n.bg-slate-50 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(248 250 252 / var(--tw-bg-opacity));\n}\n.text-center {\n  text-align: center;\n}\n.filter {\n  filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);\n}\n',"",{version:3,sources:["webpack://./src/index.css"],names:[],mappings:"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",sourcesContent:["@tailwind base;\n@tailwind components;\n@tailwind utilities;\n"],sourceRoot:""}]);const s=a},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(a[l]=!0)}for(var u=0;u<e.length;u++){var c=[].concat(e[u]);r&&a[c[0]]||(void 0!==i&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=i),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),o&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=o):c[4]="".concat(o)),t.push(c))}},t}},537:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */"),a=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(a).concat([i]).join("\n")}return[t].join("\n")}},162:function(e,t,n){var r,o,i;o=[],r=function(){"use strict";function t(e,t){return void 0===t?t={autoBom:!1}:"object"!=typeof t&&(console.warn("Deprecated: Expected third argument to be a object"),t={autoBom:!t}),t.autoBom&&/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(e.type)?new Blob(["\ufeff",e],{type:e.type}):e}function r(e,t,n){var r=new XMLHttpRequest;r.open("GET",e),r.responseType="blob",r.onload=function(){l(r.response,t,n)},r.onerror=function(){console.error("could not download file")},r.send()}function o(e){var t=new XMLHttpRequest;t.open("HEAD",e,!1);try{t.send()}catch(e){}return 200<=t.status&&299>=t.status}function i(e){try{e.dispatchEvent(new MouseEvent("click"))}catch(n){var t=document.createEvent("MouseEvents");t.initMouseEvent("click",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),e.dispatchEvent(t)}}var a="object"==typeof window&&window.window===window?window:"object"==typeof self&&self.self===self?self:"object"==typeof n.g&&n.g.global===n.g?n.g:void 0,s=a.navigator&&/Macintosh/.test(navigator.userAgent)&&/AppleWebKit/.test(navigator.userAgent)&&!/Safari/.test(navigator.userAgent),l=a.saveAs||("object"!=typeof window||window!==a?function(){}:"download"in HTMLAnchorElement.prototype&&!s?function(e,t,n){var s=a.URL||a.webkitURL,l=document.createElement("a");t=t||e.name||"download",l.download=t,l.rel="noopener","string"==typeof e?(l.href=e,l.origin===location.origin?i(l):o(l.href)?r(e,t,n):i(l,l.target="_blank")):(l.href=s.createObjectURL(e),setTimeout((function(){s.revokeObjectURL(l.href)}),4e4),setTimeout((function(){i(l)}),0))}:"msSaveOrOpenBlob"in navigator?function(e,n,a){if(n=n||e.name||"download","string"!=typeof e)navigator.msSaveOrOpenBlob(t(e,a),n);else if(o(e))r(e,n,a);else{var s=document.createElement("a");s.href=e,s.target="_blank",setTimeout((function(){i(s)}))}}:function(e,t,n,o){if((o=o||open("","_blank"))&&(o.document.title=o.document.body.innerText="downloading..."),"string"==typeof e)return r(e,t,n);var i="application/octet-stream"===e.type,l=/constructor/i.test(a.HTMLElement)||a.safari,u=/CriOS\/[\d]+/.test(navigator.userAgent);if((u||i&&l||s)&&"undefined"!=typeof FileReader){var c=new FileReader;c.onloadend=function(){var e=c.result;e=u?e:e.replace(/^data:[^;]*;/,"data:attachment/file;"),o?o.location.href=e:location=e,o=null},c.readAsDataURL(e)}else{var d=a.URL||a.webkitURL,f=d.createObjectURL(e);o?o.location=f:location.href=f,o=null,setTimeout((function(){d.revokeObjectURL(f)}),4e4)}});a.saveAs=l.saveAs=l,e.exports=l},void 0===(i="function"==typeof r?r.apply(t,o):r)||(e.exports=i)},733:(e,t,n)=>{e.exports=function e(t,n,r){function o(a,s){if(!n[a]){if(!t[a]){if(i)return i(a,!0);var l=new Error("Cannot find module '"+a+"'");throw l.code="MODULE_NOT_FOUND",l}var u=n[a]={exports:{}};t[a][0].call(u.exports,(function(e){return o(t[a][1][e]||e)}),u,u.exports,e,t,n,r)}return n[a].exports}for(var i=void 0,a=0;a<r.length;a++)o(r[a]);return o}({1:[function(e,t,r){(function(n){!function(e){"object"==typeof r&&void 0!==t?t.exports=e():("undefined"!=typeof window?window:void 0!==n?n:"undefined"!=typeof self?self:this).JSZip=e()}((function(){return function t(n,r,o){function i(s,l){if(!r[s]){if(!n[s]){var u="function"==typeof e&&e;if(!l&&u)return u(s,!0);if(a)return a(s,!0);var c=new Error("Cannot find module '"+s+"'");throw c.code="MODULE_NOT_FOUND",c}var d=r[s]={exports:{}};n[s][0].call(d.exports,(function(e){return i(n[s][1][e]||e)}),d,d.exports,t,n,r,o)}return r[s].exports}for(var a="function"==typeof e&&e,s=0;s<o.length;s++)i(o[s]);return i}({1:[function(e,t,r){(function(n){!function(e){"object"==typeof r&&void 0!==t?t.exports=e():("undefined"!=typeof window?window:void 0!==n?n:"undefined"!=typeof self?self:this).JSZip=e()}((function(){return function t(n,r,o){function i(s,l){if(!r[s]){if(!n[s]){var u="function"==typeof e&&e;if(!l&&u)return u(s,!0);if(a)return a(s,!0);var c=new Error("Cannot find module '"+s+"'");throw c.code="MODULE_NOT_FOUND",c}var d=r[s]={exports:{}};n[s][0].call(d.exports,(function(e){return i(n[s][1][e]||e)}),d,d.exports,t,n,r,o)}return r[s].exports}for(var a="function"==typeof e&&e,s=0;s<o.length;s++)i(o[s]);return i}({1:[function(e,t,r){(function(n){!function(e){"object"==typeof r&&void 0!==t?t.exports=e():("undefined"!=typeof window?window:void 0!==n?n:"undefined"!=typeof self?self:this).JSZip=e()}((function(){return function t(n,r,o){function i(s,l){if(!r[s]){if(!n[s]){var u="function"==typeof e&&e;if(!l&&u)return u(s,!0);if(a)return a(s,!0);var c=new Error("Cannot find module '"+s+"'");throw c.code="MODULE_NOT_FOUND",c}var d=r[s]={exports:{}};n[s][0].call(d.exports,(function(e){return i(n[s][1][e]||e)}),d,d.exports,t,n,r,o)}return r[s].exports}for(var a="function"==typeof e&&e,s=0;s<o.length;s++)i(o[s]);return i}({1:[function(e,t,r){(function(n){!function(e){"object"==typeof r&&void 0!==t?t.exports=e():("undefined"!=typeof window?window:void 0!==n?n:"undefined"!=typeof self?self:this).JSZip=e()}((function(){return function t(n,r,o){function i(s,l){if(!r[s]){if(!n[s]){var u="function"==typeof e&&e;if(!l&&u)return u(s,!0);if(a)return a(s,!0);var c=new Error("Cannot find module '"+s+"'");throw c.code="MODULE_NOT_FOUND",c}var d=r[s]={exports:{}};n[s][0].call(d.exports,(function(e){return i(n[s][1][e]||e)}),d,d.exports,t,n,r,o)}return r[s].exports}for(var a="function"==typeof e&&e,s=0;s<o.length;s++)i(o[s]);return i}({1:[function(e,t,r){(function(n){!function(e){"object"==typeof r&&void 0!==t?t.exports=e():("undefined"!=typeof window?window:void 0!==n?n:"undefined"!=typeof self?self:this).JSZip=e()}((function(){return function t(n,r,o){function i(s,l){if(!r[s]){if(!n[s]){var u="function"==typeof e&&e;if(!l&&u)return u(s,!0);if(a)return a(s,!0);var c=new Error("Cannot find module '"+s+"'");throw c.code="MODULE_NOT_FOUND",c}var d=r[s]={exports:{}};n[s][0].call(d.exports,(function(e){return i(n[s][1][e]||e)}),d,d.exports,t,n,r,o)}return r[s].exports}for(var a="function"==typeof e&&e,s=0;s<o.length;s++)i(o[s]);return i}({1:[function(e,t,r){(function(n){!function(e){"object"==typeof r&&void 0!==t?t.exports=e():("undefined"!=typeof window?window:void 0!==n?n:"undefined"!=typeof self?self:this).JSZip=e()}((function(){return function t(n,r,o){function i(s,l){if(!r[s]){if(!n[s]){var u="function"==typeof e&&e;if(!l&&u)return u(s,!0);if(a)return a(s,!0);var c=new Error("Cannot find module '"+s+"'");throw c.code="MODULE_NOT_FOUND",c}var d=r[s]={exports:{}};n[s][0].call(d.exports,(function(e){return i(n[s][1][e]||e)}),d,d.exports,t,n,r,o)}return r[s].exports}for(var a="function"==typeof e&&e,s=0;s<o.length;s++)i(o[s]);return i}({1:[function(e,t,r){(function(n){!function(e){"object"==typeof r&&void 0!==t?t.exports=e():("undefined"!=typeof window?window:void 0!==n?n:"undefined"!=typeof self?self:this).JSZip=e()}((function(){return function t(n,r,o){function i(s,l){if(!r[s]){if(!n[s]){var u="function"==typeof e&&e;if(!l&&u)return u(s,!0);if(a)return a(s,!0);var c=new Error("Cannot find module '"+s+"'");throw c.code="MODULE_NOT_FOUND",c}var d=r[s]={exports:{}};n[s][0].call(d.exports,(function(e){return i(n[s][1][e]||e)}),d,d.exports,t,n,r,o)}return r[s].exports}for(var a="function"==typeof e&&e,s=0;s<o.length;s++)i(o[s]);return i}({1:[function(e,t,r){(function(n){!function(e){"object"==typeof r&&void 0!==t?t.exports=e():("undefined"!=typeof window?window:void 0!==n?n:"undefined"!=typeof self?self:this).JSZip=e()}((function(){return function t(n,r,o){function i(s,l){if(!r[s]){if(!n[s]){var u="function"==typeof e&&e;if(!l&&u)return u(s,!0);if(a)return a(s,!0);var c=new Error("Cannot find module '"+s+"'");throw c.code="MODULE_NOT_FOUND",c}var d=r[s]={exports:{}};n[s][0].call(d.exports,(function(e){return i(n[s][1][e]||e)}),d,d.exports,t,n,r,o)}return r[s].exports}for(var a="function"==typeof e&&e,s=0;s<o.length;s++)i(o[s]);return i}({1:[function(e,t,r){(function(n){!function(e){"object"==typeof r&&void 0!==t?t.exports=e():("undefined"!=typeof window?window:void 0!==n?n:"undefined"!=typeof self?self:this).JSZip=e()}((function(){return function t(n,r,o){function i(s,l){if(!r[s]){if(!n[s]){var u="function"==typeof e&&e;if(!l&&u)return u(s,!0);if(a)return a(s,!0);var c=new Error("Cannot find module '"+s+"'");throw c.code="MODULE_NOT_FOUND",c}var d=r[s]={exports:{}};n[s][0].call(d.exports,(function(e){return i(n[s][1][e]||e)}),d,d.exports,t,n,r,o)}return r[s].exports}for(var a="function"==typeof e&&e,s=0;s<o.length;s++)i(o[s]);return i}({1:[function(e,t,r){(function(n){!function(e){"object"==typeof r&&void 0!==t?t.exports=e():("undefined"!=typeof window?window:void 0!==n?n:"undefined"!=typeof self?self:this).JSZip=e()}((function(){return function t(n,r,o){function i(s,l){if(!r[s]){if(!n[s]){var u="function"==typeof e&&e;if(!l&&u)return u(s,!0);if(a)return a(s,!0);var c=new Error("Cannot find module '"+s+"'");throw c.code="MODULE_NOT_FOUND",c}var d=r[s]={exports:{}};n[s][0].call(d.exports,(function(e){return i(n[s][1][e]||e)}),d,d.exports,t,n,r,o)}return r[s].exports}for(var a="function"==typeof e&&e,s=0;s<o.length;s++)i(o[s]);return i}({1:[function(e,t,r){(function(n){!function(e){"object"==typeof r&&void 0!==t?t.exports=e():("undefined"!=typeof window?window:void 0!==n?n:"undefined"!=typeof self?self:this).JSZip=e()}((function(){return function t(n,r,o){function i(s,l){if(!r[s]){if(!n[s]){var u="function"==typeof e&&e;if(!l&&u)return u(s,!0);if(a)return a(s,!0);var c=new Error("Cannot find module '"+s+"'");throw c.code="MODULE_NOT_FOUND",c}var d=r[s]={exports:{}};n[s][0].call(d.exports,(function(e){return i(n[s][1][e]||e)}),d,d.exports,t,n,r,o)}return r[s].exports}for(var a="function"==typeof e&&e,s=0;s<o.length;s++)i(o[s]);return i}({1:[function(e,t,r){(function(n){!function(e){"object"==typeof r&&void 0!==t?t.exports=e():("undefined"!=typeof window?window:void 0!==n?n:"undefined"!=typeof self?self:this).JSZip=e()}((function(){return function t(n,r,o){function i(s,l){if(!r[s]){if(!n[s]){var u="function"==typeof e&&e;if(!l&&u)return u(s,!0);if(a)return a(s,!0);var c=new Error("Cannot find module '"+s+"'");throw c.code="MODULE_NOT_FOUND",c}var d=r[s]={exports:{}};n[s][0].call(d.exports,(function(e){return i(n[s][1][e]||e)}),d,d.exports,t,n,r,o)}return r[s].exports}for(var a="function"==typeof e&&e,s=0;s<o.length;s++)i(o[s]);return i}({1:[function(e,t,r){(function(n){!function(e){"object"==typeof r&&void 0!==t?t.exports=e():("undefined"!=typeof window?window:void 0!==n?n:"undefined"!=typeof self?self:this).JSZip=e()}((function(){return function t(n,r,o){function i(s,l){if(!r[s]){if(!n[s]){var u="function"==typeof e&&e;if(!l&&u)return u(s,!0);if(a)return a(s,!0);var c=new Error("Cannot find module '"+s+"'");throw c.code="MODULE_NOT_FOUND",c}var d=r[s]={exports:{}};n[s][0].call(d.exports,(function(e){return i(n[s][1][e]||e)}),d,d.exports,t,n,r,o)}return r[s].exports}for(var a="function"==typeof e&&e,s=0;s<o.length;s++)i(o[s]);return i}({1:[function(e,t,r){(function(n){!function(e){"object"==typeof r&&void 0!==t?t.exports=e():("undefined"!=typeof window?window:void 0!==n?n:"undefined"!=typeof self?self:this).JSZip=e()}((function(){return function t(n,r,o){function i(s,l){if(!r[s]){if(!n[s]){var u="function"==typeof e&&e;if(!l&&u)return u(s,!0);if(a)return a(s,!0);var c=new Error("Cannot find module '"+s+"'");throw c.code="MODULE_NOT_FOUND",c}var d=r[s]={exports:{}};n[s][0].call(d.exports,(function(e){return i(n[s][1][e]||e)}),d,d.exports,t,n,r,o)}return r[s].exports}for(var a="function"==typeof e&&e,s=0;s<o.length;s++)i(o[s]);return i}({1:[function(e,t,r){(function(n){!function(e){"object"==typeof r&&void 0!==t?t.exports=e():("undefined"!=typeof window?window:void 0!==n?n:"undefined"!=typeof self?self:this).JSZip=e()}((function(){return function t(n,r,o){function i(s,l){if(!r[s]){if(!n[s]){var u="function"==typeof e&&e;if(!l&&u)return u(s,!0);if(a)return a(s,!0);var c=new Error("Cannot find module '"+s+"'");throw c.code="MODULE_NOT_FOUND",c}var d=r[s]={exports:{}};n[s][0].call(d.exports,(function(e){return i(n[s][1][e]||e)}),d,d.exports,t,n,r,o)}return r[s].exports}for(var a="function"==typeof e&&e,s=0;s<o.length;s++)i(o[s]);return i}({1:[function(e,t,r){(function(n){!function(e){"object"==typeof r&&void 0!==t?t.exports=e():("undefined"!=typeof window?window:void 0!==n?n:"undefined"!=typeof self?self:this).JSZip=e()}((function(){return function t(n,r,o){function i(s,l){if(!r[s]){if(!n[s]){var u="function"==typeof e&&e;if(!l&&u)return u(s,!0);if(a)return a(s,!0);var c=new Error("Cannot find module '"+s+"'");throw c.code="MODULE_NOT_FOUND",c}var d=r[s]={exports:{}};n[s][0].call(d.exports,(function(e){return i(n[s][1][e]||e)}),d,d.exports,t,n,r,o)}return r[s].exports}for(var a="function"==typeof e&&e,s=0;s<o.length;s++)i(o[s]);return i}({1:[function(e,t,r){(function(n){!function(e){"object"==typeof r&&void 0!==t?t.exports=e():("undefined"!=typeof window?window:void 0!==n?n:"undefined"!=typeof self?self:this).JSZip=e()}((function(){return function t(n,r,o){function i(s,l){if(!r[s]){if(!n[s]){var u="function"==typeof e&&e;if(!l&&u)return u(s,!0);if(a)return a(s,!0);var c=new Error("Cannot find module '"+s+"'");throw c.code="MODULE_NOT_FOUND",c}var d=r[s]={exports:{}};n[s][0].call(d.exports,(function(e){return i(n[s][1][e]||e)}),d,d.exports,t,n,r,o)}return r[s].exports}for(var a="function"==typeof e&&e,s=0;s<o.length;s++)i(o[s]);return i}({1:[function(e,t,n){"use strict";var r=e("./utils"),o=e("./support"),i="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";n.encode=function(e){for(var t,n,o,a,s,l,u,c=[],d=0,f=e.length,h=f,p="string"!==r.getTypeOf(e);d<e.length;)h=f-d,o=p?(t=e[d++],n=d<f?e[d++]:0,d<f?e[d++]:0):(t=e.charCodeAt(d++),n=d<f?e.charCodeAt(d++):0,d<f?e.charCodeAt(d++):0),a=t>>2,s=(3&t)<<4|n>>4,l=1<h?(15&n)<<2|o>>6:64,u=2<h?63&o:64,c.push(i.charAt(a)+i.charAt(s)+i.charAt(l)+i.charAt(u));return c.join("")},n.decode=function(e){var t,n,r,a,s,l,u=0,c=0;if("data:"===e.substr(0,"data:".length))throw new Error("Invalid base64 input, it looks like a data url.");var d,f=3*(e=e.replace(/[^A-Za-z0-9\+\/\=]/g,"")).length/4;if(e.charAt(e.length-1)===i.charAt(64)&&f--,e.charAt(e.length-2)===i.charAt(64)&&f--,f%1!=0)throw new Error("Invalid base64 input, bad content length.");for(d=o.uint8array?new Uint8Array(0|f):new Array(0|f);u<e.length;)t=i.indexOf(e.charAt(u++))<<2|(a=i.indexOf(e.charAt(u++)))>>4,n=(15&a)<<4|(s=i.indexOf(e.charAt(u++)))>>2,r=(3&s)<<6|(l=i.indexOf(e.charAt(u++))),d[c++]=t,64!==s&&(d[c++]=n),64!==l&&(d[c++]=r);return d}},{"./support":30,"./utils":32}],2:[function(e,t,n){"use strict";var r=e("./external"),o=e("./stream/DataWorker"),i=e("./stream/Crc32Probe"),a=e("./stream/DataLengthProbe");function s(e,t,n,r,o){this.compressedSize=e,this.uncompressedSize=t,this.crc32=n,this.compression=r,this.compressedContent=o}s.prototype={getContentWorker:function(){var e=new o(r.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new a("data_length")),t=this;return e.on("end",(function(){if(this.streamInfo.data_length!==t.uncompressedSize)throw new Error("Bug : uncompressed data size mismatch")})),e},getCompressedWorker:function(){return new o(r.Promise.resolve(this.compressedContent)).withStreamInfo("compressedSize",this.compressedSize).withStreamInfo("uncompressedSize",this.uncompressedSize).withStreamInfo("crc32",this.crc32).withStreamInfo("compression",this.compression)}},s.createWorkerFrom=function(e,t,n){return e.pipe(new i).pipe(new a("uncompressedSize")).pipe(t.compressWorker(n)).pipe(new a("compressedSize")).withStreamInfo("compression",t)},t.exports=s},{"./external":6,"./stream/Crc32Probe":25,"./stream/DataLengthProbe":26,"./stream/DataWorker":27}],3:[function(e,t,n){"use strict";var r=e("./stream/GenericWorker");n.STORE={magic:"\0\0",compressWorker:function(e){return new r("STORE compression")},uncompressWorker:function(){return new r("STORE decompression")}},n.DEFLATE=e("./flate")},{"./flate":7,"./stream/GenericWorker":28}],4:[function(e,t,n){"use strict";var r=e("./utils"),o=function(){for(var e,t=[],n=0;n<256;n++){e=n;for(var r=0;r<8;r++)e=1&e?3988292384^e>>>1:e>>>1;t[n]=e}return t}();t.exports=function(e,t){return void 0!==e&&e.length?"string"!==r.getTypeOf(e)?function(e,t,n){var r=o,i=0+n;e^=-1;for(var a=0;a<i;a++)e=e>>>8^r[255&(e^t[a])];return-1^e}(0|t,e,e.length):function(e,t,n){var r=o,i=0+n;e^=-1;for(var a=0;a<i;a++)e=e>>>8^r[255&(e^t.charCodeAt(a))];return-1^e}(0|t,e,e.length):0}},{"./utils":32}],5:[function(e,t,n){"use strict";n.base64=!1,n.binary=!1,n.dir=!1,n.createFolders=!0,n.date=null,n.compression=null,n.compressionOptions=null,n.comment=null,n.unixPermissions=null,n.dosPermissions=null},{}],6:[function(e,t,n){"use strict";var r;r="undefined"!=typeof Promise?Promise:e("lie"),t.exports={Promise:r}},{lie:37}],7:[function(e,t,n){"use strict";var r="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Uint32Array,o=e("pako"),i=e("./utils"),a=e("./stream/GenericWorker"),s=r?"uint8array":"array";function l(e,t){a.call(this,"FlateWorker/"+e),this._pako=null,this._pakoAction=e,this._pakoOptions=t,this.meta={}}n.magic="\b\0",i.inherits(l,a),l.prototype.processChunk=function(e){this.meta=e.meta,null===this._pako&&this._createPako(),this._pako.push(i.transformTo(s,e.data),!1)},l.prototype.flush=function(){a.prototype.flush.call(this),null===this._pako&&this._createPako(),this._pako.push([],!0)},l.prototype.cleanUp=function(){a.prototype.cleanUp.call(this),this._pako=null},l.prototype._createPako=function(){this._pako=new o[this._pakoAction]({raw:!0,level:this._pakoOptions.level||-1});var e=this;this._pako.onData=function(t){e.push({data:t,meta:e.meta})}},n.compressWorker=function(e){return new l("Deflate",e)},n.uncompressWorker=function(){return new l("Inflate",{})}},{"./stream/GenericWorker":28,"./utils":32,pako:38}],8:[function(e,t,n){"use strict";function r(e,t){var n,r="";for(n=0;n<t;n++)r+=String.fromCharCode(255&e),e>>>=8;return r}function o(e,t,n,o,a,c){var d,f,h=e.file,p=e.compression,m=c!==s.utf8encode,v=i.transformTo("string",c(h.name)),g=i.transformTo("string",s.utf8encode(h.name)),y=h.comment,b=i.transformTo("string",c(y)),A=i.transformTo("string",s.utf8encode(y)),w=g.length!==h.name.length,_=A.length!==y.length,S="",k="",E="",x=h.dir,T=h.date,C={crc32:0,compressedSize:0,uncompressedSize:0};t&&!n||(C.crc32=e.crc32,C.compressedSize=e.compressedSize,C.uncompressedSize=e.uncompressedSize);var R=0;t&&(R|=8),m||!w&&!_||(R|=2048);var N,O=0,L=0;x&&(O|=16),"UNIX"===a?(L=798,O|=((N=h.unixPermissions)||(N=x?16893:33204),(65535&N)<<16)):(L=20,O|=63&(h.dosPermissions||0)),d=T.getUTCHours(),d<<=6,d|=T.getUTCMinutes(),d<<=5,d|=T.getUTCSeconds()/2,f=T.getUTCFullYear()-1980,f<<=4,f|=T.getUTCMonth()+1,f<<=5,f|=T.getUTCDate(),w&&(S+="up"+r((k=r(1,1)+r(l(v),4)+g).length,2)+k),_&&(S+="uc"+r((E=r(1,1)+r(l(b),4)+A).length,2)+E);var z="";return z+="\n\0",z+=r(R,2),z+=p.magic,z+=r(d,2),z+=r(f,2),z+=r(C.crc32,4),z+=r(C.compressedSize,4),z+=r(C.uncompressedSize,4),z+=r(v.length,2),z+=r(S.length,2),{fileRecord:u.LOCAL_FILE_HEADER+z+v+S,dirRecord:u.CENTRAL_FILE_HEADER+r(L,2)+z+r(b.length,2)+"\0\0\0\0"+r(O,4)+r(o,4)+v+S+b}}var i=e("../utils"),a=e("../stream/GenericWorker"),s=e("../utf8"),l=e("../crc32"),u=e("../signature");function c(e,t,n,r){a.call(this,"ZipFileWorker"),this.bytesWritten=0,this.zipComment=t,this.zipPlatform=n,this.encodeFileName=r,this.streamFiles=e,this.accumulate=!1,this.contentBuffer=[],this.dirRecords=[],this.currentSourceOffset=0,this.entriesCount=0,this.currentFile=null,this._sources=[]}i.inherits(c,a),c.prototype.push=function(e){var t=e.meta.percent||0,n=this.entriesCount,r=this._sources.length;this.accumulate?this.contentBuffer.push(e):(this.bytesWritten+=e.data.length,a.prototype.push.call(this,{data:e.data,meta:{currentFile:this.currentFile,percent:n?(t+100*(n-r-1))/n:100}}))},c.prototype.openedSource=function(e){this.currentSourceOffset=this.bytesWritten,this.currentFile=e.file.name;var t=this.streamFiles&&!e.file.dir;if(t){var n=o(e,t,!1,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);this.push({data:n.fileRecord,meta:{percent:0}})}else this.accumulate=!0},c.prototype.closedSource=function(e){this.accumulate=!1;var t,n=this.streamFiles&&!e.file.dir,i=o(e,n,!0,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);if(this.dirRecords.push(i.dirRecord),n)this.push({data:(t=e,u.DATA_DESCRIPTOR+r(t.crc32,4)+r(t.compressedSize,4)+r(t.uncompressedSize,4)),meta:{percent:100}});else for(this.push({data:i.fileRecord,meta:{percent:0}});this.contentBuffer.length;)this.push(this.contentBuffer.shift());this.currentFile=null},c.prototype.flush=function(){for(var e=this.bytesWritten,t=0;t<this.dirRecords.length;t++)this.push({data:this.dirRecords[t],meta:{percent:100}});var n,o,a,s,l,c,d=this.bytesWritten-e,f=(n=this.dirRecords.length,o=d,a=e,s=this.zipComment,l=this.encodeFileName,c=i.transformTo("string",l(s)),u.CENTRAL_DIRECTORY_END+"\0\0\0\0"+r(n,2)+r(n,2)+r(o,4)+r(a,4)+r(c.length,2)+c);this.push({data:f,meta:{percent:100}})},c.prototype.prepareNextSource=function(){this.previous=this._sources.shift(),this.openedSource(this.previous.streamInfo),this.isPaused?this.previous.pause():this.previous.resume()},c.prototype.registerPrevious=function(e){this._sources.push(e);var t=this;return e.on("data",(function(e){t.processChunk(e)})),e.on("end",(function(){t.closedSource(t.previous.streamInfo),t._sources.length?t.prepareNextSource():t.end()})),e.on("error",(function(e){t.error(e)})),this},c.prototype.resume=function(){return!!a.prototype.resume.call(this)&&(!this.previous&&this._sources.length?(this.prepareNextSource(),!0):this.previous||this._sources.length||this.generatedError?void 0:(this.end(),!0))},c.prototype.error=function(e){var t=this._sources;if(!a.prototype.error.call(this,e))return!1;for(var n=0;n<t.length;n++)try{t[n].error(e)}catch(e){}return!0},c.prototype.lock=function(){a.prototype.lock.call(this);for(var e=this._sources,t=0;t<e.length;t++)e[t].lock()},t.exports=c},{"../crc32":4,"../signature":23,"../stream/GenericWorker":28,"../utf8":31,"../utils":32}],9:[function(e,t,n){"use strict";var r=e("../compressions"),o=e("./ZipFileWorker");n.generateWorker=function(e,t,n){var i=new o(t.streamFiles,n,t.platform,t.encodeFileName),a=0;try{e.forEach((function(e,n){a++;var o=function(e,t){var n=e||t,o=r[n];if(!o)throw new Error(n+" is not a valid compression method !");return o}(n.options.compression,t.compression),s=n.options.compressionOptions||t.compressionOptions||{},l=n.dir,u=n.date;n._compressWorker(o,s).withStreamInfo("file",{name:e,dir:l,date:u,comment:n.comment||"",unixPermissions:n.unixPermissions,dosPermissions:n.dosPermissions}).pipe(i)})),i.entriesCount=a}catch(e){i.error(e)}return i}},{"../compressions":3,"./ZipFileWorker":8}],10:[function(e,t,n){"use strict";function r(){if(!(this instanceof r))return new r;if(arguments.length)throw new Error("The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.");this.files={},this.comment=null,this.root="",this.clone=function(){var e=new r;for(var t in this)"function"!=typeof this[t]&&(e[t]=this[t]);return e}}(r.prototype=e("./object")).loadAsync=e("./load"),r.support=e("./support"),r.defaults=e("./defaults"),r.version="3.5.0",r.loadAsync=function(e,t){return(new r).loadAsync(e,t)},r.external=e("./external"),t.exports=r},{"./defaults":5,"./external":6,"./load":11,"./object":15,"./support":30}],11:[function(e,t,n){"use strict";var r=e("./utils"),o=e("./external"),i=e("./utf8"),a=e("./zipEntries"),s=e("./stream/Crc32Probe"),l=e("./nodejsUtils");function u(e){return new o.Promise((function(t,n){var r=e.decompressed.getContentWorker().pipe(new s);r.on("error",(function(e){n(e)})).on("end",(function(){r.streamInfo.crc32!==e.decompressed.crc32?n(new Error("Corrupted zip : CRC32 mismatch")):t()})).resume()}))}t.exports=function(e,t){var n=this;return t=r.extend(t||{},{base64:!1,checkCRC32:!1,optimizedBinaryString:!1,createFolders:!1,decodeFileName:i.utf8decode}),l.isNode&&l.isStream(e)?o.Promise.reject(new Error("JSZip can't accept a stream when loading a zip file.")):r.prepareContent("the loaded zip file",e,!0,t.optimizedBinaryString,t.base64).then((function(e){var n=new a(t);return n.load(e),n})).then((function(e){var n=[o.Promise.resolve(e)],r=e.files;if(t.checkCRC32)for(var i=0;i<r.length;i++)n.push(u(r[i]));return o.Promise.all(n)})).then((function(e){for(var r=e.shift(),o=r.files,i=0;i<o.length;i++){var a=o[i];n.file(a.fileNameStr,a.decompressed,{binary:!0,optimizedBinaryString:!0,date:a.date,dir:a.dir,comment:a.fileCommentStr.length?a.fileCommentStr:null,unixPermissions:a.unixPermissions,dosPermissions:a.dosPermissions,createFolders:t.createFolders})}return r.zipComment.length&&(n.comment=r.zipComment),n}))}},{"./external":6,"./nodejsUtils":14,"./stream/Crc32Probe":25,"./utf8":31,"./utils":32,"./zipEntries":33}],12:[function(e,t,n){"use strict";var r=e("../utils"),o=e("../stream/GenericWorker");function i(e,t){o.call(this,"Nodejs stream input adapter for "+e),this._upstreamEnded=!1,this._bindStream(t)}r.inherits(i,o),i.prototype._bindStream=function(e){var t=this;(this._stream=e).pause(),e.on("data",(function(e){t.push({data:e,meta:{percent:0}})})).on("error",(function(e){t.isPaused?this.generatedError=e:t.error(e)})).on("end",(function(){t.isPaused?t._upstreamEnded=!0:t.end()}))},i.prototype.pause=function(){return!!o.prototype.pause.call(this)&&(this._stream.pause(),!0)},i.prototype.resume=function(){return!!o.prototype.resume.call(this)&&(this._upstreamEnded?this.end():this._stream.resume(),!0)},t.exports=i},{"../stream/GenericWorker":28,"../utils":32}],13:[function(e,t,n){"use strict";var r=e("readable-stream").Readable;function o(e,t,n){r.call(this,t),this._helper=e;var o=this;e.on("data",(function(e,t){o.push(e)||o._helper.pause(),n&&n(t)})).on("error",(function(e){o.emit("error",e)})).on("end",(function(){o.push(null)}))}e("../utils").inherits(o,r),o.prototype._read=function(){this._helper.resume()},t.exports=o},{"../utils":32,"readable-stream":16}],14:[function(e,t,n){"use strict";t.exports={isNode:"undefined"!=typeof Buffer,newBufferFrom:function(e,t){if(Buffer.from&&Buffer.from!==Uint8Array.from)return Buffer.from(e,t);if("number"==typeof e)throw new Error('The "data" argument must not be a number');return new Buffer(e,t)},allocBuffer:function(e){if(Buffer.alloc)return Buffer.alloc(e);var t=new Buffer(e);return t.fill(0),t},isBuffer:function(e){return Buffer.isBuffer(e)},isStream:function(e){return e&&"function"==typeof e.on&&"function"==typeof e.pause&&"function"==typeof e.resume}}},{}],15:[function(e,t,n){"use strict";function r(e,t,n){var r,i=a.getTypeOf(t),l=a.extend(n||{},u);l.date=l.date||new Date,null!==l.compression&&(l.compression=l.compression.toUpperCase()),"string"==typeof l.unixPermissions&&(l.unixPermissions=parseInt(l.unixPermissions,8)),l.unixPermissions&&16384&l.unixPermissions&&(l.dir=!0),l.dosPermissions&&16&l.dosPermissions&&(l.dir=!0),l.dir&&(e=o(e)),l.createFolders&&(r=function(e){"/"===e.slice(-1)&&(e=e.substring(0,e.length-1));var t=e.lastIndexOf("/");return 0<t?e.substring(0,t):""}(e))&&m.call(this,r,!0);var f,v="string"===i&&!1===l.binary&&!1===l.base64;n&&void 0!==n.binary||(l.binary=!v),(t instanceof c&&0===t.uncompressedSize||l.dir||!t||0===t.length)&&(l.base64=!1,l.binary=!0,t="",l.compression="STORE",i="string"),f=t instanceof c||t instanceof s?t:h.isNode&&h.isStream(t)?new p(e,t):a.prepareContent(e,t,l.binary,l.optimizedBinaryString,l.base64);var g=new d(e,f,l);this.files[e]=g}function o(e){return"/"!==e.slice(-1)&&(e+="/"),e}var i=e("./utf8"),a=e("./utils"),s=e("./stream/GenericWorker"),l=e("./stream/StreamHelper"),u=e("./defaults"),c=e("./compressedObject"),d=e("./zipObject"),f=e("./generate"),h=e("./nodejsUtils"),p=e("./nodejs/NodejsStreamInputAdapter"),m=function(e,t){return t=void 0!==t?t:u.createFolders,e=o(e),this.files[e]||r.call(this,e,null,{dir:!0,createFolders:t}),this.files[e]};function v(e){return"[object RegExp]"===Object.prototype.toString.call(e)}var g={load:function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},forEach:function(e){var t,n,r;for(t in this.files)this.files.hasOwnProperty(t)&&(r=this.files[t],(n=t.slice(this.root.length,t.length))&&t.slice(0,this.root.length)===this.root&&e(n,r))},filter:function(e){var t=[];return this.forEach((function(n,r){e(n,r)&&t.push(r)})),t},file:function(e,t,n){if(1!==arguments.length)return e=this.root+e,r.call(this,e,t,n),this;if(v(e)){var o=e;return this.filter((function(e,t){return!t.dir&&o.test(e)}))}var i=this.files[this.root+e];return i&&!i.dir?i:null},folder:function(e){if(!e)return this;if(v(e))return this.filter((function(t,n){return n.dir&&e.test(t)}));var t=this.root+e,n=m.call(this,t),r=this.clone();return r.root=n.name,r},remove:function(e){e=this.root+e;var t=this.files[e];if(t||("/"!==e.slice(-1)&&(e+="/"),t=this.files[e]),t&&!t.dir)delete this.files[e];else for(var n=this.filter((function(t,n){return n.name.slice(0,e.length)===e})),r=0;r<n.length;r++)delete this.files[n[r].name];return this},generate:function(e){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},generateInternalStream:function(e){var t,n={};try{if((n=a.extend(e||{},{streamFiles:!1,compression:"STORE",compressionOptions:null,type:"",platform:"DOS",comment:null,mimeType:"application/zip",encodeFileName:i.utf8encode})).type=n.type.toLowerCase(),n.compression=n.compression.toUpperCase(),"binarystring"===n.type&&(n.type="string"),!n.type)throw new Error("No output type specified.");a.checkSupport(n.type),"darwin"!==n.platform&&"freebsd"!==n.platform&&"linux"!==n.platform&&"sunos"!==n.platform||(n.platform="UNIX"),"win32"===n.platform&&(n.platform="DOS");var r=n.comment||this.comment||"";t=f.generateWorker(this,n,r)}catch(e){(t=new s("error")).error(e)}return new l(t,n.type||"string",n.mimeType)},generateAsync:function(e,t){return this.generateInternalStream(e).accumulate(t)},generateNodeStream:function(e,t){return(e=e||{}).type||(e.type="nodebuffer"),this.generateInternalStream(e).toNodejsStream(t)}};t.exports=g},{"./compressedObject":2,"./defaults":5,"./generate":9,"./nodejs/NodejsStreamInputAdapter":12,"./nodejsUtils":14,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31,"./utils":32,"./zipObject":35}],16:[function(e,t,n){t.exports=e("stream")},{stream:void 0}],17:[function(e,t,n){"use strict";var r=e("./DataReader");function o(e){r.call(this,e);for(var t=0;t<this.data.length;t++)e[t]=255&e[t]}e("../utils").inherits(o,r),o.prototype.byteAt=function(e){return this.data[this.zero+e]},o.prototype.lastIndexOfSignature=function(e){for(var t=e.charCodeAt(0),n=e.charCodeAt(1),r=e.charCodeAt(2),o=e.charCodeAt(3),i=this.length-4;0<=i;--i)if(this.data[i]===t&&this.data[i+1]===n&&this.data[i+2]===r&&this.data[i+3]===o)return i-this.zero;return-1},o.prototype.readAndCheckSignature=function(e){var t=e.charCodeAt(0),n=e.charCodeAt(1),r=e.charCodeAt(2),o=e.charCodeAt(3),i=this.readData(4);return t===i[0]&&n===i[1]&&r===i[2]&&o===i[3]},o.prototype.readData=function(e){if(this.checkOffset(e),0===e)return[];var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=o},{"../utils":32,"./DataReader":18}],18:[function(e,t,n){"use strict";var r=e("../utils");function o(e){this.data=e,this.length=e.length,this.index=0,this.zero=0}o.prototype={checkOffset:function(e){this.checkIndex(this.index+e)},checkIndex:function(e){if(this.length<this.zero+e||e<0)throw new Error("End of data reached (data length = "+this.length+", asked index = "+e+"). Corrupted zip ?")},setIndex:function(e){this.checkIndex(e),this.index=e},skip:function(e){this.setIndex(this.index+e)},byteAt:function(e){},readInt:function(e){var t,n=0;for(this.checkOffset(e),t=this.index+e-1;t>=this.index;t--)n=(n<<8)+this.byteAt(t);return this.index+=e,n},readString:function(e){return r.transformTo("string",this.readData(e))},readData:function(e){},lastIndexOfSignature:function(e){},readAndCheckSignature:function(e){},readDate:function(){var e=this.readInt(4);return new Date(Date.UTC(1980+(e>>25&127),(e>>21&15)-1,e>>16&31,e>>11&31,e>>5&63,(31&e)<<1))}},t.exports=o},{"../utils":32}],19:[function(e,t,n){"use strict";var r=e("./Uint8ArrayReader");function o(e){r.call(this,e)}e("../utils").inherits(o,r),o.prototype.readData=function(e){this.checkOffset(e);var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=o},{"../utils":32,"./Uint8ArrayReader":21}],20:[function(e,t,n){"use strict";var r=e("./DataReader");function o(e){r.call(this,e)}e("../utils").inherits(o,r),o.prototype.byteAt=function(e){return this.data.charCodeAt(this.zero+e)},o.prototype.lastIndexOfSignature=function(e){return this.data.lastIndexOf(e)-this.zero},o.prototype.readAndCheckSignature=function(e){return e===this.readData(4)},o.prototype.readData=function(e){this.checkOffset(e);var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=o},{"../utils":32,"./DataReader":18}],21:[function(e,t,n){"use strict";var r=e("./ArrayReader");function o(e){r.call(this,e)}e("../utils").inherits(o,r),o.prototype.readData=function(e){if(this.checkOffset(e),0===e)return new Uint8Array(0);var t=this.data.subarray(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=o},{"../utils":32,"./ArrayReader":17}],22:[function(e,t,n){"use strict";var r=e("../utils"),o=e("../support"),i=e("./ArrayReader"),a=e("./StringReader"),s=e("./NodeBufferReader"),l=e("./Uint8ArrayReader");t.exports=function(e){var t=r.getTypeOf(e);return r.checkSupport(t),"string"!==t||o.uint8array?"nodebuffer"===t?new s(e):o.uint8array?new l(r.transformTo("uint8array",e)):new i(r.transformTo("array",e)):new a(e)}},{"../support":30,"../utils":32,"./ArrayReader":17,"./NodeBufferReader":19,"./StringReader":20,"./Uint8ArrayReader":21}],23:[function(e,t,n){"use strict";n.LOCAL_FILE_HEADER="PK",n.CENTRAL_FILE_HEADER="PK",n.CENTRAL_DIRECTORY_END="PK",n.ZIP64_CENTRAL_DIRECTORY_LOCATOR="PK",n.ZIP64_CENTRAL_DIRECTORY_END="PK",n.DATA_DESCRIPTOR="PK\b"},{}],24:[function(e,t,n){"use strict";var r=e("./GenericWorker"),o=e("../utils");function i(e){r.call(this,"ConvertWorker to "+e),this.destType=e}o.inherits(i,r),i.prototype.processChunk=function(e){this.push({data:o.transformTo(this.destType,e.data),meta:e.meta})},t.exports=i},{"../utils":32,"./GenericWorker":28}],25:[function(e,t,n){"use strict";var r=e("./GenericWorker"),o=e("../crc32");function i(){r.call(this,"Crc32Probe"),this.withStreamInfo("crc32",0)}e("../utils").inherits(i,r),i.prototype.processChunk=function(e){this.streamInfo.crc32=o(e.data,this.streamInfo.crc32||0),this.push(e)},t.exports=i},{"../crc32":4,"../utils":32,"./GenericWorker":28}],26:[function(e,t,n){"use strict";var r=e("../utils"),o=e("./GenericWorker");function i(e){o.call(this,"DataLengthProbe for "+e),this.propName=e,this.withStreamInfo(e,0)}r.inherits(i,o),i.prototype.processChunk=function(e){if(e){var t=this.streamInfo[this.propName]||0;this.streamInfo[this.propName]=t+e.data.length}o.prototype.processChunk.call(this,e)},t.exports=i},{"../utils":32,"./GenericWorker":28}],27:[function(e,t,n){"use strict";var r=e("../utils"),o=e("./GenericWorker");function i(e){o.call(this,"DataWorker");var t=this;this.dataIsReady=!1,this.index=0,this.max=0,this.data=null,this.type="",this._tickScheduled=!1,e.then((function(e){t.dataIsReady=!0,t.data=e,t.max=e&&e.length||0,t.type=r.getTypeOf(e),t.isPaused||t._tickAndRepeat()}),(function(e){t.error(e)}))}r.inherits(i,o),i.prototype.cleanUp=function(){o.prototype.cleanUp.call(this),this.data=null},i.prototype.resume=function(){return!!o.prototype.resume.call(this)&&(!this._tickScheduled&&this.dataIsReady&&(this._tickScheduled=!0,r.delay(this._tickAndRepeat,[],this)),!0)},i.prototype._tickAndRepeat=function(){this._tickScheduled=!1,this.isPaused||this.isFinished||(this._tick(),this.isFinished||(r.delay(this._tickAndRepeat,[],this),this._tickScheduled=!0))},i.prototype._tick=function(){if(this.isPaused||this.isFinished)return!1;var e=null,t=Math.min(this.max,this.index+16384);if(this.index>=this.max)return this.end();switch(this.type){case"string":e=this.data.substring(this.index,t);break;case"uint8array":e=this.data.subarray(this.index,t);break;case"array":case"nodebuffer":e=this.data.slice(this.index,t)}return this.index=t,this.push({data:e,meta:{percent:this.max?this.index/this.max*100:0}})},t.exports=i},{"../utils":32,"./GenericWorker":28}],28:[function(e,t,n){"use strict";function r(e){this.name=e||"default",this.streamInfo={},this.generatedError=null,this.extraStreamInfo={},this.isPaused=!0,this.isFinished=!1,this.isLocked=!1,this._listeners={data:[],end:[],error:[]},this.previous=null}r.prototype={push:function(e){this.emit("data",e)},end:function(){if(this.isFinished)return!1;this.flush();try{this.emit("end"),this.cleanUp(),this.isFinished=!0}catch(e){this.emit("error",e)}return!0},error:function(e){return!this.isFinished&&(this.isPaused?this.generatedError=e:(this.isFinished=!0,this.emit("error",e),this.previous&&this.previous.error(e),this.cleanUp()),!0)},on:function(e,t){return this._listeners[e].push(t),this},cleanUp:function(){this.streamInfo=this.generatedError=this.extraStreamInfo=null,this._listeners=[]},emit:function(e,t){if(this._listeners[e])for(var n=0;n<this._listeners[e].length;n++)this._listeners[e][n].call(this,t)},pipe:function(e){return e.registerPrevious(this)},registerPrevious:function(e){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.streamInfo=e.streamInfo,this.mergeStreamInfo(),this.previous=e;var t=this;return e.on("data",(function(e){t.processChunk(e)})),e.on("end",(function(){t.end()})),e.on("error",(function(e){t.error(e)})),this},pause:function(){return!this.isPaused&&!this.isFinished&&(this.isPaused=!0,this.previous&&this.previous.pause(),!0)},resume:function(){if(!this.isPaused||this.isFinished)return!1;var e=this.isPaused=!1;return this.generatedError&&(this.error(this.generatedError),e=!0),this.previous&&this.previous.resume(),!e},flush:function(){},processChunk:function(e){this.push(e)},withStreamInfo:function(e,t){return this.extraStreamInfo[e]=t,this.mergeStreamInfo(),this},mergeStreamInfo:function(){for(var e in this.extraStreamInfo)this.extraStreamInfo.hasOwnProperty(e)&&(this.streamInfo[e]=this.extraStreamInfo[e])},lock:function(){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.isLocked=!0,this.previous&&this.previous.lock()},toString:function(){var e="Worker "+this.name;return this.previous?this.previous+" -> "+e:e}},t.exports=r},{}],29:[function(e,t,n){"use strict";var r=e("../utils"),o=e("./ConvertWorker"),i=e("./GenericWorker"),a=e("../base64"),s=e("../support"),l=e("../external"),u=null;if(s.nodestream)try{u=e("../nodejs/NodejsStreamOutputAdapter")}catch(e){}function c(e,t,n){var a=t;switch(t){case"blob":case"arraybuffer":a="uint8array";break;case"base64":a="string"}try{this._internalType=a,this._outputType=t,this._mimeType=n,r.checkSupport(a),this._worker=e.pipe(new o(a)),e.lock()}catch(e){this._worker=new i("error"),this._worker.error(e)}}c.prototype={accumulate:function(e){return t=this,n=e,new l.Promise((function(e,o){var i=[],s=t._internalType,l=t._outputType,u=t._mimeType;t.on("data",(function(e,t){i.push(e),n&&n(t)})).on("error",(function(e){i=[],o(e)})).on("end",(function(){try{var t=function(e,t,n){switch(e){case"blob":return r.newBlob(r.transformTo("arraybuffer",t),n);case"base64":return a.encode(t);default:return r.transformTo(e,t)}}(l,function(e,t){var n,r=0,o=null,i=0;for(n=0;n<t.length;n++)i+=t[n].length;switch(e){case"string":return t.join("");case"array":return Array.prototype.concat.apply([],t);case"uint8array":for(o=new Uint8Array(i),n=0;n<t.length;n++)o.set(t[n],r),r+=t[n].length;return o;case"nodebuffer":return Buffer.concat(t);default:throw new Error("concat : unsupported type '"+e+"'")}}(s,i),u);e(t)}catch(t){o(t)}i=[]})).resume()}));var t,n},on:function(e,t){var n=this;return"data"===e?this._worker.on(e,(function(e){t.call(n,e.data,e.meta)})):this._worker.on(e,(function(){r.delay(t,arguments,n)})),this},resume:function(){return r.delay(this._worker.resume,[],this._worker),this},pause:function(){return this._worker.pause(),this},toNodejsStream:function(e){if(r.checkSupport("nodestream"),"nodebuffer"!==this._outputType)throw new Error(this._outputType+" is not supported by this method");return new u(this,{objectMode:"nodebuffer"!==this._outputType},e)}},t.exports=c},{"../base64":1,"../external":6,"../nodejs/NodejsStreamOutputAdapter":13,"../support":30,"../utils":32,"./ConvertWorker":24,"./GenericWorker":28}],30:[function(e,t,n){"use strict";if(n.base64=!0,n.array=!0,n.string=!0,n.arraybuffer="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof Uint8Array,n.nodebuffer="undefined"!=typeof Buffer,n.uint8array="undefined"!=typeof Uint8Array,"undefined"==typeof ArrayBuffer)n.blob=!1;else{var r=new ArrayBuffer(0);try{n.blob=0===new Blob([r],{type:"application/zip"}).size}catch(e){try{var o=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);o.append(r),n.blob=0===o.getBlob("application/zip").size}catch(e){n.blob=!1}}}try{n.nodestream=!!e("readable-stream").Readable}catch(e){n.nodestream=!1}},{"readable-stream":16}],31:[function(e,t,n){"use strict";for(var r=e("./utils"),o=e("./support"),i=e("./nodejsUtils"),a=e("./stream/GenericWorker"),s=new Array(256),l=0;l<256;l++)s[l]=252<=l?6:248<=l?5:240<=l?4:224<=l?3:192<=l?2:1;function u(){a.call(this,"utf-8 decode"),this.leftOver=null}function c(){a.call(this,"utf-8 encode")}s[254]=s[254]=1,n.utf8encode=function(e){return o.nodebuffer?i.newBufferFrom(e,"utf-8"):function(e){var t,n,r,i,a,s=e.length,l=0;for(i=0;i<s;i++)55296==(64512&(n=e.charCodeAt(i)))&&i+1<s&&56320==(64512&(r=e.charCodeAt(i+1)))&&(n=65536+(n-55296<<10)+(r-56320),i++),l+=n<128?1:n<2048?2:n<65536?3:4;for(t=o.uint8array?new Uint8Array(l):new Array(l),i=a=0;a<l;i++)55296==(64512&(n=e.charCodeAt(i)))&&i+1<s&&56320==(64512&(r=e.charCodeAt(i+1)))&&(n=65536+(n-55296<<10)+(r-56320),i++),n<128?t[a++]=n:(n<2048?t[a++]=192|n>>>6:(n<65536?t[a++]=224|n>>>12:(t[a++]=240|n>>>18,t[a++]=128|n>>>12&63),t[a++]=128|n>>>6&63),t[a++]=128|63&n);return t}(e)},n.utf8decode=function(e){return o.nodebuffer?r.transformTo("nodebuffer",e).toString("utf-8"):function(e){var t,n,o,i,a=e.length,l=new Array(2*a);for(t=n=0;t<a;)if((o=e[t++])<128)l[n++]=o;else if(4<(i=s[o]))l[n++]=65533,t+=i-1;else{for(o&=2===i?31:3===i?15:7;1<i&&t<a;)o=o<<6|63&e[t++],i--;1<i?l[n++]=65533:o<65536?l[n++]=o:(o-=65536,l[n++]=55296|o>>10&1023,l[n++]=56320|1023&o)}return l.length!==n&&(l.subarray?l=l.subarray(0,n):l.length=n),r.applyFromCharCode(l)}(e=r.transformTo(o.uint8array?"uint8array":"array",e))},r.inherits(u,a),u.prototype.processChunk=function(e){var t=r.transformTo(o.uint8array?"uint8array":"array",e.data);if(this.leftOver&&this.leftOver.length){if(o.uint8array){var i=t;(t=new Uint8Array(i.length+this.leftOver.length)).set(this.leftOver,0),t.set(i,this.leftOver.length)}else t=this.leftOver.concat(t);this.leftOver=null}var a=function(e,t){var n;for((t=t||e.length)>e.length&&(t=e.length),n=t-1;0<=n&&128==(192&e[n]);)n--;return n<0||0===n?t:n+s[e[n]]>t?n:t}(t),l=t;a!==t.length&&(o.uint8array?(l=t.subarray(0,a),this.leftOver=t.subarray(a,t.length)):(l=t.slice(0,a),this.leftOver=t.slice(a,t.length))),this.push({data:n.utf8decode(l),meta:e.meta})},u.prototype.flush=function(){this.leftOver&&this.leftOver.length&&(this.push({data:n.utf8decode(this.leftOver),meta:{}}),this.leftOver=null)},n.Utf8DecodeWorker=u,r.inherits(c,a),c.prototype.processChunk=function(e){this.push({data:n.utf8encode(e.data),meta:e.meta})},n.Utf8EncodeWorker=c},{"./nodejsUtils":14,"./stream/GenericWorker":28,"./support":30,"./utils":32}],32:[function(e,t,n){"use strict";var r=e("./support"),o=e("./base64"),i=e("./nodejsUtils"),a=e("set-immediate-shim"),s=e("./external");function l(e){return e}function u(e,t){for(var n=0;n<e.length;++n)t[n]=255&e.charCodeAt(n);return t}n.newBlob=function(e,t){n.checkSupport("blob");try{return new Blob([e],{type:t})}catch(n){try{var r=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);return r.append(e),r.getBlob(t)}catch(e){throw new Error("Bug : can't construct the Blob.")}}};var c={stringifyByChunk:function(e,t,n){var r=[],o=0,i=e.length;if(i<=n)return String.fromCharCode.apply(null,e);for(;o<i;)"array"===t||"nodebuffer"===t?r.push(String.fromCharCode.apply(null,e.slice(o,Math.min(o+n,i)))):r.push(String.fromCharCode.apply(null,e.subarray(o,Math.min(o+n,i)))),o+=n;return r.join("")},stringifyByChar:function(e){for(var t="",n=0;n<e.length;n++)t+=String.fromCharCode(e[n]);return t},applyCanBeUsed:{uint8array:function(){try{return r.uint8array&&1===String.fromCharCode.apply(null,new Uint8Array(1)).length}catch(e){return!1}}(),nodebuffer:function(){try{return r.nodebuffer&&1===String.fromCharCode.apply(null,i.allocBuffer(1)).length}catch(e){return!1}}()}};function d(e){var t=65536,r=n.getTypeOf(e),o=!0;if("uint8array"===r?o=c.applyCanBeUsed.uint8array:"nodebuffer"===r&&(o=c.applyCanBeUsed.nodebuffer),o)for(;1<t;)try{return c.stringifyByChunk(e,r,t)}catch(e){t=Math.floor(t/2)}return c.stringifyByChar(e)}function f(e,t){for(var n=0;n<e.length;n++)t[n]=e[n];return t}n.applyFromCharCode=d;var h={};h.string={string:l,array:function(e){return u(e,new Array(e.length))},arraybuffer:function(e){return h.string.uint8array(e).buffer},uint8array:function(e){return u(e,new Uint8Array(e.length))},nodebuffer:function(e){return u(e,i.allocBuffer(e.length))}},h.array={string:d,array:l,arraybuffer:function(e){return new Uint8Array(e).buffer},uint8array:function(e){return new Uint8Array(e)},nodebuffer:function(e){return i.newBufferFrom(e)}},h.arraybuffer={string:function(e){return d(new Uint8Array(e))},array:function(e){return f(new Uint8Array(e),new Array(e.byteLength))},arraybuffer:l,uint8array:function(e){return new Uint8Array(e)},nodebuffer:function(e){return i.newBufferFrom(new Uint8Array(e))}},h.uint8array={string:d,array:function(e){return f(e,new Array(e.length))},arraybuffer:function(e){return e.buffer},uint8array:l,nodebuffer:function(e){return i.newBufferFrom(e)}},h.nodebuffer={string:d,array:function(e){return f(e,new Array(e.length))},arraybuffer:function(e){return h.nodebuffer.uint8array(e).buffer},uint8array:function(e){return f(e,new Uint8Array(e.length))},nodebuffer:l},n.transformTo=function(e,t){if(t=t||"",!e)return t;n.checkSupport(e);var r=n.getTypeOf(t);return h[r][e](t)},n.getTypeOf=function(e){return"string"==typeof e?"string":"[object Array]"===Object.prototype.toString.call(e)?"array":r.nodebuffer&&i.isBuffer(e)?"nodebuffer":r.uint8array&&e instanceof Uint8Array?"uint8array":r.arraybuffer&&e instanceof ArrayBuffer?"arraybuffer":void 0},n.checkSupport=function(e){if(!r[e.toLowerCase()])throw new Error(e+" is not supported by this platform")},n.MAX_VALUE_16BITS=65535,n.MAX_VALUE_32BITS=-1,n.pretty=function(e){var t,n,r="";for(n=0;n<(e||"").length;n++)r+="\\x"+((t=e.charCodeAt(n))<16?"0":"")+t.toString(16).toUpperCase();return r},n.delay=function(e,t,n){a((function(){e.apply(n||null,t||[])}))},n.inherits=function(e,t){function n(){}n.prototype=t.prototype,e.prototype=new n},n.extend=function(){var e,t,n={};for(e=0;e<arguments.length;e++)for(t in arguments[e])arguments[e].hasOwnProperty(t)&&void 0===n[t]&&(n[t]=arguments[e][t]);return n},n.prepareContent=function(e,t,i,a,l){return s.Promise.resolve(t).then((function(e){return r.blob&&(e instanceof Blob||-1!==["[object File]","[object Blob]"].indexOf(Object.prototype.toString.call(e)))&&"undefined"!=typeof FileReader?new s.Promise((function(t,n){var r=new FileReader;r.onload=function(e){t(e.target.result)},r.onerror=function(e){n(e.target.error)},r.readAsArrayBuffer(e)})):e})).then((function(t){var c,d=n.getTypeOf(t);return d?("arraybuffer"===d?t=n.transformTo("uint8array",t):"string"===d&&(l?t=o.decode(t):i&&!0!==a&&(t=u(c=t,r.uint8array?new Uint8Array(c.length):new Array(c.length)))),t):s.Promise.reject(new Error("Can't read the data of '"+e+"'. Is it in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?"))}))}},{"./base64":1,"./external":6,"./nodejsUtils":14,"./support":30,"set-immediate-shim":54}],33:[function(e,t,n){"use strict";var r=e("./reader/readerFor"),o=e("./utils"),i=e("./signature"),a=e("./zipEntry"),s=(e("./utf8"),e("./support"));function l(e){this.files=[],this.loadOptions=e}l.prototype={checkSignature:function(e){if(!this.reader.readAndCheckSignature(e)){this.reader.index-=4;var t=this.reader.readString(4);throw new Error("Corrupted zip or bug: unexpected signature ("+o.pretty(t)+", expected "+o.pretty(e)+")")}},isSignature:function(e,t){var n=this.reader.index;this.reader.setIndex(e);var r=this.reader.readString(4)===t;return this.reader.setIndex(n),r},readBlockEndOfCentral:function(){this.diskNumber=this.reader.readInt(2),this.diskWithCentralDirStart=this.reader.readInt(2),this.centralDirRecordsOnThisDisk=this.reader.readInt(2),this.centralDirRecords=this.reader.readInt(2),this.centralDirSize=this.reader.readInt(4),this.centralDirOffset=this.reader.readInt(4),this.zipCommentLength=this.reader.readInt(2);var e=this.reader.readData(this.zipCommentLength),t=s.uint8array?"uint8array":"array",n=o.transformTo(t,e);this.zipComment=this.loadOptions.decodeFileName(n)},readBlockZip64EndOfCentral:function(){this.zip64EndOfCentralSize=this.reader.readInt(8),this.reader.skip(4),this.diskNumber=this.reader.readInt(4),this.diskWithCentralDirStart=this.reader.readInt(4),this.centralDirRecordsOnThisDisk=this.reader.readInt(8),this.centralDirRecords=this.reader.readInt(8),this.centralDirSize=this.reader.readInt(8),this.centralDirOffset=this.reader.readInt(8),this.zip64ExtensibleData={};for(var e,t,n,r=this.zip64EndOfCentralSize-44;0<r;)e=this.reader.readInt(2),t=this.reader.readInt(4),n=this.reader.readData(t),this.zip64ExtensibleData[e]={id:e,length:t,value:n}},readBlockZip64EndOfCentralLocator:function(){if(this.diskWithZip64CentralDirStart=this.reader.readInt(4),this.relativeOffsetEndOfZip64CentralDir=this.reader.readInt(8),this.disksCount=this.reader.readInt(4),1<this.disksCount)throw new Error("Multi-volumes zip are not supported")},readLocalFiles:function(){var e,t;for(e=0;e<this.files.length;e++)t=this.files[e],this.reader.setIndex(t.localHeaderOffset),this.checkSignature(i.LOCAL_FILE_HEADER),t.readLocalPart(this.reader),t.handleUTF8(),t.processAttributes()},readCentralDir:function(){var e;for(this.reader.setIndex(this.centralDirOffset);this.reader.readAndCheckSignature(i.CENTRAL_FILE_HEADER);)(e=new a({zip64:this.zip64},this.loadOptions)).readCentralPart(this.reader),this.files.push(e);if(this.centralDirRecords!==this.files.length&&0!==this.centralDirRecords&&0===this.files.length)throw new Error("Corrupted zip or bug: expected "+this.centralDirRecords+" records in central dir, got "+this.files.length)},readEndOfCentral:function(){var e=this.reader.lastIndexOfSignature(i.CENTRAL_DIRECTORY_END);if(e<0)throw this.isSignature(0,i.LOCAL_FILE_HEADER)?new Error("Corrupted zip: can't find end of central directory"):new Error("Can't find end of central directory : is this a zip file ? If it is, see https://stuk.github.io/jszip/documentation/howto/read_zip.html");this.reader.setIndex(e);var t=e;if(this.checkSignature(i.CENTRAL_DIRECTORY_END),this.readBlockEndOfCentral(),this.diskNumber===o.MAX_VALUE_16BITS||this.diskWithCentralDirStart===o.MAX_VALUE_16BITS||this.centralDirRecordsOnThisDisk===o.MAX_VALUE_16BITS||this.centralDirRecords===o.MAX_VALUE_16BITS||this.centralDirSize===o.MAX_VALUE_32BITS||this.centralDirOffset===o.MAX_VALUE_32BITS){if(this.zip64=!0,(e=this.reader.lastIndexOfSignature(i.ZIP64_CENTRAL_DIRECTORY_LOCATOR))<0)throw new Error("Corrupted zip: can't find the ZIP64 end of central directory locator");if(this.reader.setIndex(e),this.checkSignature(i.ZIP64_CENTRAL_DIRECTORY_LOCATOR),this.readBlockZip64EndOfCentralLocator(),!this.isSignature(this.relativeOffsetEndOfZip64CentralDir,i.ZIP64_CENTRAL_DIRECTORY_END)&&(this.relativeOffsetEndOfZip64CentralDir=this.reader.lastIndexOfSignature(i.ZIP64_CENTRAL_DIRECTORY_END),this.relativeOffsetEndOfZip64CentralDir<0))throw new Error("Corrupted zip: can't find the ZIP64 end of central directory");this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir),this.checkSignature(i.ZIP64_CENTRAL_DIRECTORY_END),this.readBlockZip64EndOfCentral()}var n=this.centralDirOffset+this.centralDirSize;this.zip64&&(n+=20,n+=12+this.zip64EndOfCentralSize);var r=t-n;if(0<r)this.isSignature(t,i.CENTRAL_FILE_HEADER)||(this.reader.zero=r);else if(r<0)throw new Error("Corrupted zip: missing "+Math.abs(r)+" bytes.")},prepareReader:function(e){this.reader=r(e)},load:function(e){this.prepareReader(e),this.readEndOfCentral(),this.readCentralDir(),this.readLocalFiles()}},t.exports=l},{"./reader/readerFor":22,"./signature":23,"./support":30,"./utf8":31,"./utils":32,"./zipEntry":34}],34:[function(e,t,n){"use strict";var r=e("./reader/readerFor"),o=e("./utils"),i=e("./compressedObject"),a=e("./crc32"),s=e("./utf8"),l=e("./compressions"),u=e("./support");function c(e,t){this.options=e,this.loadOptions=t}c.prototype={isEncrypted:function(){return 1==(1&this.bitFlag)},useUTF8:function(){return 2048==(2048&this.bitFlag)},readLocalPart:function(e){var t,n;if(e.skip(22),this.fileNameLength=e.readInt(2),n=e.readInt(2),this.fileName=e.readData(this.fileNameLength),e.skip(n),-1===this.compressedSize||-1===this.uncompressedSize)throw new Error("Bug or corrupted zip : didn't get enough information from the central directory (compressedSize === -1 || uncompressedSize === -1)");if(null===(t=function(e){for(var t in l)if(l.hasOwnProperty(t)&&l[t].magic===e)return l[t];return null}(this.compressionMethod)))throw new Error("Corrupted zip : compression "+o.pretty(this.compressionMethod)+" unknown (inner file : "+o.transformTo("string",this.fileName)+")");this.decompressed=new i(this.compressedSize,this.uncompressedSize,this.crc32,t,e.readData(this.compressedSize))},readCentralPart:function(e){this.versionMadeBy=e.readInt(2),e.skip(2),this.bitFlag=e.readInt(2),this.compressionMethod=e.readString(2),this.date=e.readDate(),this.crc32=e.readInt(4),this.compressedSize=e.readInt(4),this.uncompressedSize=e.readInt(4);var t=e.readInt(2);if(this.extraFieldsLength=e.readInt(2),this.fileCommentLength=e.readInt(2),this.diskNumberStart=e.readInt(2),this.internalFileAttributes=e.readInt(2),this.externalFileAttributes=e.readInt(4),this.localHeaderOffset=e.readInt(4),this.isEncrypted())throw new Error("Encrypted zip are not supported");e.skip(t),this.readExtraFields(e),this.parseZIP64ExtraField(e),this.fileComment=e.readData(this.fileCommentLength)},processAttributes:function(){this.unixPermissions=null,this.dosPermissions=null;var e=this.versionMadeBy>>8;this.dir=!!(16&this.externalFileAttributes),0==e&&(this.dosPermissions=63&this.externalFileAttributes),3==e&&(this.unixPermissions=this.externalFileAttributes>>16&65535),this.dir||"/"!==this.fileNameStr.slice(-1)||(this.dir=!0)},parseZIP64ExtraField:function(e){if(this.extraFields[1]){var t=r(this.extraFields[1].value);this.uncompressedSize===o.MAX_VALUE_32BITS&&(this.uncompressedSize=t.readInt(8)),this.compressedSize===o.MAX_VALUE_32BITS&&(this.compressedSize=t.readInt(8)),this.localHeaderOffset===o.MAX_VALUE_32BITS&&(this.localHeaderOffset=t.readInt(8)),this.diskNumberStart===o.MAX_VALUE_32BITS&&(this.diskNumberStart=t.readInt(4))}},readExtraFields:function(e){var t,n,r,o=e.index+this.extraFieldsLength;for(this.extraFields||(this.extraFields={});e.index+4<o;)t=e.readInt(2),n=e.readInt(2),r=e.readData(n),this.extraFields[t]={id:t,length:n,value:r};e.setIndex(o)},handleUTF8:function(){var e=u.uint8array?"uint8array":"array";if(this.useUTF8())this.fileNameStr=s.utf8decode(this.fileName),this.fileCommentStr=s.utf8decode(this.fileComment);else{var t=this.findExtraFieldUnicodePath();if(null!==t)this.fileNameStr=t;else{var n=o.transformTo(e,this.fileName);this.fileNameStr=this.loadOptions.decodeFileName(n)}var r=this.findExtraFieldUnicodeComment();if(null!==r)this.fileCommentStr=r;else{var i=o.transformTo(e,this.fileComment);this.fileCommentStr=this.loadOptions.decodeFileName(i)}}},findExtraFieldUnicodePath:function(){var e=this.extraFields[28789];if(e){var t=r(e.value);return 1!==t.readInt(1)||a(this.fileName)!==t.readInt(4)?null:s.utf8decode(t.readData(e.length-5))}return null},findExtraFieldUnicodeComment:function(){var e=this.extraFields[25461];if(e){var t=r(e.value);return 1!==t.readInt(1)||a(this.fileComment)!==t.readInt(4)?null:s.utf8decode(t.readData(e.length-5))}return null}},t.exports=c},{"./compressedObject":2,"./compressions":3,"./crc32":4,"./reader/readerFor":22,"./support":30,"./utf8":31,"./utils":32}],35:[function(e,t,n){"use strict";function r(e,t,n){this.name=e,this.dir=n.dir,this.date=n.date,this.comment=n.comment,this.unixPermissions=n.unixPermissions,this.dosPermissions=n.dosPermissions,this._data=t,this._dataBinary=n.binary,this.options={compression:n.compression,compressionOptions:n.compressionOptions}}var o=e("./stream/StreamHelper"),i=e("./stream/DataWorker"),a=e("./utf8"),s=e("./compressedObject"),l=e("./stream/GenericWorker");r.prototype={internalStream:function(e){var t=null,n="string";try{if(!e)throw new Error("No output type specified.");var r="string"===(n=e.toLowerCase())||"text"===n;"binarystring"!==n&&"text"!==n||(n="string"),t=this._decompressWorker();var i=!this._dataBinary;i&&!r&&(t=t.pipe(new a.Utf8EncodeWorker)),!i&&r&&(t=t.pipe(new a.Utf8DecodeWorker))}catch(e){(t=new l("error")).error(e)}return new o(t,n,"")},async:function(e,t){return this.internalStream(e).accumulate(t)},nodeStream:function(e,t){return this.internalStream(e||"nodebuffer").toNodejsStream(t)},_compressWorker:function(e,t){if(this._data instanceof s&&this._data.compression.magic===e.magic)return this._data.getCompressedWorker();var n=this._decompressWorker();return this._dataBinary||(n=n.pipe(new a.Utf8EncodeWorker)),s.createWorkerFrom(n,e,t)},_decompressWorker:function(){return this._data instanceof s?this._data.getContentWorker():this._data instanceof l?this._data:new i(this._data)}};for(var u=["asText","asBinary","asNodeBuffer","asUint8Array","asArrayBuffer"],c=function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},d=0;d<u.length;d++)r.prototype[u[d]]=c;t.exports=r},{"./compressedObject":2,"./stream/DataWorker":27,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31}],36:[function(e,t,r){(function(e){"use strict";var n,r,o=e.MutationObserver||e.WebKitMutationObserver;if(o){var i=0,a=new o(c),s=e.document.createTextNode("");a.observe(s,{characterData:!0}),n=function(){s.data=i=++i%2}}else if(e.setImmediate||void 0===e.MessageChannel)n="document"in e&&"onreadystatechange"in e.document.createElement("script")?function(){var t=e.document.createElement("script");t.onreadystatechange=function(){c(),t.onreadystatechange=null,t.parentNode.removeChild(t),t=null},e.document.documentElement.appendChild(t)}:function(){setTimeout(c,0)};else{var l=new e.MessageChannel;l.port1.onmessage=c,n=function(){l.port2.postMessage(0)}}var u=[];function c(){var e,t;r=!0;for(var n=u.length;n;){for(t=u,u=[],e=-1;++e<n;)t[e]();n=u.length}r=!1}t.exports=function(e){1!==u.push(e)||r||n()}}).call(this,void 0!==n?n:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],37:[function(e,t,n){"use strict";var r=e("immediate");function o(){}var i={},a=["REJECTED"],s=["FULFILLED"],l=["PENDING"];function u(e){if("function"!=typeof e)throw new TypeError("resolver must be a function");this.state=l,this.queue=[],this.outcome=void 0,e!==o&&h(this,e)}function c(e,t,n){this.promise=e,"function"==typeof t&&(this.onFulfilled=t,this.callFulfilled=this.otherCallFulfilled),"function"==typeof n&&(this.onRejected=n,this.callRejected=this.otherCallRejected)}function d(e,t,n){r((function(){var r;try{r=t(n)}catch(r){return i.reject(e,r)}r===e?i.reject(e,new TypeError("Cannot resolve promise with itself")):i.resolve(e,r)}))}function f(e){var t=e&&e.then;if(e&&("object"==typeof e||"function"==typeof e)&&"function"==typeof t)return function(){t.apply(e,arguments)}}function h(e,t){var n=!1;function r(t){n||(n=!0,i.reject(e,t))}function o(t){n||(n=!0,i.resolve(e,t))}var a=p((function(){t(o,r)}));"error"===a.status&&r(a.value)}function p(e,t){var n={};try{n.value=e(t),n.status="success"}catch(e){n.status="error",n.value=e}return n}(t.exports=u).prototype.finally=function(e){if("function"!=typeof e)return this;var t=this.constructor;return this.then((function(n){return t.resolve(e()).then((function(){return n}))}),(function(n){return t.resolve(e()).then((function(){throw n}))}))},u.prototype.catch=function(e){return this.then(null,e)},u.prototype.then=function(e,t){if("function"!=typeof e&&this.state===s||"function"!=typeof t&&this.state===a)return this;var n=new this.constructor(o);return this.state!==l?d(n,this.state===s?e:t,this.outcome):this.queue.push(new c(n,e,t)),n},c.prototype.callFulfilled=function(e){i.resolve(this.promise,e)},c.prototype.otherCallFulfilled=function(e){d(this.promise,this.onFulfilled,e)},c.prototype.callRejected=function(e){i.reject(this.promise,e)},c.prototype.otherCallRejected=function(e){d(this.promise,this.onRejected,e)},i.resolve=function(e,t){var n=p(f,t);if("error"===n.status)return i.reject(e,n.value);var r=n.value;if(r)h(e,r);else{e.state=s,e.outcome=t;for(var o=-1,a=e.queue.length;++o<a;)e.queue[o].callFulfilled(t)}return e},i.reject=function(e,t){e.state=a,e.outcome=t;for(var n=-1,r=e.queue.length;++n<r;)e.queue[n].callRejected(t);return e},u.resolve=function(e){return e instanceof this?e:i.resolve(new this(o),e)},u.reject=function(e){var t=new this(o);return i.reject(t,e)},u.all=function(e){var t=this;if("[object Array]"!==Object.prototype.toString.call(e))return this.reject(new TypeError("must be an array"));var n=e.length,r=!1;if(!n)return this.resolve([]);for(var a=new Array(n),s=0,l=-1,u=new this(o);++l<n;)c(e[l],l);return u;function c(e,o){t.resolve(e).then((function(e){a[o]=e,++s!==n||r||(r=!0,i.resolve(u,a))}),(function(e){r||(r=!0,i.reject(u,e))}))}},u.race=function(e){if("[object Array]"!==Object.prototype.toString.call(e))return this.reject(new TypeError("must be an array"));var t=e.length,n=!1;if(!t)return this.resolve([]);for(var r,a=-1,s=new this(o);++a<t;)r=e[a],this.resolve(r).then((function(e){n||(n=!0,i.resolve(s,e))}),(function(e){n||(n=!0,i.reject(s,e))}));return s}},{immediate:36}],38:[function(e,t,n){"use strict";var r={};(0,e("./lib/utils/common").assign)(r,e("./lib/deflate"),e("./lib/inflate"),e("./lib/zlib/constants")),t.exports=r},{"./lib/deflate":39,"./lib/inflate":40,"./lib/utils/common":41,"./lib/zlib/constants":44}],39:[function(e,t,n){"use strict";var r=e("./zlib/deflate"),o=e("./utils/common"),i=e("./utils/strings"),a=e("./zlib/messages"),s=e("./zlib/zstream"),l=Object.prototype.toString,u=0,c=-1,d=0,f=8;function h(e){if(!(this instanceof h))return new h(e);this.options=o.assign({level:c,method:f,chunkSize:16384,windowBits:15,memLevel:8,strategy:d,to:""},e||{});var t=this.options;t.raw&&0<t.windowBits?t.windowBits=-t.windowBits:t.gzip&&0<t.windowBits&&t.windowBits<16&&(t.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new s,this.strm.avail_out=0;var n=r.deflateInit2(this.strm,t.level,t.method,t.windowBits,t.memLevel,t.strategy);if(n!==u)throw new Error(a[n]);if(t.header&&r.deflateSetHeader(this.strm,t.header),t.dictionary){var p;if(p="string"==typeof t.dictionary?i.string2buf(t.dictionary):"[object ArrayBuffer]"===l.call(t.dictionary)?new Uint8Array(t.dictionary):t.dictionary,(n=r.deflateSetDictionary(this.strm,p))!==u)throw new Error(a[n]);this._dict_set=!0}}function p(e,t){var n=new h(t);if(n.push(e,!0),n.err)throw n.msg||a[n.err];return n.result}h.prototype.push=function(e,t){var n,a,s=this.strm,c=this.options.chunkSize;if(this.ended)return!1;a=t===~~t?t:!0===t?4:0,"string"==typeof e?s.input=i.string2buf(e):"[object ArrayBuffer]"===l.call(e)?s.input=new Uint8Array(e):s.input=e,s.next_in=0,s.avail_in=s.input.length;do{if(0===s.avail_out&&(s.output=new o.Buf8(c),s.next_out=0,s.avail_out=c),1!==(n=r.deflate(s,a))&&n!==u)return this.onEnd(n),!(this.ended=!0);0!==s.avail_out&&(0!==s.avail_in||4!==a&&2!==a)||("string"===this.options.to?this.onData(i.buf2binstring(o.shrinkBuf(s.output,s.next_out))):this.onData(o.shrinkBuf(s.output,s.next_out)))}while((0<s.avail_in||0===s.avail_out)&&1!==n);return 4===a?(n=r.deflateEnd(this.strm),this.onEnd(n),this.ended=!0,n===u):2!==a||(this.onEnd(u),!(s.avail_out=0))},h.prototype.onData=function(e){this.chunks.push(e)},h.prototype.onEnd=function(e){e===u&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=o.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg},n.Deflate=h,n.deflate=p,n.deflateRaw=function(e,t){return(t=t||{}).raw=!0,p(e,t)},n.gzip=function(e,t){return(t=t||{}).gzip=!0,p(e,t)}},{"./utils/common":41,"./utils/strings":42,"./zlib/deflate":46,"./zlib/messages":51,"./zlib/zstream":53}],40:[function(e,t,n){"use strict";var r=e("./zlib/inflate"),o=e("./utils/common"),i=e("./utils/strings"),a=e("./zlib/constants"),s=e("./zlib/messages"),l=e("./zlib/zstream"),u=e("./zlib/gzheader"),c=Object.prototype.toString;function d(e){if(!(this instanceof d))return new d(e);this.options=o.assign({chunkSize:16384,windowBits:0,to:""},e||{});var t=this.options;t.raw&&0<=t.windowBits&&t.windowBits<16&&(t.windowBits=-t.windowBits,0===t.windowBits&&(t.windowBits=-15)),!(0<=t.windowBits&&t.windowBits<16)||e&&e.windowBits||(t.windowBits+=32),15<t.windowBits&&t.windowBits<48&&0==(15&t.windowBits)&&(t.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new l,this.strm.avail_out=0;var n=r.inflateInit2(this.strm,t.windowBits);if(n!==a.Z_OK)throw new Error(s[n]);this.header=new u,r.inflateGetHeader(this.strm,this.header)}function f(e,t){var n=new d(t);if(n.push(e,!0),n.err)throw n.msg||s[n.err];return n.result}d.prototype.push=function(e,t){var n,s,l,u,d,f,h=this.strm,p=this.options.chunkSize,m=this.options.dictionary,v=!1;if(this.ended)return!1;s=t===~~t?t:!0===t?a.Z_FINISH:a.Z_NO_FLUSH,"string"==typeof e?h.input=i.binstring2buf(e):"[object ArrayBuffer]"===c.call(e)?h.input=new Uint8Array(e):h.input=e,h.next_in=0,h.avail_in=h.input.length;do{if(0===h.avail_out&&(h.output=new o.Buf8(p),h.next_out=0,h.avail_out=p),(n=r.inflate(h,a.Z_NO_FLUSH))===a.Z_NEED_DICT&&m&&(f="string"==typeof m?i.string2buf(m):"[object ArrayBuffer]"===c.call(m)?new Uint8Array(m):m,n=r.inflateSetDictionary(this.strm,f)),n===a.Z_BUF_ERROR&&!0===v&&(n=a.Z_OK,v=!1),n!==a.Z_STREAM_END&&n!==a.Z_OK)return this.onEnd(n),!(this.ended=!0);h.next_out&&(0!==h.avail_out&&n!==a.Z_STREAM_END&&(0!==h.avail_in||s!==a.Z_FINISH&&s!==a.Z_SYNC_FLUSH)||("string"===this.options.to?(l=i.utf8border(h.output,h.next_out),u=h.next_out-l,d=i.buf2string(h.output,l),h.next_out=u,h.avail_out=p-u,u&&o.arraySet(h.output,h.output,l,u,0),this.onData(d)):this.onData(o.shrinkBuf(h.output,h.next_out)))),0===h.avail_in&&0===h.avail_out&&(v=!0)}while((0<h.avail_in||0===h.avail_out)&&n!==a.Z_STREAM_END);return n===a.Z_STREAM_END&&(s=a.Z_FINISH),s===a.Z_FINISH?(n=r.inflateEnd(this.strm),this.onEnd(n),this.ended=!0,n===a.Z_OK):s!==a.Z_SYNC_FLUSH||(this.onEnd(a.Z_OK),!(h.avail_out=0))},d.prototype.onData=function(e){this.chunks.push(e)},d.prototype.onEnd=function(e){e===a.Z_OK&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=o.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg},n.Inflate=d,n.inflate=f,n.inflateRaw=function(e,t){return(t=t||{}).raw=!0,f(e,t)},n.ungzip=f},{"./utils/common":41,"./utils/strings":42,"./zlib/constants":44,"./zlib/gzheader":47,"./zlib/inflate":49,"./zlib/messages":51,"./zlib/zstream":53}],41:[function(e,t,n){"use strict";var r="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Int32Array;n.assign=function(e){for(var t=Array.prototype.slice.call(arguments,1);t.length;){var n=t.shift();if(n){if("object"!=typeof n)throw new TypeError(n+"must be non-object");for(var r in n)n.hasOwnProperty(r)&&(e[r]=n[r])}}return e},n.shrinkBuf=function(e,t){return e.length===t?e:e.subarray?e.subarray(0,t):(e.length=t,e)};var o={arraySet:function(e,t,n,r,o){if(t.subarray&&e.subarray)e.set(t.subarray(n,n+r),o);else for(var i=0;i<r;i++)e[o+i]=t[n+i]},flattenChunks:function(e){var t,n,r,o,i,a;for(t=r=0,n=e.length;t<n;t++)r+=e[t].length;for(a=new Uint8Array(r),t=o=0,n=e.length;t<n;t++)i=e[t],a.set(i,o),o+=i.length;return a}},i={arraySet:function(e,t,n,r,o){for(var i=0;i<r;i++)e[o+i]=t[n+i]},flattenChunks:function(e){return[].concat.apply([],e)}};n.setTyped=function(e){e?(n.Buf8=Uint8Array,n.Buf16=Uint16Array,n.Buf32=Int32Array,n.assign(n,o)):(n.Buf8=Array,n.Buf16=Array,n.Buf32=Array,n.assign(n,i))},n.setTyped(r)},{}],42:[function(e,t,n){"use strict";var r=e("./common"),o=!0,i=!0;try{String.fromCharCode.apply(null,[0])}catch(e){o=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(e){i=!1}for(var a=new r.Buf8(256),s=0;s<256;s++)a[s]=252<=s?6:248<=s?5:240<=s?4:224<=s?3:192<=s?2:1;function l(e,t){if(t<65537&&(e.subarray&&i||!e.subarray&&o))return String.fromCharCode.apply(null,r.shrinkBuf(e,t));for(var n="",a=0;a<t;a++)n+=String.fromCharCode(e[a]);return n}a[254]=a[254]=1,n.string2buf=function(e){var t,n,o,i,a,s=e.length,l=0;for(i=0;i<s;i++)55296==(64512&(n=e.charCodeAt(i)))&&i+1<s&&56320==(64512&(o=e.charCodeAt(i+1)))&&(n=65536+(n-55296<<10)+(o-56320),i++),l+=n<128?1:n<2048?2:n<65536?3:4;for(t=new r.Buf8(l),i=a=0;a<l;i++)55296==(64512&(n=e.charCodeAt(i)))&&i+1<s&&56320==(64512&(o=e.charCodeAt(i+1)))&&(n=65536+(n-55296<<10)+(o-56320),i++),n<128?t[a++]=n:(n<2048?t[a++]=192|n>>>6:(n<65536?t[a++]=224|n>>>12:(t[a++]=240|n>>>18,t[a++]=128|n>>>12&63),t[a++]=128|n>>>6&63),t[a++]=128|63&n);return t},n.buf2binstring=function(e){return l(e,e.length)},n.binstring2buf=function(e){for(var t=new r.Buf8(e.length),n=0,o=t.length;n<o;n++)t[n]=e.charCodeAt(n);return t},n.buf2string=function(e,t){var n,r,o,i,s=t||e.length,u=new Array(2*s);for(n=r=0;n<s;)if((o=e[n++])<128)u[r++]=o;else if(4<(i=a[o]))u[r++]=65533,n+=i-1;else{for(o&=2===i?31:3===i?15:7;1<i&&n<s;)o=o<<6|63&e[n++],i--;1<i?u[r++]=65533:o<65536?u[r++]=o:(o-=65536,u[r++]=55296|o>>10&1023,u[r++]=56320|1023&o)}return l(u,r)},n.utf8border=function(e,t){var n;for((t=t||e.length)>e.length&&(t=e.length),n=t-1;0<=n&&128==(192&e[n]);)n--;return n<0||0===n?t:n+a[e[n]]>t?n:t}},{"./common":41}],43:[function(e,t,n){"use strict";t.exports=function(e,t,n,r){for(var o=65535&e|0,i=e>>>16&65535|0,a=0;0!==n;){for(n-=a=2e3<n?2e3:n;i=i+(o=o+t[r++]|0)|0,--a;);o%=65521,i%=65521}return o|i<<16|0}},{}],44:[function(e,t,n){"use strict";t.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},{}],45:[function(e,t,n){"use strict";var r=function(){for(var e,t=[],n=0;n<256;n++){e=n;for(var r=0;r<8;r++)e=1&e?3988292384^e>>>1:e>>>1;t[n]=e}return t}();t.exports=function(e,t,n,o){var i=r,a=o+n;e^=-1;for(var s=o;s<a;s++)e=e>>>8^i[255&(e^t[s])];return-1^e}},{}],46:[function(e,t,n){"use strict";var r,o=e("../utils/common"),i=e("./trees"),a=e("./adler32"),s=e("./crc32"),l=e("./messages"),u=0,c=0,d=-2,f=2,h=8,p=286,m=30,v=19,g=2*p+1,y=15,b=3,A=258,w=A+b+1,_=42,S=113;function k(e,t){return e.msg=l[t],t}function E(e){return(e<<1)-(4<e?9:0)}function x(e){for(var t=e.length;0<=--t;)e[t]=0}function T(e){var t=e.state,n=t.pending;n>e.avail_out&&(n=e.avail_out),0!==n&&(o.arraySet(e.output,t.pending_buf,t.pending_out,n,e.next_out),e.next_out+=n,t.pending_out+=n,e.total_out+=n,e.avail_out-=n,t.pending-=n,0===t.pending&&(t.pending_out=0))}function C(e,t){i._tr_flush_block(e,0<=e.block_start?e.block_start:-1,e.strstart-e.block_start,t),e.block_start=e.strstart,T(e.strm)}function R(e,t){e.pending_buf[e.pending++]=t}function N(e,t){e.pending_buf[e.pending++]=t>>>8&255,e.pending_buf[e.pending++]=255&t}function O(e,t){var n,r,o=e.max_chain_length,i=e.strstart,a=e.prev_length,s=e.nice_match,l=e.strstart>e.w_size-w?e.strstart-(e.w_size-w):0,u=e.window,c=e.w_mask,d=e.prev,f=e.strstart+A,h=u[i+a-1],p=u[i+a];e.prev_length>=e.good_match&&(o>>=2),s>e.lookahead&&(s=e.lookahead);do{if(u[(n=t)+a]===p&&u[n+a-1]===h&&u[n]===u[i]&&u[++n]===u[i+1]){i+=2,n++;do{}while(u[++i]===u[++n]&&u[++i]===u[++n]&&u[++i]===u[++n]&&u[++i]===u[++n]&&u[++i]===u[++n]&&u[++i]===u[++n]&&u[++i]===u[++n]&&u[++i]===u[++n]&&i<f);if(r=A-(f-i),i=f-A,a<r){if(e.match_start=t,s<=(a=r))break;h=u[i+a-1],p=u[i+a]}}}while((t=d[t&c])>l&&0!=--o);return a<=e.lookahead?a:e.lookahead}function L(e){var t,n,r,i,l,u,c,d,f,h,p=e.w_size;do{if(i=e.window_size-e.lookahead-e.strstart,e.strstart>=p+(p-w)){for(o.arraySet(e.window,e.window,p,p,0),e.match_start-=p,e.strstart-=p,e.block_start-=p,t=n=e.hash_size;r=e.head[--t],e.head[t]=p<=r?r-p:0,--n;);for(t=n=p;r=e.prev[--t],e.prev[t]=p<=r?r-p:0,--n;);i+=p}if(0===e.strm.avail_in)break;if(u=e.strm,c=e.window,d=e.strstart+e.lookahead,h=void 0,(f=i)<(h=u.avail_in)&&(h=f),n=0===h?0:(u.avail_in-=h,o.arraySet(c,u.input,u.next_in,h,d),1===u.state.wrap?u.adler=a(u.adler,c,h,d):2===u.state.wrap&&(u.adler=s(u.adler,c,h,d)),u.next_in+=h,u.total_in+=h,h),e.lookahead+=n,e.lookahead+e.insert>=b)for(l=e.strstart-e.insert,e.ins_h=e.window[l],e.ins_h=(e.ins_h<<e.hash_shift^e.window[l+1])&e.hash_mask;e.insert&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[l+b-1])&e.hash_mask,e.prev[l&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=l,l++,e.insert--,!(e.lookahead+e.insert<b)););}while(e.lookahead<w&&0!==e.strm.avail_in)}function z(e,t){for(var n,r;;){if(e.lookahead<w){if(L(e),e.lookahead<w&&t===u)return 1;if(0===e.lookahead)break}if(n=0,e.lookahead>=b&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+b-1])&e.hash_mask,n=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!==n&&e.strstart-n<=e.w_size-w&&(e.match_length=O(e,n)),e.match_length>=b)if(r=i._tr_tally(e,e.strstart-e.match_start,e.match_length-b),e.lookahead-=e.match_length,e.match_length<=e.max_lazy_match&&e.lookahead>=b){for(e.match_length--;e.strstart++,e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+b-1])&e.hash_mask,n=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart,0!=--e.match_length;);e.strstart++}else e.strstart+=e.match_length,e.match_length=0,e.ins_h=e.window[e.strstart],e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+1])&e.hash_mask;else r=i._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++;if(r&&(C(e,!1),0===e.strm.avail_out))return 1}return e.insert=e.strstart<b-1?e.strstart:b-1,4===t?(C(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(C(e,!1),0===e.strm.avail_out)?1:2}function B(e,t){for(var n,r,o;;){if(e.lookahead<w){if(L(e),e.lookahead<w&&t===u)return 1;if(0===e.lookahead)break}if(n=0,e.lookahead>=b&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+b-1])&e.hash_mask,n=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),e.prev_length=e.match_length,e.prev_match=e.match_start,e.match_length=b-1,0!==n&&e.prev_length<e.max_lazy_match&&e.strstart-n<=e.w_size-w&&(e.match_length=O(e,n),e.match_length<=5&&(1===e.strategy||e.match_length===b&&4096<e.strstart-e.match_start)&&(e.match_length=b-1)),e.prev_length>=b&&e.match_length<=e.prev_length){for(o=e.strstart+e.lookahead-b,r=i._tr_tally(e,e.strstart-1-e.prev_match,e.prev_length-b),e.lookahead-=e.prev_length-1,e.prev_length-=2;++e.strstart<=o&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+b-1])&e.hash_mask,n=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!=--e.prev_length;);if(e.match_available=0,e.match_length=b-1,e.strstart++,r&&(C(e,!1),0===e.strm.avail_out))return 1}else if(e.match_available){if((r=i._tr_tally(e,0,e.window[e.strstart-1]))&&C(e,!1),e.strstart++,e.lookahead--,0===e.strm.avail_out)return 1}else e.match_available=1,e.strstart++,e.lookahead--}return e.match_available&&(r=i._tr_tally(e,0,e.window[e.strstart-1]),e.match_available=0),e.insert=e.strstart<b-1?e.strstart:b-1,4===t?(C(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(C(e,!1),0===e.strm.avail_out)?1:2}function I(e,t,n,r,o){this.good_length=e,this.max_lazy=t,this.nice_length=n,this.max_chain=r,this.func=o}function P(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=h,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new o.Buf16(2*g),this.dyn_dtree=new o.Buf16(2*(2*m+1)),this.bl_tree=new o.Buf16(2*(2*v+1)),x(this.dyn_ltree),x(this.dyn_dtree),x(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new o.Buf16(y+1),this.heap=new o.Buf16(2*p+1),x(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new o.Buf16(2*p+1),x(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function D(e){var t;return e&&e.state?(e.total_in=e.total_out=0,e.data_type=f,(t=e.state).pending=0,t.pending_out=0,t.wrap<0&&(t.wrap=-t.wrap),t.status=t.wrap?_:S,e.adler=2===t.wrap?0:1,t.last_flush=u,i._tr_init(t),c):k(e,d)}function M(e){var t,n=D(e);return n===c&&((t=e.state).window_size=2*t.w_size,x(t.head),t.max_lazy_match=r[t.level].max_lazy,t.good_match=r[t.level].good_length,t.nice_match=r[t.level].nice_length,t.max_chain_length=r[t.level].max_chain,t.strstart=0,t.block_start=0,t.lookahead=0,t.insert=0,t.match_length=t.prev_length=b-1,t.match_available=0,t.ins_h=0),n}function U(e,t,n,r,i,a){if(!e)return d;var s=1;if(-1===t&&(t=6),r<0?(s=0,r=-r):15<r&&(s=2,r-=16),i<1||9<i||n!==h||r<8||15<r||t<0||9<t||a<0||4<a)return k(e,d);8===r&&(r=9);var l=new P;return(e.state=l).strm=e,l.wrap=s,l.gzhead=null,l.w_bits=r,l.w_size=1<<l.w_bits,l.w_mask=l.w_size-1,l.hash_bits=i+7,l.hash_size=1<<l.hash_bits,l.hash_mask=l.hash_size-1,l.hash_shift=~~((l.hash_bits+b-1)/b),l.window=new o.Buf8(2*l.w_size),l.head=new o.Buf16(l.hash_size),l.prev=new o.Buf16(l.w_size),l.lit_bufsize=1<<i+6,l.pending_buf_size=4*l.lit_bufsize,l.pending_buf=new o.Buf8(l.pending_buf_size),l.d_buf=1*l.lit_bufsize,l.l_buf=3*l.lit_bufsize,l.level=t,l.strategy=a,l.method=n,M(e)}r=[new I(0,0,0,0,(function(e,t){var n=65535;for(n>e.pending_buf_size-5&&(n=e.pending_buf_size-5);;){if(e.lookahead<=1){if(L(e),0===e.lookahead&&t===u)return 1;if(0===e.lookahead)break}e.strstart+=e.lookahead,e.lookahead=0;var r=e.block_start+n;if((0===e.strstart||e.strstart>=r)&&(e.lookahead=e.strstart-r,e.strstart=r,C(e,!1),0===e.strm.avail_out))return 1;if(e.strstart-e.block_start>=e.w_size-w&&(C(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(C(e,!0),0===e.strm.avail_out?3:4):(e.strstart>e.block_start&&(C(e,!1),e.strm.avail_out),1)})),new I(4,4,8,4,z),new I(4,5,16,8,z),new I(4,6,32,32,z),new I(4,4,16,16,B),new I(8,16,32,32,B),new I(8,16,128,128,B),new I(8,32,128,256,B),new I(32,128,258,1024,B),new I(32,258,258,4096,B)],n.deflateInit=function(e,t){return U(e,t,h,15,8,0)},n.deflateInit2=U,n.deflateReset=M,n.deflateResetKeep=D,n.deflateSetHeader=function(e,t){return e&&e.state?2!==e.state.wrap?d:(e.state.gzhead=t,c):d},n.deflate=function(e,t){var n,o,a,l;if(!e||!e.state||5<t||t<0)return e?k(e,d):d;if(o=e.state,!e.output||!e.input&&0!==e.avail_in||666===o.status&&4!==t)return k(e,0===e.avail_out?-5:d);if(o.strm=e,n=o.last_flush,o.last_flush=t,o.status===_)if(2===o.wrap)e.adler=0,R(o,31),R(o,139),R(o,8),o.gzhead?(R(o,(o.gzhead.text?1:0)+(o.gzhead.hcrc?2:0)+(o.gzhead.extra?4:0)+(o.gzhead.name?8:0)+(o.gzhead.comment?16:0)),R(o,255&o.gzhead.time),R(o,o.gzhead.time>>8&255),R(o,o.gzhead.time>>16&255),R(o,o.gzhead.time>>24&255),R(o,9===o.level?2:2<=o.strategy||o.level<2?4:0),R(o,255&o.gzhead.os),o.gzhead.extra&&o.gzhead.extra.length&&(R(o,255&o.gzhead.extra.length),R(o,o.gzhead.extra.length>>8&255)),o.gzhead.hcrc&&(e.adler=s(e.adler,o.pending_buf,o.pending,0)),o.gzindex=0,o.status=69):(R(o,0),R(o,0),R(o,0),R(o,0),R(o,0),R(o,9===o.level?2:2<=o.strategy||o.level<2?4:0),R(o,3),o.status=S);else{var f=h+(o.w_bits-8<<4)<<8;f|=(2<=o.strategy||o.level<2?0:o.level<6?1:6===o.level?2:3)<<6,0!==o.strstart&&(f|=32),f+=31-f%31,o.status=S,N(o,f),0!==o.strstart&&(N(o,e.adler>>>16),N(o,65535&e.adler)),e.adler=1}if(69===o.status)if(o.gzhead.extra){for(a=o.pending;o.gzindex<(65535&o.gzhead.extra.length)&&(o.pending!==o.pending_buf_size||(o.gzhead.hcrc&&o.pending>a&&(e.adler=s(e.adler,o.pending_buf,o.pending-a,a)),T(e),a=o.pending,o.pending!==o.pending_buf_size));)R(o,255&o.gzhead.extra[o.gzindex]),o.gzindex++;o.gzhead.hcrc&&o.pending>a&&(e.adler=s(e.adler,o.pending_buf,o.pending-a,a)),o.gzindex===o.gzhead.extra.length&&(o.gzindex=0,o.status=73)}else o.status=73;if(73===o.status)if(o.gzhead.name){a=o.pending;do{if(o.pending===o.pending_buf_size&&(o.gzhead.hcrc&&o.pending>a&&(e.adler=s(e.adler,o.pending_buf,o.pending-a,a)),T(e),a=o.pending,o.pending===o.pending_buf_size)){l=1;break}l=o.gzindex<o.gzhead.name.length?255&o.gzhead.name.charCodeAt(o.gzindex++):0,R(o,l)}while(0!==l);o.gzhead.hcrc&&o.pending>a&&(e.adler=s(e.adler,o.pending_buf,o.pending-a,a)),0===l&&(o.gzindex=0,o.status=91)}else o.status=91;if(91===o.status)if(o.gzhead.comment){a=o.pending;do{if(o.pending===o.pending_buf_size&&(o.gzhead.hcrc&&o.pending>a&&(e.adler=s(e.adler,o.pending_buf,o.pending-a,a)),T(e),a=o.pending,o.pending===o.pending_buf_size)){l=1;break}l=o.gzindex<o.gzhead.comment.length?255&o.gzhead.comment.charCodeAt(o.gzindex++):0,R(o,l)}while(0!==l);o.gzhead.hcrc&&o.pending>a&&(e.adler=s(e.adler,o.pending_buf,o.pending-a,a)),0===l&&(o.status=103)}else o.status=103;if(103===o.status&&(o.gzhead.hcrc?(o.pending+2>o.pending_buf_size&&T(e),o.pending+2<=o.pending_buf_size&&(R(o,255&e.adler),R(o,e.adler>>8&255),e.adler=0,o.status=S)):o.status=S),0!==o.pending){if(T(e),0===e.avail_out)return o.last_flush=-1,c}else if(0===e.avail_in&&E(t)<=E(n)&&4!==t)return k(e,-5);if(666===o.status&&0!==e.avail_in)return k(e,-5);if(0!==e.avail_in||0!==o.lookahead||t!==u&&666!==o.status){var p=2===o.strategy?function(e,t){for(var n;;){if(0===e.lookahead&&(L(e),0===e.lookahead)){if(t===u)return 1;break}if(e.match_length=0,n=i._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++,n&&(C(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(C(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(C(e,!1),0===e.strm.avail_out)?1:2}(o,t):3===o.strategy?function(e,t){for(var n,r,o,a,s=e.window;;){if(e.lookahead<=A){if(L(e),e.lookahead<=A&&t===u)return 1;if(0===e.lookahead)break}if(e.match_length=0,e.lookahead>=b&&0<e.strstart&&(r=s[o=e.strstart-1])===s[++o]&&r===s[++o]&&r===s[++o]){a=e.strstart+A;do{}while(r===s[++o]&&r===s[++o]&&r===s[++o]&&r===s[++o]&&r===s[++o]&&r===s[++o]&&r===s[++o]&&r===s[++o]&&o<a);e.match_length=A-(a-o),e.match_length>e.lookahead&&(e.match_length=e.lookahead)}if(e.match_length>=b?(n=i._tr_tally(e,1,e.match_length-b),e.lookahead-=e.match_length,e.strstart+=e.match_length,e.match_length=0):(n=i._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++),n&&(C(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(C(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(C(e,!1),0===e.strm.avail_out)?1:2}(o,t):r[o.level].func(o,t);if(3!==p&&4!==p||(o.status=666),1===p||3===p)return 0===e.avail_out&&(o.last_flush=-1),c;if(2===p&&(1===t?i._tr_align(o):5!==t&&(i._tr_stored_block(o,0,0,!1),3===t&&(x(o.head),0===o.lookahead&&(o.strstart=0,o.block_start=0,o.insert=0))),T(e),0===e.avail_out))return o.last_flush=-1,c}return 4!==t?c:o.wrap<=0?1:(2===o.wrap?(R(o,255&e.adler),R(o,e.adler>>8&255),R(o,e.adler>>16&255),R(o,e.adler>>24&255),R(o,255&e.total_in),R(o,e.total_in>>8&255),R(o,e.total_in>>16&255),R(o,e.total_in>>24&255)):(N(o,e.adler>>>16),N(o,65535&e.adler)),T(e),0<o.wrap&&(o.wrap=-o.wrap),0!==o.pending?c:1)},n.deflateEnd=function(e){var t;return e&&e.state?(t=e.state.status)!==_&&69!==t&&73!==t&&91!==t&&103!==t&&t!==S&&666!==t?k(e,d):(e.state=null,t===S?k(e,-3):c):d},n.deflateSetDictionary=function(e,t){var n,r,i,s,l,u,f,h,p=t.length;if(!e||!e.state)return d;if(2===(s=(n=e.state).wrap)||1===s&&n.status!==_||n.lookahead)return d;for(1===s&&(e.adler=a(e.adler,t,p,0)),n.wrap=0,p>=n.w_size&&(0===s&&(x(n.head),n.strstart=0,n.block_start=0,n.insert=0),h=new o.Buf8(n.w_size),o.arraySet(h,t,p-n.w_size,n.w_size,0),t=h,p=n.w_size),l=e.avail_in,u=e.next_in,f=e.input,e.avail_in=p,e.next_in=0,e.input=t,L(n);n.lookahead>=b;){for(r=n.strstart,i=n.lookahead-(b-1);n.ins_h=(n.ins_h<<n.hash_shift^n.window[r+b-1])&n.hash_mask,n.prev[r&n.w_mask]=n.head[n.ins_h],n.head[n.ins_h]=r,r++,--i;);n.strstart=r,n.lookahead=b-1,L(n)}return n.strstart+=n.lookahead,n.block_start=n.strstart,n.insert=n.lookahead,n.lookahead=0,n.match_length=n.prev_length=b-1,n.match_available=0,e.next_in=u,e.input=f,e.avail_in=l,n.wrap=s,c},n.deflateInfo="pako deflate (from Nodeca project)"},{"../utils/common":41,"./adler32":43,"./crc32":45,"./messages":51,"./trees":52}],47:[function(e,t,n){"use strict";t.exports=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}},{}],48:[function(e,t,n){"use strict";t.exports=function(e,t){var n,r,o,i,a,s,l,u,c,d,f,h,p,m,v,g,y,b,A,w,_,S,k,E,x;n=e.state,r=e.next_in,E=e.input,o=r+(e.avail_in-5),i=e.next_out,x=e.output,a=i-(t-e.avail_out),s=i+(e.avail_out-257),l=n.dmax,u=n.wsize,c=n.whave,d=n.wnext,f=n.window,h=n.hold,p=n.bits,m=n.lencode,v=n.distcode,g=(1<<n.lenbits)-1,y=(1<<n.distbits)-1;e:do{p<15&&(h+=E[r++]<<p,p+=8,h+=E[r++]<<p,p+=8),b=m[h&g];t:for(;;){if(h>>>=A=b>>>24,p-=A,0==(A=b>>>16&255))x[i++]=65535&b;else{if(!(16&A)){if(0==(64&A)){b=m[(65535&b)+(h&(1<<A)-1)];continue t}if(32&A){n.mode=12;break e}e.msg="invalid literal/length code",n.mode=30;break e}w=65535&b,(A&=15)&&(p<A&&(h+=E[r++]<<p,p+=8),w+=h&(1<<A)-1,h>>>=A,p-=A),p<15&&(h+=E[r++]<<p,p+=8,h+=E[r++]<<p,p+=8),b=v[h&y];n:for(;;){if(h>>>=A=b>>>24,p-=A,!(16&(A=b>>>16&255))){if(0==(64&A)){b=v[(65535&b)+(h&(1<<A)-1)];continue n}e.msg="invalid distance code",n.mode=30;break e}if(_=65535&b,p<(A&=15)&&(h+=E[r++]<<p,(p+=8)<A&&(h+=E[r++]<<p,p+=8)),l<(_+=h&(1<<A)-1)){e.msg="invalid distance too far back",n.mode=30;break e}if(h>>>=A,p-=A,(A=i-a)<_){if(c<(A=_-A)&&n.sane){e.msg="invalid distance too far back",n.mode=30;break e}if(k=f,(S=0)===d){if(S+=u-A,A<w){for(w-=A;x[i++]=f[S++],--A;);S=i-_,k=x}}else if(d<A){if(S+=u+d-A,(A-=d)<w){for(w-=A;x[i++]=f[S++],--A;);if(S=0,d<w){for(w-=A=d;x[i++]=f[S++],--A;);S=i-_,k=x}}}else if(S+=d-A,A<w){for(w-=A;x[i++]=f[S++],--A;);S=i-_,k=x}for(;2<w;)x[i++]=k[S++],x[i++]=k[S++],x[i++]=k[S++],w-=3;w&&(x[i++]=k[S++],1<w&&(x[i++]=k[S++]))}else{for(S=i-_;x[i++]=x[S++],x[i++]=x[S++],x[i++]=x[S++],2<(w-=3););w&&(x[i++]=x[S++],1<w&&(x[i++]=x[S++]))}break}}break}}while(r<o&&i<s);r-=w=p>>3,h&=(1<<(p-=w<<3))-1,e.next_in=r,e.next_out=i,e.avail_in=r<o?o-r+5:5-(r-o),e.avail_out=i<s?s-i+257:257-(i-s),n.hold=h,n.bits=p}},{}],49:[function(e,t,n){"use strict";var r=e("../utils/common"),o=e("./adler32"),i=e("./crc32"),a=e("./inffast"),s=e("./inftrees"),l=1,u=2,c=0,d=-2,f=1,h=852,p=592;function m(e){return(e>>>24&255)+(e>>>8&65280)+((65280&e)<<8)+((255&e)<<24)}function v(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new r.Buf16(320),this.work=new r.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function g(e){var t;return e&&e.state?(t=e.state,e.total_in=e.total_out=t.total=0,e.msg="",t.wrap&&(e.adler=1&t.wrap),t.mode=f,t.last=0,t.havedict=0,t.dmax=32768,t.head=null,t.hold=0,t.bits=0,t.lencode=t.lendyn=new r.Buf32(h),t.distcode=t.distdyn=new r.Buf32(p),t.sane=1,t.back=-1,c):d}function y(e){var t;return e&&e.state?((t=e.state).wsize=0,t.whave=0,t.wnext=0,g(e)):d}function b(e,t){var n,r;return e&&e.state?(r=e.state,t<0?(n=0,t=-t):(n=1+(t>>4),t<48&&(t&=15)),t&&(t<8||15<t)?d:(null!==r.window&&r.wbits!==t&&(r.window=null),r.wrap=n,r.wbits=t,y(e))):d}function A(e,t){var n,r;return e?(r=new v,(e.state=r).window=null,(n=b(e,t))!==c&&(e.state=null),n):d}var w,_,S=!0;function k(e){if(S){var t;for(w=new r.Buf32(512),_=new r.Buf32(32),t=0;t<144;)e.lens[t++]=8;for(;t<256;)e.lens[t++]=9;for(;t<280;)e.lens[t++]=7;for(;t<288;)e.lens[t++]=8;for(s(l,e.lens,0,288,w,0,e.work,{bits:9}),t=0;t<32;)e.lens[t++]=5;s(u,e.lens,0,32,_,0,e.work,{bits:5}),S=!1}e.lencode=w,e.lenbits=9,e.distcode=_,e.distbits=5}function E(e,t,n,o){var i,a=e.state;return null===a.window&&(a.wsize=1<<a.wbits,a.wnext=0,a.whave=0,a.window=new r.Buf8(a.wsize)),o>=a.wsize?(r.arraySet(a.window,t,n-a.wsize,a.wsize,0),a.wnext=0,a.whave=a.wsize):(o<(i=a.wsize-a.wnext)&&(i=o),r.arraySet(a.window,t,n-o,i,a.wnext),(o-=i)?(r.arraySet(a.window,t,n-o,o,0),a.wnext=o,a.whave=a.wsize):(a.wnext+=i,a.wnext===a.wsize&&(a.wnext=0),a.whave<a.wsize&&(a.whave+=i))),0}n.inflateReset=y,n.inflateReset2=b,n.inflateResetKeep=g,n.inflateInit=function(e){return A(e,15)},n.inflateInit2=A,n.inflate=function(e,t){var n,h,p,v,g,y,b,A,w,_,S,x,T,C,R,N,O,L,z,B,I,P,D,M,U=0,F=new r.Buf8(4),V=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!e||!e.state||!e.output||!e.input&&0!==e.avail_in)return d;12===(n=e.state).mode&&(n.mode=13),g=e.next_out,p=e.output,b=e.avail_out,v=e.next_in,h=e.input,y=e.avail_in,A=n.hold,w=n.bits,_=y,S=b,P=c;e:for(;;)switch(n.mode){case f:if(0===n.wrap){n.mode=13;break}for(;w<16;){if(0===y)break e;y--,A+=h[v++]<<w,w+=8}if(2&n.wrap&&35615===A){F[n.check=0]=255&A,F[1]=A>>>8&255,n.check=i(n.check,F,2,0),w=A=0,n.mode=2;break}if(n.flags=0,n.head&&(n.head.done=!1),!(1&n.wrap)||(((255&A)<<8)+(A>>8))%31){e.msg="incorrect header check",n.mode=30;break}if(8!=(15&A)){e.msg="unknown compression method",n.mode=30;break}if(w-=4,I=8+(15&(A>>>=4)),0===n.wbits)n.wbits=I;else if(I>n.wbits){e.msg="invalid window size",n.mode=30;break}n.dmax=1<<I,e.adler=n.check=1,n.mode=512&A?10:12,w=A=0;break;case 2:for(;w<16;){if(0===y)break e;y--,A+=h[v++]<<w,w+=8}if(n.flags=A,8!=(255&n.flags)){e.msg="unknown compression method",n.mode=30;break}if(57344&n.flags){e.msg="unknown header flags set",n.mode=30;break}n.head&&(n.head.text=A>>8&1),512&n.flags&&(F[0]=255&A,F[1]=A>>>8&255,n.check=i(n.check,F,2,0)),w=A=0,n.mode=3;case 3:for(;w<32;){if(0===y)break e;y--,A+=h[v++]<<w,w+=8}n.head&&(n.head.time=A),512&n.flags&&(F[0]=255&A,F[1]=A>>>8&255,F[2]=A>>>16&255,F[3]=A>>>24&255,n.check=i(n.check,F,4,0)),w=A=0,n.mode=4;case 4:for(;w<16;){if(0===y)break e;y--,A+=h[v++]<<w,w+=8}n.head&&(n.head.xflags=255&A,n.head.os=A>>8),512&n.flags&&(F[0]=255&A,F[1]=A>>>8&255,n.check=i(n.check,F,2,0)),w=A=0,n.mode=5;case 5:if(1024&n.flags){for(;w<16;){if(0===y)break e;y--,A+=h[v++]<<w,w+=8}n.length=A,n.head&&(n.head.extra_len=A),512&n.flags&&(F[0]=255&A,F[1]=A>>>8&255,n.check=i(n.check,F,2,0)),w=A=0}else n.head&&(n.head.extra=null);n.mode=6;case 6:if(1024&n.flags&&(y<(x=n.length)&&(x=y),x&&(n.head&&(I=n.head.extra_len-n.length,n.head.extra||(n.head.extra=new Array(n.head.extra_len)),r.arraySet(n.head.extra,h,v,x,I)),512&n.flags&&(n.check=i(n.check,h,x,v)),y-=x,v+=x,n.length-=x),n.length))break e;n.length=0,n.mode=7;case 7:if(2048&n.flags){if(0===y)break e;for(x=0;I=h[v+x++],n.head&&I&&n.length<65536&&(n.head.name+=String.fromCharCode(I)),I&&x<y;);if(512&n.flags&&(n.check=i(n.check,h,x,v)),y-=x,v+=x,I)break e}else n.head&&(n.head.name=null);n.length=0,n.mode=8;case 8:if(4096&n.flags){if(0===y)break e;for(x=0;I=h[v+x++],n.head&&I&&n.length<65536&&(n.head.comment+=String.fromCharCode(I)),I&&x<y;);if(512&n.flags&&(n.check=i(n.check,h,x,v)),y-=x,v+=x,I)break e}else n.head&&(n.head.comment=null);n.mode=9;case 9:if(512&n.flags){for(;w<16;){if(0===y)break e;y--,A+=h[v++]<<w,w+=8}if(A!==(65535&n.check)){e.msg="header crc mismatch",n.mode=30;break}w=A=0}n.head&&(n.head.hcrc=n.flags>>9&1,n.head.done=!0),e.adler=n.check=0,n.mode=12;break;case 10:for(;w<32;){if(0===y)break e;y--,A+=h[v++]<<w,w+=8}e.adler=n.check=m(A),w=A=0,n.mode=11;case 11:if(0===n.havedict)return e.next_out=g,e.avail_out=b,e.next_in=v,e.avail_in=y,n.hold=A,n.bits=w,2;e.adler=n.check=1,n.mode=12;case 12:if(5===t||6===t)break e;case 13:if(n.last){A>>>=7&w,w-=7&w,n.mode=27;break}for(;w<3;){if(0===y)break e;y--,A+=h[v++]<<w,w+=8}switch(n.last=1&A,w-=1,3&(A>>>=1)){case 0:n.mode=14;break;case 1:if(k(n),n.mode=20,6!==t)break;A>>>=2,w-=2;break e;case 2:n.mode=17;break;case 3:e.msg="invalid block type",n.mode=30}A>>>=2,w-=2;break;case 14:for(A>>>=7&w,w-=7&w;w<32;){if(0===y)break e;y--,A+=h[v++]<<w,w+=8}if((65535&A)!=(A>>>16^65535)){e.msg="invalid stored block lengths",n.mode=30;break}if(n.length=65535&A,w=A=0,n.mode=15,6===t)break e;case 15:n.mode=16;case 16:if(x=n.length){if(y<x&&(x=y),b<x&&(x=b),0===x)break e;r.arraySet(p,h,v,x,g),y-=x,v+=x,b-=x,g+=x,n.length-=x;break}n.mode=12;break;case 17:for(;w<14;){if(0===y)break e;y--,A+=h[v++]<<w,w+=8}if(n.nlen=257+(31&A),A>>>=5,w-=5,n.ndist=1+(31&A),A>>>=5,w-=5,n.ncode=4+(15&A),A>>>=4,w-=4,286<n.nlen||30<n.ndist){e.msg="too many length or distance symbols",n.mode=30;break}n.have=0,n.mode=18;case 18:for(;n.have<n.ncode;){for(;w<3;){if(0===y)break e;y--,A+=h[v++]<<w,w+=8}n.lens[V[n.have++]]=7&A,A>>>=3,w-=3}for(;n.have<19;)n.lens[V[n.have++]]=0;if(n.lencode=n.lendyn,n.lenbits=7,D={bits:n.lenbits},P=s(0,n.lens,0,19,n.lencode,0,n.work,D),n.lenbits=D.bits,P){e.msg="invalid code lengths set",n.mode=30;break}n.have=0,n.mode=19;case 19:for(;n.have<n.nlen+n.ndist;){for(;N=(U=n.lencode[A&(1<<n.lenbits)-1])>>>16&255,O=65535&U,!((R=U>>>24)<=w);){if(0===y)break e;y--,A+=h[v++]<<w,w+=8}if(O<16)A>>>=R,w-=R,n.lens[n.have++]=O;else{if(16===O){for(M=R+2;w<M;){if(0===y)break e;y--,A+=h[v++]<<w,w+=8}if(A>>>=R,w-=R,0===n.have){e.msg="invalid bit length repeat",n.mode=30;break}I=n.lens[n.have-1],x=3+(3&A),A>>>=2,w-=2}else if(17===O){for(M=R+3;w<M;){if(0===y)break e;y--,A+=h[v++]<<w,w+=8}w-=R,I=0,x=3+(7&(A>>>=R)),A>>>=3,w-=3}else{for(M=R+7;w<M;){if(0===y)break e;y--,A+=h[v++]<<w,w+=8}w-=R,I=0,x=11+(127&(A>>>=R)),A>>>=7,w-=7}if(n.have+x>n.nlen+n.ndist){e.msg="invalid bit length repeat",n.mode=30;break}for(;x--;)n.lens[n.have++]=I}}if(30===n.mode)break;if(0===n.lens[256]){e.msg="invalid code -- missing end-of-block",n.mode=30;break}if(n.lenbits=9,D={bits:n.lenbits},P=s(l,n.lens,0,n.nlen,n.lencode,0,n.work,D),n.lenbits=D.bits,P){e.msg="invalid literal/lengths set",n.mode=30;break}if(n.distbits=6,n.distcode=n.distdyn,D={bits:n.distbits},P=s(u,n.lens,n.nlen,n.ndist,n.distcode,0,n.work,D),n.distbits=D.bits,P){e.msg="invalid distances set",n.mode=30;break}if(n.mode=20,6===t)break e;case 20:n.mode=21;case 21:if(6<=y&&258<=b){e.next_out=g,e.avail_out=b,e.next_in=v,e.avail_in=y,n.hold=A,n.bits=w,a(e,S),g=e.next_out,p=e.output,b=e.avail_out,v=e.next_in,h=e.input,y=e.avail_in,A=n.hold,w=n.bits,12===n.mode&&(n.back=-1);break}for(n.back=0;N=(U=n.lencode[A&(1<<n.lenbits)-1])>>>16&255,O=65535&U,!((R=U>>>24)<=w);){if(0===y)break e;y--,A+=h[v++]<<w,w+=8}if(N&&0==(240&N)){for(L=R,z=N,B=O;N=(U=n.lencode[B+((A&(1<<L+z)-1)>>L)])>>>16&255,O=65535&U,!(L+(R=U>>>24)<=w);){if(0===y)break e;y--,A+=h[v++]<<w,w+=8}A>>>=L,w-=L,n.back+=L}if(A>>>=R,w-=R,n.back+=R,n.length=O,0===N){n.mode=26;break}if(32&N){n.back=-1,n.mode=12;break}if(64&N){e.msg="invalid literal/length code",n.mode=30;break}n.extra=15&N,n.mode=22;case 22:if(n.extra){for(M=n.extra;w<M;){if(0===y)break e;y--,A+=h[v++]<<w,w+=8}n.length+=A&(1<<n.extra)-1,A>>>=n.extra,w-=n.extra,n.back+=n.extra}n.was=n.length,n.mode=23;case 23:for(;N=(U=n.distcode[A&(1<<n.distbits)-1])>>>16&255,O=65535&U,!((R=U>>>24)<=w);){if(0===y)break e;y--,A+=h[v++]<<w,w+=8}if(0==(240&N)){for(L=R,z=N,B=O;N=(U=n.distcode[B+((A&(1<<L+z)-1)>>L)])>>>16&255,O=65535&U,!(L+(R=U>>>24)<=w);){if(0===y)break e;y--,A+=h[v++]<<w,w+=8}A>>>=L,w-=L,n.back+=L}if(A>>>=R,w-=R,n.back+=R,64&N){e.msg="invalid distance code",n.mode=30;break}n.offset=O,n.extra=15&N,n.mode=24;case 24:if(n.extra){for(M=n.extra;w<M;){if(0===y)break e;y--,A+=h[v++]<<w,w+=8}n.offset+=A&(1<<n.extra)-1,A>>>=n.extra,w-=n.extra,n.back+=n.extra}if(n.offset>n.dmax){e.msg="invalid distance too far back",n.mode=30;break}n.mode=25;case 25:if(0===b)break e;if(x=S-b,n.offset>x){if((x=n.offset-x)>n.whave&&n.sane){e.msg="invalid distance too far back",n.mode=30;break}T=x>n.wnext?(x-=n.wnext,n.wsize-x):n.wnext-x,x>n.length&&(x=n.length),C=n.window}else C=p,T=g-n.offset,x=n.length;for(b<x&&(x=b),b-=x,n.length-=x;p[g++]=C[T++],--x;);0===n.length&&(n.mode=21);break;case 26:if(0===b)break e;p[g++]=n.length,b--,n.mode=21;break;case 27:if(n.wrap){for(;w<32;){if(0===y)break e;y--,A|=h[v++]<<w,w+=8}if(S-=b,e.total_out+=S,n.total+=S,S&&(e.adler=n.check=n.flags?i(n.check,p,S,g-S):o(n.check,p,S,g-S)),S=b,(n.flags?A:m(A))!==n.check){e.msg="incorrect data check",n.mode=30;break}w=A=0}n.mode=28;case 28:if(n.wrap&&n.flags){for(;w<32;){if(0===y)break e;y--,A+=h[v++]<<w,w+=8}if(A!==(4294967295&n.total)){e.msg="incorrect length check",n.mode=30;break}w=A=0}n.mode=29;case 29:P=1;break e;case 30:P=-3;break e;case 31:return-4;default:return d}return e.next_out=g,e.avail_out=b,e.next_in=v,e.avail_in=y,n.hold=A,n.bits=w,(n.wsize||S!==e.avail_out&&n.mode<30&&(n.mode<27||4!==t))&&E(e,e.output,e.next_out,S-e.avail_out)?(n.mode=31,-4):(_-=e.avail_in,S-=e.avail_out,e.total_in+=_,e.total_out+=S,n.total+=S,n.wrap&&S&&(e.adler=n.check=n.flags?i(n.check,p,S,e.next_out-S):o(n.check,p,S,e.next_out-S)),e.data_type=n.bits+(n.last?64:0)+(12===n.mode?128:0)+(20===n.mode||15===n.mode?256:0),(0==_&&0===S||4===t)&&P===c&&(P=-5),P)},n.inflateEnd=function(e){if(!e||!e.state)return d;var t=e.state;return t.window&&(t.window=null),e.state=null,c},n.inflateGetHeader=function(e,t){var n;return e&&e.state?0==(2&(n=e.state).wrap)?d:((n.head=t).done=!1,c):d},n.inflateSetDictionary=function(e,t){var n,r=t.length;return e&&e.state?0!==(n=e.state).wrap&&11!==n.mode?d:11===n.mode&&o(1,t,r,0)!==n.check?-3:E(e,t,r,r)?(n.mode=31,-4):(n.havedict=1,c):d},n.inflateInfo="pako inflate (from Nodeca project)"},{"../utils/common":41,"./adler32":43,"./crc32":45,"./inffast":48,"./inftrees":50}],50:[function(e,t,n){"use strict";var r=e("../utils/common"),o=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],i=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],a=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],s=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];t.exports=function(e,t,n,l,u,c,d,f){var h,p,m,v,g,y,b,A,w,_=f.bits,S=0,k=0,E=0,x=0,T=0,C=0,R=0,N=0,O=0,L=0,z=null,B=0,I=new r.Buf16(16),P=new r.Buf16(16),D=null,M=0;for(S=0;S<=15;S++)I[S]=0;for(k=0;k<l;k++)I[t[n+k]]++;for(T=_,x=15;1<=x&&0===I[x];x--);if(x<T&&(T=x),0===x)return u[c++]=20971520,u[c++]=20971520,f.bits=1,0;for(E=1;E<x&&0===I[E];E++);for(T<E&&(T=E),S=N=1;S<=15;S++)if(N<<=1,(N-=I[S])<0)return-1;if(0<N&&(0===e||1!==x))return-1;for(P[1]=0,S=1;S<15;S++)P[S+1]=P[S]+I[S];for(k=0;k<l;k++)0!==t[n+k]&&(d[P[t[n+k]]++]=k);if(y=0===e?(z=D=d,19):1===e?(z=o,B-=257,D=i,M-=257,256):(z=a,D=s,-1),S=E,g=c,R=k=L=0,m=-1,v=(O=1<<(C=T))-1,1===e&&852<O||2===e&&592<O)return 1;for(;;){for(b=S-R,w=d[k]<y?(A=0,d[k]):d[k]>y?(A=D[M+d[k]],z[B+d[k]]):(A=96,0),h=1<<S-R,E=p=1<<C;u[g+(L>>R)+(p-=h)]=b<<24|A<<16|w|0,0!==p;);for(h=1<<S-1;L&h;)h>>=1;if(0!==h?(L&=h-1,L+=h):L=0,k++,0==--I[S]){if(S===x)break;S=t[n+d[k]]}if(T<S&&(L&v)!==m){for(0===R&&(R=T),g+=E,N=1<<(C=S-R);C+R<x&&!((N-=I[C+R])<=0);)C++,N<<=1;if(O+=1<<C,1===e&&852<O||2===e&&592<O)return 1;u[m=L&v]=T<<24|C<<16|g-c|0}}return 0!==L&&(u[g+L]=S-R<<24|64<<16|0),f.bits=T,0}},{"../utils/common":41}],51:[function(e,t,n){"use strict";t.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}},{}],52:[function(e,t,n){"use strict";var r=e("../utils/common");function o(e){for(var t=e.length;0<=--t;)e[t]=0}var i=15,a=16,s=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],l=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],u=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],c=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],d=new Array(576);o(d);var f=new Array(60);o(f);var h=new Array(512);o(h);var p=new Array(256);o(p);var m=new Array(29);o(m);var v,g,y,b=new Array(30);function A(e,t,n,r,o){this.static_tree=e,this.extra_bits=t,this.extra_base=n,this.elems=r,this.max_length=o,this.has_stree=e&&e.length}function w(e,t){this.dyn_tree=e,this.max_code=0,this.stat_desc=t}function _(e){return e<256?h[e]:h[256+(e>>>7)]}function S(e,t){e.pending_buf[e.pending++]=255&t,e.pending_buf[e.pending++]=t>>>8&255}function k(e,t,n){e.bi_valid>a-n?(e.bi_buf|=t<<e.bi_valid&65535,S(e,e.bi_buf),e.bi_buf=t>>a-e.bi_valid,e.bi_valid+=n-a):(e.bi_buf|=t<<e.bi_valid&65535,e.bi_valid+=n)}function E(e,t,n){k(e,n[2*t],n[2*t+1])}function x(e,t){for(var n=0;n|=1&e,e>>>=1,n<<=1,0<--t;);return n>>>1}function T(e,t,n){var r,o,a=new Array(i+1),s=0;for(r=1;r<=i;r++)a[r]=s=s+n[r-1]<<1;for(o=0;o<=t;o++){var l=e[2*o+1];0!==l&&(e[2*o]=x(a[l]++,l))}}function C(e){var t;for(t=0;t<286;t++)e.dyn_ltree[2*t]=0;for(t=0;t<30;t++)e.dyn_dtree[2*t]=0;for(t=0;t<19;t++)e.bl_tree[2*t]=0;e.dyn_ltree[512]=1,e.opt_len=e.static_len=0,e.last_lit=e.matches=0}function R(e){8<e.bi_valid?S(e,e.bi_buf):0<e.bi_valid&&(e.pending_buf[e.pending++]=e.bi_buf),e.bi_buf=0,e.bi_valid=0}function N(e,t,n,r){var o=2*t,i=2*n;return e[o]<e[i]||e[o]===e[i]&&r[t]<=r[n]}function O(e,t,n){for(var r=e.heap[n],o=n<<1;o<=e.heap_len&&(o<e.heap_len&&N(t,e.heap[o+1],e.heap[o],e.depth)&&o++,!N(t,r,e.heap[o],e.depth));)e.heap[n]=e.heap[o],n=o,o<<=1;e.heap[n]=r}function L(e,t,n){var r,o,i,a,u=0;if(0!==e.last_lit)for(;r=e.pending_buf[e.d_buf+2*u]<<8|e.pending_buf[e.d_buf+2*u+1],o=e.pending_buf[e.l_buf+u],u++,0===r?E(e,o,t):(E(e,(i=p[o])+256+1,t),0!==(a=s[i])&&k(e,o-=m[i],a),E(e,i=_(--r),n),0!==(a=l[i])&&k(e,r-=b[i],a)),u<e.last_lit;);E(e,256,t)}function z(e,t){var n,r,o,a=t.dyn_tree,s=t.stat_desc.static_tree,l=t.stat_desc.has_stree,u=t.stat_desc.elems,c=-1;for(e.heap_len=0,e.heap_max=573,n=0;n<u;n++)0!==a[2*n]?(e.heap[++e.heap_len]=c=n,e.depth[n]=0):a[2*n+1]=0;for(;e.heap_len<2;)a[2*(o=e.heap[++e.heap_len]=c<2?++c:0)]=1,e.depth[o]=0,e.opt_len--,l&&(e.static_len-=s[2*o+1]);for(t.max_code=c,n=e.heap_len>>1;1<=n;n--)O(e,a,n);for(o=u;n=e.heap[1],e.heap[1]=e.heap[e.heap_len--],O(e,a,1),r=e.heap[1],e.heap[--e.heap_max]=n,e.heap[--e.heap_max]=r,a[2*o]=a[2*n]+a[2*r],e.depth[o]=(e.depth[n]>=e.depth[r]?e.depth[n]:e.depth[r])+1,a[2*n+1]=a[2*r+1]=o,e.heap[1]=o++,O(e,a,1),2<=e.heap_len;);e.heap[--e.heap_max]=e.heap[1],function(e,t){var n,r,o,a,s,l,u=t.dyn_tree,c=t.max_code,d=t.stat_desc.static_tree,f=t.stat_desc.has_stree,h=t.stat_desc.extra_bits,p=t.stat_desc.extra_base,m=t.stat_desc.max_length,v=0;for(a=0;a<=i;a++)e.bl_count[a]=0;for(u[2*e.heap[e.heap_max]+1]=0,n=e.heap_max+1;n<573;n++)m<(a=u[2*u[2*(r=e.heap[n])+1]+1]+1)&&(a=m,v++),u[2*r+1]=a,c<r||(e.bl_count[a]++,s=0,p<=r&&(s=h[r-p]),l=u[2*r],e.opt_len+=l*(a+s),f&&(e.static_len+=l*(d[2*r+1]+s)));if(0!==v){do{for(a=m-1;0===e.bl_count[a];)a--;e.bl_count[a]--,e.bl_count[a+1]+=2,e.bl_count[m]--,v-=2}while(0<v);for(a=m;0!==a;a--)for(r=e.bl_count[a];0!==r;)c<(o=e.heap[--n])||(u[2*o+1]!==a&&(e.opt_len+=(a-u[2*o+1])*u[2*o],u[2*o+1]=a),r--)}}(e,t),T(a,c,e.bl_count)}function B(e,t,n){var r,o,i=-1,a=t[1],s=0,l=7,u=4;for(0===a&&(l=138,u=3),t[2*(n+1)+1]=65535,r=0;r<=n;r++)o=a,a=t[2*(r+1)+1],++s<l&&o===a||(s<u?e.bl_tree[2*o]+=s:0!==o?(o!==i&&e.bl_tree[2*o]++,e.bl_tree[32]++):s<=10?e.bl_tree[34]++:e.bl_tree[36]++,i=o,u=(s=0)===a?(l=138,3):o===a?(l=6,3):(l=7,4))}function I(e,t,n){var r,o,i=-1,a=t[1],s=0,l=7,u=4;for(0===a&&(l=138,u=3),r=0;r<=n;r++)if(o=a,a=t[2*(r+1)+1],!(++s<l&&o===a)){if(s<u)for(;E(e,o,e.bl_tree),0!=--s;);else 0!==o?(o!==i&&(E(e,o,e.bl_tree),s--),E(e,16,e.bl_tree),k(e,s-3,2)):s<=10?(E(e,17,e.bl_tree),k(e,s-3,3)):(E(e,18,e.bl_tree),k(e,s-11,7));i=o,u=(s=0)===a?(l=138,3):o===a?(l=6,3):(l=7,4)}}o(b);var P=!1;function D(e,t,n,o){var i,a,s;k(e,0+(o?1:0),3),a=t,s=n,R(i=e),S(i,s),S(i,~s),r.arraySet(i.pending_buf,i.window,a,s,i.pending),i.pending+=s}n._tr_init=function(e){P||(function(){var e,t,n,r,o,a=new Array(i+1);for(r=n=0;r<28;r++)for(m[r]=n,e=0;e<1<<s[r];e++)p[n++]=r;for(p[n-1]=r,r=o=0;r<16;r++)for(b[r]=o,e=0;e<1<<l[r];e++)h[o++]=r;for(o>>=7;r<30;r++)for(b[r]=o<<7,e=0;e<1<<l[r]-7;e++)h[256+o++]=r;for(t=0;t<=i;t++)a[t]=0;for(e=0;e<=143;)d[2*e+1]=8,e++,a[8]++;for(;e<=255;)d[2*e+1]=9,e++,a[9]++;for(;e<=279;)d[2*e+1]=7,e++,a[7]++;for(;e<=287;)d[2*e+1]=8,e++,a[8]++;for(T(d,287,a),e=0;e<30;e++)f[2*e+1]=5,f[2*e]=x(e,5);v=new A(d,s,257,286,i),g=new A(f,l,0,30,i),y=new A(new Array(0),u,0,19,7)}(),P=!0),e.l_desc=new w(e.dyn_ltree,v),e.d_desc=new w(e.dyn_dtree,g),e.bl_desc=new w(e.bl_tree,y),e.bi_buf=0,e.bi_valid=0,C(e)},n._tr_stored_block=D,n._tr_flush_block=function(e,t,n,r){var o,i,a=0;0<e.level?(2===e.strm.data_type&&(e.strm.data_type=function(e){var t,n=4093624447;for(t=0;t<=31;t++,n>>>=1)if(1&n&&0!==e.dyn_ltree[2*t])return 0;if(0!==e.dyn_ltree[18]||0!==e.dyn_ltree[20]||0!==e.dyn_ltree[26])return 1;for(t=32;t<256;t++)if(0!==e.dyn_ltree[2*t])return 1;return 0}(e)),z(e,e.l_desc),z(e,e.d_desc),a=function(e){var t;for(B(e,e.dyn_ltree,e.l_desc.max_code),B(e,e.dyn_dtree,e.d_desc.max_code),z(e,e.bl_desc),t=18;3<=t&&0===e.bl_tree[2*c[t]+1];t--);return e.opt_len+=3*(t+1)+5+5+4,t}(e),o=e.opt_len+3+7>>>3,(i=e.static_len+3+7>>>3)<=o&&(o=i)):o=i=n+5,n+4<=o&&-1!==t?D(e,t,n,r):4===e.strategy||i===o?(k(e,2+(r?1:0),3),L(e,d,f)):(k(e,4+(r?1:0),3),function(e,t,n,r){var o;for(k(e,t-257,5),k(e,n-1,5),k(e,r-4,4),o=0;o<r;o++)k(e,e.bl_tree[2*c[o]+1],3);I(e,e.dyn_ltree,t-1),I(e,e.dyn_dtree,n-1)}(e,e.l_desc.max_code+1,e.d_desc.max_code+1,a+1),L(e,e.dyn_ltree,e.dyn_dtree)),C(e),r&&R(e)},n._tr_tally=function(e,t,n){return e.pending_buf[e.d_buf+2*e.last_lit]=t>>>8&255,e.pending_buf[e.d_buf+2*e.last_lit+1]=255&t,e.pending_buf[e.l_buf+e.last_lit]=255&n,e.last_lit++,0===t?e.dyn_ltree[2*n]++:(e.matches++,t--,e.dyn_ltree[2*(p[n]+256+1)]++,e.dyn_dtree[2*_(t)]++),e.last_lit===e.lit_bufsize-1},n._tr_align=function(e){var t;k(e,2,3),E(e,256,d),16===(t=e).bi_valid?(S(t,t.bi_buf),t.bi_buf=0,t.bi_valid=0):8<=t.bi_valid&&(t.pending_buf[t.pending++]=255&t.bi_buf,t.bi_buf>>=8,t.bi_valid-=8)}},{"../utils/common":41}],53:[function(e,t,n){"use strict";t.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}},{}],54:[function(e,t,n){"use strict";t.exports="function"==typeof setImmediate?setImmediate:function(){var e=[].slice.apply(arguments);e.splice(1,0,0),setTimeout.apply(null,e)}},{}]},{},[10])(10)}))}).call(this,void 0!==n?n:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}]},{},[1])(1)}))}).call(this,void 0!==n?n:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}]},{},[1])(1)}))}).call(this,void 0!==n?n:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}]},{},[1])(1)}))}).call(this,void 0!==n?n:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}]},{},[1])(1)}))}).call(this,void 0!==n?n:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}]},{},[1])(1)}))}).call(this,void 0!==n?n:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}]},{},[1])(1)}))}).call(this,void 0!==n?n:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}]},{},[1])(1)}))}).call(this,void 0!==n?n:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}]},{},[1])(1)}))}).call(this,void 0!==n?n:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}]},{},[1])(1)}))}).call(this,void 0!==n?n:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}]},{},[1])(1)}))}).call(this,void 0!==n?n:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}]},{},[1])(1)}))}).call(this,void 0!==n?n:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}]},{},[1])(1)}))}).call(this,void 0!==n?n:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}]},{},[1])(1)}))}).call(this,void 0!==n?n:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}]},{},[1])(1)}))}).call(this,void 0!==n?n:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}]},{},[1])(1)}))}).call(this,void 0!==n?n:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}]},{},[1])(1)}))}).call(this,void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}]},{},[1])(1)},448:(e,t,n)=>{"use strict";var r=n(294),o=n(840);function i(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var a=new Set,s={};function l(e,t){u(e,t),u(e+"Capture",t)}function u(e,t){for(s[e]=t,e=0;e<t.length;e++)a.add(t[e])}var c=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=Object.prototype.hasOwnProperty,f=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,h={},p={};function m(e,t,n,r,o,i,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i,this.removeEmptyString=a}var v={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){v[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];v[t]=new m(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){v[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){v[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){v[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){v[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){v[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){v[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){v[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var g=/[\-:]([a-z])/g;function y(e){return e[1].toUpperCase()}function b(e,t,n,r){var o=v.hasOwnProperty(t)?v[t]:null;(null!==o?0!==o.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!d.call(p,e)||!d.call(h,e)&&(f.test(e)?p[e]=!0:(h[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(g,y);v[t]=new m(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(g,y);v[t]=new m(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(g,y);v[t]=new m(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){v[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),v.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){v[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var A=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,w=Symbol.for("react.element"),_=Symbol.for("react.portal"),S=Symbol.for("react.fragment"),k=Symbol.for("react.strict_mode"),E=Symbol.for("react.profiler"),x=Symbol.for("react.provider"),T=Symbol.for("react.context"),C=Symbol.for("react.forward_ref"),R=Symbol.for("react.suspense"),N=Symbol.for("react.suspense_list"),O=Symbol.for("react.memo"),L=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var z=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var B=Symbol.iterator;function I(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=B&&e[B]||e["@@iterator"])?e:null}var P,D=Object.assign;function M(e){if(void 0===P)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);P=t&&t[1]||""}return"\n"+P+e}var U=!1;function F(e,t){if(!e||U)return"";U=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var o=t.stack.split("\n"),i=r.stack.split("\n"),a=o.length-1,s=i.length-1;1<=a&&0<=s&&o[a]!==i[s];)s--;for(;1<=a&&0<=s;a--,s--)if(o[a]!==i[s]){if(1!==a||1!==s)do{if(a--,0>--s||o[a]!==i[s]){var l="\n"+o[a].replace(" at new "," at ");return e.displayName&&l.includes("<anonymous>")&&(l=l.replace("<anonymous>",e.displayName)),l}}while(1<=a&&0<=s);break}}}finally{U=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?M(e):""}function V(e){switch(e.tag){case 5:return M(e.type);case 16:return M("Lazy");case 13:return M("Suspense");case 19:return M("SuspenseList");case 0:case 2:case 15:return e=F(e.type,!1);case 11:return e=F(e.type.render,!1);case 1:return e=F(e.type,!0);default:return""}}function j(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case S:return"Fragment";case _:return"Portal";case E:return"Profiler";case k:return"StrictMode";case R:return"Suspense";case N:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case T:return(e.displayName||"Context")+".Consumer";case x:return(e._context.displayName||"Context")+".Provider";case C:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case O:return null!==(t=e.displayName||null)?t:j(e.type)||"Memo";case L:t=e._payload,e=e._init;try{return j(e(t))}catch(e){}}return null}function W(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return j(t);case 8:return t===k?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function $(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function H(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Z(e){e._valueTracker||(e._valueTracker=function(e){var t=H(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function q(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=H(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function G(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function K(e,t){var n=t.checked;return D({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Q(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=$(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Y(e,t){null!=(t=t.checked)&&b(e,"checked",t,!1)}function J(e,t){Y(e,t);var n=$(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,$(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function X(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&G(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+$(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(i(91));return D({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function oe(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(i(92));if(te(n)){if(1<n.length)throw Error(i(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:$(n)}}function ie(e,t){var n=$(t.value),r=$(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ae(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function se(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function le(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?se(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ue,ce,de=(ce=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((ue=ue||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ue.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ce(e,t)}))}:ce);function fe(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var he={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},pe=["Webkit","ms","Moz","O"];function me(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||he.hasOwnProperty(e)&&he[e]?(""+t).trim():t+"px"}function ve(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=me(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(he).forEach((function(e){pe.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),he[t]=he[e]}))}));var ge=D({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ye(e,t){if(t){if(ge[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(i(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(i(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(i(62))}}function be(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Ae=null;function we(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var _e=null,Se=null,ke=null;function Ee(e){if(e=Ao(e)){if("function"!=typeof _e)throw Error(i(280));var t=e.stateNode;t&&(t=_o(t),_e(e.stateNode,e.type,t))}}function xe(e){Se?ke?ke.push(e):ke=[e]:Se=e}function Te(){if(Se){var e=Se,t=ke;if(ke=Se=null,Ee(e),t)for(e=0;e<t.length;e++)Ee(t[e])}}function Ce(e,t){return e(t)}function Re(){}var Ne=!1;function Oe(e,t,n){if(Ne)return e(t,n);Ne=!0;try{return Ce(e,t,n)}finally{Ne=!1,(null!==Se||null!==ke)&&(Re(),Te())}}function Le(e,t){var n=e.stateNode;if(null===n)return null;var r=_o(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(i(231,t,typeof n));return n}var ze=!1;if(c)try{var Be={};Object.defineProperty(Be,"passive",{get:function(){ze=!0}}),window.addEventListener("test",Be,Be),window.removeEventListener("test",Be,Be)}catch(ce){ze=!1}function Ie(e,t,n,r,o,i,a,s,l){var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(e){this.onError(e)}}var Pe=!1,De=null,Me=!1,Ue=null,Fe={onError:function(e){Pe=!0,De=e}};function Ve(e,t,n,r,o,i,a,s,l){Pe=!1,De=null,Ie.apply(Fe,arguments)}function je(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function We(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function $e(e){if(je(e)!==e)throw Error(i(188))}function He(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=je(e)))throw Error(i(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(r=o.return)){n=r;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===n)return $e(o),e;if(a===r)return $e(o),t;a=a.sibling}throw Error(i(188))}if(n.return!==r.return)n=o,r=a;else{for(var s=!1,l=o.child;l;){if(l===n){s=!0,n=o,r=a;break}if(l===r){s=!0,r=o,n=a;break}l=l.sibling}if(!s){for(l=a.child;l;){if(l===n){s=!0,n=a,r=o;break}if(l===r){s=!0,r=a,n=o;break}l=l.sibling}if(!s)throw Error(i(189))}}if(n.alternate!==r)throw Error(i(190))}if(3!==n.tag)throw Error(i(188));return n.stateNode.current===n?e:t}(e))?Ze(e):null}function Ze(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=Ze(e);if(null!==t)return t;e=e.sibling}return null}var qe=o.unstable_scheduleCallback,Ge=o.unstable_cancelCallback,Ke=o.unstable_shouldYield,Qe=o.unstable_requestPaint,Ye=o.unstable_now,Je=o.unstable_getCurrentPriorityLevel,Xe=o.unstable_ImmediatePriority,et=o.unstable_UserBlockingPriority,tt=o.unstable_NormalPriority,nt=o.unstable_LowPriority,rt=o.unstable_IdlePriority,ot=null,it=null;var at=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(st(e)/lt|0)|0},st=Math.log,lt=Math.LN2;var ut=64,ct=4194304;function dt(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function ft(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,o=e.suspendedLanes,i=e.pingedLanes,a=268435455&n;if(0!==a){var s=a&~o;0!==s?r=dt(s):0!==(i&=a)&&(r=dt(i))}else 0!==(a=n&~o)?r=dt(a):0!==i&&(r=dt(i));if(0===r)return 0;if(0!==t&&t!==r&&0==(t&o)&&((o=r&-r)>=(i=t&-t)||16===o&&0!=(4194240&i)))return t;if(0!=(4&r)&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-at(t)),r|=e[n],t&=~o;return r}function ht(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function pt(e){return 0!==(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function mt(){var e=ut;return 0==(4194240&(ut<<=1))&&(ut=64),e}function vt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function gt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-at(t)]=n}function yt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-at(n),o=1<<r;o&t|e[r]&t&&(e[r]|=t),n&=~o}}var bt=0;function At(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var wt,_t,St,kt,Et,xt=!1,Tt=[],Ct=null,Rt=null,Nt=null,Ot=new Map,Lt=new Map,zt=[],Bt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function It(e,t){switch(e){case"focusin":case"focusout":Ct=null;break;case"dragenter":case"dragleave":Rt=null;break;case"mouseover":case"mouseout":Nt=null;break;case"pointerover":case"pointerout":Ot.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Lt.delete(t.pointerId)}}function Pt(e,t,n,r,o,i){return null===e||e.nativeEvent!==i?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:i,targetContainers:[o]},null!==t&&(null!==(t=Ao(t))&&_t(t)),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function Dt(e){var t=bo(e.target);if(null!==t){var n=je(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=We(n)))return e.blockedOn=t,void Et(e.priority,(function(){St(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Mt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Kt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=Ao(n))&&_t(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);Ae=r,n.target.dispatchEvent(r),Ae=null,t.shift()}return!0}function Ut(e,t,n){Mt(e)&&n.delete(t)}function Ft(){xt=!1,null!==Ct&&Mt(Ct)&&(Ct=null),null!==Rt&&Mt(Rt)&&(Rt=null),null!==Nt&&Mt(Nt)&&(Nt=null),Ot.forEach(Ut),Lt.forEach(Ut)}function Vt(e,t){e.blockedOn===t&&(e.blockedOn=null,xt||(xt=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,Ft)))}function jt(e){function t(t){return Vt(t,e)}if(0<Tt.length){Vt(Tt[0],e);for(var n=1;n<Tt.length;n++){var r=Tt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==Ct&&Vt(Ct,e),null!==Rt&&Vt(Rt,e),null!==Nt&&Vt(Nt,e),Ot.forEach(t),Lt.forEach(t),n=0;n<zt.length;n++)(r=zt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<zt.length&&null===(n=zt[0]).blockedOn;)Dt(n),null===n.blockedOn&&zt.shift()}var Wt=A.ReactCurrentBatchConfig,$t=!0;function Ht(e,t,n,r){var o=bt,i=Wt.transition;Wt.transition=null;try{bt=1,qt(e,t,n,r)}finally{bt=o,Wt.transition=i}}function Zt(e,t,n,r){var o=bt,i=Wt.transition;Wt.transition=null;try{bt=4,qt(e,t,n,r)}finally{bt=o,Wt.transition=i}}function qt(e,t,n,r){if($t){var o=Kt(e,t,n,r);if(null===o)$r(e,t,r,Gt,n),It(e,r);else if(function(e,t,n,r,o){switch(t){case"focusin":return Ct=Pt(Ct,e,t,n,r,o),!0;case"dragenter":return Rt=Pt(Rt,e,t,n,r,o),!0;case"mouseover":return Nt=Pt(Nt,e,t,n,r,o),!0;case"pointerover":var i=o.pointerId;return Ot.set(i,Pt(Ot.get(i)||null,e,t,n,r,o)),!0;case"gotpointercapture":return i=o.pointerId,Lt.set(i,Pt(Lt.get(i)||null,e,t,n,r,o)),!0}return!1}(o,e,t,n,r))r.stopPropagation();else if(It(e,r),4&t&&-1<Bt.indexOf(e)){for(;null!==o;){var i=Ao(o);if(null!==i&&wt(i),null===(i=Kt(e,t,n,r))&&$r(e,t,r,Gt,n),i===o)break;o=i}null!==o&&r.stopPropagation()}else $r(e,t,r,null,n)}}var Gt=null;function Kt(e,t,n,r){if(Gt=null,null!==(e=bo(e=we(r))))if(null===(t=je(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=We(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Gt=e,null}function Qt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Je()){case Xe:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Yt=null,Jt=null,Xt=null;function en(){if(Xt)return Xt;var e,t,n=Jt,r=n.length,o="value"in Yt?Yt.value:Yt.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return Xt=o.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function on(e){function t(t,n,r,o,i){for(var a in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=i,this.currentTarget=null,e)e.hasOwnProperty(a)&&(t=e[a],this[a]=t?t(o):o[a]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return D(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var an,sn,ln,un={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},cn=on(un),dn=D({},un,{view:0,detail:0}),fn=on(dn),hn=D({},dn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:En,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==ln&&(ln&&"mousemove"===e.type?(an=e.screenX-ln.screenX,sn=e.screenY-ln.screenY):sn=an=0,ln=e),an)},movementY:function(e){return"movementY"in e?e.movementY:sn}}),pn=on(hn),mn=on(D({},hn,{dataTransfer:0})),vn=on(D({},dn,{relatedTarget:0})),gn=on(D({},un,{animationName:0,elapsedTime:0,pseudoElement:0})),yn=D({},un,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),bn=on(yn),An=on(D({},un,{data:0})),wn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},_n={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Sn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function kn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Sn[e])&&!!t[e]}function En(){return kn}var xn=D({},dn,{key:function(e){if(e.key){var t=wn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?_n[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:En,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Tn=on(xn),Cn=on(D({},hn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Rn=on(D({},dn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:En})),Nn=on(D({},un,{propertyName:0,elapsedTime:0,pseudoElement:0})),On=D({},hn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Ln=on(On),zn=[9,13,27,32],Bn=c&&"CompositionEvent"in window,In=null;c&&"documentMode"in document&&(In=document.documentMode);var Pn=c&&"TextEvent"in window&&!In,Dn=c&&(!Bn||In&&8<In&&11>=In),Mn=String.fromCharCode(32),Un=!1;function Fn(e,t){switch(e){case"keyup":return-1!==zn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Vn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var jn=!1;var Wn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function $n(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Wn[e.type]:"textarea"===t}function Hn(e,t,n,r){xe(r),0<(t=Zr(t,"onChange")).length&&(n=new cn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Zn=null,qn=null;function Gn(e){Mr(e,0)}function Kn(e){if(q(wo(e)))return e}function Qn(e,t){if("change"===e)return t}var Yn=!1;if(c){var Jn;if(c){var Xn="oninput"in document;if(!Xn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Xn="function"==typeof er.oninput}Jn=Xn}else Jn=!1;Yn=Jn&&(!document.documentMode||9<document.documentMode)}function tr(){Zn&&(Zn.detachEvent("onpropertychange",nr),qn=Zn=null)}function nr(e){if("value"===e.propertyName&&Kn(qn)){var t=[];Hn(t,qn,e,we(e)),Oe(Gn,t)}}function rr(e,t,n){"focusin"===e?(tr(),qn=n,(Zn=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function or(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Kn(qn)}function ir(e,t){if("click"===e)return Kn(t)}function ar(e,t){if("input"===e||"change"===e)return Kn(t)}var sr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function lr(e,t){if(sr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var o=n[r];if(!d.call(t,o)||!sr(e[o],t[o]))return!1}return!0}function ur(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var n,r=ur(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=ur(r)}}function dr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?dr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function fr(){for(var e=window,t=G();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=G((e=t.contentWindow).document)}return t}function hr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function pr(e){var t=fr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&dr(n.ownerDocument.documentElement,n)){if(null!==r&&hr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var o=n.textContent.length,i=Math.min(r.start,o);r=void 0===r.end?i:Math.min(r.end,o),!e.extend&&i>r&&(o=r,r=i,i=o),o=cr(n,i);var a=cr(n,r);o&&a&&(1!==e.rangeCount||e.anchorNode!==o.node||e.anchorOffset!==o.offset||e.focusNode!==a.node||e.focusOffset!==a.offset)&&((t=t.createRange()).setStart(o.node,o.offset),e.removeAllRanges(),i>r?(e.addRange(t),e.extend(a.node,a.offset)):(t.setEnd(a.node,a.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var mr=c&&"documentMode"in document&&11>=document.documentMode,vr=null,gr=null,yr=null,br=!1;function Ar(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;br||null==vr||vr!==G(r)||("selectionStart"in(r=vr)&&hr(r)?r={start:r.selectionStart,end:r.selectionEnd}:r={anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},yr&&lr(yr,r)||(yr=r,0<(r=Zr(gr,"onSelect")).length&&(t=new cn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=vr)))}function wr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var _r={animationend:wr("Animation","AnimationEnd"),animationiteration:wr("Animation","AnimationIteration"),animationstart:wr("Animation","AnimationStart"),transitionend:wr("Transition","TransitionEnd")},Sr={},kr={};function Er(e){if(Sr[e])return Sr[e];if(!_r[e])return e;var t,n=_r[e];for(t in n)if(n.hasOwnProperty(t)&&t in kr)return Sr[e]=n[t];return e}c&&(kr=document.createElement("div").style,"AnimationEvent"in window||(delete _r.animationend.animation,delete _r.animationiteration.animation,delete _r.animationstart.animation),"TransitionEvent"in window||delete _r.transitionend.transition);var xr=Er("animationend"),Tr=Er("animationiteration"),Cr=Er("animationstart"),Rr=Er("transitionend"),Nr=new Map,Or="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Lr(e,t){Nr.set(e,t),l(t,[e])}for(var zr=0;zr<Or.length;zr++){var Br=Or[zr];Lr(Br.toLowerCase(),"on"+(Br[0].toUpperCase()+Br.slice(1)))}Lr(xr,"onAnimationEnd"),Lr(Tr,"onAnimationIteration"),Lr(Cr,"onAnimationStart"),Lr("dblclick","onDoubleClick"),Lr("focusin","onFocus"),Lr("focusout","onBlur"),Lr(Rr,"onTransitionEnd"),u("onMouseEnter",["mouseout","mouseover"]),u("onMouseLeave",["mouseout","mouseover"]),u("onPointerEnter",["pointerout","pointerover"]),u("onPointerLeave",["pointerout","pointerover"]),l("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),l("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),l("onBeforeInput",["compositionend","keypress","textInput","paste"]),l("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Ir="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Pr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Ir));function Dr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,a,s,l,u){if(Ve.apply(this,arguments),Pe){if(!Pe)throw Error(i(198));var c=De;Pe=!1,De=null,Me||(Me=!0,Ue=c)}}(r,t,void 0,e),e.currentTarget=null}function Mr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var i=void 0;if(t)for(var a=r.length-1;0<=a;a--){var s=r[a],l=s.instance,u=s.currentTarget;if(s=s.listener,l!==i&&o.isPropagationStopped())break e;Dr(o,s,u),i=l}else for(a=0;a<r.length;a++){if(l=(s=r[a]).instance,u=s.currentTarget,s=s.listener,l!==i&&o.isPropagationStopped())break e;Dr(o,s,u),i=l}}}if(Me)throw e=Ue,Me=!1,Ue=null,e}function Ur(e,t){var n=t[vo];void 0===n&&(n=t[vo]=new Set);var r=e+"__bubble";n.has(r)||(Wr(t,e,2,!1),n.add(r))}function Fr(e,t,n){var r=0;t&&(r|=4),Wr(n,e,r,t)}var Vr="_reactListening"+Math.random().toString(36).slice(2);function jr(e){if(!e[Vr]){e[Vr]=!0,a.forEach((function(t){"selectionchange"!==t&&(Pr.has(t)||Fr(t,!1,e),Fr(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Vr]||(t[Vr]=!0,Fr("selectionchange",!1,t))}}function Wr(e,t,n,r){switch(Qt(t)){case 1:var o=Ht;break;case 4:o=Zt;break;default:o=qt}n=o.bind(null,t,n,e),o=void 0,!ze||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function $r(e,t,n,r,o){var i=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var a=r.tag;if(3===a||4===a){var s=r.stateNode.containerInfo;if(s===o||8===s.nodeType&&s.parentNode===o)break;if(4===a)for(a=r.return;null!==a;){var l=a.tag;if((3===l||4===l)&&((l=a.stateNode.containerInfo)===o||8===l.nodeType&&l.parentNode===o))return;a=a.return}for(;null!==s;){if(null===(a=bo(s)))return;if(5===(l=a.tag)||6===l){r=i=a;continue e}s=s.parentNode}}r=r.return}Oe((function(){var r=i,o=we(n),a=[];e:{var s=Nr.get(e);if(void 0!==s){var l=cn,u=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":l=Tn;break;case"focusin":u="focus",l=vn;break;case"focusout":u="blur",l=vn;break;case"beforeblur":case"afterblur":l=vn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=pn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=mn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=Rn;break;case xr:case Tr:case Cr:l=gn;break;case Rr:l=Nn;break;case"scroll":l=fn;break;case"wheel":l=Ln;break;case"copy":case"cut":case"paste":l=bn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=Cn}var c=0!=(4&t),d=!c&&"scroll"===e,f=c?null!==s?s+"Capture":null:s;c=[];for(var h,p=r;null!==p;){var m=(h=p).stateNode;if(5===h.tag&&null!==m&&(h=m,null!==f&&(null!=(m=Le(p,f))&&c.push(Hr(p,m,h)))),d)break;p=p.return}0<c.length&&(s=new l(s,u,null,n,o),a.push({event:s,listeners:c}))}}if(0==(7&t)){if(l="mouseout"===e||"pointerout"===e,(!(s="mouseover"===e||"pointerover"===e)||n===Ae||!(u=n.relatedTarget||n.fromElement)||!bo(u)&&!u[mo])&&(l||s)&&(s=o.window===o?o:(s=o.ownerDocument)?s.defaultView||s.parentWindow:window,l?(l=r,null!==(u=(u=n.relatedTarget||n.toElement)?bo(u):null)&&(u!==(d=je(u))||5!==u.tag&&6!==u.tag)&&(u=null)):(l=null,u=r),l!==u)){if(c=pn,m="onMouseLeave",f="onMouseEnter",p="mouse","pointerout"!==e&&"pointerover"!==e||(c=Cn,m="onPointerLeave",f="onPointerEnter",p="pointer"),d=null==l?s:wo(l),h=null==u?s:wo(u),(s=new c(m,p+"leave",l,n,o)).target=d,s.relatedTarget=h,m=null,bo(o)===r&&((c=new c(f,p+"enter",u,n,o)).target=h,c.relatedTarget=d,m=c),d=m,l&&u)e:{for(f=u,p=0,h=c=l;h;h=qr(h))p++;for(h=0,m=f;m;m=qr(m))h++;for(;0<p-h;)c=qr(c),p--;for(;0<h-p;)f=qr(f),h--;for(;p--;){if(c===f||null!==f&&c===f.alternate)break e;c=qr(c),f=qr(f)}c=null}else c=null;null!==l&&Gr(a,s,l,c,!1),null!==u&&null!==d&&Gr(a,d,u,c,!0)}if("select"===(l=(s=r?wo(r):window).nodeName&&s.nodeName.toLowerCase())||"input"===l&&"file"===s.type)var v=Qn;else if($n(s))if(Yn)v=ar;else{v=or;var g=rr}else(l=s.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===s.type||"radio"===s.type)&&(v=ir);switch(v&&(v=v(e,r))?Hn(a,v,n,o):(g&&g(e,s,r),"focusout"===e&&(g=s._wrapperState)&&g.controlled&&"number"===s.type&&ee(s,"number",s.value)),g=r?wo(r):window,e){case"focusin":($n(g)||"true"===g.contentEditable)&&(vr=g,gr=r,yr=null);break;case"focusout":yr=gr=vr=null;break;case"mousedown":br=!0;break;case"contextmenu":case"mouseup":case"dragend":br=!1,Ar(a,n,o);break;case"selectionchange":if(mr)break;case"keydown":case"keyup":Ar(a,n,o)}var y;if(Bn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else jn?Fn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Dn&&"ko"!==n.locale&&(jn||"onCompositionStart"!==b?"onCompositionEnd"===b&&jn&&(y=en()):(Jt="value"in(Yt=o)?Yt.value:Yt.textContent,jn=!0)),0<(g=Zr(r,b)).length&&(b=new An(b,e,null,n,o),a.push({event:b,listeners:g}),y?b.data=y:null!==(y=Vn(n))&&(b.data=y))),(y=Pn?function(e,t){switch(e){case"compositionend":return Vn(t);case"keypress":return 32!==t.which?null:(Un=!0,Mn);case"textInput":return(e=t.data)===Mn&&Un?null:e;default:return null}}(e,n):function(e,t){if(jn)return"compositionend"===e||!Bn&&Fn(e,t)?(e=en(),Xt=Jt=Yt=null,jn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Dn&&"ko"!==t.locale?null:t.data}}(e,n))&&(0<(r=Zr(r,"onBeforeInput")).length&&(o=new An("onBeforeInput","beforeinput",null,n,o),a.push({event:o,listeners:r}),o.data=y))}Mr(a,t)}))}function Hr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Zr(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,i=o.stateNode;5===o.tag&&null!==i&&(o=i,null!=(i=Le(e,n))&&r.unshift(Hr(e,i,o)),null!=(i=Le(e,t))&&r.push(Hr(e,i,o))),e=e.return}return r}function qr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Gr(e,t,n,r,o){for(var i=t._reactName,a=[];null!==n&&n!==r;){var s=n,l=s.alternate,u=s.stateNode;if(null!==l&&l===r)break;5===s.tag&&null!==u&&(s=u,o?null!=(l=Le(n,i))&&a.unshift(Hr(n,l,s)):o||null!=(l=Le(n,i))&&a.push(Hr(n,l,s))),n=n.return}0!==a.length&&e.push({event:t,listeners:a})}var Kr=/\r\n?/g,Qr=/\u0000|\uFFFD/g;function Yr(e){return("string"==typeof e?e:""+e).replace(Kr,"\n").replace(Qr,"")}function Jr(e,t,n){if(t=Yr(t),Yr(e)!==t&&n)throw Error(i(425))}function Xr(){}var eo=null,to=null;function no(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ro="function"==typeof setTimeout?setTimeout:void 0,oo="function"==typeof clearTimeout?clearTimeout:void 0,io="function"==typeof Promise?Promise:void 0,ao="function"==typeof queueMicrotask?queueMicrotask:void 0!==io?function(e){return io.resolve(null).then(e).catch(so)}:ro;function so(e){setTimeout((function(){throw e}))}function lo(e,t){var n=t,r=0;do{var o=n.nextSibling;if(e.removeChild(n),o&&8===o.nodeType)if("/$"===(n=o.data)){if(0===r)return e.removeChild(o),void jt(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=o}while(n);jt(t)}function uo(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function co(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var fo=Math.random().toString(36).slice(2),ho="__reactFiber$"+fo,po="__reactProps$"+fo,mo="__reactContainer$"+fo,vo="__reactEvents$"+fo,go="__reactListeners$"+fo,yo="__reactHandles$"+fo;function bo(e){var t=e[ho];if(t)return t;for(var n=e.parentNode;n;){if(t=n[mo]||n[ho]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=co(e);null!==e;){if(n=e[ho])return n;e=co(e)}return t}n=(e=n).parentNode}return null}function Ao(e){return!(e=e[ho]||e[mo])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function wo(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function _o(e){return e[po]||null}var So=[],ko=-1;function Eo(e){return{current:e}}function xo(e){0>ko||(e.current=So[ko],So[ko]=null,ko--)}function To(e,t){ko++,So[ko]=e.current,e.current=t}var Co={},Ro=Eo(Co),No=Eo(!1),Oo=Co;function Lo(e,t){var n=e.type.contextTypes;if(!n)return Co;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function zo(e){return null!=(e=e.childContextTypes)}function Bo(){xo(No),xo(Ro)}function Io(e,t,n){if(Ro.current!==Co)throw Error(i(168));To(Ro,t),To(No,n)}function Po(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in t))throw Error(i(108,W(e)||"Unknown",o));return D({},n,r)}function Do(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Co,Oo=Ro.current,To(Ro,e),To(No,No.current),!0}function Mo(e,t,n){var r=e.stateNode;if(!r)throw Error(i(169));n?(e=Po(e,t,Oo),r.__reactInternalMemoizedMergedChildContext=e,xo(No),xo(Ro),To(Ro,e)):xo(No),To(No,n)}var Uo=null,Fo=!1,Vo=!1;function jo(e){null===Uo?Uo=[e]:Uo.push(e)}function Wo(){if(!Vo&&null!==Uo){Vo=!0;var e=0,t=bt;try{var n=Uo;for(bt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}Uo=null,Fo=!1}catch(t){throw null!==Uo&&(Uo=Uo.slice(e+1)),qe(Xe,Wo),t}finally{bt=t,Vo=!1}}return null}var $o=[],Ho=0,Zo=null,qo=0,Go=[],Ko=0,Qo=null,Yo=1,Jo="";function Xo(e,t){$o[Ho++]=qo,$o[Ho++]=Zo,Zo=e,qo=t}function ei(e,t,n){Go[Ko++]=Yo,Go[Ko++]=Jo,Go[Ko++]=Qo,Qo=e;var r=Yo;e=Jo;var o=32-at(r)-1;r&=~(1<<o),n+=1;var i=32-at(t)+o;if(30<i){var a=o-o%5;i=(r&(1<<a)-1).toString(32),r>>=a,o-=a,Yo=1<<32-at(t)+o|n<<o|r,Jo=i+e}else Yo=1<<i|n<<o|r,Jo=e}function ti(e){null!==e.return&&(Xo(e,1),ei(e,1,0))}function ni(e){for(;e===Zo;)Zo=$o[--Ho],$o[Ho]=null,qo=$o[--Ho],$o[Ho]=null;for(;e===Qo;)Qo=Go[--Ko],Go[Ko]=null,Jo=Go[--Ko],Go[Ko]=null,Yo=Go[--Ko],Go[Ko]=null}var ri=null,oi=null,ii=!1,ai=null;function si(e,t){var n=Ou(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function li(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,ri=e,oi=uo(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,ri=e,oi=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Qo?{id:Yo,overflow:Jo}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Ou(18,null,null,0)).stateNode=t,n.return=e,e.child=n,ri=e,oi=null,!0);default:return!1}}function ui(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function ci(e){if(ii){var t=oi;if(t){var n=t;if(!li(e,t)){if(ui(e))throw Error(i(418));t=uo(n.nextSibling);var r=ri;t&&li(e,t)?si(r,n):(e.flags=-4097&e.flags|2,ii=!1,ri=e)}}else{if(ui(e))throw Error(i(418));e.flags=-4097&e.flags|2,ii=!1,ri=e}}}function di(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;ri=e}function fi(e){if(e!==ri)return!1;if(!ii)return di(e),ii=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!no(e.type,e.memoizedProps)),t&&(t=oi)){if(ui(e))throw hi(),Error(i(418));for(;t;)si(e,t),t=uo(t.nextSibling)}if(di(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){oi=uo(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}oi=null}}else oi=ri?uo(e.stateNode.nextSibling):null;return!0}function hi(){for(var e=oi;e;)e=uo(e.nextSibling)}function pi(){oi=ri=null,ii=!1}function mi(e){null===ai?ai=[e]:ai.push(e)}var vi=A.ReactCurrentBatchConfig;function gi(e,t){if(e&&e.defaultProps){for(var n in t=D({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var yi=Eo(null),bi=null,Ai=null,wi=null;function _i(){wi=Ai=bi=null}function Si(e){var t=yi.current;xo(yi),e._currentValue=t}function ki(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function Ei(e,t){bi=e,wi=Ai=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(As=!0),e.firstContext=null)}function xi(e){var t=e._currentValue;if(wi!==e)if(e={context:e,memoizedValue:t,next:null},null===Ai){if(null===bi)throw Error(i(308));Ai=e,bi.dependencies={lanes:0,firstContext:e}}else Ai=Ai.next=e;return t}var Ti=null;function Ci(e){null===Ti?Ti=[e]:Ti.push(e)}function Ri(e,t,n,r){var o=t.interleaved;return null===o?(n.next=n,Ci(t)):(n.next=o.next,o.next=n),t.interleaved=n,Ni(e,r)}function Ni(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var Oi=!1;function Li(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function zi(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Bi(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Ii(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,0!=(2&Cl)){var o=r.pending;return null===o?t.next=t:(t.next=o.next,o.next=t),r.pending=t,Ni(e,n)}return null===(o=r.interleaved)?(t.next=t,Ci(r)):(t.next=o.next,o.next=t),r.interleaved=t,Ni(e,n)}function Pi(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,0!=(4194240&n))){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,yt(e,n)}}function Di(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,i=null;if(null!==(n=n.firstBaseUpdate)){do{var a={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===i?o=i=a:i=i.next=a,n=n.next}while(null!==n);null===i?o=i=t:i=i.next=t}else o=i=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:i,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Mi(e,t,n,r){var o=e.updateQueue;Oi=!1;var i=o.firstBaseUpdate,a=o.lastBaseUpdate,s=o.shared.pending;if(null!==s){o.shared.pending=null;var l=s,u=l.next;l.next=null,null===a?i=u:a.next=u,a=l;var c=e.alternate;null!==c&&((s=(c=c.updateQueue).lastBaseUpdate)!==a&&(null===s?c.firstBaseUpdate=u:s.next=u,c.lastBaseUpdate=l))}if(null!==i){var d=o.baseState;for(a=0,c=u=l=null,s=i;;){var f=s.lane,h=s.eventTime;if((r&f)===f){null!==c&&(c=c.next={eventTime:h,lane:0,tag:s.tag,payload:s.payload,callback:s.callback,next:null});e:{var p=e,m=s;switch(f=t,h=n,m.tag){case 1:if("function"==typeof(p=m.payload)){d=p.call(h,d,f);break e}d=p;break e;case 3:p.flags=-65537&p.flags|128;case 0:if(null==(f="function"==typeof(p=m.payload)?p.call(h,d,f):p))break e;d=D({},d,f);break e;case 2:Oi=!0}}null!==s.callback&&0!==s.lane&&(e.flags|=64,null===(f=o.effects)?o.effects=[s]:f.push(s))}else h={eventTime:h,lane:f,tag:s.tag,payload:s.payload,callback:s.callback,next:null},null===c?(u=c=h,l=d):c=c.next=h,a|=f;if(null===(s=s.next)){if(null===(s=o.shared.pending))break;s=(f=s).next,f.next=null,o.lastBaseUpdate=f,o.shared.pending=null}}if(null===c&&(l=d),o.baseState=l,o.firstBaseUpdate=u,o.lastBaseUpdate=c,null!==(t=o.shared.interleaved)){o=t;do{a|=o.lane,o=o.next}while(o!==t)}else null===i&&(o.shared.lanes=0);Pl|=a,e.lanes=a,e.memoizedState=d}}function Ui(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(i(191,o));o.call(r)}}}var Fi=(new r.Component).refs;function Vi(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:D({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var ji={isMounted:function(e){return!!(e=e._reactInternals)&&je(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=eu(),o=tu(e),i=Bi(r,o);i.payload=t,null!=n&&(i.callback=n),null!==(t=Ii(e,i,o))&&(nu(t,e,o,r),Pi(t,e,o))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=eu(),o=tu(e),i=Bi(r,o);i.tag=1,i.payload=t,null!=n&&(i.callback=n),null!==(t=Ii(e,i,o))&&(nu(t,e,o,r),Pi(t,e,o))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=eu(),r=tu(e),o=Bi(n,r);o.tag=2,null!=t&&(o.callback=t),null!==(t=Ii(e,o,r))&&(nu(t,e,r,n),Pi(t,e,r))}};function Wi(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!t.prototype||!t.prototype.isPureReactComponent||(!lr(n,r)||!lr(o,i))}function $i(e,t,n){var r=!1,o=Co,i=t.contextType;return"object"==typeof i&&null!==i?i=xi(i):(o=zo(t)?Oo:Ro.current,i=(r=null!=(r=t.contextTypes))?Lo(e,o):Co),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=ji,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function Hi(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&ji.enqueueReplaceState(t,t.state,null)}function Zi(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=Fi,Li(e);var i=t.contextType;"object"==typeof i&&null!==i?o.context=xi(i):(i=zo(t)?Oo:Ro.current,o.context=Lo(e,i)),o.state=e.memoizedState,"function"==typeof(i=t.getDerivedStateFromProps)&&(Vi(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&ji.enqueueReplaceState(o,o.state,null),Mi(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4194308)}function qi(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(i(309));var r=n.stateNode}if(!r)throw Error(i(147,e));var o=r,a=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===a?t.ref:(t=function(e){var t=o.refs;t===Fi&&(t=o.refs={}),null===e?delete t[a]:t[a]=e},t._stringRef=a,t)}if("string"!=typeof e)throw Error(i(284));if(!n._owner)throw Error(i(290,e))}return e}function Gi(e,t){throw e=Object.prototype.toString.call(t),Error(i(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Ki(e){return(0,e._init)(e._payload)}function Qi(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=zu(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function s(t){return e&&null===t.alternate&&(t.flags|=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=Du(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function u(e,t,n,r){var i=n.type;return i===S?d(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===i||"object"==typeof i&&null!==i&&i.$$typeof===L&&Ki(i)===t.type)?((r=o(t,n.props)).ref=qi(e,t,n),r.return=e,r):((r=Bu(n.type,n.key,n.props,null,e.mode,r)).ref=qi(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Mu(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function d(e,t,n,r,i){return null===t||7!==t.tag?((t=Iu(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function f(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Du(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case w:return(n=Bu(t.type,t.key,t.props,null,e.mode,n)).ref=qi(e,null,t),n.return=e,n;case _:return(t=Mu(t,e.mode,n)).return=e,t;case L:return f(e,(0,t._init)(t._payload),n)}if(te(t)||I(t))return(t=Iu(t,e.mode,n,null)).return=e,t;Gi(e,t)}return null}function h(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==o?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case w:return n.key===o?u(e,t,n,r):null;case _:return n.key===o?c(e,t,n,r):null;case L:return h(e,t,(o=n._init)(n._payload),r)}if(te(n)||I(n))return null!==o?null:d(e,t,n,r,null);Gi(e,n)}return null}function p(e,t,n,r,o){if("string"==typeof r&&""!==r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case w:return u(t,e=e.get(null===r.key?n:r.key)||null,r,o);case _:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o);case L:return p(e,t,n,(0,r._init)(r._payload),o)}if(te(r)||I(r))return d(t,e=e.get(n)||null,r,o,null);Gi(t,r)}return null}function m(o,i,s,l){for(var u=null,c=null,d=i,m=i=0,v=null;null!==d&&m<s.length;m++){d.index>m?(v=d,d=null):v=d.sibling;var g=h(o,d,s[m],l);if(null===g){null===d&&(d=v);break}e&&d&&null===g.alternate&&t(o,d),i=a(g,i,m),null===c?u=g:c.sibling=g,c=g,d=v}if(m===s.length)return n(o,d),ii&&Xo(o,m),u;if(null===d){for(;m<s.length;m++)null!==(d=f(o,s[m],l))&&(i=a(d,i,m),null===c?u=d:c.sibling=d,c=d);return ii&&Xo(o,m),u}for(d=r(o,d);m<s.length;m++)null!==(v=p(d,o,m,s[m],l))&&(e&&null!==v.alternate&&d.delete(null===v.key?m:v.key),i=a(v,i,m),null===c?u=v:c.sibling=v,c=v);return e&&d.forEach((function(e){return t(o,e)})),ii&&Xo(o,m),u}function v(o,s,l,u){var c=I(l);if("function"!=typeof c)throw Error(i(150));if(null==(l=c.call(l)))throw Error(i(151));for(var d=c=null,m=s,v=s=0,g=null,y=l.next();null!==m&&!y.done;v++,y=l.next()){m.index>v?(g=m,m=null):g=m.sibling;var b=h(o,m,y.value,u);if(null===b){null===m&&(m=g);break}e&&m&&null===b.alternate&&t(o,m),s=a(b,s,v),null===d?c=b:d.sibling=b,d=b,m=g}if(y.done)return n(o,m),ii&&Xo(o,v),c;if(null===m){for(;!y.done;v++,y=l.next())null!==(y=f(o,y.value,u))&&(s=a(y,s,v),null===d?c=y:d.sibling=y,d=y);return ii&&Xo(o,v),c}for(m=r(o,m);!y.done;v++,y=l.next())null!==(y=p(m,o,v,y.value,u))&&(e&&null!==y.alternate&&m.delete(null===y.key?v:y.key),s=a(y,s,v),null===d?c=y:d.sibling=y,d=y);return e&&m.forEach((function(e){return t(o,e)})),ii&&Xo(o,v),c}return function e(r,i,a,l){if("object"==typeof a&&null!==a&&a.type===S&&null===a.key&&(a=a.props.children),"object"==typeof a&&null!==a){switch(a.$$typeof){case w:e:{for(var u=a.key,c=i;null!==c;){if(c.key===u){if((u=a.type)===S){if(7===c.tag){n(r,c.sibling),(i=o(c,a.props.children)).return=r,r=i;break e}}else if(c.elementType===u||"object"==typeof u&&null!==u&&u.$$typeof===L&&Ki(u)===c.type){n(r,c.sibling),(i=o(c,a.props)).ref=qi(r,c,a),i.return=r,r=i;break e}n(r,c);break}t(r,c),c=c.sibling}a.type===S?((i=Iu(a.props.children,r.mode,l,a.key)).return=r,r=i):((l=Bu(a.type,a.key,a.props,null,r.mode,l)).ref=qi(r,i,a),l.return=r,r=l)}return s(r);case _:e:{for(c=a.key;null!==i;){if(i.key===c){if(4===i.tag&&i.stateNode.containerInfo===a.containerInfo&&i.stateNode.implementation===a.implementation){n(r,i.sibling),(i=o(i,a.children||[])).return=r,r=i;break e}n(r,i);break}t(r,i),i=i.sibling}(i=Mu(a,r.mode,l)).return=r,r=i}return s(r);case L:return e(r,i,(c=a._init)(a._payload),l)}if(te(a))return m(r,i,a,l);if(I(a))return v(r,i,a,l);Gi(r,a)}return"string"==typeof a&&""!==a||"number"==typeof a?(a=""+a,null!==i&&6===i.tag?(n(r,i.sibling),(i=o(i,a)).return=r,r=i):(n(r,i),(i=Du(a,r.mode,l)).return=r,r=i),s(r)):n(r,i)}}var Yi=Qi(!0),Ji=Qi(!1),Xi={},ea=Eo(Xi),ta=Eo(Xi),na=Eo(Xi);function ra(e){if(e===Xi)throw Error(i(174));return e}function oa(e,t){switch(To(na,t),To(ta,e),To(ea,Xi),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:le(null,"");break;default:t=le(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}xo(ea),To(ea,t)}function ia(){xo(ea),xo(ta),xo(na)}function aa(e){ra(na.current);var t=ra(ea.current),n=le(t,e.type);t!==n&&(To(ta,e),To(ea,n))}function sa(e){ta.current===e&&(xo(ea),xo(ta))}var la=Eo(0);function ua(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var ca=[];function da(){for(var e=0;e<ca.length;e++)ca[e]._workInProgressVersionPrimary=null;ca.length=0}var fa=A.ReactCurrentDispatcher,ha=A.ReactCurrentBatchConfig,pa=0,ma=null,va=null,ga=null,ya=!1,ba=!1,Aa=0,wa=0;function _a(){throw Error(i(321))}function Sa(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!sr(e[n],t[n]))return!1;return!0}function ka(e,t,n,r,o,a){if(pa=a,ma=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,fa.current=null===e||null===e.memoizedState?ss:ls,e=n(r,o),ba){a=0;do{if(ba=!1,Aa=0,25<=a)throw Error(i(301));a+=1,ga=va=null,t.updateQueue=null,fa.current=us,e=n(r,o)}while(ba)}if(fa.current=as,t=null!==va&&null!==va.next,pa=0,ga=va=ma=null,ya=!1,t)throw Error(i(300));return e}function Ea(){var e=0!==Aa;return Aa=0,e}function xa(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ga?ma.memoizedState=ga=e:ga=ga.next=e,ga}function Ta(){if(null===va){var e=ma.alternate;e=null!==e?e.memoizedState:null}else e=va.next;var t=null===ga?ma.memoizedState:ga.next;if(null!==t)ga=t,va=e;else{if(null===e)throw Error(i(310));e={memoizedState:(va=e).memoizedState,baseState:va.baseState,baseQueue:va.baseQueue,queue:va.queue,next:null},null===ga?ma.memoizedState=ga=e:ga=ga.next=e}return ga}function Ca(e,t){return"function"==typeof t?t(e):t}function Ra(e){var t=Ta(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=va,o=r.baseQueue,a=n.pending;if(null!==a){if(null!==o){var s=o.next;o.next=a.next,a.next=s}r.baseQueue=o=a,n.pending=null}if(null!==o){a=o.next,r=r.baseState;var l=s=null,u=null,c=a;do{var d=c.lane;if((pa&d)===d)null!==u&&(u=u.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),r=c.hasEagerState?c.eagerState:e(r,c.action);else{var f={lane:d,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};null===u?(l=u=f,s=r):u=u.next=f,ma.lanes|=d,Pl|=d}c=c.next}while(null!==c&&c!==a);null===u?s=r:u.next=l,sr(r,t.memoizedState)||(As=!0),t.memoizedState=r,t.baseState=s,t.baseQueue=u,n.lastRenderedState=r}if(null!==(e=n.interleaved)){o=e;do{a=o.lane,ma.lanes|=a,Pl|=a,o=o.next}while(o!==e)}else null===o&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function Na(e){var t=Ta(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,a=t.memoizedState;if(null!==o){n.pending=null;var s=o=o.next;do{a=e(a,s.action),s=s.next}while(s!==o);sr(a,t.memoizedState)||(As=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,r]}function Oa(){}function La(e,t){var n=ma,r=Ta(),o=t(),a=!sr(r.memoizedState,o);if(a&&(r.memoizedState=o,As=!0),r=r.queue,$a(Ia.bind(null,n,r,e),[e]),r.getSnapshot!==t||a||null!==ga&&1&ga.memoizedState.tag){if(n.flags|=2048,Ua(9,Ba.bind(null,n,r,o,t),void 0,null),null===Rl)throw Error(i(349));0!=(30&pa)||za(n,t,o)}return o}function za(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=ma.updateQueue)?(t={lastEffect:null,stores:null},ma.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Ba(e,t,n,r){t.value=n,t.getSnapshot=r,Pa(t)&&Da(e)}function Ia(e,t,n){return n((function(){Pa(t)&&Da(e)}))}function Pa(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!sr(e,n)}catch(e){return!0}}function Da(e){var t=Ni(e,1);null!==t&&nu(t,e,1,-1)}function Ma(e){var t=xa();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Ca,lastRenderedState:e},t.queue=e,e=e.dispatch=ns.bind(null,ma,e),[t.memoizedState,e]}function Ua(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=ma.updateQueue)?(t={lastEffect:null,stores:null},ma.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function Fa(){return Ta().memoizedState}function Va(e,t,n,r){var o=xa();ma.flags|=e,o.memoizedState=Ua(1|t,n,void 0,void 0===r?null:r)}function ja(e,t,n,r){var o=Ta();r=void 0===r?null:r;var i=void 0;if(null!==va){var a=va.memoizedState;if(i=a.destroy,null!==r&&Sa(r,a.deps))return void(o.memoizedState=Ua(t,n,i,r))}ma.flags|=e,o.memoizedState=Ua(1|t,n,i,r)}function Wa(e,t){return Va(8390656,8,e,t)}function $a(e,t){return ja(2048,8,e,t)}function Ha(e,t){return ja(4,2,e,t)}function Za(e,t){return ja(4,4,e,t)}function qa(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Ga(e,t,n){return n=null!=n?n.concat([e]):null,ja(4,4,qa.bind(null,t,e),n)}function Ka(){}function Qa(e,t){var n=Ta();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Sa(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Ya(e,t){var n=Ta();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Sa(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Ja(e,t,n){return 0==(21&pa)?(e.baseState&&(e.baseState=!1,As=!0),e.memoizedState=n):(sr(n,t)||(n=mt(),ma.lanes|=n,Pl|=n,e.baseState=!0),t)}function Xa(e,t){var n=bt;bt=0!==n&&4>n?n:4,e(!0);var r=ha.transition;ha.transition={};try{e(!1),t()}finally{bt=n,ha.transition=r}}function es(){return Ta().memoizedState}function ts(e,t,n){var r=tu(e);if(n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},rs(e))os(t,n);else if(null!==(n=Ri(e,t,n,r))){nu(n,e,r,eu()),is(n,t,r)}}function ns(e,t,n){var r=tu(e),o={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(rs(e))os(t,o);else{var i=e.alternate;if(0===e.lanes&&(null===i||0===i.lanes)&&null!==(i=t.lastRenderedReducer))try{var a=t.lastRenderedState,s=i(a,n);if(o.hasEagerState=!0,o.eagerState=s,sr(s,a)){var l=t.interleaved;return null===l?(o.next=o,Ci(t)):(o.next=l.next,l.next=o),void(t.interleaved=o)}}catch(e){}null!==(n=Ri(e,t,o,r))&&(nu(n,e,r,o=eu()),is(n,t,r))}}function rs(e){var t=e.alternate;return e===ma||null!==t&&t===ma}function os(e,t){ba=ya=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function is(e,t,n){if(0!=(4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,yt(e,n)}}var as={readContext:xi,useCallback:_a,useContext:_a,useEffect:_a,useImperativeHandle:_a,useInsertionEffect:_a,useLayoutEffect:_a,useMemo:_a,useReducer:_a,useRef:_a,useState:_a,useDebugValue:_a,useDeferredValue:_a,useTransition:_a,useMutableSource:_a,useSyncExternalStore:_a,useId:_a,unstable_isNewReconciler:!1},ss={readContext:xi,useCallback:function(e,t){return xa().memoizedState=[e,void 0===t?null:t],e},useContext:xi,useEffect:Wa,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Va(4194308,4,qa.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Va(4194308,4,e,t)},useInsertionEffect:function(e,t){return Va(4,2,e,t)},useMemo:function(e,t){var n=xa();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=xa();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=ts.bind(null,ma,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},xa().memoizedState=e},useState:Ma,useDebugValue:Ka,useDeferredValue:function(e){return xa().memoizedState=e},useTransition:function(){var e=Ma(!1),t=e[0];return e=Xa.bind(null,e[1]),xa().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=ma,o=xa();if(ii){if(void 0===n)throw Error(i(407));n=n()}else{if(n=t(),null===Rl)throw Error(i(349));0!=(30&pa)||za(r,t,n)}o.memoizedState=n;var a={value:n,getSnapshot:t};return o.queue=a,Wa(Ia.bind(null,r,a,e),[e]),r.flags|=2048,Ua(9,Ba.bind(null,r,a,n,t),void 0,null),n},useId:function(){var e=xa(),t=Rl.identifierPrefix;if(ii){var n=Jo;t=":"+t+"R"+(n=(Yo&~(1<<32-at(Yo)-1)).toString(32)+n),0<(n=Aa++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=wa++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},ls={readContext:xi,useCallback:Qa,useContext:xi,useEffect:$a,useImperativeHandle:Ga,useInsertionEffect:Ha,useLayoutEffect:Za,useMemo:Ya,useReducer:Ra,useRef:Fa,useState:function(){return Ra(Ca)},useDebugValue:Ka,useDeferredValue:function(e){return Ja(Ta(),va.memoizedState,e)},useTransition:function(){return[Ra(Ca)[0],Ta().memoizedState]},useMutableSource:Oa,useSyncExternalStore:La,useId:es,unstable_isNewReconciler:!1},us={readContext:xi,useCallback:Qa,useContext:xi,useEffect:$a,useImperativeHandle:Ga,useInsertionEffect:Ha,useLayoutEffect:Za,useMemo:Ya,useReducer:Na,useRef:Fa,useState:function(){return Na(Ca)},useDebugValue:Ka,useDeferredValue:function(e){var t=Ta();return null===va?t.memoizedState=e:Ja(t,va.memoizedState,e)},useTransition:function(){return[Na(Ca)[0],Ta().memoizedState]},useMutableSource:Oa,useSyncExternalStore:La,useId:es,unstable_isNewReconciler:!1};function cs(e,t){try{var n="",r=t;do{n+=V(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o,digest:null}}function ds(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function fs(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var hs="function"==typeof WeakMap?WeakMap:Map;function ps(e,t,n){(n=Bi(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){$l||($l=!0,Hl=r),fs(0,t)},n}function ms(e,t,n){(n=Bi(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return r(o)},n.callback=function(){fs(0,t)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){fs(0,t),"function"!=typeof r&&(null===Zl?Zl=new Set([this]):Zl.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function vs(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new hs;var o=new Set;r.set(t,o)}else void 0===(o=r.get(t))&&(o=new Set,r.set(t,o));o.has(n)||(o.add(n),e=Eu.bind(null,e,t,n),t.then(e,e))}function gs(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function ys(e,t,n,r,o){return 0==(1&e.mode)?(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=Bi(-1,1)).tag=2,Ii(n,t,1))),n.lanes|=1),e):(e.flags|=65536,e.lanes=o,e)}var bs=A.ReactCurrentOwner,As=!1;function ws(e,t,n,r){t.child=null===e?Ji(t,null,n,r):Yi(t,e.child,n,r)}function _s(e,t,n,r,o){n=n.render;var i=t.ref;return Ei(t,o),r=ka(e,t,n,r,i,o),n=Ea(),null===e||As?(ii&&n&&ti(t),t.flags|=1,ws(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,$s(e,t,o))}function Ss(e,t,n,r,o){if(null===e){var i=n.type;return"function"!=typeof i||Lu(i)||void 0!==i.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Bu(n.type,null,r,t,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,ks(e,t,i,r,o))}if(i=e.child,0==(e.lanes&o)){var a=i.memoizedProps;if((n=null!==(n=n.compare)?n:lr)(a,r)&&e.ref===t.ref)return $s(e,t,o)}return t.flags|=1,(e=zu(i,r)).ref=t.ref,e.return=t,t.child=e}function ks(e,t,n,r,o){if(null!==e){var i=e.memoizedProps;if(lr(i,r)&&e.ref===t.ref){if(As=!1,t.pendingProps=r=i,0==(e.lanes&o))return t.lanes=e.lanes,$s(e,t,o);0!=(131072&e.flags)&&(As=!0)}}return Ts(e,t,n,r,o)}function Es(e,t,n){var r=t.pendingProps,o=r.children,i=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(0==(1&t.mode))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},To(zl,Ll),Ll|=n;else{if(0==(1073741824&n))return e=null!==i?i.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,To(zl,Ll),Ll|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==i?i.baseLanes:n,To(zl,Ll),Ll|=r}else null!==i?(r=i.baseLanes|n,t.memoizedState=null):r=n,To(zl,Ll),Ll|=r;return ws(e,t,o,n),t.child}function xs(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function Ts(e,t,n,r,o){var i=zo(n)?Oo:Ro.current;return i=Lo(t,i),Ei(t,o),n=ka(e,t,n,r,i,o),r=Ea(),null===e||As?(ii&&r&&ti(t),t.flags|=1,ws(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,$s(e,t,o))}function Cs(e,t,n,r,o){if(zo(n)){var i=!0;Do(t)}else i=!1;if(Ei(t,o),null===t.stateNode)Ws(e,t),$i(t,n,r),Zi(t,n,r,o),r=!0;else if(null===e){var a=t.stateNode,s=t.memoizedProps;a.props=s;var l=a.context,u=n.contextType;"object"==typeof u&&null!==u?u=xi(u):u=Lo(t,u=zo(n)?Oo:Ro.current);var c=n.getDerivedStateFromProps,d="function"==typeof c||"function"==typeof a.getSnapshotBeforeUpdate;d||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==r||l!==u)&&Hi(t,a,r,u),Oi=!1;var f=t.memoizedState;a.state=f,Mi(t,r,a,o),l=t.memoizedState,s!==r||f!==l||No.current||Oi?("function"==typeof c&&(Vi(t,n,c,r),l=t.memoizedState),(s=Oi||Wi(t,n,s,r,f,l,u))?(d||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.flags|=4194308)):("function"==typeof a.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=l),a.props=r,a.state=l,a.context=u,r=s):("function"==typeof a.componentDidMount&&(t.flags|=4194308),r=!1)}else{a=t.stateNode,zi(e,t),s=t.memoizedProps,u=t.type===t.elementType?s:gi(t.type,s),a.props=u,d=t.pendingProps,f=a.context,"object"==typeof(l=n.contextType)&&null!==l?l=xi(l):l=Lo(t,l=zo(n)?Oo:Ro.current);var h=n.getDerivedStateFromProps;(c="function"==typeof h||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==d||f!==l)&&Hi(t,a,r,l),Oi=!1,f=t.memoizedState,a.state=f,Mi(t,r,a,o);var p=t.memoizedState;s!==d||f!==p||No.current||Oi?("function"==typeof h&&(Vi(t,n,h,r),p=t.memoizedState),(u=Oi||Wi(t,n,u,r,f,p,l)||!1)?(c||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,p,l),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,p,l)),"function"==typeof a.componentDidUpdate&&(t.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof a.componentDidUpdate||s===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=p),a.props=r,a.state=p,a.context=l,r=u):("function"!=typeof a.componentDidUpdate||s===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),r=!1)}return Rs(e,t,n,r,i,o)}function Rs(e,t,n,r,o,i){xs(e,t);var a=0!=(128&t.flags);if(!r&&!a)return o&&Mo(t,n,!1),$s(e,t,i);r=t.stateNode,bs.current=t;var s=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&a?(t.child=Yi(t,e.child,null,i),t.child=Yi(t,null,s,i)):ws(e,t,s,i),t.memoizedState=r.state,o&&Mo(t,n,!0),t.child}function Ns(e){var t=e.stateNode;t.pendingContext?Io(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Io(0,t.context,!1),oa(e,t.containerInfo)}function Os(e,t,n,r,o){return pi(),mi(o),t.flags|=256,ws(e,t,n,r),t.child}var Ls,zs,Bs,Is={dehydrated:null,treeContext:null,retryLane:0};function Ps(e){return{baseLanes:e,cachePool:null,transitions:null}}function Ds(e,t,n){var r,o=t.pendingProps,a=la.current,s=!1,l=0!=(128&t.flags);if((r=l)||(r=(null===e||null!==e.memoizedState)&&0!=(2&a)),r?(s=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(a|=1),To(la,1&a),null===e)return ci(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&t.mode)?t.lanes=1:"$!"===e.data?t.lanes=8:t.lanes=1073741824,null):(l=o.children,e=o.fallback,s?(o=t.mode,s=t.child,l={mode:"hidden",children:l},0==(1&o)&&null!==s?(s.childLanes=0,s.pendingProps=l):s=Pu(l,o,0,null),e=Iu(e,o,n,null),s.return=t,e.return=t,s.sibling=e,t.child=s,t.child.memoizedState=Ps(n),t.memoizedState=Is,e):Ms(t,l));if(null!==(a=e.memoizedState)&&null!==(r=a.dehydrated))return function(e,t,n,r,o,a,s){if(n)return 256&t.flags?(t.flags&=-257,Us(e,t,s,r=ds(Error(i(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(a=r.fallback,o=t.mode,r=Pu({mode:"visible",children:r.children},o,0,null),(a=Iu(a,o,s,null)).flags|=2,r.return=t,a.return=t,r.sibling=a,t.child=r,0!=(1&t.mode)&&Yi(t,e.child,null,s),t.child.memoizedState=Ps(s),t.memoizedState=Is,a);if(0==(1&t.mode))return Us(e,t,s,null);if("$!"===o.data){if(r=o.nextSibling&&o.nextSibling.dataset)var l=r.dgst;return r=l,Us(e,t,s,r=ds(a=Error(i(419)),r,void 0))}if(l=0!=(s&e.childLanes),As||l){if(null!==(r=Rl)){switch(s&-s){case 4:o=2;break;case 16:o=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:o=32;break;case 536870912:o=268435456;break;default:o=0}0!==(o=0!=(o&(r.suspendedLanes|s))?0:o)&&o!==a.retryLane&&(a.retryLane=o,Ni(e,o),nu(r,e,o,-1))}return mu(),Us(e,t,s,r=ds(Error(i(421))))}return"$?"===o.data?(t.flags|=128,t.child=e.child,t=Tu.bind(null,e),o._reactRetry=t,null):(e=a.treeContext,oi=uo(o.nextSibling),ri=t,ii=!0,ai=null,null!==e&&(Go[Ko++]=Yo,Go[Ko++]=Jo,Go[Ko++]=Qo,Yo=e.id,Jo=e.overflow,Qo=t),(t=Ms(t,r.children)).flags|=4096,t)}(e,t,l,o,r,a,n);if(s){s=o.fallback,l=t.mode,r=(a=e.child).sibling;var u={mode:"hidden",children:o.children};return 0==(1&l)&&t.child!==a?((o=t.child).childLanes=0,o.pendingProps=u,t.deletions=null):(o=zu(a,u)).subtreeFlags=14680064&a.subtreeFlags,null!==r?s=zu(r,s):(s=Iu(s,l,n,null)).flags|=2,s.return=t,o.return=t,o.sibling=s,t.child=o,o=s,s=t.child,l=null===(l=e.child.memoizedState)?Ps(n):{baseLanes:l.baseLanes|n,cachePool:null,transitions:l.transitions},s.memoizedState=l,s.childLanes=e.childLanes&~n,t.memoizedState=Is,o}return e=(s=e.child).sibling,o=zu(s,{mode:"visible",children:o.children}),0==(1&t.mode)&&(o.lanes=n),o.return=t,o.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=o,t.memoizedState=null,o}function Ms(e,t){return(t=Pu({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Us(e,t,n,r){return null!==r&&mi(r),Yi(t,e.child,null,n),(e=Ms(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Fs(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),ki(e.return,t,n)}function Vs(e,t,n,r,o){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=n,i.tailMode=o)}function js(e,t,n){var r=t.pendingProps,o=r.revealOrder,i=r.tail;if(ws(e,t,r.children,n),0!=(2&(r=la.current)))r=1&r|2,t.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Fs(e,n,t);else if(19===e.tag)Fs(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(To(la,r),0==(1&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===ua(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),Vs(t,!1,o,n,i);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===ua(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}Vs(t,!0,n,null,i);break;case"together":Vs(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Ws(e,t){0==(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function $s(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Pl|=t.lanes,0==(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(n=zu(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=zu(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Hs(e,t){if(!ii)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Zs(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=14680064&o.subtreeFlags,r|=14680064&o.flags,o.return=e,o=o.sibling;else for(o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=o.subtreeFlags,r|=o.flags,o.return=e,o=o.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function qs(e,t,n){var r=t.pendingProps;switch(ni(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Zs(t),null;case 1:case 17:return zo(t.type)&&Bo(),Zs(t),null;case 3:return r=t.stateNode,ia(),xo(No),xo(Ro),da(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(fi(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&t.flags)||(t.flags|=1024,null!==ai&&(au(ai),ai=null))),Zs(t),null;case 5:sa(t);var o=ra(na.current);if(n=t.type,null!==e&&null!=t.stateNode)zs(e,t,n,r),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(i(166));return Zs(t),null}if(e=ra(ea.current),fi(t)){r=t.stateNode,n=t.type;var a=t.memoizedProps;switch(r[ho]=t,r[po]=a,e=0!=(1&t.mode),n){case"dialog":Ur("cancel",r),Ur("close",r);break;case"iframe":case"object":case"embed":Ur("load",r);break;case"video":case"audio":for(o=0;o<Ir.length;o++)Ur(Ir[o],r);break;case"source":Ur("error",r);break;case"img":case"image":case"link":Ur("error",r),Ur("load",r);break;case"details":Ur("toggle",r);break;case"input":Q(r,a),Ur("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!a.multiple},Ur("invalid",r);break;case"textarea":oe(r,a),Ur("invalid",r)}for(var l in ye(n,a),o=null,a)if(a.hasOwnProperty(l)){var u=a[l];"children"===l?"string"==typeof u?r.textContent!==u&&(!0!==a.suppressHydrationWarning&&Jr(r.textContent,u,e),o=["children",u]):"number"==typeof u&&r.textContent!==""+u&&(!0!==a.suppressHydrationWarning&&Jr(r.textContent,u,e),o=["children",""+u]):s.hasOwnProperty(l)&&null!=u&&"onScroll"===l&&Ur("scroll",r)}switch(n){case"input":Z(r),X(r,a,!0);break;case"textarea":Z(r),ae(r);break;case"select":case"option":break;default:"function"==typeof a.onClick&&(r.onclick=Xr)}r=o,t.updateQueue=r,null!==r&&(t.flags|=4)}else{l=9===o.nodeType?o:o.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=se(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=l.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=l.createElement(n,{is:r.is}):(e=l.createElement(n),"select"===n&&(l=e,r.multiple?l.multiple=!0:r.size&&(l.size=r.size))):e=l.createElementNS(e,n),e[ho]=t,e[po]=r,Ls(e,t),t.stateNode=e;e:{switch(l=be(n,r),n){case"dialog":Ur("cancel",e),Ur("close",e),o=r;break;case"iframe":case"object":case"embed":Ur("load",e),o=r;break;case"video":case"audio":for(o=0;o<Ir.length;o++)Ur(Ir[o],e);o=r;break;case"source":Ur("error",e),o=r;break;case"img":case"image":case"link":Ur("error",e),Ur("load",e),o=r;break;case"details":Ur("toggle",e),o=r;break;case"input":Q(e,r),o=K(e,r),Ur("invalid",e);break;case"option":default:o=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},o=D({},r,{value:void 0}),Ur("invalid",e);break;case"textarea":oe(e,r),o=re(e,r),Ur("invalid",e)}for(a in ye(n,o),u=o)if(u.hasOwnProperty(a)){var c=u[a];"style"===a?ve(e,c):"dangerouslySetInnerHTML"===a?null!=(c=c?c.__html:void 0)&&de(e,c):"children"===a?"string"==typeof c?("textarea"!==n||""!==c)&&fe(e,c):"number"==typeof c&&fe(e,""+c):"suppressContentEditableWarning"!==a&&"suppressHydrationWarning"!==a&&"autoFocus"!==a&&(s.hasOwnProperty(a)?null!=c&&"onScroll"===a&&Ur("scroll",e):null!=c&&b(e,a,c,l))}switch(n){case"input":Z(e),X(e,r,!1);break;case"textarea":Z(e),ae(e);break;case"option":null!=r.value&&e.setAttribute("value",""+$(r.value));break;case"select":e.multiple=!!r.multiple,null!=(a=r.value)?ne(e,!!r.multiple,a,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof o.onClick&&(e.onclick=Xr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return Zs(t),null;case 6:if(e&&null!=t.stateNode)Bs(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(i(166));if(n=ra(na.current),ra(ea.current),fi(t)){if(r=t.stateNode,n=t.memoizedProps,r[ho]=t,(a=r.nodeValue!==n)&&null!==(e=ri))switch(e.tag){case 3:Jr(r.nodeValue,n,0!=(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Jr(r.nodeValue,n,0!=(1&e.mode))}a&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[ho]=t,t.stateNode=r}return Zs(t),null;case 13:if(xo(la),r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(ii&&null!==oi&&0!=(1&t.mode)&&0==(128&t.flags))hi(),pi(),t.flags|=98560,a=!1;else if(a=fi(t),null!==r&&null!==r.dehydrated){if(null===e){if(!a)throw Error(i(318));if(!(a=null!==(a=t.memoizedState)?a.dehydrated:null))throw Error(i(317));a[ho]=t}else pi(),0==(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Zs(t),a=!1}else null!==ai&&(au(ai),ai=null),a=!0;if(!a)return 65536&t.flags?t:null}return 0!=(128&t.flags)?(t.lanes=n,t):((r=null!==r)!==(null!==e&&null!==e.memoizedState)&&r&&(t.child.flags|=8192,0!=(1&t.mode)&&(null===e||0!=(1&la.current)?0===Bl&&(Bl=3):mu())),null!==t.updateQueue&&(t.flags|=4),Zs(t),null);case 4:return ia(),null===e&&jr(t.stateNode.containerInfo),Zs(t),null;case 10:return Si(t.type._context),Zs(t),null;case 19:if(xo(la),null===(a=t.memoizedState))return Zs(t),null;if(r=0!=(128&t.flags),null===(l=a.rendering))if(r)Hs(a,!1);else{if(0!==Bl||null!==e&&0!=(128&e.flags))for(e=t.child;null!==e;){if(null!==(l=ua(e))){for(t.flags|=128,Hs(a,!1),null!==(r=l.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(a=n).flags&=14680066,null===(l=a.alternate)?(a.childLanes=0,a.lanes=e,a.child=null,a.subtreeFlags=0,a.memoizedProps=null,a.memoizedState=null,a.updateQueue=null,a.dependencies=null,a.stateNode=null):(a.childLanes=l.childLanes,a.lanes=l.lanes,a.child=l.child,a.subtreeFlags=0,a.deletions=null,a.memoizedProps=l.memoizedProps,a.memoizedState=l.memoizedState,a.updateQueue=l.updateQueue,a.type=l.type,e=l.dependencies,a.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return To(la,1&la.current|2),t.child}e=e.sibling}null!==a.tail&&Ye()>jl&&(t.flags|=128,r=!0,Hs(a,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=ua(l))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),Hs(a,!0),null===a.tail&&"hidden"===a.tailMode&&!l.alternate&&!ii)return Zs(t),null}else 2*Ye()-a.renderingStartTime>jl&&1073741824!==n&&(t.flags|=128,r=!0,Hs(a,!1),t.lanes=4194304);a.isBackwards?(l.sibling=t.child,t.child=l):(null!==(n=a.last)?n.sibling=l:t.child=l,a.last=l)}return null!==a.tail?(t=a.tail,a.rendering=t,a.tail=t.sibling,a.renderingStartTime=Ye(),t.sibling=null,n=la.current,To(la,r?1&n|2:1&n),t):(Zs(t),null);case 22:case 23:return du(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&0!=(1&t.mode)?0!=(1073741824&Ll)&&(Zs(t),6&t.subtreeFlags&&(t.flags|=8192)):Zs(t),null;case 24:case 25:return null}throw Error(i(156,t.tag))}function Gs(e,t){switch(ni(t),t.tag){case 1:return zo(t.type)&&Bo(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return ia(),xo(No),xo(Ro),da(),0!=(65536&(e=t.flags))&&0==(128&e)?(t.flags=-65537&e|128,t):null;case 5:return sa(t),null;case 13:if(xo(la),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(i(340));pi()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return xo(la),null;case 4:return ia(),null;case 10:return Si(t.type._context),null;case 22:case 23:return du(),null;default:return null}}Ls=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},zs=function(e,t,n,r){var o=e.memoizedProps;if(o!==r){e=t.stateNode,ra(ea.current);var i,a=null;switch(n){case"input":o=K(e,o),r=K(e,r),a=[];break;case"select":o=D({},o,{value:void 0}),r=D({},r,{value:void 0}),a=[];break;case"textarea":o=re(e,o),r=re(e,r),a=[];break;default:"function"!=typeof o.onClick&&"function"==typeof r.onClick&&(e.onclick=Xr)}for(c in ye(n,r),n=null,o)if(!r.hasOwnProperty(c)&&o.hasOwnProperty(c)&&null!=o[c])if("style"===c){var l=o[c];for(i in l)l.hasOwnProperty(i)&&(n||(n={}),n[i]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(s.hasOwnProperty(c)?a||(a=[]):(a=a||[]).push(c,null));for(c in r){var u=r[c];if(l=null!=o?o[c]:void 0,r.hasOwnProperty(c)&&u!==l&&(null!=u||null!=l))if("style"===c)if(l){for(i in l)!l.hasOwnProperty(i)||u&&u.hasOwnProperty(i)||(n||(n={}),n[i]="");for(i in u)u.hasOwnProperty(i)&&l[i]!==u[i]&&(n||(n={}),n[i]=u[i])}else n||(a||(a=[]),a.push(c,n)),n=u;else"dangerouslySetInnerHTML"===c?(u=u?u.__html:void 0,l=l?l.__html:void 0,null!=u&&l!==u&&(a=a||[]).push(c,u)):"children"===c?"string"!=typeof u&&"number"!=typeof u||(a=a||[]).push(c,""+u):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(s.hasOwnProperty(c)?(null!=u&&"onScroll"===c&&Ur("scroll",e),a||l===u||(a=[])):(a=a||[]).push(c,u))}n&&(a=a||[]).push("style",n);var c=a;(t.updateQueue=c)&&(t.flags|=4)}},Bs=function(e,t,n,r){n!==r&&(t.flags|=4)};var Ks=!1,Qs=!1,Ys="function"==typeof WeakSet?WeakSet:Set,Js=null;function Xs(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){ku(e,t,n)}else n.current=null}function el(e,t,n){try{n()}catch(n){ku(e,t,n)}}var tl=!1;function nl(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var o=r=r.next;do{if((o.tag&e)===e){var i=o.destroy;o.destroy=void 0,void 0!==i&&el(t,n,i)}o=o.next}while(o!==r)}}function rl(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function ol(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function il(e){var t=e.alternate;null!==t&&(e.alternate=null,il(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&(null!==(t=e.stateNode)&&(delete t[ho],delete t[po],delete t[vo],delete t[go],delete t[yo])),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function al(e){return 5===e.tag||3===e.tag||4===e.tag}function sl(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||al(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function ll(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Xr));else if(4!==r&&null!==(e=e.child))for(ll(e,t,n),e=e.sibling;null!==e;)ll(e,t,n),e=e.sibling}function ul(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(ul(e,t,n),e=e.sibling;null!==e;)ul(e,t,n),e=e.sibling}var cl=null,dl=!1;function fl(e,t,n){for(n=n.child;null!==n;)hl(e,t,n),n=n.sibling}function hl(e,t,n){if(it&&"function"==typeof it.onCommitFiberUnmount)try{it.onCommitFiberUnmount(ot,n)}catch(e){}switch(n.tag){case 5:Qs||Xs(n,t);case 6:var r=cl,o=dl;cl=null,fl(e,t,n),dl=o,null!==(cl=r)&&(dl?(e=cl,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):cl.removeChild(n.stateNode));break;case 18:null!==cl&&(dl?(e=cl,n=n.stateNode,8===e.nodeType?lo(e.parentNode,n):1===e.nodeType&&lo(e,n),jt(e)):lo(cl,n.stateNode));break;case 4:r=cl,o=dl,cl=n.stateNode.containerInfo,dl=!0,fl(e,t,n),cl=r,dl=o;break;case 0:case 11:case 14:case 15:if(!Qs&&(null!==(r=n.updateQueue)&&null!==(r=r.lastEffect))){o=r=r.next;do{var i=o,a=i.destroy;i=i.tag,void 0!==a&&(0!=(2&i)||0!=(4&i))&&el(n,t,a),o=o.next}while(o!==r)}fl(e,t,n);break;case 1:if(!Qs&&(Xs(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){ku(n,t,e)}fl(e,t,n);break;case 21:fl(e,t,n);break;case 22:1&n.mode?(Qs=(r=Qs)||null!==n.memoizedState,fl(e,t,n),Qs=r):fl(e,t,n);break;default:fl(e,t,n)}}function pl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Ys),t.forEach((function(t){var r=Cu.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function ml(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var o=n[r];try{var a=e,s=t,l=s;e:for(;null!==l;){switch(l.tag){case 5:cl=l.stateNode,dl=!1;break e;case 3:case 4:cl=l.stateNode.containerInfo,dl=!0;break e}l=l.return}if(null===cl)throw Error(i(160));hl(a,s,o),cl=null,dl=!1;var u=o.alternate;null!==u&&(u.return=null),o.return=null}catch(e){ku(o,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)vl(t,e),t=t.sibling}function vl(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(ml(t,e),gl(e),4&r){try{nl(3,e,e.return),rl(3,e)}catch(t){ku(e,e.return,t)}try{nl(5,e,e.return)}catch(t){ku(e,e.return,t)}}break;case 1:ml(t,e),gl(e),512&r&&null!==n&&Xs(n,n.return);break;case 5:if(ml(t,e),gl(e),512&r&&null!==n&&Xs(n,n.return),32&e.flags){var o=e.stateNode;try{fe(o,"")}catch(t){ku(e,e.return,t)}}if(4&r&&null!=(o=e.stateNode)){var a=e.memoizedProps,s=null!==n?n.memoizedProps:a,l=e.type,u=e.updateQueue;if(e.updateQueue=null,null!==u)try{"input"===l&&"radio"===a.type&&null!=a.name&&Y(o,a),be(l,s);var c=be(l,a);for(s=0;s<u.length;s+=2){var d=u[s],f=u[s+1];"style"===d?ve(o,f):"dangerouslySetInnerHTML"===d?de(o,f):"children"===d?fe(o,f):b(o,d,f,c)}switch(l){case"input":J(o,a);break;case"textarea":ie(o,a);break;case"select":var h=o._wrapperState.wasMultiple;o._wrapperState.wasMultiple=!!a.multiple;var p=a.value;null!=p?ne(o,!!a.multiple,p,!1):h!==!!a.multiple&&(null!=a.defaultValue?ne(o,!!a.multiple,a.defaultValue,!0):ne(o,!!a.multiple,a.multiple?[]:"",!1))}o[po]=a}catch(t){ku(e,e.return,t)}}break;case 6:if(ml(t,e),gl(e),4&r){if(null===e.stateNode)throw Error(i(162));o=e.stateNode,a=e.memoizedProps;try{o.nodeValue=a}catch(t){ku(e,e.return,t)}}break;case 3:if(ml(t,e),gl(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{jt(t.containerInfo)}catch(t){ku(e,e.return,t)}break;case 4:default:ml(t,e),gl(e);break;case 13:ml(t,e),gl(e),8192&(o=e.child).flags&&(a=null!==o.memoizedState,o.stateNode.isHidden=a,!a||null!==o.alternate&&null!==o.alternate.memoizedState||(Vl=Ye())),4&r&&pl(e);break;case 22:if(d=null!==n&&null!==n.memoizedState,1&e.mode?(Qs=(c=Qs)||d,ml(t,e),Qs=c):ml(t,e),gl(e),8192&r){if(c=null!==e.memoizedState,(e.stateNode.isHidden=c)&&!d&&0!=(1&e.mode))for(Js=e,d=e.child;null!==d;){for(f=Js=d;null!==Js;){switch(p=(h=Js).child,h.tag){case 0:case 11:case 14:case 15:nl(4,h,h.return);break;case 1:Xs(h,h.return);var m=h.stateNode;if("function"==typeof m.componentWillUnmount){r=h,n=h.return;try{t=r,m.props=t.memoizedProps,m.state=t.memoizedState,m.componentWillUnmount()}catch(e){ku(r,n,e)}}break;case 5:Xs(h,h.return);break;case 22:if(null!==h.memoizedState){wl(f);continue}}null!==p?(p.return=h,Js=p):wl(f)}d=d.sibling}e:for(d=null,f=e;;){if(5===f.tag){if(null===d){d=f;try{o=f.stateNode,c?"function"==typeof(a=o.style).setProperty?a.setProperty("display","none","important"):a.display="none":(l=f.stateNode,s=null!=(u=f.memoizedProps.style)&&u.hasOwnProperty("display")?u.display:null,l.style.display=me("display",s))}catch(t){ku(e,e.return,t)}}}else if(6===f.tag){if(null===d)try{f.stateNode.nodeValue=c?"":f.memoizedProps}catch(t){ku(e,e.return,t)}}else if((22!==f.tag&&23!==f.tag||null===f.memoizedState||f===e)&&null!==f.child){f.child.return=f,f=f.child;continue}if(f===e)break e;for(;null===f.sibling;){if(null===f.return||f.return===e)break e;d===f&&(d=null),f=f.return}d===f&&(d=null),f.sibling.return=f.return,f=f.sibling}}break;case 19:ml(t,e),gl(e),4&r&&pl(e);case 21:}}function gl(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(al(n)){var r=n;break e}n=n.return}throw Error(i(160))}switch(r.tag){case 5:var o=r.stateNode;32&r.flags&&(fe(o,""),r.flags&=-33),ul(e,sl(e),o);break;case 3:case 4:var a=r.stateNode.containerInfo;ll(e,sl(e),a);break;default:throw Error(i(161))}}catch(t){ku(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function yl(e,t,n){Js=e,bl(e,t,n)}function bl(e,t,n){for(var r=0!=(1&e.mode);null!==Js;){var o=Js,i=o.child;if(22===o.tag&&r){var a=null!==o.memoizedState||Ks;if(!a){var s=o.alternate,l=null!==s&&null!==s.memoizedState||Qs;s=Ks;var u=Qs;if(Ks=a,(Qs=l)&&!u)for(Js=o;null!==Js;)l=(a=Js).child,22===a.tag&&null!==a.memoizedState?_l(o):null!==l?(l.return=a,Js=l):_l(o);for(;null!==i;)Js=i,bl(i,t,n),i=i.sibling;Js=o,Ks=s,Qs=u}Al(e)}else 0!=(8772&o.subtreeFlags)&&null!==i?(i.return=o,Js=i):Al(e)}}function Al(e){for(;null!==Js;){var t=Js;if(0!=(8772&t.flags)){var n=t.alternate;try{if(0!=(8772&t.flags))switch(t.tag){case 0:case 11:case 15:Qs||rl(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Qs)if(null===n)r.componentDidMount();else{var o=t.elementType===t.type?n.memoizedProps:gi(t.type,n.memoizedProps);r.componentDidUpdate(o,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var a=t.updateQueue;null!==a&&Ui(t,a,r);break;case 3:var s=t.updateQueue;if(null!==s){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}Ui(t,s,n)}break;case 5:var l=t.stateNode;if(null===n&&4&t.flags){n=l;var u=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":u.autoFocus&&n.focus();break;case"img":u.src&&(n.src=u.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var c=t.alternate;if(null!==c){var d=c.memoizedState;if(null!==d){var f=d.dehydrated;null!==f&&jt(f)}}}break;default:throw Error(i(163))}Qs||512&t.flags&&ol(t)}catch(e){ku(t,t.return,e)}}if(t===e){Js=null;break}if(null!==(n=t.sibling)){n.return=t.return,Js=n;break}Js=t.return}}function wl(e){for(;null!==Js;){var t=Js;if(t===e){Js=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Js=n;break}Js=t.return}}function _l(e){for(;null!==Js;){var t=Js;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{rl(4,t)}catch(e){ku(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var o=t.return;try{r.componentDidMount()}catch(e){ku(t,o,e)}}var i=t.return;try{ol(t)}catch(e){ku(t,i,e)}break;case 5:var a=t.return;try{ol(t)}catch(e){ku(t,a,e)}}}catch(e){ku(t,t.return,e)}if(t===e){Js=null;break}var s=t.sibling;if(null!==s){s.return=t.return,Js=s;break}Js=t.return}}var Sl,kl=Math.ceil,El=A.ReactCurrentDispatcher,xl=A.ReactCurrentOwner,Tl=A.ReactCurrentBatchConfig,Cl=0,Rl=null,Nl=null,Ol=0,Ll=0,zl=Eo(0),Bl=0,Il=null,Pl=0,Dl=0,Ml=0,Ul=null,Fl=null,Vl=0,jl=1/0,Wl=null,$l=!1,Hl=null,Zl=null,ql=!1,Gl=null,Kl=0,Ql=0,Yl=null,Jl=-1,Xl=0;function eu(){return 0!=(6&Cl)?Ye():-1!==Jl?Jl:Jl=Ye()}function tu(e){return 0==(1&e.mode)?1:0!=(2&Cl)&&0!==Ol?Ol&-Ol:null!==vi.transition?(0===Xl&&(Xl=mt()),Xl):0!==(e=bt)?e:e=void 0===(e=window.event)?16:Qt(e.type)}function nu(e,t,n,r){if(50<Ql)throw Ql=0,Yl=null,Error(i(185));gt(e,n,r),0!=(2&Cl)&&e===Rl||(e===Rl&&(0==(2&Cl)&&(Dl|=n),4===Bl&&su(e,Ol)),ru(e,r),1===n&&0===Cl&&0==(1&t.mode)&&(jl=Ye()+500,Fo&&Wo()))}function ru(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,o=e.expirationTimes,i=e.pendingLanes;0<i;){var a=31-at(i),s=1<<a,l=o[a];-1===l?0!=(s&n)&&0==(s&r)||(o[a]=ht(s,t)):l<=t&&(e.expiredLanes|=s),i&=~s}}(e,t);var r=ft(e,e===Rl?Ol:0);if(0===r)null!==n&&Ge(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&Ge(n),1===t)0===e.tag?function(e){Fo=!0,jo(e)}(lu.bind(null,e)):jo(lu.bind(null,e)),ao((function(){0==(6&Cl)&&Wo()})),n=null;else{switch(At(r)){case 1:n=Xe;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=Ru(n,ou.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function ou(e,t){if(Jl=-1,Xl=0,0!=(6&Cl))throw Error(i(327));var n=e.callbackNode;if(_u()&&e.callbackNode!==n)return null;var r=ft(e,e===Rl?Ol:0);if(0===r)return null;if(0!=(30&r)||0!=(r&e.expiredLanes)||t)t=vu(e,r);else{t=r;var o=Cl;Cl|=2;var a=pu();for(Rl===e&&Ol===t||(Wl=null,jl=Ye()+500,fu(e,t));;)try{yu();break}catch(t){hu(e,t)}_i(),El.current=a,Cl=o,null!==Nl?t=0:(Rl=null,Ol=0,t=Bl)}if(0!==t){if(2===t&&(0!==(o=pt(e))&&(r=o,t=iu(e,o))),1===t)throw n=Il,fu(e,0),su(e,r),ru(e,Ye()),n;if(6===t)su(e,r);else{if(o=e.current.alternate,0==(30&r)&&!function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var o=n[r],i=o.getSnapshot;o=o.value;try{if(!sr(i(),o))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(o)&&(2===(t=vu(e,r))&&(0!==(a=pt(e))&&(r=a,t=iu(e,a))),1===t))throw n=Il,fu(e,0),su(e,r),ru(e,Ye()),n;switch(e.finishedWork=o,e.finishedLanes=r,t){case 0:case 1:throw Error(i(345));case 2:case 5:wu(e,Fl,Wl);break;case 3:if(su(e,r),(130023424&r)===r&&10<(t=Vl+500-Ye())){if(0!==ft(e,0))break;if(((o=e.suspendedLanes)&r)!==r){eu(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=ro(wu.bind(null,e,Fl,Wl),t);break}wu(e,Fl,Wl);break;case 4:if(su(e,r),(4194240&r)===r)break;for(t=e.eventTimes,o=-1;0<r;){var s=31-at(r);a=1<<s,(s=t[s])>o&&(o=s),r&=~a}if(r=o,10<(r=(120>(r=Ye()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*kl(r/1960))-r)){e.timeoutHandle=ro(wu.bind(null,e,Fl,Wl),r);break}wu(e,Fl,Wl);break;default:throw Error(i(329))}}}return ru(e,Ye()),e.callbackNode===n?ou.bind(null,e):null}function iu(e,t){var n=Ul;return e.current.memoizedState.isDehydrated&&(fu(e,t).flags|=256),2!==(e=vu(e,t))&&(t=Fl,Fl=n,null!==t&&au(t)),e}function au(e){null===Fl?Fl=e:Fl.push.apply(Fl,e)}function su(e,t){for(t&=~Ml,t&=~Dl,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-at(t),r=1<<n;e[n]=-1,t&=~r}}function lu(e){if(0!=(6&Cl))throw Error(i(327));_u();var t=ft(e,0);if(0==(1&t))return ru(e,Ye()),null;var n=vu(e,t);if(0!==e.tag&&2===n){var r=pt(e);0!==r&&(t=r,n=iu(e,r))}if(1===n)throw n=Il,fu(e,0),su(e,t),ru(e,Ye()),n;if(6===n)throw Error(i(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,wu(e,Fl,Wl),ru(e,Ye()),null}function uu(e,t){var n=Cl;Cl|=1;try{return e(t)}finally{0===(Cl=n)&&(jl=Ye()+500,Fo&&Wo())}}function cu(e){null!==Gl&&0===Gl.tag&&0==(6&Cl)&&_u();var t=Cl;Cl|=1;var n=Tl.transition,r=bt;try{if(Tl.transition=null,bt=1,e)return e()}finally{bt=r,Tl.transition=n,0==(6&(Cl=t))&&Wo()}}function du(){Ll=zl.current,xo(zl)}function fu(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,oo(n)),null!==Nl)for(n=Nl.return;null!==n;){var r=n;switch(ni(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Bo();break;case 3:ia(),xo(No),xo(Ro),da();break;case 5:sa(r);break;case 4:ia();break;case 13:case 19:xo(la);break;case 10:Si(r.type._context);break;case 22:case 23:du()}n=n.return}if(Rl=e,Nl=e=zu(e.current,null),Ol=Ll=t,Bl=0,Il=null,Ml=Dl=Pl=0,Fl=Ul=null,null!==Ti){for(t=0;t<Ti.length;t++)if(null!==(r=(n=Ti[t]).interleaved)){n.interleaved=null;var o=r.next,i=n.pending;if(null!==i){var a=i.next;i.next=o,r.next=a}n.pending=r}Ti=null}return e}function hu(e,t){for(;;){var n=Nl;try{if(_i(),fa.current=as,ya){for(var r=ma.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}ya=!1}if(pa=0,ga=va=ma=null,ba=!1,Aa=0,xl.current=null,null===n||null===n.return){Bl=1,Il=t,Nl=null;break}e:{var a=e,s=n.return,l=n,u=t;if(t=Ol,l.flags|=32768,null!==u&&"object"==typeof u&&"function"==typeof u.then){var c=u,d=l,f=d.tag;if(0==(1&d.mode)&&(0===f||11===f||15===f)){var h=d.alternate;h?(d.updateQueue=h.updateQueue,d.memoizedState=h.memoizedState,d.lanes=h.lanes):(d.updateQueue=null,d.memoizedState=null)}var p=gs(s);if(null!==p){p.flags&=-257,ys(p,s,l,0,t),1&p.mode&&vs(a,c,t),u=c;var m=(t=p).updateQueue;if(null===m){var v=new Set;v.add(u),t.updateQueue=v}else m.add(u);break e}if(0==(1&t)){vs(a,c,t),mu();break e}u=Error(i(426))}else if(ii&&1&l.mode){var g=gs(s);if(null!==g){0==(65536&g.flags)&&(g.flags|=256),ys(g,s,l,0,t),mi(cs(u,l));break e}}a=u=cs(u,l),4!==Bl&&(Bl=2),null===Ul?Ul=[a]:Ul.push(a),a=s;do{switch(a.tag){case 3:a.flags|=65536,t&=-t,a.lanes|=t,Di(a,ps(0,u,t));break e;case 1:l=u;var y=a.type,b=a.stateNode;if(0==(128&a.flags)&&("function"==typeof y.getDerivedStateFromError||null!==b&&"function"==typeof b.componentDidCatch&&(null===Zl||!Zl.has(b)))){a.flags|=65536,t&=-t,a.lanes|=t,Di(a,ms(a,l,t));break e}}a=a.return}while(null!==a)}Au(n)}catch(e){t=e,Nl===n&&null!==n&&(Nl=n=n.return);continue}break}}function pu(){var e=El.current;return El.current=as,null===e?as:e}function mu(){0!==Bl&&3!==Bl&&2!==Bl||(Bl=4),null===Rl||0==(268435455&Pl)&&0==(268435455&Dl)||su(Rl,Ol)}function vu(e,t){var n=Cl;Cl|=2;var r=pu();for(Rl===e&&Ol===t||(Wl=null,fu(e,t));;)try{gu();break}catch(t){hu(e,t)}if(_i(),Cl=n,El.current=r,null!==Nl)throw Error(i(261));return Rl=null,Ol=0,Bl}function gu(){for(;null!==Nl;)bu(Nl)}function yu(){for(;null!==Nl&&!Ke();)bu(Nl)}function bu(e){var t=Sl(e.alternate,e,Ll);e.memoizedProps=e.pendingProps,null===t?Au(e):Nl=t,xl.current=null}function Au(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(32768&t.flags)){if(null!==(n=qs(n,t,Ll)))return void(Nl=n)}else{if(null!==(n=Gs(n,t)))return n.flags&=32767,void(Nl=n);if(null===e)return Bl=6,void(Nl=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(t=t.sibling))return void(Nl=t);Nl=t=e}while(null!==t);0===Bl&&(Bl=5)}function wu(e,t,n){var r=bt,o=Tl.transition;try{Tl.transition=null,bt=1,function(e,t,n,r){do{_u()}while(null!==Gl);if(0!=(6&Cl))throw Error(i(327));n=e.finishedWork;var o=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(i(177));e.callbackNode=null,e.callbackPriority=0;var a=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var o=31-at(n),i=1<<o;t[o]=0,r[o]=-1,e[o]=-1,n&=~i}}(e,a),e===Rl&&(Nl=Rl=null,Ol=0),0==(2064&n.subtreeFlags)&&0==(2064&n.flags)||ql||(ql=!0,Ru(tt,(function(){return _u(),null}))),a=0!=(15990&n.flags),0!=(15990&n.subtreeFlags)||a){a=Tl.transition,Tl.transition=null;var s=bt;bt=1;var l=Cl;Cl|=4,xl.current=null,function(e,t){if(eo=$t,hr(e=fr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var o=r.anchorOffset,a=r.focusNode;r=r.focusOffset;try{n.nodeType,a.nodeType}catch(e){n=null;break e}var s=0,l=-1,u=-1,c=0,d=0,f=e,h=null;t:for(;;){for(var p;f!==n||0!==o&&3!==f.nodeType||(l=s+o),f!==a||0!==r&&3!==f.nodeType||(u=s+r),3===f.nodeType&&(s+=f.nodeValue.length),null!==(p=f.firstChild);)h=f,f=p;for(;;){if(f===e)break t;if(h===n&&++c===o&&(l=s),h===a&&++d===r&&(u=s),null!==(p=f.nextSibling))break;h=(f=h).parentNode}f=p}n=-1===l||-1===u?null:{start:l,end:u}}else n=null}n=n||{start:0,end:0}}else n=null;for(to={focusedElem:e,selectionRange:n},$t=!1,Js=t;null!==Js;)if(e=(t=Js).child,0!=(1028&t.subtreeFlags)&&null!==e)e.return=t,Js=e;else for(;null!==Js;){t=Js;try{var m=t.alternate;if(0!=(1024&t.flags))switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==m){var v=m.memoizedProps,g=m.memoizedState,y=t.stateNode,b=y.getSnapshotBeforeUpdate(t.elementType===t.type?v:gi(t.type,v),g);y.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var A=t.stateNode.containerInfo;1===A.nodeType?A.textContent="":9===A.nodeType&&A.documentElement&&A.removeChild(A.documentElement);break;default:throw Error(i(163))}}catch(e){ku(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Js=e;break}Js=t.return}m=tl,tl=!1}(e,n),vl(n,e),pr(to),$t=!!eo,to=eo=null,e.current=n,yl(n,e,o),Qe(),Cl=l,bt=s,Tl.transition=a}else e.current=n;if(ql&&(ql=!1,Gl=e,Kl=o),0===(a=e.pendingLanes)&&(Zl=null),function(e){if(it&&"function"==typeof it.onCommitFiberRoot)try{it.onCommitFiberRoot(ot,e,void 0,128==(128&e.current.flags))}catch(e){}}(n.stateNode),ru(e,Ye()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)o=t[n],r(o.value,{componentStack:o.stack,digest:o.digest});if($l)throw $l=!1,e=Hl,Hl=null,e;0!=(1&Kl)&&0!==e.tag&&_u(),0!=(1&(a=e.pendingLanes))?e===Yl?Ql++:(Ql=0,Yl=e):Ql=0,Wo()}(e,t,n,r)}finally{Tl.transition=o,bt=r}return null}function _u(){if(null!==Gl){var e=At(Kl),t=Tl.transition,n=bt;try{if(Tl.transition=null,bt=16>e?16:e,null===Gl)var r=!1;else{if(e=Gl,Gl=null,Kl=0,0!=(6&Cl))throw Error(i(331));var o=Cl;for(Cl|=4,Js=e.current;null!==Js;){var a=Js,s=a.child;if(0!=(16&Js.flags)){var l=a.deletions;if(null!==l){for(var u=0;u<l.length;u++){var c=l[u];for(Js=c;null!==Js;){var d=Js;switch(d.tag){case 0:case 11:case 15:nl(8,d,a)}var f=d.child;if(null!==f)f.return=d,Js=f;else for(;null!==Js;){var h=(d=Js).sibling,p=d.return;if(il(d),d===c){Js=null;break}if(null!==h){h.return=p,Js=h;break}Js=p}}}var m=a.alternate;if(null!==m){var v=m.child;if(null!==v){m.child=null;do{var g=v.sibling;v.sibling=null,v=g}while(null!==v)}}Js=a}}if(0!=(2064&a.subtreeFlags)&&null!==s)s.return=a,Js=s;else e:for(;null!==Js;){if(0!=(2048&(a=Js).flags))switch(a.tag){case 0:case 11:case 15:nl(9,a,a.return)}var y=a.sibling;if(null!==y){y.return=a.return,Js=y;break e}Js=a.return}}var b=e.current;for(Js=b;null!==Js;){var A=(s=Js).child;if(0!=(2064&s.subtreeFlags)&&null!==A)A.return=s,Js=A;else e:for(s=b;null!==Js;){if(0!=(2048&(l=Js).flags))try{switch(l.tag){case 0:case 11:case 15:rl(9,l)}}catch(e){ku(l,l.return,e)}if(l===s){Js=null;break e}var w=l.sibling;if(null!==w){w.return=l.return,Js=w;break e}Js=l.return}}if(Cl=o,Wo(),it&&"function"==typeof it.onPostCommitFiberRoot)try{it.onPostCommitFiberRoot(ot,e)}catch(e){}r=!0}return r}finally{bt=n,Tl.transition=t}}return!1}function Su(e,t,n){e=Ii(e,t=ps(0,t=cs(n,t),1),1),t=eu(),null!==e&&(gt(e,1,t),ru(e,t))}function ku(e,t,n){if(3===e.tag)Su(e,e,n);else for(;null!==t;){if(3===t.tag){Su(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Zl||!Zl.has(r))){t=Ii(t,e=ms(t,e=cs(n,e),1),1),e=eu(),null!==t&&(gt(t,1,e),ru(t,e));break}}t=t.return}}function Eu(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=eu(),e.pingedLanes|=e.suspendedLanes&n,Rl===e&&(Ol&n)===n&&(4===Bl||3===Bl&&(130023424&Ol)===Ol&&500>Ye()-Vl?fu(e,0):Ml|=n),ru(e,t)}function xu(e,t){0===t&&(0==(1&e.mode)?t=1:(t=ct,0==(130023424&(ct<<=1))&&(ct=4194304)));var n=eu();null!==(e=Ni(e,t))&&(gt(e,t,n),ru(e,n))}function Tu(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),xu(e,n)}function Cu(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,o=e.memoizedState;null!==o&&(n=o.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(i(314))}null!==r&&r.delete(t),xu(e,n)}function Ru(e,t){return qe(e,t)}function Nu(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Ou(e,t,n,r){return new Nu(e,t,n,r)}function Lu(e){return!(!(e=e.prototype)||!e.isReactComponent)}function zu(e,t){var n=e.alternate;return null===n?((n=Ou(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Bu(e,t,n,r,o,a){var s=2;if(r=e,"function"==typeof e)Lu(e)&&(s=1);else if("string"==typeof e)s=5;else e:switch(e){case S:return Iu(n.children,o,a,t);case k:s=8,o|=8;break;case E:return(e=Ou(12,n,t,2|o)).elementType=E,e.lanes=a,e;case R:return(e=Ou(13,n,t,o)).elementType=R,e.lanes=a,e;case N:return(e=Ou(19,n,t,o)).elementType=N,e.lanes=a,e;case z:return Pu(n,o,a,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case x:s=10;break e;case T:s=9;break e;case C:s=11;break e;case O:s=14;break e;case L:s=16,r=null;break e}throw Error(i(130,null==e?e:typeof e,""))}return(t=Ou(s,n,t,o)).elementType=e,t.type=r,t.lanes=a,t}function Iu(e,t,n,r){return(e=Ou(7,e,r,t)).lanes=n,e}function Pu(e,t,n,r){return(e=Ou(22,e,r,t)).elementType=z,e.lanes=n,e.stateNode={isHidden:!1},e}function Du(e,t,n){return(e=Ou(6,e,null,t)).lanes=n,e}function Mu(e,t,n){return(t=Ou(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Uu(e,t,n,r,o){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=vt(0),this.expirationTimes=vt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=vt(0),this.identifierPrefix=r,this.onRecoverableError=o,this.mutableSourceEagerHydrationData=null}function Fu(e,t,n,r,o,i,a,s,l){return e=new Uu(e,t,n,s,l),1===t?(t=1,!0===i&&(t|=8)):t=0,i=Ou(3,null,null,t),e.current=i,i.stateNode=e,i.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Li(i),e}function Vu(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:_,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function ju(e){if(!e)return Co;e:{if(je(e=e._reactInternals)!==e||1!==e.tag)throw Error(i(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(zo(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(i(171))}if(1===e.tag){var n=e.type;if(zo(n))return Po(e,n,t)}return t}function Wu(e,t,n,r,o,i,a,s,l){return(e=Fu(n,r,!0,e,0,i,0,s,l)).context=ju(null),n=e.current,(i=Bi(r=eu(),o=tu(n))).callback=null!=t?t:null,Ii(n,i,o),e.current.lanes=o,gt(e,o,r),ru(e,r),e}function $u(e,t,n,r){var o=t.current,i=eu(),a=tu(o);return n=ju(n),null===t.context?t.context=n:t.pendingContext=n,(t=Bi(i,a)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),null!==(e=Ii(o,t,a))&&(nu(e,o,a,i),Pi(e,o,a)),a}function Hu(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Zu(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function qu(e,t){Zu(e,t),(e=e.alternate)&&Zu(e,t)}Sl=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||No.current)As=!0;else{if(0==(e.lanes&n)&&0==(128&t.flags))return As=!1,function(e,t,n){switch(t.tag){case 3:Ns(t),pi();break;case 5:aa(t);break;case 1:zo(t.type)&&Do(t);break;case 4:oa(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,o=t.memoizedProps.value;To(yi,r._currentValue),r._currentValue=o;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(To(la,1&la.current),t.flags|=128,null):0!=(n&t.child.childLanes)?Ds(e,t,n):(To(la,1&la.current),null!==(e=$s(e,t,n))?e.sibling:null);To(la,1&la.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(128&e.flags)){if(r)return js(e,t,n);t.flags|=128}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),To(la,la.current),r)break;return null;case 22:case 23:return t.lanes=0,Es(e,t,n)}return $s(e,t,n)}(e,t,n);As=0!=(131072&e.flags)}else As=!1,ii&&0!=(1048576&t.flags)&&ei(t,qo,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;Ws(e,t),e=t.pendingProps;var o=Lo(t,Ro.current);Ei(t,n),o=ka(null,t,r,e,o,n);var a=Ea();return t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,zo(r)?(a=!0,Do(t)):a=!1,t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,Li(t),o.updater=ji,t.stateNode=o,o._reactInternals=t,Zi(t,r,e,n),t=Rs(null,t,r,!0,a,n)):(t.tag=0,ii&&a&&ti(t),ws(null,t,o,n),t=t.child),t;case 16:r=t.elementType;e:{switch(Ws(e,t),e=t.pendingProps,r=(o=r._init)(r._payload),t.type=r,o=t.tag=function(e){if("function"==typeof e)return Lu(e)?1:0;if(null!=e){if((e=e.$$typeof)===C)return 11;if(e===O)return 14}return 2}(r),e=gi(r,e),o){case 0:t=Ts(null,t,r,e,n);break e;case 1:t=Cs(null,t,r,e,n);break e;case 11:t=_s(null,t,r,e,n);break e;case 14:t=Ss(null,t,r,gi(r.type,e),n);break e}throw Error(i(306,r,""))}return t;case 0:return r=t.type,o=t.pendingProps,Ts(e,t,r,o=t.elementType===r?o:gi(r,o),n);case 1:return r=t.type,o=t.pendingProps,Cs(e,t,r,o=t.elementType===r?o:gi(r,o),n);case 3:e:{if(Ns(t),null===e)throw Error(i(387));r=t.pendingProps,o=(a=t.memoizedState).element,zi(e,t),Mi(t,r,null,n);var s=t.memoizedState;if(r=s.element,a.isDehydrated){if(a={element:r,isDehydrated:!1,cache:s.cache,pendingSuspenseBoundaries:s.pendingSuspenseBoundaries,transitions:s.transitions},t.updateQueue.baseState=a,t.memoizedState=a,256&t.flags){t=Os(e,t,r,n,o=cs(Error(i(423)),t));break e}if(r!==o){t=Os(e,t,r,n,o=cs(Error(i(424)),t));break e}for(oi=uo(t.stateNode.containerInfo.firstChild),ri=t,ii=!0,ai=null,n=Ji(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(pi(),r===o){t=$s(e,t,n);break e}ws(e,t,r,n)}t=t.child}return t;case 5:return aa(t),null===e&&ci(t),r=t.type,o=t.pendingProps,a=null!==e?e.memoizedProps:null,s=o.children,no(r,o)?s=null:null!==a&&no(r,a)&&(t.flags|=32),xs(e,t),ws(e,t,s,n),t.child;case 6:return null===e&&ci(t),null;case 13:return Ds(e,t,n);case 4:return oa(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Yi(t,null,r,n):ws(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,_s(e,t,r,o=t.elementType===r?o:gi(r,o),n);case 7:return ws(e,t,t.pendingProps,n),t.child;case 8:case 12:return ws(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,a=t.memoizedProps,s=o.value,To(yi,r._currentValue),r._currentValue=s,null!==a)if(sr(a.value,s)){if(a.children===o.children&&!No.current){t=$s(e,t,n);break e}}else for(null!==(a=t.child)&&(a.return=t);null!==a;){var l=a.dependencies;if(null!==l){s=a.child;for(var u=l.firstContext;null!==u;){if(u.context===r){if(1===a.tag){(u=Bi(-1,n&-n)).tag=2;var c=a.updateQueue;if(null!==c){var d=(c=c.shared).pending;null===d?u.next=u:(u.next=d.next,d.next=u),c.pending=u}}a.lanes|=n,null!==(u=a.alternate)&&(u.lanes|=n),ki(a.return,n,t),l.lanes|=n;break}u=u.next}}else if(10===a.tag)s=a.type===t.type?null:a.child;else if(18===a.tag){if(null===(s=a.return))throw Error(i(341));s.lanes|=n,null!==(l=s.alternate)&&(l.lanes|=n),ki(s,n,t),s=a.sibling}else s=a.child;if(null!==s)s.return=a;else for(s=a;null!==s;){if(s===t){s=null;break}if(null!==(a=s.sibling)){a.return=s.return,s=a;break}s=s.return}a=s}ws(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=t.pendingProps.children,Ei(t,n),r=r(o=xi(o)),t.flags|=1,ws(e,t,r,n),t.child;case 14:return o=gi(r=t.type,t.pendingProps),Ss(e,t,r,o=gi(r.type,o),n);case 15:return ks(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:gi(r,o),Ws(e,t),t.tag=1,zo(r)?(e=!0,Do(t)):e=!1,Ei(t,n),$i(t,r,o),Zi(t,r,o,n),Rs(null,t,r,!0,e,n);case 19:return js(e,t,n);case 22:return Es(e,t,n)}throw Error(i(156,t.tag))};var Gu="function"==typeof reportError?reportError:function(e){console.error(e)};function Ku(e){this._internalRoot=e}function Qu(e){this._internalRoot=e}function Yu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Ju(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Xu(){}function ec(e,t,n,r,o){var i=n._reactRootContainer;if(i){var a=i;if("function"==typeof o){var s=o;o=function(){var e=Hu(a);s.call(e)}}$u(t,a,e,o)}else a=function(e,t,n,r,o){if(o){if("function"==typeof r){var i=r;r=function(){var e=Hu(a);i.call(e)}}var a=Wu(t,r,e,0,null,!1,0,"",Xu);return e._reactRootContainer=a,e[mo]=a.current,jr(8===e.nodeType?e.parentNode:e),cu(),a}for(;o=e.lastChild;)e.removeChild(o);if("function"==typeof r){var s=r;r=function(){var e=Hu(l);s.call(e)}}var l=Fu(e,0,!1,null,0,!1,0,"",Xu);return e._reactRootContainer=l,e[mo]=l.current,jr(8===e.nodeType?e.parentNode:e),cu((function(){$u(t,l,n,r)})),l}(n,t,e,o,r);return Hu(a)}Qu.prototype.render=Ku.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(i(409));$u(e,t,null,null)},Qu.prototype.unmount=Ku.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;cu((function(){$u(null,e,null,null)})),t[mo]=null}},Qu.prototype.unstable_scheduleHydration=function(e){if(e){var t=kt();e={blockedOn:null,target:e,priority:t};for(var n=0;n<zt.length&&0!==t&&t<zt[n].priority;n++);zt.splice(n,0,e),0===n&&Dt(e)}},wt=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=dt(t.pendingLanes);0!==n&&(yt(t,1|n),ru(t,Ye()),0==(6&Cl)&&(jl=Ye()+500,Wo()))}break;case 13:cu((function(){var t=Ni(e,1);if(null!==t){var n=eu();nu(t,e,1,n)}})),qu(e,1)}},_t=function(e){if(13===e.tag){var t=Ni(e,134217728);if(null!==t)nu(t,e,134217728,eu());qu(e,134217728)}},St=function(e){if(13===e.tag){var t=tu(e),n=Ni(e,t);if(null!==n)nu(n,e,t,eu());qu(e,t)}},kt=function(){return bt},Et=function(e,t){var n=bt;try{return bt=e,t()}finally{bt=n}},_e=function(e,t,n){switch(t){case"input":if(J(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=_o(r);if(!o)throw Error(i(90));q(r),J(r,o)}}}break;case"textarea":ie(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Ce=uu,Re=cu;var tc={usingClientEntryPoint:!1,Events:[Ao,wo,_o,xe,Te,uu]},nc={findFiberByHostInstance:bo,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},rc={bundleType:nc.bundleType,version:nc.version,rendererPackageName:nc.rendererPackageName,rendererConfig:nc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:A.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=He(e))?null:e.stateNode},findFiberByHostInstance:nc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var oc=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!oc.isDisabled&&oc.supportsFiber)try{ot=oc.inject(rc),it=oc}catch(ce){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=tc,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Yu(t))throw Error(i(200));return Vu(e,t,null,n)},t.createRoot=function(e,t){if(!Yu(e))throw Error(i(299));var n=!1,r="",o=Gu;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(o=t.onRecoverableError)),t=Fu(e,1,!1,null,0,n,0,r,o),e[mo]=t.current,jr(8===e.nodeType?e.parentNode:e),new Ku(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(i(188));throw e=Object.keys(e).join(","),Error(i(268,e))}return e=null===(e=He(t))?null:e.stateNode},t.flushSync=function(e){return cu(e)},t.hydrate=function(e,t,n){if(!Ju(t))throw Error(i(200));return ec(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Yu(e))throw Error(i(405));var r=null!=n&&n.hydratedSources||null,o=!1,a="",s=Gu;if(null!=n&&(!0===n.unstable_strictMode&&(o=!0),void 0!==n.identifierPrefix&&(a=n.identifierPrefix),void 0!==n.onRecoverableError&&(s=n.onRecoverableError)),t=Wu(t,null,e,1,null!=n?n:null,o,0,a,s),e[mo]=t.current,jr(e),r)for(e=0;e<r.length;e++)o=(o=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,o]:t.mutableSourceEagerHydrationData.push(n,o);return new Qu(t)},t.render=function(e,t,n){if(!Ju(t))throw Error(i(200));return ec(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Ju(e))throw Error(i(40));return!!e._reactRootContainer&&(cu((function(){ec(null,null,e,!1,(function(){e._reactRootContainer=null,e[mo]=null}))})),!0)},t.unstable_batchedUpdates=uu,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Ju(n))throw Error(i(200));if(null==e||void 0===e._reactInternals)throw Error(i(38));return ec(e,t,n,!1,r)},t.version="18.2.0-next-9e3b772b8-20220608"},745:(e,t,n)=>{"use strict";var r=n(935);t.createRoot=r.createRoot,t.hydrateRoot=r.hydrateRoot},935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(448)},500:(e,t,n)=>{"use strict";var r,o=Object.create,i=Object.defineProperty,a=Object.getOwnPropertyDescriptor,s=Object.getOwnPropertyNames,l=Object.getPrototypeOf,u=Object.prototype.hasOwnProperty,c=(e,t,n,r)=>{if(t&&"object"==typeof t||"function"==typeof t)for(let o of s(t))!u.call(e,o)&&o!==n&&i(e,o,{get:()=>t[o],enumerable:!(r=a(t,o))||r.enumerable});return e},d=(e,t,n)=>(n=null!=e?o(l(e)):{},c(!t&&e&&e.__esModule?n:i(n,"default",{value:e,enumerable:!0}),e)),f={};((e,t)=>{for(var n in t)i(e,n,{get:t[n],enumerable:!0})})(f,{CheckmarkIcon:()=>Z,ErrorIcon:()=>U,LoaderIcon:()=>j,ToastBar:()=>ne,ToastIcon:()=>Y,Toaster:()=>se,default:()=>le,resolveValue:()=>h,toast:()=>x,useToaster:()=>N,useToasterStore:()=>k}),e.exports=(r=f,c(i({},"__esModule",{value:!0}),r));var h=(e,t)=>(e=>"function"==typeof e)(e)?e(t):e,p=(()=>{let e=0;return()=>(++e).toString()})(),m=(()=>{let e;return()=>{if(void 0===e&&typeof window<"u"){let t=matchMedia("(prefers-reduced-motion: reduce)");e=!t||t.matches}return e}})(),v=n(294),g=new Map,y=e=>{if(g.has(e))return;let t=setTimeout((()=>{g.delete(e),_({type:4,toastId:e})}),1e3);g.set(e,t)},b=(e,t)=>{switch(t.type){case 0:return{...e,toasts:[t.toast,...e.toasts].slice(0,20)};case 1:return t.toast.id&&(e=>{let t=g.get(e);t&&clearTimeout(t)})(t.toast.id),{...e,toasts:e.toasts.map((e=>e.id===t.toast.id?{...e,...t.toast}:e))};case 2:let{toast:n}=t;return e.toasts.find((e=>e.id===n.id))?b(e,{type:1,toast:n}):b(e,{type:0,toast:n});case 3:let{toastId:r}=t;return r?y(r):e.toasts.forEach((e=>{y(e.id)})),{...e,toasts:e.toasts.map((e=>e.id===r||void 0===r?{...e,visible:!1}:e))};case 4:return void 0===t.toastId?{...e,toasts:[]}:{...e,toasts:e.toasts.filter((e=>e.id!==t.toastId))};case 5:return{...e,pausedAt:t.time};case 6:let o=t.time-(e.pausedAt||0);return{...e,pausedAt:void 0,toasts:e.toasts.map((e=>({...e,pauseDuration:e.pauseDuration+o})))}}},A=[],w={toasts:[],pausedAt:void 0},_=e=>{w=b(w,e),A.forEach((e=>{e(w)}))},S={blank:4e3,error:4e3,success:2e3,loading:1/0,custom:4e3},k=(e={})=>{let[t,n]=(0,v.useState)(w);(0,v.useEffect)((()=>(A.push(n),()=>{let e=A.indexOf(n);e>-1&&A.splice(e,1)})),[t]);let r=t.toasts.map((t=>{var n,r;return{...e,...e[t.type],...t,duration:t.duration||(null==(n=e[t.type])?void 0:n.duration)||(null==e?void 0:e.duration)||S[t.type],style:{...e.style,...null==(r=e[t.type])?void 0:r.style,...t.style}}}));return{...t,toasts:r}},E=e=>(t,n)=>{let r=((e,t="blank",n)=>({createdAt:Date.now(),visible:!0,type:t,ariaProps:{role:"status","aria-live":"polite"},message:e,pauseDuration:0,...n,id:(null==n?void 0:n.id)||p()}))(t,e,n);return _({type:2,toast:r}),r.id},x=(e,t)=>E("blank")(e,t);x.error=E("error"),x.success=E("success"),x.loading=E("loading"),x.custom=E("custom"),x.dismiss=e=>{_({type:3,toastId:e})},x.remove=e=>_({type:4,toastId:e}),x.promise=(e,t,n)=>{let r=x.loading(t.loading,{...n,...null==n?void 0:n.loading});return e.then((e=>(x.success(h(t.success,e),{id:r,...n,...null==n?void 0:n.success}),e))).catch((e=>{x.error(h(t.error,e),{id:r,...n,...null==n?void 0:n.error})})),e};var T=n(294),C=(e,t)=>{_({type:1,toast:{id:e,height:t}})},R=()=>{_({type:5,time:Date.now()})},N=e=>{let{toasts:t,pausedAt:n}=k(e);(0,T.useEffect)((()=>{if(n)return;let e=Date.now(),r=t.map((t=>{if(t.duration===1/0)return;let n=(t.duration||0)+t.pauseDuration-(e-t.createdAt);if(!(n<0))return setTimeout((()=>x.dismiss(t.id)),n);t.visible&&x.dismiss(t.id)}));return()=>{r.forEach((e=>e&&clearTimeout(e)))}}),[t,n]);let r=(0,T.useCallback)((()=>{n&&_({type:6,time:Date.now()})}),[n]),o=(0,T.useCallback)(((e,n)=>{let{reverseOrder:r=!1,gutter:o=8,defaultPosition:i}=n||{},a=t.filter((t=>(t.position||i)===(e.position||i)&&t.height)),s=a.findIndex((t=>t.id===e.id)),l=a.filter(((e,t)=>t<s&&e.visible)).length;return a.filter((e=>e.visible)).slice(...r?[l+1]:[0,l]).reduce(((e,t)=>e+(t.height||0)+o),0)}),[t]);return{toasts:t,handlers:{updateHeight:C,startPause:R,endPause:r,calculateOffset:o}}},O=d(n(294)),L=n(925),z=d(n(294)),B=n(925),I=n(925),P=I.keyframes`
from {
  transform: scale(0) rotate(45deg);
	opacity: 0;
}
to {
 transform: scale(1) rotate(45deg);
  opacity: 1;
}`,D=I.keyframes`
from {
  transform: scale(0);
  opacity: 0;
}
to {
  transform: scale(1);
  opacity: 1;
}`,M=I.keyframes`
from {
  transform: scale(0) rotate(90deg);
	opacity: 0;
}
to {
  transform: scale(1) rotate(90deg);
	opacity: 1;
}`,U=(0,I.styled)("div")`
  width: 20px;
  opacity: 0;
  height: 20px;
  border-radius: 10px;
  background: ${e=>e.primary||"#ff4b4b"};
  position: relative;
  transform: rotate(45deg);

  animation: ${P} 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275)
    forwards;
  animation-delay: 100ms;

  &:after,
  &:before {
    content: '';
    animation: ${D} 0.15s ease-out forwards;
    animation-delay: 150ms;
    position: absolute;
    border-radius: 3px;
    opacity: 0;
    background: ${e=>e.secondary||"#fff"};
    bottom: 9px;
    left: 4px;
    height: 2px;
    width: 12px;
  }

  &:before {
    animation: ${M} 0.15s ease-out forwards;
    animation-delay: 180ms;
    transform: rotate(90deg);
  }
`,F=n(925),V=F.keyframes`
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
`,j=(0,F.styled)("div")`
  width: 12px;
  height: 12px;
  box-sizing: border-box;
  border: 2px solid;
  border-radius: 100%;
  border-color: ${e=>e.secondary||"#e0e0e0"};
  border-right-color: ${e=>e.primary||"#616161"};
  animation: ${V} 1s linear infinite;
`,W=n(925),$=W.keyframes`
from {
  transform: scale(0) rotate(45deg);
	opacity: 0;
}
to {
  transform: scale(1) rotate(45deg);
	opacity: 1;
}`,H=W.keyframes`
0% {
	height: 0;
	width: 0;
	opacity: 0;
}
40% {
  height: 0;
	width: 6px;
	opacity: 1;
}
100% {
  opacity: 1;
  height: 10px;
}`,Z=(0,W.styled)("div")`
  width: 20px;
  opacity: 0;
  height: 20px;
  border-radius: 10px;
  background: ${e=>e.primary||"#61d345"};
  position: relative;
  transform: rotate(45deg);

  animation: ${$} 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275)
    forwards;
  animation-delay: 100ms;
  &:after {
    content: '';
    box-sizing: border-box;
    animation: ${H} 0.2s ease-out forwards;
    opacity: 0;
    animation-delay: 200ms;
    position: absolute;
    border-right: 2px solid;
    border-bottom: 2px solid;
    border-color: ${e=>e.secondary||"#fff"};
    bottom: 6px;
    left: 6px;
    height: 10px;
    width: 6px;
  }
`,q=(0,B.styled)("div")`
  position: absolute;
`,G=(0,B.styled)("div")`
  position: relative;
  display: flex;
  justify-content: center;
  align-items: center;
  min-width: 20px;
  min-height: 20px;
`,K=B.keyframes`
from {
  transform: scale(0.6);
  opacity: 0.4;
}
to {
  transform: scale(1);
  opacity: 1;
}`,Q=(0,B.styled)("div")`
  position: relative;
  transform: scale(0.6);
  opacity: 0.4;
  min-width: 20px;
  animation: ${K} 0.3s 0.12s cubic-bezier(0.175, 0.885, 0.32, 1.275)
    forwards;
`,Y=({toast:e})=>{let{icon:t,type:n,iconTheme:r}=e;return void 0!==t?"string"==typeof t?z.createElement(Q,null,t):t:"blank"===n?null:z.createElement(G,null,z.createElement(j,{...r}),"loading"!==n&&z.createElement(q,null,"error"===n?z.createElement(U,{...r}):z.createElement(Z,{...r})))},J=e=>`\n0% {transform: translate3d(0,${-200*e}%,0) scale(.6); opacity:.5;}\n100% {transform: translate3d(0,0,0) scale(1); opacity:1;}\n`,X=e=>`\n0% {transform: translate3d(0,0,-1px) scale(1); opacity:1;}\n100% {transform: translate3d(0,${-150*e}%,-1px) scale(.6); opacity:0;}\n`,ee=(0,L.styled)("div")`
  display: flex;
  align-items: center;
  background: #fff;
  color: #363636;
  line-height: 1.3;
  will-change: transform;
  box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1), 0 3px 3px rgba(0, 0, 0, 0.05);
  max-width: 350px;
  pointer-events: auto;
  padding: 8px 10px;
  border-radius: 8px;
`,te=(0,L.styled)("div")`
  display: flex;
  justify-content: center;
  margin: 4px 10px;
  color: inherit;
  flex: 1 1 auto;
  white-space: pre-line;
`,ne=O.memo((({toast:e,position:t,style:n,children:r})=>{let o=e.height?((e,t)=>{let n=e.includes("top")?1:-1,[r,o]=m()?["0%{opacity:0;} 100%{opacity:1;}","0%{opacity:1;} 100%{opacity:0;}"]:[J(n),X(n)];return{animation:t?`${(0,L.keyframes)(r)} 0.35s cubic-bezier(.21,1.02,.73,1) forwards`:`${(0,L.keyframes)(o)} 0.4s forwards cubic-bezier(.06,.71,.55,1)`}})(e.position||t||"top-center",e.visible):{opacity:0},i=O.createElement(Y,{toast:e}),a=O.createElement(te,{...e.ariaProps},h(e.message,e));return O.createElement(ee,{className:e.className,style:{...o,...n,...e.style}},"function"==typeof r?r({icon:i,message:a}):O.createElement(O.Fragment,null,i,a))})),re=n(925),oe=d(n(294));(0,re.setup)(oe.createElement);var ie=({id:e,className:t,style:n,onHeightUpdate:r,children:o})=>{let i=oe.useCallback((t=>{if(t){let n=()=>{let n=t.getBoundingClientRect().height;r(e,n)};n(),new MutationObserver(n).observe(t,{subtree:!0,childList:!0,characterData:!0})}}),[e,r]);return oe.createElement("div",{ref:i,className:t,style:n},o)},ae=re.css`
  z-index: 9999;
  > * {
    pointer-events: auto;
  }
`,se=({reverseOrder:e,position:t="top-center",toastOptions:n,gutter:r,children:o,containerStyle:i,containerClassName:a})=>{let{toasts:s,handlers:l}=N(n);return oe.createElement("div",{style:{position:"fixed",zIndex:9999,top:16,left:16,right:16,bottom:16,pointerEvents:"none",...i},className:a,onMouseEnter:l.startPause,onMouseLeave:l.endPause},s.map((n=>{let i=n.position||t,a=((e,t)=>{let n=e.includes("top"),r=n?{top:0}:{bottom:0},o=e.includes("center")?{justifyContent:"center"}:e.includes("right")?{justifyContent:"flex-end"}:{};return{left:0,right:0,display:"flex",position:"absolute",transition:m()?void 0:"all 230ms cubic-bezier(.21,1.02,.73,1)",transform:`translateY(${t*(n?1:-1)}px)`,...r,...o}})(i,l.calculateOffset(n,{reverseOrder:e,gutter:r,defaultPosition:t}));return oe.createElement(ie,{id:n.id,key:n.id,onHeightUpdate:l.updateHeight,className:n.visible?ae:"",style:a},"custom"===n.type?h(n.message,n):o?o(n):oe.createElement(ne,{toast:n,position:i}))})))},le=x},251:(e,t,n)=>{"use strict";var r=n(294),o=Symbol.for("react.element"),i=Symbol.for("react.fragment"),a=Object.prototype.hasOwnProperty,s=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,l={key:!0,ref:!0,__self:!0,__source:!0};function u(e,t,n){var r,i={},u=null,c=null;for(r in void 0!==n&&(u=""+n),void 0!==t.key&&(u=""+t.key),void 0!==t.ref&&(c=t.ref),t)a.call(t,r)&&!l.hasOwnProperty(r)&&(i[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===i[r]&&(i[r]=t[r]);return{$$typeof:o,type:e,key:u,ref:c,props:i,_owner:s.current}}t.Fragment=i,t.jsx=u,t.jsxs=u},408:(e,t)=>{"use strict";var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),o=Symbol.for("react.fragment"),i=Symbol.for("react.strict_mode"),a=Symbol.for("react.profiler"),s=Symbol.for("react.provider"),l=Symbol.for("react.context"),u=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),d=Symbol.for("react.memo"),f=Symbol.for("react.lazy"),h=Symbol.iterator;var p={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,v={};function g(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||p}function y(){}function b(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||p}g.prototype.isReactComponent={},g.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},g.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},y.prototype=g.prototype;var A=b.prototype=new y;A.constructor=b,m(A,g.prototype),A.isPureReactComponent=!0;var w=Array.isArray,_=Object.prototype.hasOwnProperty,S={current:null},k={key:!0,ref:!0,__self:!0,__source:!0};function E(e,t,r){var o,i={},a=null,s=null;if(null!=t)for(o in void 0!==t.ref&&(s=t.ref),void 0!==t.key&&(a=""+t.key),t)_.call(t,o)&&!k.hasOwnProperty(o)&&(i[o]=t[o]);var l=arguments.length-2;if(1===l)i.children=r;else if(1<l){for(var u=Array(l),c=0;c<l;c++)u[c]=arguments[c+2];i.children=u}if(e&&e.defaultProps)for(o in l=e.defaultProps)void 0===i[o]&&(i[o]=l[o]);return{$$typeof:n,type:e,key:a,ref:s,props:i,_owner:S.current}}function x(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var T=/\/+/g;function C(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function R(e,t,o,i,a){var s=typeof e;"undefined"!==s&&"boolean"!==s||(e=null);var l=!1;if(null===e)l=!0;else switch(s){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case n:case r:l=!0}}if(l)return a=a(l=e),e=""===i?"."+C(l,0):i,w(a)?(o="",null!=e&&(o=e.replace(T,"$&/")+"/"),R(a,t,o,"",(function(e){return e}))):null!=a&&(x(a)&&(a=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(a,o+(!a.key||l&&l.key===a.key?"":(""+a.key).replace(T,"$&/")+"/")+e)),t.push(a)),1;if(l=0,i=""===i?".":i+":",w(e))for(var u=0;u<e.length;u++){var c=i+C(s=e[u],u);l+=R(s,t,o,c,a)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=h&&e[h]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),u=0;!(s=e.next()).done;)l+=R(s=s.value,t,o,c=i+C(s,u++),a);else if("object"===s)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return l}function N(e,t,n){if(null==e)return e;var r=[],o=0;return R(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function O(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var L={current:null},z={transition:null},B={ReactCurrentDispatcher:L,ReactCurrentBatchConfig:z,ReactCurrentOwner:S};t.Children={map:N,forEach:function(e,t,n){N(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return N(e,(function(){t++})),t},toArray:function(e){return N(e,(function(e){return e}))||[]},only:function(e){if(!x(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=g,t.Fragment=o,t.Profiler=a,t.PureComponent=b,t.StrictMode=i,t.Suspense=c,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=B,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var o=m({},e.props),i=e.key,a=e.ref,s=e._owner;if(null!=t){if(void 0!==t.ref&&(a=t.ref,s=S.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var l=e.type.defaultProps;for(u in t)_.call(t,u)&&!k.hasOwnProperty(u)&&(o[u]=void 0===t[u]&&void 0!==l?l[u]:t[u])}var u=arguments.length-2;if(1===u)o.children=r;else if(1<u){l=Array(u);for(var c=0;c<u;c++)l[c]=arguments[c+2];o.children=l}return{$$typeof:n,type:e.type,key:i,ref:a,props:o,_owner:s}},t.createContext=function(e){return(e={$$typeof:l,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:s,_context:e},e.Consumer=e},t.createElement=E,t.createFactory=function(e){var t=E.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=x,t.lazy=function(e){return{$$typeof:f,_payload:{_status:-1,_result:e},_init:O}},t.memo=function(e,t){return{$$typeof:d,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=z.transition;z.transition={};try{e()}finally{z.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return L.current.useCallback(e,t)},t.useContext=function(e){return L.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return L.current.useDeferredValue(e)},t.useEffect=function(e,t){return L.current.useEffect(e,t)},t.useId=function(){return L.current.useId()},t.useImperativeHandle=function(e,t,n){return L.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return L.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return L.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return L.current.useMemo(e,t)},t.useReducer=function(e,t,n){return L.current.useReducer(e,t,n)},t.useRef=function(e){return L.current.useRef(e)},t.useState=function(e){return L.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return L.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return L.current.useTransition()},t.version="18.2.0"},294:(e,t,n)=>{"use strict";e.exports=n(408)},893:(e,t,n)=>{"use strict";e.exports=n(251)},480:(e,t,n)=>{"use strict";n.r(t),n.d(t,{DefaultValue:()=>cs,RecoilEnv:()=>hs,RecoilLoadable:()=>fs,RecoilRoot:()=>ps,atom:()=>gs,atomFamily:()=>bs,constSelector:()=>ws,default:()=>Gs,errorSelector:()=>_s,isRecoilValue:()=>ds,noWait:()=>ks,readOnlySelector:()=>Ss,retentionZone:()=>qs,selector:()=>ys,selectorFamily:()=>As,snapshot_UNSTABLE:()=>Hs,useGetRecoilValueInfo_UNSTABLE:()=>Is,useGotoRecoilSnapshot:()=>js,useRecoilBridgeAcrossReactRoots_UNSTABLE:()=>vs,useRecoilCallback:()=>Fs,useRecoilRefresher_UNSTABLE:()=>Ps,useRecoilSnapshot:()=>Ws,useRecoilState:()=>Os,useRecoilStateLoadable:()=>Ls,useRecoilState_TRANSITION_SUPPORT_UNSTABLE:()=>Us,useRecoilStoreID:()=>ms,useRecoilTransactionObserver_UNSTABLE:()=>$s,useRecoilTransaction_UNSTABLE:()=>Vs,useRecoilValue:()=>Rs,useRecoilValueLoadable:()=>Ns,useRecoilValueLoadable_TRANSITION_SUPPORT_UNSTABLE:()=>Ds,useRecoilValue_TRANSITION_SUPPORT_UNSTABLE:()=>Ms,useResetRecoilState:()=>Bs,useRetain:()=>Zs,useSetRecoilState:()=>zs,waitForAll:()=>Ts,waitForAllSettled:()=>Cs,waitForAny:()=>xs,waitForNone:()=>Es});var r=n(294),o=n(935);var i=function(e){const t=new Error(e);if(void 0===t.stack)try{throw t}catch(e){}return t};var a=function(e){return!!e&&"function"==typeof e.then};var s=function(e,t){if(null!=e)return e;throw i(null!=t?t:"Got unexpected null or undefined")};function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}class u{getValue(){throw i("BaseLoadable")}toPromise(){throw i("BaseLoadable")}valueMaybe(){throw i("BaseLoadable")}valueOrThrow(){throw i(`Loadable expected value, but in "${this.state}" state`)}promiseMaybe(){throw i("BaseLoadable")}promiseOrThrow(){throw i(`Loadable expected promise, but in "${this.state}" state`)}errorMaybe(){throw i("BaseLoadable")}errorOrThrow(){throw i(`Loadable expected error, but in "${this.state}" state`)}is(e){return e.state===this.state&&e.contents===this.contents}map(e){throw i("BaseLoadable")}}class c extends u{constructor(e){super(),l(this,"state","hasValue"),l(this,"contents",void 0),this.contents=e}getValue(){return this.contents}toPromise(){return Promise.resolve(this.contents)}valueMaybe(){return this.contents}valueOrThrow(){return this.contents}promiseMaybe(){}errorMaybe(){}map(e){try{const t=e(this.contents);return a(t)?m(t):y(t)?t:h(t)}catch(t){return a(t)?m(t.next((()=>this.map(e)))):p(t)}}}class d extends u{constructor(e){super(),l(this,"state","hasError"),l(this,"contents",void 0),this.contents=e}getValue(){throw this.contents}toPromise(){return Promise.reject(this.contents)}valueMaybe(){}promiseMaybe(){}errorMaybe(){return this.contents}errorOrThrow(){return this.contents}map(e){return this}}class f extends u{constructor(e){super(),l(this,"state","loading"),l(this,"contents",void 0),this.contents=e}getValue(){throw this.contents}toPromise(){return this.contents}valueMaybe(){}promiseMaybe(){return this.contents}promiseOrThrow(){return this.contents}errorMaybe(){}map(e){return m(this.contents.then((t=>{const n=e(t);if(y(n)){const e=n;switch(e.state){case"hasValue":case"loading":return e.contents;case"hasError":throw e.contents}}return n})).catch((t=>{if(a(t))return t.then((()=>this.map(e).contents));throw t})))}}function h(e){return Object.freeze(new c(e))}function p(e){return Object.freeze(new d(e))}function m(e){return Object.freeze(new f(e))}function v(){return Object.freeze(new f(new Promise((()=>{}))))}function g(e){const t=function(e){return e.every((e=>"hasValue"===e.state))?h(e.map((e=>e.contents))):e.some((e=>"hasError"===e.state))?p(s(e.find((e=>"hasError"===e.state)),"Invalid loadable passed to loadableAll").contents):m(Promise.all(e.map((e=>e.contents))))}((Array.isArray(e)?e:Object.getOwnPropertyNames(e).map((t=>e[t]))).map((e=>y(e)?e:a(e)?m(e):h(e))));return Array.isArray(e)?t:t.map((t=>Object.getOwnPropertyNames(e).reduce(((e,n,r)=>({...e,[n]:t[r]})),{})))}function y(e){return e instanceof u}const b={of:e=>a(e)?m(e):y(e)?e:h(e),error:e=>p(e),loading:()=>v(),all:g,isLoadable:y};var A={loadableWithValue:h,loadableWithError:p,loadableWithPromise:m,loadableLoading:v,loadableAll:g,isLoadable:y,RecoilLoadable:b},w=A.loadableWithValue,_=A.loadableWithError,S=A.loadableWithPromise,k=A.loadableLoading,E=A.loadableAll,x=A.isLoadable,T=A.RecoilLoadable,C=Object.freeze({__proto__:null,loadableWithValue:w,loadableWithError:_,loadableWithPromise:S,loadableLoading:k,loadableAll:E,isLoadable:x,RecoilLoadable:T});const R=(new Map).set("recoil_hamt_2020",!0).set("recoil_sync_external_store",!0).set("recoil_suppress_rerender_in_callback",!0).set("recoil_memory_managament_2020",!0);function N(e){var t;return null!==(t=R.get(e))&&void 0!==t&&t}N.setPass=e=>{R.set(e,!0)},N.setFail=e=>{R.set(e,!1)},N.clear=()=>{R.clear()};var O=N;var L,z,B,I=function(e,t,{error:n}={}){return null};const P=null!==(L=r.createMutableSource)&&void 0!==L?L:r.unstable_createMutableSource,D=null!==(z=r.useMutableSource)&&void 0!==z?z:r.unstable_useMutableSource,M=null!==(B=r.useSyncExternalStore)&&void 0!==B?B:r.unstable_useSyncExternalStore;let U=!1;var F={createMutableSource:P,useMutableSource:D,useSyncExternalStore:M,currentRendererSupportsUseSyncExternalStore:function(){var e;const{ReactCurrentDispatcher:t,ReactCurrentOwner:n}=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,o=null!=(null!==(e=null==t?void 0:t.current)&&void 0!==e?e:n.currentDispatcher).useSyncExternalStore;return!M||o||U||(U=!0,I("A React renderer without React 18+ API support is being used with React 18+.")),o},reactMode:function(){return O("recoil_transition_support")?{mode:"TRANSITION_SUPPORT",early:!0,concurrent:!0}:O("recoil_sync_external_store")&&null!=M?{mode:"SYNC_EXTERNAL_STORE",early:!0,concurrent:!1}:O("recoil_mutable_source")&&null!=D&&"undefined"!=typeof window&&!window.$disableRecoilValueMutableSource_TEMP_HACK_DO_NOT_USE?O("recoil_suppress_rerender_in_callback")?{mode:"MUTABLE_SOURCE",early:!0,concurrent:!0}:{mode:"MUTABLE_SOURCE",early:!1,concurrent:!1}:O("recoil_suppress_rerender_in_callback")?{mode:"LEGACY",early:!0,concurrent:!1}:{mode:"LEGACY",early:!1,concurrent:!1}},isFastRefreshEnabled:function(){return!1}};const V={RECOIL_DUPLICATE_ATOM_KEY_CHECKING_ENABLED:!0};!function(){var e,t,n;if("undefined"==typeof process)return;if(null==(null===(e=process)||void 0===e?void 0:e.env))return;const r=null===(t=process.env.RECOIL_DUPLICATE_ATOM_KEY_CHECKING_ENABLED)||void 0===t||null===(n=t.toLowerCase())||void 0===n?void 0:n.trim();if(null==r||""===r)return;if(!["true","false"].includes(r))throw i(`process.env.RECOIL_DUPLICATE_ATOM_KEY_CHECKING_ENABLED value must be 'true', 'false', or empty: ${r}`);V.RECOIL_DUPLICATE_ATOM_KEY_CHECKING_ENABLED="true"===r}();var j=V;class W{constructor(e){l(this,"key",void 0),this.key=e}toJSON(){return{key:this.key}}}class $ extends W{}class H extends W{}var Z={AbstractRecoilValue:W,RecoilState:$,RecoilValueReadOnly:H,isRecoilValue:function(e){return e instanceof $||e instanceof H}},q=Z.AbstractRecoilValue,G=Z.RecoilState,K=Z.RecoilValueReadOnly,Q=Z.isRecoilValue,Y=Object.freeze({__proto__:null,AbstractRecoilValue:q,RecoilState:G,RecoilValueReadOnly:K,isRecoilValue:Q});var J=function(e,...t){0};var X=function(e,t){return function*(){let n=0;for(const r of e)yield t(r,n++)}()};const{isFastRefreshEnabled:ee}=F;class te{}const ne=new te,re=new Map,oe=new Map;class ie extends Error{}const ae=new Map;function se(e){return ae.get(e)}var le={nodes:re,recoilValues:oe,registerNode:function(e){j.RECOIL_DUPLICATE_ATOM_KEY_CHECKING_ENABLED&&function(e){if(re.has(e)){const t=`Duplicate atom key "${e}". This is a FATAL ERROR in\n      production. But it is safe to ignore this warning if it occurred because of\n      hot module replacement.`;console.warn(t)}}(e.key),re.set(e.key,e);const t=null==e.set?new Y.RecoilValueReadOnly(e.key):new Y.RecoilState(e.key);return oe.set(e.key,t),t},getNode:function(e){const t=re.get(e);if(null==t)throw new ie(`Missing definition for RecoilValue: "${e}""`);return t},getNodeMaybe:function(e){return re.get(e)},deleteNodeConfigIfPossible:function(e){var t;if(!O("recoil_memory_managament_2020"))return;const n=re.get(e);var r;null!=n&&null!==(t=n.shouldDeleteConfigOnRelease)&&void 0!==t&&t.call(n)&&(re.delete(e),null===(r=se(e))||void 0===r||r(),ae.delete(e))},setConfigDeletionHandler:function(e,t){O("recoil_memory_managament_2020")&&(void 0===t?ae.delete(e):ae.set(e,t))},getConfigDeletionHandler:se,recoilValuesForKeys:function(e){return X(e,(e=>s(oe.get(e))))},NodeMissingError:ie,DefaultValue:te,DEFAULT_VALUE:ne};var ue={enqueueExecution:function(e,t){t()}};var ce,de,fe=(ce=function(e){var t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n={},r=Math.pow(2,5),o=r-1,i=r/2,a=r/4,s={},l=function(e){return function(){return e}},u=n.hash=function(e){var n=void 0===e?"undefined":t(e);if("number"===n)return e;"string"!==n&&(e+="");for(var r=0,o=0,i=e.length;o<i;++o)r=(r<<5)-r+e.charCodeAt(o)|0;return r},c=function(e,t){return t>>>e&o},d=function(e){return 1<<e},f=function(e,t){return n=e&t-1,n=(n=(858993459&(n-=n>>1&1431655765))+(n>>2&858993459))+(n>>4)&252645135,127&(n+=n>>8)+(n>>16);var n},h=function(e,t,n,r){var o=r;if(!e){var i=r.length;o=new Array(i);for(var a=0;a<i;++a)o[a]=r[a]}return o[t]=n,o},p=function(e,t,n){var r=n.length-1,o=0,i=0,a=n;if(e)o=i=t;else for(a=new Array(r);o<t;)a[i++]=n[o++];for(++o;o<=r;)a[i++]=n[o++];return e&&(a.length=r),a},m={__hamt_isEmpty:!0},v=function(e){return e===m||e&&e.__hamt_isEmpty},g=function(e,t,n,r){return{type:1,edit:e,hash:t,key:n,value:r,_modify:S}},y=function(e,t,n){return{type:2,edit:e,hash:t,children:n,_modify:k}},b=function(e,t,n){return{type:3,edit:e,mask:t,children:n,_modify:E}},A=function(e,t,n){return{type:4,edit:e,size:t,children:n,_modify:x}},w=function e(t,n,r,o,i,a){if(r===i)return y(t,r,[a,o]);var s=c(n,r),l=c(n,i);return b(t,d(s)|d(l),s===l?[e(t,n+5,r,o,i,a)]:s<l?[o,a]:[a,o])},_=function(e,t){return e===t.edit},S=function(e,t,n,r,o,i,a){if(t(i,this.key)){var l=r(this.value);return l===this.value?this:l===s?(--a.value,m):_(e,this)?(this.value=l,this):g(e,o,i,l)}var u=r();return u===s?this:(++a.value,w(e,n,this.hash,this,o,g(e,o,i,u)))},k=function(e,t,n,r,o,i,a){if(o===this.hash){var l=function(e,t,n,r,o,i,a,l){for(var u=o.length,c=0;c<u;++c){var d=o[c];if(n(a,d.key)){var f=d.value,m=i(f);return m===f?o:m===s?(--l.value,p(e,c,o)):h(e,c,g(t,r,a,m),o)}}var v=i();return v===s?o:(++l.value,h(e,u,g(t,r,a,v),o))}(_(e,this),e,t,this.hash,this.children,r,i,a);return l===this.children?this:l.length>1?y(e,this.hash,l):l[0]}var u=r();return u===s?this:(++a.value,w(e,n,this.hash,this,o,g(e,o,i,u)))},E=function(e,t,n,r,o,a,s){var l=this.mask,u=this.children,g=c(n,o),y=d(g),w=f(l,y),S=l&y,k=S?u[w]:m,E=k._modify(e,t,n+5,r,o,a,s);if(k===E)return this;var x,T=_(e,this),C=l,R=void 0;if(S&&v(E)){if(!(C&=~y))return m;if(u.length<=2&&((x=u[1^w])===m||1===x.type||2===x.type))return u[1^w];R=p(T,w,u)}else if(S||v(E))R=h(T,w,E,u);else{if(u.length>=i)return function(e,t,n,r,o){for(var i=[],a=r,s=0,l=0;a;++l)1&a&&(i[l]=o[s++]),a>>>=1;return i[t]=n,A(e,s+1,i)}(e,g,E,l,u);C|=y,R=function(e,t,n,r){var o=r.length;if(e){for(var i=o;i>=t;)r[i--]=r[i];return r[t]=n,r}for(var a=0,s=0,l=new Array(o+1);a<t;)l[s++]=r[a++];for(l[t]=n;a<o;)l[++s]=r[a++];return l}(T,w,E,u)}return T?(this.mask=C,this.children=R,this):b(e,C,R)},x=function(e,t,n,r,o,i,s){var l=this.size,u=this.children,d=c(n,o),f=u[d],p=(f||m)._modify(e,t,n+5,r,o,i,s);if(f===p)return this;var g=_(e,this),y=void 0;if(v(f)&&!v(p))++l,y=h(g,d,p,u);else if(!v(f)&&v(p)){if(--l<=a)return function(e,t,n,r){for(var o=new Array(t-1),i=0,a=0,s=0,l=r.length;s<l;++s)if(s!==n){var u=r[s];u&&!v(u)&&(o[i++]=u,a|=1<<s)}return b(e,a,o)}(e,l,d,u);y=h(g,d,m,u)}else y=h(g,d,p,u);return g?(this.size=l,this.children=y,this):A(e,l,y)};function T(e,t,n,r,o){this._editable=e,this._edit=t,this._config=n,this._root=r,this._size=o}m._modify=function(e,t,n,r,o,i,a){var l=r();return l===s?m:(++a.value,g(e,o,i,l))},T.prototype.setTree=function(e,t){return this._editable?(this._root=e,this._size=t,this):e===this._root?this:new T(this._editable,this._edit,this._config,e,t)};var C=n.tryGetHash=function(e,t,n,r){for(var o=r._root,i=0,a=r._config.keyEq;;)switch(o.type){case 1:return a(n,o.key)?o.value:e;case 2:if(t===o.hash)for(var s=o.children,l=0,u=s.length;l<u;++l){var h=s[l];if(a(n,h.key))return h.value}return e;case 3:var p=c(i,t),m=d(p);if(o.mask&m){o=o.children[f(o.mask,m)],i+=5;break}return e;case 4:if(o=o.children[c(i,t)]){i+=5;break}return e;default:return e}};T.prototype.tryGetHash=function(e,t,n){return C(e,t,n,this)};var R=n.tryGet=function(e,t,n){return C(e,n._config.hash(t),t,n)};T.prototype.tryGet=function(e,t){return R(e,t,this)};var N=n.getHash=function(e,t,n){return C(void 0,e,t,n)};T.prototype.getHash=function(e,t){return N(e,t,this)},n.get=function(e,t){return C(void 0,t._config.hash(e),e,t)},T.prototype.get=function(e,t){return R(t,e,this)};var O=n.has=function(e,t,n){return C(s,e,t,n)!==s};T.prototype.hasHash=function(e,t){return O(e,t,this)};var L=n.has=function(e,t){return O(t._config.hash(e),e,t)};T.prototype.has=function(e){return L(e,this)};var z=function(e,t){return e===t};n.make=function(e){return new T(0,0,{keyEq:e&&e.keyEq||z,hash:e&&e.hash||u},m,0)},n.empty=n.make();var B=n.isEmpty=function(e){return e&&!!v(e._root)};T.prototype.isEmpty=function(){return B(this)};var I=n.modifyHash=function(e,t,n,r){var o={value:r._size},i=r._root._modify(r._editable?r._edit:NaN,r._config.keyEq,0,e,t,n,o);return r.setTree(i,o.value)};T.prototype.modifyHash=function(e,t,n){return I(n,e,t,this)};var P=n.modify=function(e,t,n){return I(e,n._config.hash(t),t,n)};T.prototype.modify=function(e,t){return P(t,e,this)};var D=n.setHash=function(e,t,n,r){return I(l(n),e,t,r)};T.prototype.setHash=function(e,t,n){return D(e,t,n,this)};var M=n.set=function(e,t,n){return D(n._config.hash(e),e,t,n)};T.prototype.set=function(e,t){return M(e,t,this)};var U=l(s),F=n.removeHash=function(e,t,n){return I(U,e,t,n)};T.prototype.removeHash=T.prototype.deleteHash=function(e,t){return F(e,t,this)};var V=n.remove=function(e,t){return F(t._config.hash(e),e,t)};T.prototype.remove=T.prototype.delete=function(e){return V(e,this)};var j=n.beginMutation=function(e){return new T(e._editable+1,e._edit+1,e._config,e._root,e._size)};T.prototype.beginMutation=function(){return j(this)};var W=n.endMutation=function(e){return e._editable=e._editable&&e._editable-1,e};T.prototype.endMutation=function(){return W(this)};var $=n.mutate=function(e,t){var n=j(t);return e(n),W(n)};T.prototype.mutate=function(e){return $(e,this)};var H=function(e){return e&&Z(e[0],e[1],e[2],e[3],e[4])},Z=function(e,t,n,r,o){for(;n<e;){var i=t[n++];if(i&&!v(i))return q(i,r,[e,t,n,r,o])}return H(o)},q=function(e,t,n){switch(e.type){case 1:return{value:t(e),rest:n};case 2:case 4:case 3:var r=e.children;return Z(r.length,r,0,t,n);default:return H(n)}},G={done:!0};function K(e){this.v=e}K.prototype.next=function(){if(!this.v)return G;var e=this.v;return this.v=H(e.rest),e},K.prototype[Symbol.iterator]=function(){return this};var Q=function(e,t){return new K(q(e._root,t))},Y=function(e){return[e.key,e.value]},J=n.entries=function(e){return Q(e,Y)};T.prototype.entries=T.prototype[Symbol.iterator]=function(){return J(this)};var X=function(e){return e.key},ee=n.keys=function(e){return Q(e,X)};T.prototype.keys=function(){return ee(this)};var te=function(e){return e.value},ne=n.values=T.prototype.values=function(e){return Q(e,te)};T.prototype.values=function(){return ne(this)};var re=n.fold=function(e,t,n){var r=n._root;if(1===r.type)return e(t,r.value,r.key);for(var o=[r.children],i=void 0;i=o.pop();)for(var a=0,s=i.length;a<s;){var l=i[a++];l&&l.type&&(1===l.type?t=e(t,l.value,l.key):o.push(l.children))}return t};T.prototype.fold=function(e,t){return re(e,t,this)};var oe=n.forEach=function(e,t){return re((function(n,r,o){return e(r,o,t)}),null,t)};T.prototype.forEach=function(e){return oe(e,this)};var ie=n.count=function(e){return e._size};T.prototype.count=function(){return ie(this)},Object.defineProperty(T.prototype,"size",{get:T.prototype.count}),e.exports?e.exports=n:(void 0).hamt=n},ce(de={exports:{}},de.exports),de.exports);class he{constructor(e){l(this,"_map",void 0),this._map=new Map(null==e?void 0:e.entries())}keys(){return this._map.keys()}entries(){return this._map.entries()}get(e){return this._map.get(e)}has(e){return this._map.has(e)}set(e,t){return this._map.set(e,t),this}delete(e){return this._map.delete(e),this}clone(){return me(this)}toMap(){return new Map(this._map)}}class pe{constructor(e){if(l(this,"_hamt",fe.empty.beginMutation()),e instanceof pe){const t=e._hamt.endMutation();e._hamt=t.beginMutation(),this._hamt=t.beginMutation()}else if(e)for(const[t,n]of e.entries())this._hamt.set(t,n)}keys(){return this._hamt.keys()}entries(){return this._hamt.entries()}get(e){return this._hamt.get(e)}has(e){return this._hamt.has(e)}set(e,t){return this._hamt.set(e,t),this}delete(e){return this._hamt.delete(e),this}clone(){return me(this)}toMap(){return new Map(this._hamt)}}function me(e){return O("recoil_hamt_2020")?new pe(e):new he(e)}var ve=me,ge=Object.freeze({__proto__:null,persistentMap:ve});var ye=function(e,...t){const n=new Set;e:for(const r of e){for(const e of t)if(e.has(r))continue e;n.add(r)}return n};var be=function(e,t){const n=new Map;return e.forEach(((e,r)=>{n.set(r,t(e,r))})),n};function Ae(e,t,n,r){const{nodeDeps:o,nodeToNodeSubscriptions:i}=n,a=o.get(e);if(a&&r&&a!==r.nodeDeps.get(e))return;o.set(e,t);const l=null==a?t:ye(t,a);for(const t of l){i.has(t)||i.set(t,new Set);s(i.get(t)).add(e)}if(a){const n=ye(a,t);for(const t of n){if(!i.has(t))return;const n=s(i.get(t));n.delete(e),0===n.size&&i.delete(t)}}}var we={cloneGraph:function(e){return{nodeDeps:be(e.nodeDeps,(e=>new Set(e))),nodeToNodeSubscriptions:be(e.nodeToNodeSubscriptions,(e=>new Set(e)))}},graph:function(){return{nodeDeps:new Map,nodeToNodeSubscriptions:new Map}},saveDepsToStore:function(e,t,n,r){var o,i,a,s;const l=n.getState();r!==l.currentTree.version&&r!==(null===(o=l.nextTree)||void 0===o?void 0:o.version)&&r!==(null===(i=l.previousTree)||void 0===i?void 0:i.version)&&I("Tried to save dependencies to a discarded tree");const u=n.getGraph(r);if(Ae(e,t,u),r===(null===(a=l.previousTree)||void 0===a?void 0:a.version)){Ae(e,t,n.getGraph(l.currentTree.version),u)}if(r===(null===(s=l.previousTree)||void 0===s?void 0:s.version)||r===l.currentTree.version){var c;const r=null===(c=l.nextTree)||void 0===c?void 0:c.version;if(void 0!==r){Ae(e,t,n.getGraph(r),u)}}}};let _e=0;let Se=0;let ke=0;var Ee={getNextTreeStateVersion:()=>_e++,getNextStoreID:()=>Se++,getNextComponentID:()=>ke++};const{persistentMap:xe}=ge,{graph:Te}=we,{getNextTreeStateVersion:Ce}=Ee;function Re(){const e=Ce();return{version:e,stateID:e,transactionMetadata:{},dirtyAtoms:new Set,atomValues:xe(),nonvalidatedAtoms:xe()}}var Ne={makeEmptyTreeState:Re,makeEmptyStoreState:function(){const e=Re();return{currentTree:e,nextTree:null,previousTree:null,commitDepth:0,knownAtoms:new Set,knownSelectors:new Set,transactionSubscriptions:new Map,nodeTransactionSubscriptions:new Map,nodeToComponentSubscriptions:new Map,queuedComponentCallbacks_DEPRECATED:[],suspendedComponentResolvers:new Set,graphsByVersion:(new Map).set(e.version,Te()),retention:{referenceCounts:new Map,nodesRetainedByZone:new Map,retainablesToCheckForRelease:new Set},nodeCleanupFunctions:new Map}},getNextTreeStateVersion:Ce};class Oe{}var Le={RetentionZone:Oe,retentionZone:function(){return new Oe}};var ze={setByAddingToSet:function(e,t){const n=new Set(e);return n.add(t),n},setByDeletingFromSet:function(e,t){const n=new Set(e);return n.delete(t),n},mapBySettingInMap:function(e,t,n){const r=new Map(e);return r.set(t,n),r},mapByUpdatingInMap:function(e,t,n){const r=new Map(e);return r.set(t,n(r.get(t))),r},mapByDeletingFromMap:function(e,t){const n=new Map(e);return n.delete(t),n},mapByDeletingMultipleFromMap:function(e,t){const n=new Map(e);return t.forEach((e=>n.delete(e))),n}};var Be=function*(e,t){let n=0;for(const r of e)t(r,n++)&&(yield r)};var Ie=function(e,t){return new Proxy(e,{get:(e,n)=>(!(n in e)&&n in t&&(e[n]=t[n]()),e[n]),ownKeys:e=>Object.keys(e)})};const{getNode:Pe,getNodeMaybe:De,recoilValuesForKeys:Me}=le,{RetentionZone:Ue}=Le,{setByAddingToSet:Fe}=ze,Ve=Object.freeze(new Set);class je extends Error{}function We(e,t,n,r){const o=e.getState();if(o.nodeCleanupFunctions.has(n))return;const i=Pe(n),a=function(e,t,n){if(!O("recoil_memory_managament_2020"))return()=>{};const{nodesRetainedByZone:r}=e.getState().retention;function o(e){let n=r.get(e);n||r.set(e,n=new Set),n.add(t)}if(n instanceof Ue)o(n);else if(Array.isArray(n))for(const e of n)o(e);return()=>{if(!O("recoil_memory_managament_2020"))return;const{retention:r}=e.getState();function o(e){const n=r.nodesRetainedByZone.get(e);null==n||n.delete(t),n&&0===n.size&&r.nodesRetainedByZone.delete(e)}if(n instanceof Ue)o(n);else if(Array.isArray(n))for(const e of n)o(e)}}(e,n,i.retainedBy),s=i.init(e,t,r);o.nodeCleanupFunctions.set(n,(()=>{s(),a()}))}function $e(e,t,n){return Pe(n).peek(e,t)}function He(e,t,n){const r=new Set,o=Array.from(n),i=e.getGraph(t.version);for(let e=o.pop();e;e=o.pop()){var a;r.add(e);const t=null!==(a=i.nodeToNodeSubscriptions.get(e))&&void 0!==a?a:Ve;for(const e of t)r.has(e)||o.push(e)}return r}var Ze={getNodeLoadable:function(e,t,n){return We(e,t,n,"get"),Pe(n).get(e,t)},peekNodeLoadable:$e,setNodeValue:function(e,t,n,r){const o=Pe(n);if(null==o.set)throw new je(`Attempt to set read-only RecoilValue: ${n}`);const i=o.set;return We(e,t,n,"set"),i(e,t,r)},initializeNode:function(e,t,n){We(e,e.getState().currentTree,t,n)},cleanUpNode:function(e,t){var n;const r=e.getState();null===(n=r.nodeCleanupFunctions.get(t))||void 0===n||n(),r.nodeCleanupFunctions.delete(t)},setUnvalidatedAtomValue_DEPRECATED:function(e,t,n){var r;const o=De(t);return null==o||null===(r=o.invalidate)||void 0===r||r.call(o,e),{...e,atomValues:e.atomValues.clone().delete(t),nonvalidatedAtoms:e.nonvalidatedAtoms.clone().set(t,n),dirtyAtoms:Fe(e.dirtyAtoms,t)}},peekNodeInfo:function(e,t,n){const r=e.getState(),o=e.getGraph(t.version),i=Pe(n).nodeType;return Ie({type:i},{loadable:()=>$e(e,t,n),isActive:()=>r.knownAtoms.has(n)||r.knownSelectors.has(n),isSet:()=>"selector"!==i&&t.atomValues.has(n),isModified:()=>t.dirtyAtoms.has(n),deps:()=>{var e;return Me(null!==(e=o.nodeDeps.get(n))&&void 0!==e?e:[])},subscribers:()=>{var o,i;return{nodes:Me(Be(He(e,t,new Set([n])),(e=>e!==n))),components:X(null!==(o=null===(i=r.nodeToComponentSubscriptions.get(n))||void 0===i?void 0:i.values())&&void 0!==o?o:[],(([e])=>({name:e})))}}})},getDownstreamNodes:He};let qe=null;var Ge={setInvalidateMemoizedSnapshot:function(e){qe=e},invalidateMemoizedSnapshot:function(){var e;null===(e=qe)||void 0===e||e()}};const{getDownstreamNodes:Ke,getNodeLoadable:Qe,setNodeValue:Ye}=Ze,{getNextComponentID:Je}=Ee,{getNode:Xe,getNodeMaybe:et}=le,{DefaultValue:tt}=le,{reactMode:nt}=F,{AbstractRecoilValue:rt,RecoilState:ot,RecoilValueReadOnly:it,isRecoilValue:at}=Y,{invalidateMemoizedSnapshot:st}=Ge;function lt(e,t,n){if("set"===n.type){const{recoilValue:r,valueOrUpdater:o}=n,a=function(e,t,{key:n},r){if("function"==typeof r){const o=Qe(e,t,n);if("loading"===o.state){const e=`Tried to set atom or selector "${n}" using an updater function while the current state is pending, this is not currently supported.`;throw I(e),i(e)}if("hasError"===o.state)throw o.contents;return r(o.contents)}return r}(e,t,r,o),s=Ye(e,t,r.key,a);for(const[e,n]of s.entries())ut(t,e,n)}else if("setLoadable"===n.type){const{recoilValue:{key:e},loadable:r}=n;ut(t,e,r)}else if("markModified"===n.type){const{recoilValue:{key:e}}=n;t.dirtyAtoms.add(e)}else if("setUnvalidated"===n.type){var r;const{recoilValue:{key:e},unvalidatedValue:o}=n,i=et(e);null==i||null===(r=i.invalidate)||void 0===r||r.call(i,t),t.atomValues.delete(e),t.nonvalidatedAtoms.set(e,o),t.dirtyAtoms.add(e)}else I(`Unknown action ${n.type}`)}function ut(e,t,n){"hasValue"===n.state&&n.contents instanceof tt?e.atomValues.delete(t):e.atomValues.set(t,n),e.dirtyAtoms.add(t),e.nonvalidatedAtoms.delete(t)}function ct(e,t){e.replaceState((n=>{const r=ht(n);for(const n of t)lt(e,r,n);return pt(e,r),st(),r}))}function dt(e,t){if(ft.length){const n=ft[ft.length-1];let r=n.get(e);r||n.set(e,r=[]),r.push(t)}else ct(e,[t])}const ft=[];function ht(e){return{...e,atomValues:e.atomValues.clone(),nonvalidatedAtoms:e.nonvalidatedAtoms.clone(),dirtyAtoms:new Set(e.dirtyAtoms)}}function pt(e,t){const n=Ke(e,t,t.dirtyAtoms);for(const e of n){var r,o;null===(r=et(e))||void 0===r||null===(o=r.invalidate)||void 0===o||o.call(r,t)}}function mt(e,t,n){dt(e,{type:"set",recoilValue:t,valueOrUpdater:n})}var vt={RecoilValueReadOnly:it,AbstractRecoilValue:rt,RecoilState:ot,getRecoilValueAsLoadable:function(e,{key:t},n=e.getState().currentTree){var r,o;const i=e.getState();n.version!==i.currentTree.version&&n.version!==(null===(r=i.nextTree)||void 0===r?void 0:r.version)&&n.version!==(null===(o=i.previousTree)||void 0===o?void 0:o.version)&&I("Tried to read from a discarded tree");const a=Qe(e,n,t);return"loading"===a.state&&a.contents.catch((()=>{})),a},setRecoilValue:mt,setRecoilValueLoadable:function(e,t,n){if(n instanceof tt)return mt(e,t,n);dt(e,{type:"setLoadable",recoilValue:t,loadable:n})},markRecoilValueModified:function(e,t){dt(e,{type:"markModified",recoilValue:t})},setUnvalidatedRecoilValue:function(e,t,n){dt(e,{type:"setUnvalidated",recoilValue:t,unvalidatedValue:n})},subscribeToRecoilValue:function(e,{key:t},n,r=null){const o=Je(),i=e.getState();i.nodeToComponentSubscriptions.has(t)||i.nodeToComponentSubscriptions.set(t,new Map),s(i.nodeToComponentSubscriptions.get(t)).set(o,[null!=r?r:"<not captured>",n]);const a=nt();if(a.early&&("LEGACY"===a.mode||"MUTABLE_SOURCE"===a.mode)){const r=e.getState().nextTree;r&&r.dirtyAtoms.has(t)&&n(r)}return{release:()=>{const n=e.getState(),r=n.nodeToComponentSubscriptions.get(t);void 0!==r&&r.has(o)?(r.delete(o),0===r.size&&n.nodeToComponentSubscriptions.delete(t)):I(`Subscription missing at release time for atom ${t}. This is a bug in Recoil.`)}}},isRecoilValue:at,applyAtomValueWrites:function(e,t){const n=e.clone();return t.forEach(((e,t)=>{"hasValue"===e.state&&e.contents instanceof tt?n.delete(t):n.set(t,e)})),n},batchStart:function(){const e=new Map;return ft.push(e),()=>{for(const[t,n]of e)ct(t,n);ft.pop()!==e&&I("Incorrect order of batch popping")}},writeLoadableToTreeState:ut,invalidateDownstreams:pt,copyTreeState:ht,refreshRecoilValue:function(e,t){var n;const{currentTree:r}=e.getState(),o=Xe(t.key);null===(n=o.clearCache)||void 0===n||n.call(o,e,r)}};var gt=function(e,t,n){const r=e.entries();let o=r.next();for(;!o.done;){const i=o.value;if(t.call(n,i[1],i[0],e))return!0;o=r.next()}return!1};const{cleanUpNode:yt}=Ze,{deleteNodeConfigIfPossible:bt,getNode:At}=le,{RetentionZone:wt}=Le,_t=new Set;function St(e,t){const n=e.getState(),r=n.currentTree;if(n.nextTree)return void I("releaseNodesNowOnCurrentTree should only be called at the end of a batch");const o=new Set;for(const e of t)if(e instanceof wt)for(const t of Et(n,e))o.add(t);else o.add(e);const i=function(e,t){const n=e.getState(),r=n.currentTree,o=e.getGraph(r.version),i=new Set,a=new Set;return l(t),i;function l(t){const u=new Set,c=function(e,t,n,r,o){const i=e.getGraph(t.version),a=[],l=new Set;for(;n.size>0;)u(s(n.values().next().value));return a;function u(e){if(r.has(e)||o.has(e))return void n.delete(e);if(l.has(e))return;const t=i.nodeToNodeSubscriptions.get(e);if(t)for(const e of t)u(e);l.add(e),n.delete(e),a.push(e)}}(e,r,t,i,a);for(const e of c){var d;if("recoilRoot"===At(e).retainedBy){a.add(e);continue}if((null!==(d=n.retention.referenceCounts.get(e))&&void 0!==d?d:0)>0){a.add(e);continue}if(xt(e).some((e=>n.retention.referenceCounts.get(e)))){a.add(e);continue}const t=o.nodeToNodeSubscriptions.get(e);t&&gt(t,(e=>a.has(e)))?a.add(e):(i.add(e),u.add(e))}const f=new Set;for(const e of u)for(const t of null!==(h=o.nodeDeps.get(e))&&void 0!==h?h:_t){var h;i.has(t)||f.add(t)}f.size&&l(f)}}(e,o);for(const t of i)kt(e,r,t)}function kt(e,t,n){if(!O("recoil_memory_managament_2020"))return;yt(e,n);const r=e.getState();r.knownAtoms.delete(n),r.knownSelectors.delete(n),r.nodeTransactionSubscriptions.delete(n),r.retention.referenceCounts.delete(n);const o=xt(n);for(const e of o){var i;null===(i=r.retention.nodesRetainedByZone.get(e))||void 0===i||i.delete(n)}t.atomValues.delete(n),t.dirtyAtoms.delete(n),t.nonvalidatedAtoms.delete(n);const a=r.graphsByVersion.get(t.version);if(a){const e=a.nodeDeps.get(n);if(void 0!==e){a.nodeDeps.delete(n);for(const t of e){var s;null===(s=a.nodeToNodeSubscriptions.get(t))||void 0===s||s.delete(n)}}a.nodeToNodeSubscriptions.delete(n)}bt(n)}function Et(e,t){var n;return null!==(n=e.retention.nodesRetainedByZone.get(t))&&void 0!==n?n:_t}function xt(e){const t=At(e).retainedBy;return void 0===t||"components"===t||"recoilRoot"===t?[]:t instanceof wt?[t]:t}function Tt(e,t){if(!O("recoil_memory_managament_2020"))return;e.getState().retention.referenceCounts.delete(t),function(e,t){const n=e.getState();n.nextTree?n.retention.retainablesToCheckForRelease.add(t):St(e,new Set([t]))}(e,t)}var Ct={SUSPENSE_TIMEOUT_MS:12e4,updateRetainCount:function(e,t,n){var r;if(!O("recoil_memory_managament_2020"))return;const o=e.getState().retention.referenceCounts,i=(null!==(r=o.get(t))&&void 0!==r?r:0)+n;0===i?Tt(e,t):o.set(t,i)},updateRetainCountToZero:Tt,releaseScheduledRetainablesNow:function(e){if(!O("recoil_memory_managament_2020"))return;const t=e.getState();St(e,t.retention.retainablesToCheckForRelease),t.retention.retainablesToCheckForRelease.clear()},retainedByOptionWithDefault:function(e){return void 0===e?"recoilRoot":e}};const{unstable_batchedUpdates:Rt}=o;var Nt={unstable_batchedUpdates:Rt};const{unstable_batchedUpdates:Ot}=Nt;var Lt={unstable_batchedUpdates:Ot};const{batchStart:zt}=vt,{unstable_batchedUpdates:Bt}=Lt;let It=Bt;var Pt={getBatcher:()=>It,setBatcher:e=>{It=e},batchUpdates:e=>{It((()=>{let t=()=>{};try{t=zt(),e()}finally{t()}}))}};var Dt=function*(e){for(const t of e)for(const e of t)yield e};const Mt="undefined"==typeof Window||"undefined"==typeof window,Ut="undefined"!=typeof navigator&&"ReactNative"===navigator.product;var Ft={isSSR:Mt,isReactNative:Ut,isWindow:e=>!Mt&&(e===window||e instanceof Window)};var Vt={memoizeWithArgsHash:function(e,t){let n;return(...r)=>{n||(n={});const o=t(...r);return Object.hasOwnProperty.call(n,o)||(n[o]=e(...r)),n[o]}},memoizeOneWithArgsHash:function(e,t){let n,r;return(...o)=>{const i=t(...o);return n===i||(n=i,r=e(...o)),r}},memoizeOneWithArgsHashAndInvalidation:function(e,t){let n,r;return[(...o)=>{const i=t(...o);return n===i||(n=i,r=e(...o)),r},()=>{n=null}]}};const{batchUpdates:jt}=Pt,{initializeNode:Wt,peekNodeInfo:$t}=Ze,{graph:Ht}=we,{getNextStoreID:Zt}=Ee,{DEFAULT_VALUE:qt,recoilValues:Gt,recoilValuesForKeys:Kt}=le,{AbstractRecoilValue:Qt,getRecoilValueAsLoadable:Yt,setRecoilValue:Jt,setUnvalidatedRecoilValue:Xt}=vt,{updateRetainCount:en}=Ct,{setInvalidateMemoizedSnapshot:tn}=Ge,{getNextTreeStateVersion:nn,makeEmptyStoreState:rn}=Ne,{isSSR:on}=Ft,{memoizeOneWithArgsHashAndInvalidation:an}=Vt;class sn{constructor(e,t){l(this,"_store",void 0),l(this,"_refCount",1),l(this,"getLoadable",(e=>(this.checkRefCount_INTERNAL(),Yt(this._store,e)))),l(this,"getPromise",(e=>(this.checkRefCount_INTERNAL(),this.getLoadable(e).toPromise()))),l(this,"getNodes_UNSTABLE",(e=>{if(this.checkRefCount_INTERNAL(),!0===(null==e?void 0:e.isModified)){if(!1===(null==e?void 0:e.isInitialized))return[];const t=this._store.getState().currentTree;return Kt(t.dirtyAtoms)}const t=this._store.getState().knownAtoms,n=this._store.getState().knownSelectors;return null==(null==e?void 0:e.isInitialized)?Gt.values():!0===e.isInitialized?Kt(Dt([t,n])):Be(Gt.values(),(({key:e})=>!t.has(e)&&!n.has(e)))})),l(this,"getInfo_UNSTABLE",(({key:e})=>(this.checkRefCount_INTERNAL(),$t(this._store,this._store.getState().currentTree,e)))),l(this,"map",(e=>{this.checkRefCount_INTERNAL();const t=new dn(this,jt);return e(t),t})),l(this,"asyncMap",(async e=>{this.checkRefCount_INTERNAL();const t=new dn(this,jt);return t.retain(),await e(t),t.autoRelease_INTERNAL(),t})),this._store={storeID:Zt(),parentStoreID:t,getState:()=>e,replaceState:t=>{e.currentTree=t(e.currentTree)},getGraph:t=>{const n=e.graphsByVersion;if(n.has(t))return s(n.get(t));const r=Ht();return n.set(t,r),r},subscribeToTransactions:()=>({release:()=>{}}),addTransactionMetadata:()=>{throw i("Cannot subscribe to Snapshots")}};for(const e of this._store.getState().knownAtoms)Wt(this._store,e,"get"),en(this._store,e,1);this.autoRelease_INTERNAL()}retain(){this._refCount<=0&&I("Attempt to retain() Snapshot that was already released."),this._refCount++;let e=!1;return()=>{e||(e=!0,this._release())}}autoRelease_INTERNAL(){on||window.setTimeout((()=>this._release()),10)}_release(){if(this._refCount--,0===this._refCount){if(this._store.getState().nodeCleanupFunctions.forEach((e=>e())),this._store.getState().nodeCleanupFunctions.clear(),!O("recoil_memory_managament_2020"))return}else this._refCount}isRetained(){return this._refCount>0}checkRefCount_INTERNAL(){O("recoil_memory_managament_2020")&&this._refCount}getStore_INTERNAL(){return this.checkRefCount_INTERNAL(),this._store}getID(){return this.checkRefCount_INTERNAL(),this._store.getState().currentTree.stateID}getStoreID(){return this.checkRefCount_INTERNAL(),this._store.storeID}}function ln(e,t,n=!1){const r=e.getState(),o=n?nn():t.version;return{currentTree:{version:n?o:t.version,stateID:n?o:t.stateID,transactionMetadata:{...t.transactionMetadata},dirtyAtoms:new Set(t.dirtyAtoms),atomValues:t.atomValues.clone(),nonvalidatedAtoms:t.nonvalidatedAtoms.clone()},commitDepth:0,nextTree:null,previousTree:null,knownAtoms:new Set(r.knownAtoms),knownSelectors:new Set(r.knownSelectors),transactionSubscriptions:new Map,nodeTransactionSubscriptions:new Map,nodeToComponentSubscriptions:new Map,queuedComponentCallbacks_DEPRECATED:[],suspendedComponentResolvers:new Set,graphsByVersion:(new Map).set(o,e.getGraph(t.version)),retention:{referenceCounts:new Map,nodesRetainedByZone:new Map,retainablesToCheckForRelease:new Set},nodeCleanupFunctions:new Map(X(r.nodeCleanupFunctions.entries(),(([e])=>[e,()=>{}])))}}const[un,cn]=an(((e,t)=>{var n;const r=e.getState(),o="latest"===t?null!==(n=r.nextTree)&&void 0!==n?n:r.currentTree:s(r.previousTree);return new sn(ln(e,o),e.storeID)}),((e,t)=>{var n,r;return String(t)+String(e.storeID)+String(null===(n=e.getState().nextTree)||void 0===n?void 0:n.version)+String(e.getState().currentTree.version)+String(null===(r=e.getState().previousTree)||void 0===r?void 0:r.version)}));tn(cn);class dn extends sn{constructor(e,t){super(ln(e.getStore_INTERNAL(),e.getStore_INTERNAL().getState().currentTree,!0),e.getStoreID()),l(this,"_batch",void 0),l(this,"set",((e,t)=>{this.checkRefCount_INTERNAL();const n=this.getStore_INTERNAL();this._batch((()=>{en(n,e.key,1),Jt(this.getStore_INTERNAL(),e,t)}))})),l(this,"reset",(e=>{this.checkRefCount_INTERNAL();const t=this.getStore_INTERNAL();this._batch((()=>{en(t,e.key,1),Jt(this.getStore_INTERNAL(),e,qt)}))})),l(this,"setUnvalidatedAtomValues_DEPRECATED",(e=>{this.checkRefCount_INTERNAL();const t=this.getStore_INTERNAL();jt((()=>{for(const[n,r]of e.entries())en(t,n,1),Xt(t,new Qt(n),r)}))})),this._batch=t}}var fn={Snapshot:sn,MutableSnapshot:dn,freshSnapshot:function(e){const t=new sn(rn());return null!=e?t.map(e):t},cloneSnapshot:function(e,t="latest"){const n=un(e,t);return n.isRetained()?n:(cn(),un(e,t))}},hn=fn.Snapshot,pn=fn.MutableSnapshot,mn=fn.freshSnapshot,vn=fn.cloneSnapshot,gn=Object.freeze({__proto__:null,Snapshot:hn,MutableSnapshot:pn,freshSnapshot:mn,cloneSnapshot:vn});var yn=function(...e){const t=new Set;for(const n of e)for(const e of n)t.add(e);return t};const{useRef:bn}=r;var An=function(e){const t=bn(e);return t.current===e&&"function"==typeof e&&(t.current=e()),t};const{getNextTreeStateVersion:wn,makeEmptyStoreState:_n}=Ne,{cleanUpNode:Sn,getDownstreamNodes:kn,initializeNode:En,setNodeValue:xn,setUnvalidatedAtomValue_DEPRECATED:Tn}=Ze,{graph:Cn}=we,{cloneGraph:Rn}=we,{getNextStoreID:Nn}=Ee,{createMutableSource:On,reactMode:Ln}=F,{applyAtomValueWrites:zn}=vt,{releaseScheduledRetainablesNow:Bn}=Ct,{freshSnapshot:In}=gn,{useCallback:Pn,useContext:Dn,useEffect:Mn,useMemo:Un,useRef:Fn,useState:Vn}=r;function jn(){throw i("This component must be used inside a <RecoilRoot> component.")}const Wn=Object.freeze({storeID:Nn(),getState:jn,replaceState:jn,getGraph:jn,subscribeToTransactions:jn,addTransactionMetadata:jn});let $n=!1;function Hn(e){if($n)throw i("An atom update was triggered within the execution of a state updater function. State updater functions provided to Recoil must be pure functions.");const t=e.getState();if(null===t.nextTree){O("recoil_memory_managament_2020")&&O("recoil_release_on_cascading_update_killswitch_2021")&&t.commitDepth>0&&Bn(e);const n=t.currentTree.version,r=wn();t.nextTree={...t.currentTree,version:r,stateID:r,dirtyAtoms:new Set,transactionMetadata:{}},t.graphsByVersion.set(r,Rn(s(t.graphsByVersion.get(n))))}}const Zn=r.createContext({current:Wn}),qn=()=>Dn(Zn),Gn=r.createContext(null);function Kn(e,t,n){const r=kn(e,n,n.dirtyAtoms);for(const e of r){const r=t.nodeToComponentSubscriptions.get(e);if(r)for(const[e,[t,o]]of r)o(n)}}function Qn(e){const t=e.getState(),n=t.currentTree,r=n.dirtyAtoms;if(r.size){for(const[n,o]of t.nodeTransactionSubscriptions)if(r.has(n))for(const[t,n]of o)n(e);for(const[n,r]of t.transactionSubscriptions)r(e);(!Ln().early||t.suspendedComponentResolvers.size>0)&&(Kn(e,t,n),t.suspendedComponentResolvers.forEach((e=>e())),t.suspendedComponentResolvers.clear())}t.queuedComponentCallbacks_DEPRECATED.forEach((e=>e(n))),t.queuedComponentCallbacks_DEPRECATED.splice(0,t.queuedComponentCallbacks_DEPRECATED.length)}function Yn({setNotifyBatcherOfChange:e}){const t=qn(),[,n]=Vn([]);return e((()=>n({}))),Mn((()=>(e((()=>n({}))),()=>{e((()=>{}))})),[e]),Mn((()=>{ue.enqueueExecution("Batcher",(()=>{!function(e){const t=e.getState();t.commitDepth++;try{const{nextTree:n}=t;if(null==n)return;t.previousTree=t.currentTree,t.currentTree=n,t.nextTree=null,Qn(e),null!=t.previousTree?t.graphsByVersion.delete(t.previousTree.version):I("Ended batch with no previous state, which is unexpected","recoil"),t.previousTree=null,O("recoil_memory_managament_2020")&&null==n&&Bn(e)}finally{t.commitDepth--}}(t.current)}))})),null}let Jn=0;function Xn({initializeState_DEPRECATED:e,initializeState:t,store_INTERNAL:n,children:o}){let i;const a=e=>{const t=i.current.graphsByVersion;if(t.has(e))return s(t.get(e));const n=Cn();return t.set(e,n),n},l=(e,t)=>{if(null==t){const{transactionSubscriptions:t}=h.current.getState(),n=Jn++;return t.set(n,e),{release:()=>{t.delete(n)}}}{const{nodeTransactionSubscriptions:n}=h.current.getState();n.has(t)||n.set(t,new Map);const r=Jn++;return s(n.get(t)).set(r,e),{release:()=>{const e=n.get(t);e&&(e.delete(r),0===e.size&&n.delete(t))}}}},u=e=>{Hn(h.current);for(const t of Object.keys(e))s(h.current.getState().nextTree).transactionMetadata[t]=e[t]},c=e=>{Hn(h.current);const t=s(i.current.nextTree);let n;try{$n=!0,n=e(t)}finally{$n=!1}n!==t&&(i.current.nextTree=n,Ln().early&&Kn(h.current,i.current,n),s(d.current)())},d=Fn(null),f=Pn((e=>{d.current=e}),[d]),h=An((()=>null!=n?n:{storeID:Nn(),getState:()=>i.current,replaceState:c,getGraph:a,subscribeToTransactions:l,addTransactionMetadata:u}));null!=n&&(h.current=n),i=An((()=>null!=e?function(e,t){const n=_n();return t({set:(t,r)=>{const o=n.currentTree,i=xn(e,o,t.key,r),a=new Set(i.keys()),s=o.nonvalidatedAtoms.clone();for(const e of a)s.delete(e);n.currentTree={...o,dirtyAtoms:yn(o.dirtyAtoms,a),atomValues:zn(o.atomValues,i),nonvalidatedAtoms:s}},setUnvalidatedAtomValues:e=>{e.forEach(((e,t)=>{n.currentTree=Tn(n.currentTree,t,e)}))}}),n}(h.current,e):null!=t?function(e){const t=In(e),n=t.getStore_INTERNAL().getState();return t.retain(),n.nodeCleanupFunctions.forEach((e=>e())),n.nodeCleanupFunctions.clear(),n}(t):_n()));const p=Un((()=>null==On?void 0:On(i,(()=>i.current.currentTree.version))),[i]);return Mn((()=>{const e=h.current;for(const t of new Set(e.getState().knownAtoms))En(e,t,"get");return()=>{for(const t of e.getState().knownAtoms)Sn(e,t)}}),[h]),r.createElement(Zn.Provider,{value:h},r.createElement(Gn.Provider,{value:p},r.createElement(Yn,{setNotifyBatcherOfChange:f}),o))}var er={RecoilRoot:function(e){const{override:t,...n}=e,o=qn();return!1===t&&o.current!==Wn?e.children:r.createElement(Xn,n)},useStoreRef:qn,useRecoilMutableSource:function(){const e=Dn(Gn);return null==e&&J("Attempted to use a Recoil hook outside of a <RecoilRoot>. <RecoilRoot> must be an ancestor of any component that uses Recoil hooks."),e},useRecoilStoreID:function(){return qn().current.storeID},notifyComponents_FOR_TESTING:Kn,sendEndOfBatchNotifications_FOR_TESTING:Qn};var tr=function(e,t){if(e===t)return!0;if(e.length!==t.length)return!1;for(let n=0,r=e.length;n<r;n++)if(e[n]!==t[n])return!1;return!0};const{useEffect:nr,useRef:rr}=r;var or=function(e){const t=rr();return nr((()=>{t.current=e})),t.current};const{useStoreRef:ir}=er,{SUSPENSE_TIMEOUT_MS:ar}=Ct,{updateRetainCount:sr}=Ct,{RetentionZone:lr}=Le,{useEffect:ur,useRef:cr}=r,{isSSR:dr}=Ft;var fr=function(e){if(O("recoil_memory_managament_2020"))return function(e){const t=(Array.isArray(e)?e:[e]).map((e=>e instanceof lr?e:e.key)),n=ir();ur((()=>{if(!O("recoil_memory_managament_2020"))return;const e=n.current;if(r.current&&!dr)window.clearTimeout(r.current),r.current=null;else for(const n of t)sr(e,n,1);return()=>{for(const n of t)sr(e,n,-1)}}),[n,...t]);const r=cr(),o=or(t);if(!(dr||void 0!==o&&tr(o,t))){const e=n.current;for(const n of t)sr(e,n,1);if(o)for(const t of o)sr(e,t,-1);r.current&&window.clearTimeout(r.current),r.current=window.setTimeout((()=>{r.current=null;for(const n of t)sr(e,n,-1)}),ar)}}(e)};var hr=function(){return"<component name not available>"};const{batchUpdates:pr}=Pt,{DEFAULT_VALUE:mr}=le,{currentRendererSupportsUseSyncExternalStore:vr,reactMode:gr,useMutableSource:yr,useSyncExternalStore:br}=F,{useRecoilMutableSource:Ar,useStoreRef:wr}=er,{isRecoilValue:_r}=Y,{AbstractRecoilValue:Sr,getRecoilValueAsLoadable:kr,setRecoilValue:Er,setUnvalidatedRecoilValue:xr,subscribeToRecoilValue:Tr}=vt,{useCallback:Cr,useEffect:Rr,useMemo:Nr,useRef:Or,useState:Lr}=r,{setByAddingToSet:zr}=ze;function Br(e,t,n){if("hasValue"===e.state)return e.contents;if("loading"===e.state){throw new Promise((e=>{n.current.getState().suspendedComponentResolvers.add(e)}))}throw"hasError"===e.state?e.contents:i(`Invalid value of loadable atom "${t.key}"`)}function Ir(e){const t=wr(),n=hr(),r=Cr((()=>{var n;const r=t.current,o=r.getState(),i=gr().early&&null!==(n=o.nextTree)&&void 0!==n?n:o.currentTree;return{loadable:kr(r,e,i),key:e.key}}),[t,e]),o=Cr((e=>{let t;return()=>{var n,r;const o=e();return null!==(n=t)&&void 0!==n&&n.loadable.is(o.loadable)&&(null===(r=t)||void 0===r?void 0:r.key)===o.key?t:(t=o,o)}}),[]),i=Nr((()=>o(r)),[r,o]),a=Cr((r=>{const o=t.current;return Tr(o,e,r,n).release}),[t,e,n]);return br(a,i,i).loadable}function Pr(e){const t=wr(),n=Cr((()=>{var n;const r=t.current,o=r.getState(),i=gr().early&&null!==(n=o.nextTree)&&void 0!==n?n:o.currentTree;return kr(r,e,i)}),[t,e]),r=Cr((()=>n()),[n]),o=hr(),a=Cr(((r,i)=>{const a=t.current;return Tr(a,e,(()=>{if(!O("recoil_suppress_rerender_in_callback"))return i();const e=n();u.current.is(e)||i(),u.current=e}),o).release}),[t,e,o,n]),s=Ar();if(null==s)throw i("Recoil hooks must be used in components contained within a <RecoilRoot> component.");const l=yr(s,r,a),u=Or(l);return Rr((()=>{u.current=l})),l}function Dr(e){const t=wr(),n=hr(),r=Cr((()=>{var n;const r=t.current,o=r.getState(),i=gr().early&&null!==(n=o.nextTree)&&void 0!==n?n:o.currentTree;return kr(r,e,i)}),[t,e]),o=Cr((()=>({loadable:r(),key:e.key})),[r,e.key]),i=Cr((e=>{const t=o();return e.loadable.is(t.loadable)&&e.key===t.key?e:t}),[o]);Rr((()=>{const r=Tr(t.current,e,(e=>{s(i)}),n);return s(i),r.release}),[n,e,t,i]);const[a,s]=Lr(o);return a.key!==e.key?o().loadable:a.loadable}function Mr(e){const t=wr(),[,n]=Lr([]),r=hr(),o=Cr((()=>{var n;const r=t.current,o=r.getState(),i=gr().early&&null!==(n=o.nextTree)&&void 0!==n?n:o.currentTree;return kr(r,e,i)}),[t,e]),i=o(),a=Or(i);return Rr((()=>{a.current=i})),Rr((()=>{const i=t.current,s=i.getState(),l=Tr(i,e,(e=>{var t;if(!O("recoil_suppress_rerender_in_callback"))return n([]);const r=o();null!==(t=a.current)&&void 0!==t&&t.is(r)||n(r),a.current=r}),r);if(s.nextTree)i.getState().queuedComponentCallbacks_DEPRECATED.push((()=>{a.current=null,n([])}));else{var u;if(!O("recoil_suppress_rerender_in_callback"))return n([]);const e=o();null!==(u=a.current)&&void 0!==u&&u.is(e)||n(e),a.current=e}return l.release}),[r,o,e,t]),i}function Ur(e){return O("recoil_memory_managament_2020")&&fr(e),{TRANSITION_SUPPORT:Dr,SYNC_EXTERNAL_STORE:vr()?Ir:Dr,MUTABLE_SOURCE:Pr,LEGACY:Mr}[gr().mode](e)}function Fr(e){const t=wr();return Br(Ur(e),e,t)}function Vr(e){const t=wr();return Cr((n=>{Er(t.current,e,n)}),[t,e])}function jr(e){return O("recoil_memory_managament_2020")&&fr(e),Dr(e)}function Wr(e){const t=wr();return Br(jr(e),e,t)}var $r={recoilComponentGetRecoilValueCount_FOR_TESTING:{current:0},useRecoilInterface:function(){const e=hr(),t=wr(),[,n]=Lr([]),r=Or(new Set);r.current=new Set;const o=Or(new Set),i=Or(new Map),a=Cr((e=>{const t=i.current.get(e);t&&(t.release(),i.current.delete(e))}),[i]),s=Cr(((e,t)=>{i.current.has(t)&&n([])}),[]);return Rr((()=>{const n=t.current;ye(r.current,o.current).forEach((t=>{if(i.current.has(t))return void J(`Double subscription to RecoilValue "${t}"`);const r=Tr(n,new Sr(t),(e=>s(e,t)),e);i.current.set(t,r);n.getState().nextTree?n.getState().queuedComponentCallbacks_DEPRECATED.push((()=>{s(n.getState(),t)})):s(n.getState(),t)})),ye(o.current,r.current).forEach((e=>{a(e)})),o.current=r.current})),Rr((()=>{const n=i.current;return ye(r.current,new Set(n.keys())).forEach((r=>{const o=Tr(t.current,new Sr(r),(e=>s(e,r)),e);n.set(r,o)})),()=>n.forEach(((e,t)=>a(t)))}),[e,t,a,s]),Nr((()=>{function e(e){return n=>{Er(t.current,e,n)}}function n(e){var n;r.current.has(e.key)||(r.current=zr(r.current,e.key));const o=t.current.getState();return kr(t.current,e,gr().early&&null!==(n=o.nextTree)&&void 0!==n?n:o.currentTree)}function o(e){return Br(n(e),e,t)}return{getRecoilValue:o,getRecoilValueLoadable:n,getRecoilState:function(t){return[o(t),e(t)]},getRecoilStateLoadable:function(t){return[n(t),e(t)]},getSetRecoilState:e,getResetRecoilState:function(e){return()=>Er(t.current,e,mr)}}}),[r,t])},useRecoilState:function(e){return[Fr(e),Vr(e)]},useRecoilStateLoadable:function(e){return[Ur(e),Vr(e)]},useRecoilValue:Fr,useRecoilValueLoadable:Ur,useResetRecoilState:function(e){const t=wr();return Cr((()=>{Er(t.current,e,mr)}),[t,e])},useSetRecoilState:Vr,useSetUnvalidatedAtomValues:function(){const e=wr();return(t,n={})=>{pr((()=>{e.current.addTransactionMetadata(n),t.forEach(((t,n)=>xr(e.current,new Sr(n),t)))}))}},useRecoilValueLoadable_TRANSITION_SUPPORT_UNSTABLE:jr,useRecoilValue_TRANSITION_SUPPORT_UNSTABLE:Wr,useRecoilState_TRANSITION_SUPPORT_UNSTABLE:function(e){return[Wr(e),Vr(e)]}};var Hr=function(e,t){const n=new Map;for(const[r,o]of e)t(o,r)&&n.set(r,o);return n};var Zr=function(e,t){const n=new Set;for(const r of e)t(r)&&n.add(r);return n};var qr=function(...e){const t=new Map;for(let n=0;n<e.length;n++){const r=e[n].keys();let o;for(;!(o=r.next()).done;)t.set(o.value,e[n].get(o.value))}return t};const{batchUpdates:Gr}=Pt,{DEFAULT_VALUE:Kr,getNode:Qr,nodes:Yr}=le,{useStoreRef:Jr}=er,{AbstractRecoilValue:Xr,setRecoilValueLoadable:eo}=vt,{SUSPENSE_TIMEOUT_MS:to}=Ct,{cloneSnapshot:no}=gn,{useCallback:ro,useEffect:oo,useRef:io,useState:ao}=r,{isSSR:so}=Ft;function lo(e){const t=Jr();oo((()=>t.current.subscribeToTransactions(e).release),[e,t])}function uo(e){const t=e.atomValues.toMap(),n=be(Hr(t,((e,t)=>{const n=Qr(t).persistence_UNSTABLE;return null!=n&&"none"!==n.type&&"hasValue"===e.state})),(e=>e.contents));return qr(e.nonvalidatedAtoms.toMap(),n)}function co(e,t){var n;const r=e.getState(),o=null!==(n=r.nextTree)&&void 0!==n?n:r.currentTree,i=t.getStore_INTERNAL().getState().currentTree;Gr((()=>{const n=new Set;for(const e of[o.atomValues.keys(),i.atomValues.keys()])for(const t of e){var r,a;(null===(r=o.atomValues.get(t))||void 0===r?void 0:r.contents)!==(null===(a=i.atomValues.get(t))||void 0===a?void 0:a.contents)&&Qr(t).shouldRestoreFromSnapshots&&n.add(t)}n.forEach((t=>{eo(e,new Xr(t),i.atomValues.has(t)?s(i.atomValues.get(t)):Kr)})),e.replaceState((e=>({...e,stateID:t.getID()})))}))}var fo={useRecoilSnapshot:function(){const e=Jr(),[t,n]=ao((()=>no(e.current))),r=or(t),o=io(),i=io();if(lo(ro((e=>n(no(e))),[])),oo((()=>{const e=t.retain();var n;o.current&&!so&&(window.clearTimeout(o.current),o.current=null,null===(n=i.current)||void 0===n||n.call(i),i.current=null);return()=>{window.setTimeout(e,10)}}),[t]),r!==t&&!so){var a;if(o.current)window.clearTimeout(o.current),o.current=null,null===(a=i.current)||void 0===a||a.call(i),i.current=null;i.current=t.retain(),o.current=window.setTimeout((()=>{var e;o.current=null,null===(e=i.current)||void 0===e||e.call(i),i.current=null}),to)}return t},gotoSnapshot:co,useGotoRecoilSnapshot:function(){const e=Jr();return ro((t=>co(e.current,t)),[e])},useRecoilTransactionObserver:function(e){lo(ro((t=>{const n=no(t,"latest"),r=no(t,"previous");e({snapshot:n,previousSnapshot:r})}),[e]))},useTransactionObservation_DEPRECATED:function(e){lo(ro((t=>{let n=t.getState().previousTree;const r=t.getState().currentTree;n||(I("Transaction subscribers notified without a previous tree being present -- this is a bug in Recoil"),n=t.getState().currentTree);const o=uo(r),i=uo(n),a=be(Yr,(e=>{var t,n,r,o;return{persistence_UNSTABLE:{type:null!==(t=null===(n=e.persistence_UNSTABLE)||void 0===n?void 0:n.type)&&void 0!==t?t:"none",backButton:null!==(r=null===(o=e.persistence_UNSTABLE)||void 0===o?void 0:o.backButton)&&void 0!==r&&r}}})),s=Zr(r.dirtyAtoms,(e=>o.has(e)||i.has(e)));e({atomValues:o,previousAtomValues:i,atomInfo:a,modifiedAtoms:s,transactionMetadata:{...r.transactionMetadata}})}),[e]))},useTransactionSubscription_DEPRECATED:lo};const{peekNodeInfo:ho}=Ze,{useStoreRef:po}=er;var mo=function(){const e=po();return({key:t})=>ho(e.current,e.current.getState().currentTree,t)};const{reactMode:vo}=F,{RecoilRoot:go,useStoreRef:yo}=er,{useMemo:bo}=r;var Ao=function(){"MUTABLE_SOURCE"===vo().mode&&console.warn("Warning: There are known issues using useRecoilBridgeAcrossReactRoots() in recoil_mutable_source rendering mode.  Please consider upgrading to recoil_sync_external_store mode.");const e=yo().current;return bo((()=>function({children:t}){return r.createElement(go,{store_INTERNAL:e},t)}),[e])};const{loadableWithValue:wo}=C,{initializeNode:_o}=Ze,{DEFAULT_VALUE:So,getNode:ko}=le,{copyTreeState:Eo,getRecoilValueAsLoadable:xo,invalidateDownstreams:To,writeLoadableToTreeState:Co}=vt;function Ro(e){return"atom"===ko(e.key).nodeType}class No{constructor(e,t){l(this,"_store",void 0),l(this,"_treeState",void 0),l(this,"_changes",void 0),l(this,"get",(e=>{if(this._changes.has(e.key))return this._changes.get(e.key);if(!Ro(e))throw i("Reading selectors within atomicUpdate is not supported");const t=xo(this._store,e,this._treeState);if("hasValue"===t.state)return t.contents;throw"hasError"===t.state?t.contents:i(`Expected Recoil atom ${e.key} to have a value, but it is in a loading state.`)})),l(this,"set",((e,t)=>{if(!Ro(e))throw i("Setting selectors within atomicUpdate is not supported");if("function"==typeof t){const n=this.get(e);this._changes.set(e.key,t(n))}else _o(this._store,e.key,"set"),this._changes.set(e.key,t)})),l(this,"reset",(e=>{this.set(e,So)})),this._store=e,this._treeState=t,this._changes=new Map}newTreeState_INTERNAL(){if(0===this._changes.size)return this._treeState;const e=Eo(this._treeState);for(const[t,n]of this._changes)Co(e,t,wo(n));return To(this._store,e),e}}var Oo=function(e){return t=>{e.replaceState((n=>{const r=new No(e,n);return t(r),r.newTreeState_INTERNAL()}))}},Lo=Oo,zo=Object.freeze({__proto__:null,atomicUpdater:Lo});var Bo=function(e,t){if(!e)throw new Error(t)};const{atomicUpdater:Io}=zo,{batchUpdates:Po}=Pt,{DEFAULT_VALUE:Do}=le,{useStoreRef:Mo}=er,{refreshRecoilValue:Uo,setRecoilValue:Fo}=vt,{cloneSnapshot:Vo}=gn,{gotoSnapshot:jo}=fo,{useCallback:Wo}=r;class $o{}const Ho=new $o;function Zo(e,t,n,r){let o,s=Ho;var l;(Po((()=>{const a="useRecoilCallback() expects a function that returns a function: it accepts a function of the type (RecoilInterface) => (Args) => ReturnType and returns a callback function (Args) => ReturnType, where RecoilInterface is an object {snapshot, set, ...} and Args and ReturnType are the argument and return types of the callback you want to create.  Please see the docs at recoiljs.org for details.";if("function"!=typeof t)throw i(a);const l=Ie({...null!=r?r:{},set:(t,n)=>Fo(e,t,n),reset:t=>Fo(e,t,Do),refresh:t=>Uo(e,t),gotoSnapshot:t=>jo(e,t),transact_UNSTABLE:t=>Io(e)(t)},{snapshot:()=>{const t=Vo(e);return o=t.retain(),t}}),u=t(l);if("function"!=typeof u)throw i(a);s=u(...n)})),s instanceof $o&&Bo(!1),a(s))?s.finally((()=>{var e;null===(e=o)||void 0===e||e()})):null===(l=o)||void 0===l||l();return s}var qo={recoilCallback:Zo,useRecoilCallback:function(e,t){const n=Mo();return Wo(((...t)=>Zo(n.current,e,t)),null!=t?[...t,n]:void 0)}};const{useStoreRef:Go}=er,{refreshRecoilValue:Ko}=vt,{useCallback:Qo}=r;var Yo=function(e){const t=Go();return Qo((()=>{const n=t.current;Ko(n,e)}),[e,t])};const{atomicUpdater:Jo}=zo,{useStoreRef:Xo}=er,{useMemo:ei}=r;var ti=function(e,t){const n=Xo();return ei((()=>(...t)=>{Jo(n.current)((n=>{e(n)(...t)}))}),null!=t?[...t,n]:void 0)};var ni=class{constructor(e){l(this,"value",void 0),this.value=e}},ri=Object.freeze({__proto__:null,WrappedValue:ni});const{isFastRefreshEnabled:oi}=F;class ii extends Error{}var ai=class{constructor(e){var t,n,r;l(this,"_name",void 0),l(this,"_numLeafs",void 0),l(this,"_root",void 0),l(this,"_onHit",void 0),l(this,"_onSet",void 0),l(this,"_mapNodeValue",void 0),this._name=null==e?void 0:e.name,this._numLeafs=0,this._root=null,this._onHit=null!==(t=null==e?void 0:e.onHit)&&void 0!==t?t:()=>{},this._onSet=null!==(n=null==e?void 0:e.onSet)&&void 0!==n?n:()=>{},this._mapNodeValue=null!==(r=null==e?void 0:e.mapNodeValue)&&void 0!==r?r:e=>e}size(){return this._numLeafs}root(){return this._root}get(e,t){var n;return null===(n=this.getLeafNode(e,t))||void 0===n?void 0:n.value}getLeafNode(e,t){if(null==this._root)return;let n=this._root;for(;n;){if(null==t||t.onNodeVisit(n),"leaf"===n.type)return this._onHit(n),n;const r=this._mapNodeValue(e(n.nodeKey));n=n.branches.get(r)}}set(e,t,n){const r=()=>{var r,o,i,a;let s,l;for(const[t,r]of e){var u,c,d;const e=this._root;if("leaf"===(null==e?void 0:e.type))throw this.invalidCacheError();const o=s;if(s=o?o.branches.get(l):e,s=null!==(u=s)&&void 0!==u?u:{type:"branch",nodeKey:t,parent:o,branches:new Map,branchKey:l},"branch"!==s.type||s.nodeKey!==t)throw this.invalidCacheError();null==o||o.branches.set(l,s),null==n||null===(c=n.onNodeVisit)||void 0===c||c.call(n,s),l=this._mapNodeValue(r),this._root=null!==(d=this._root)&&void 0!==d?d:s}const f=s?null===(r=s)||void 0===r?void 0:r.branches.get(l):this._root;if(null!=f&&("leaf"!==f.type||f.branchKey!==l))throw this.invalidCacheError();const h={type:"leaf",value:t,parent:s,branchKey:l};null===(o=s)||void 0===o||o.branches.set(l,h),this._root=null!==(i=this._root)&&void 0!==i?i:h,this._numLeafs++,this._onSet(h),null==n||null===(a=n.onNodeVisit)||void 0===a||a.call(n,h)};try{r()}catch(e){if(!(e instanceof ii))throw e;this.clear(),r()}}delete(e){const t=this.root();if(!t)return!1;if(e===t)return this._root=null,this._numLeafs=0,!0;let n=e.parent,r=e.branchKey;for(;n;){var o;if(n.branches.delete(r),n===t)return 0===n.branches.size?(this._root=null,this._numLeafs=0):this._numLeafs--,!0;if(n.branches.size>0)break;r=null===(o=n)||void 0===o?void 0:o.branchKey,n=n.parent}for(;n!==t;n=n.parent)if(null==n)return!1;return this._numLeafs--,!0}clear(){this._numLeafs=0,this._root=null}invalidCacheError(){const e=oi()?"Possible Fast Refresh module reload detected.  This may also be caused by an selector returning inconsistent values. Resetting cache.":"Invalid cache values.  This happens when selectors do not return consistent values for the same input dependency values.  That may also be caused when using Fast Refresh to change a selector implementation.  Resetting cache.";throw I(e+(null!=this._name?` - ${this._name}`:"")),new ii}},si=Object.freeze({__proto__:null,TreeCache:ai});var li=class{constructor(e){var t;l(this,"_maxSize",void 0),l(this,"_size",void 0),l(this,"_head",void 0),l(this,"_tail",void 0),l(this,"_map",void 0),l(this,"_keyMapper",void 0),this._maxSize=e.maxSize,this._size=0,this._head=null,this._tail=null,this._map=new Map,this._keyMapper=null!==(t=e.mapKey)&&void 0!==t?t:e=>e}head(){return this._head}tail(){return this._tail}size(){return this._size}maxSize(){return this._maxSize}has(e){return this._map.has(this._keyMapper(e))}get(e){const t=this._keyMapper(e),n=this._map.get(t);if(n)return this.set(e,n.value),n.value}set(e,t){const n=this._keyMapper(e);this._map.get(n)&&this.delete(e);const r=this.head(),o={key:e,right:r,left:null,value:t};r?r.left=o:this._tail=o,this._map.set(n,o),this._head=o,this._size++,this._maybeDeleteLRU()}_maybeDeleteLRU(){this.size()>this.maxSize()&&this.deleteLru()}deleteLru(){const e=this.tail();e&&this.delete(e.key)}delete(e){const t=this._keyMapper(e);if(!this._size||!this._map.has(t))return;const n=s(this._map.get(t)),r=n.right,o=n.left;r&&(r.left=n.left),o&&(o.right=n.right),n===this.head()&&(this._head=r),n===this.tail()&&(this._tail=o),this._map.delete(t),this._size--}clear(){this._size=0,this._head=null,this._tail=null,this._map=new Map}},ui=Object.freeze({__proto__:null,LRUCache:li});const{LRUCache:ci}=ui,{TreeCache:di}=si;var fi=function({name:e,maxSize:t,mapNodeValue:n=(e=>e)}){const r=new ci({maxSize:t}),o=new di({name:e,mapNodeValue:n,onHit:e=>{r.set(e,!0)},onSet:e=>{const n=r.tail();r.set(e,!0),n&&o.size()>t&&o.delete(n.key)}});return o};function hi(e,t,n){if("string"==typeof e&&!e.includes('"')&&!e.includes("\\"))return`"${e}"`;switch(typeof e){case"undefined":return"";case"boolean":return e?"true":"false";case"number":case"symbol":return String(e);case"string":return JSON.stringify(e);case"function":if(!0!==(null==t?void 0:t.allowFunctions))throw i("Attempt to serialize function in a Recoil cache key");return`__FUNCTION(${e.name})__`}if(null===e)return"null";var r;if("object"!=typeof e)return null!==(r=JSON.stringify(e))&&void 0!==r?r:"";if(a(e))return"__PROMISE__";if(Array.isArray(e))return`[${e.map(((e,n)=>hi(e,t,n.toString())))}]`;if("function"==typeof e.toJSON)return hi(e.toJSON(n),t,n);if(e instanceof Map){const r={};for(const[n,o]of e)r["string"==typeof n?n:hi(n,t)]=o;return hi(r,t,n)}return e instanceof Set?hi(Array.from(e).sort(((e,n)=>hi(e,t).localeCompare(hi(n,t)))),t,n):void 0!==Symbol&&null!=e[Symbol.iterator]&&"function"==typeof e[Symbol.iterator]?hi(Array.from(e),t,n):`{${Object.keys(e).filter((t=>void 0!==e[t])).sort().map((n=>`${hi(n,t)}:${hi(e[n],t,n)}`)).join(",")}}`}var pi=function(e,t={allowFunctions:!1}){return hi(e,t)};const{TreeCache:mi}=si,vi={equality:"reference",eviction:"keep-all",maxSize:1/0};var gi=function({equality:e=vi.equality,eviction:t=vi.eviction,maxSize:n=vi.maxSize}=vi,r){const o=function(e){switch(e){case"reference":return e=>e;case"value":return e=>pi(e)}throw i(`Unrecognized equality policy ${e}`)}(e);return function(e,t,n,r){switch(e){case"keep-all":return new mi({name:r,mapNodeValue:n});case"lru":return fi({name:r,maxSize:s(t),mapNodeValue:n});case"most-recent":return fi({name:r,maxSize:1,mapNodeValue:n})}throw i(`Unrecognized eviction policy ${e}`)}(t,n,o,r)};const{isReactNative:yi,isWindow:bi}=Ft;var Ai={startPerfBlock:function(e){return()=>null}};const{isLoadable:wi,loadableWithError:_i,loadableWithPromise:Si,loadableWithValue:ki}=C,{WrappedValue:Ei}=ri,{getNodeLoadable:xi,peekNodeLoadable:Ti,setNodeValue:Ci}=Ze,{saveDepsToStore:Ri}=we,{DEFAULT_VALUE:Ni,getConfigDeletionHandler:Oi,getNode:Li,registerNode:zi}=le,{isRecoilValue:Bi}=Y,{markRecoilValueModified:Ii}=vt,{retainedByOptionWithDefault:Pi}=Ct,{recoilCallback:Di}=qo,{startPerfBlock:Mi}=Ai;class Ui{}const Fi=new Ui,Vi=[],ji=new Map,Wi=(()=>{let e=0;return()=>e++})();function $i(e){let t=null;const{key:n,get:r,cachePolicy_UNSTABLE:o}=e,l=null!=e.set?e.set:void 0;const u=new Set,c=gi(null!=o?o:{equality:"reference",eviction:"keep-all"},n),d=Pi(e.retainedBy_UNSTABLE),f=new Map;let h=0;function p(){return!O("recoil_memory_managament_2020")||h>0}function m(e){return e.getState().knownSelectors.add(n),h++,()=>{h--}}function v(){return void 0!==Oi(n)&&!p()}function g(e,t,n,r,o){N(t,r,o),y(e,n)}function y(e,t){R(e,t)&&C(e),b(t,!0)}function b(e,n){const r=ji.get(e);if(null!=r){for(const e of r)Ii(e,s(t));n&&ji.delete(e)}}function A(e,t){let n=ji.get(t);null==n&&ji.set(t,n=new Set),n.add(e)}function w(e,t,n,r,o,i){return t.then((r=>{if(!p())throw C(e),Fi;null!=i.loadingDepKey&&i.loadingDepPromise===t?n.atomValues.set(i.loadingDepKey,ki(r)):e.getState().knownSelectors.forEach((e=>{n.atomValues.delete(e)}));const a=k(e,n);if(a&&"loading"!==a.state){if((R(e,o)||null==T(e))&&y(e,o),"hasValue"===a.state)return a.contents;throw a.contents}if(!R(e,o)){const t=x(e,n);if(null!=t)return t.loadingLoadable.contents}const[s,l]=S(e,n,o);if("loading"!==s.state&&g(e,n,o,s,l),"hasError"===s.state)throw s.contents;return s.contents})).catch((t=>{if(t instanceof Ui)throw Fi;if(!p())throw C(e),Fi;const i=_i(t);throw g(e,n,o,i,r),t}))}function _(e,t,r,o){var i,a,s,l,c,d,f;(R(e,o)||t.version===(null===(i=e.getState())||void 0===i||null===(a=i.currentTree)||void 0===a?void 0:a.version)||t.version===(null===(s=e.getState())||void 0===s||null===(l=s.nextTree)||void 0===l?void 0:l.version))&&Ri(n,r,e,null!==(c=null===(d=e.getState())||void 0===d||null===(f=d.nextTree)||void 0===f?void 0:f.version)&&void 0!==c?c:e.getState().currentTree.version);for(const e of r)u.add(e)}function S(e,o,l){const u=Mi(n);let c=!0,d=!0;const f=()=>{u(),d=!1};let h,m,v=!1;const y={loadingDepKey:null,loadingDepPromise:null},A=new Map;function S({key:t}){const n=xi(e,o,t);switch(A.set(t,n),c||(_(e,o,new Set(A.keys()),l),function(e,t){R(e,t)&&(s(T(e)).stateVersions.clear(),b(t,!1))}(e,l)),n.state){case"hasValue":return n.contents;case"hasError":throw n.contents;case"loading":throw y.loadingDepKey=t,y.loadingDepPromise=n.contents,n.contents}throw i("Invalid Loadable state")}const k=n=>(...r)=>{if(d)throw i("Callbacks from getCallback() should only be called asynchronously after the selector is evalutated.  It can be used for selectors to return objects with callbacks that can work with Recoil state without a subscription.");return null==t&&Bo(!1),Di(e,n,r,{node:t})};try{h=r({get:S,getCallback:k}),h=Bi(h)?S(h):h,wi(h)&&("hasError"===h.state&&(v=!0),h=h.contents),a(h)?h=function(e,t,n,r,o,i){return t.then((t=>{if(!p())throw C(e),Fi;const i=ki(t);return g(e,n,o,i,r),t})).catch((t=>{if(!p())throw C(e),Fi;if(a(t))return w(e,t,n,r,o,i);const s=_i(t);throw g(e,n,o,s,r),t}))}(e,h,o,A,l,y).finally(f):f(),h=h instanceof Ei?h.value:h}catch(t){h=t,a(h)?h=w(e,h,o,A,l,y).finally(f):(v=!0,f())}return m=v?_i(h):a(h)?Si(h):ki(h),c=!1,function(e,t,n){if(R(e,t)){const t=T(e);null!=t&&(t.depValuesDiscoveredSoFarDuringAsyncWork=n)}}(e,l,A),_(e,o,new Set(A.keys()),l),[m,A]}function k(e,t){let r=t.atomValues.get(n);if(null!=r)return r;const o=new Set;try{r=c.get((n=>("string"!=typeof n&&Bo(!1),xi(e,t,n).contents)),{onNodeVisit:e=>{"branch"===e.type&&e.nodeKey!==n&&o.add(e.nodeKey)}})}catch(e){throw i(`Problem with cache lookup for selector "${n}": ${e.message}`)}var a;r&&(t.atomValues.set(n,r),_(e,t,o,null===(a=T(e))||void 0===a?void 0:a.executionID));return r}function E(e,t){const n=k(e,t);if(null!=n)return C(e),n;const r=x(e,t);var o;if(null!=r)return"loading"===(null===(o=r.loadingLoadable)||void 0===o?void 0:o.state)&&A(e,r.executionID),r.loadingLoadable;const i=Wi(),[a,s]=S(e,t,i);return"loading"===a.state?(!function(e,t,n,r,o){f.set(e,{depValuesDiscoveredSoFarDuringAsyncWork:r,executionID:t,loadingLoadable:n,stateVersions:new Map([[o.version,!0]])})}(e,i,a,s,t),A(e,i)):(C(e),N(t,a,s)),a}function x(e,t){const n=Dt([f.has(e)?[s(f.get(e))]:[],X(Be(f,(([t])=>t!==e)),(([,e])=>e))]);function r(n){for(const[r,o]of n)if(!xi(e,t,r).is(o))return!0;return!1}for(const e of n){if(e.stateVersions.get(t.version)||!r(e.depValuesDiscoveredSoFarDuringAsyncWork))return e.stateVersions.set(t.version,!0),e;e.stateVersions.set(t.version,!1)}}function T(e){return f.get(e)}function C(e){f.delete(e)}function R(e,t){var n;return t===(null===(n=T(e))||void 0===n?void 0:n.executionID)}function N(e,t,r){e.atomValues.set(n,t);try{c.set(function(e){return Array.from(e.entries()).map((([e,t])=>[e,t.contents]))}(r),t)}catch(e){throw i(`Problem with setting cache for selector "${n}": ${e.message}`)}}function L(e,t){const r=t.atomValues.get(n);return null!=r?r:c.get((n=>{var r;return"string"!=typeof n&&Bo(!1),null===(r=Ti(e,t,n))||void 0===r?void 0:r.contents}))}function z(e,t){return function(e){if(Vi.includes(n)){const e=`Recoil selector has circular dependencies: ${Vi.slice(Vi.indexOf(n)).join(" → ")}`;return _i(i(e))}Vi.push(n);try{return e()}finally{Vi.pop()}}((()=>E(e,t)))}function B(e){e.atomValues.delete(n)}function P(e,n){null==t&&Bo(!1);for(const t of u){var r;const o=Li(t);null===(r=o.clearCache)||void 0===r||r.call(o,e,n)}u.clear(),B(n),c.clear(),Ii(e,t)}if(null!=l){return t=zi({key:n,nodeType:"selector",peek:L,get:z,set:(e,t,r)=>{let o=!1;const s=new Map;function u({key:r}){if(o)throw i("Recoil: Async selector sets are not currently supported.");const a=xi(e,t,r);if("hasValue"===a.state)return a.contents;if("loading"===a.state){const e=`Getting value of asynchronous atom or selector "${r}" in a pending state while setting selector "${n}" is not yet supported.`;throw I(e),i(e)}throw a.contents}function c(n,r){if(o){const e="Recoil: Async selector sets are not currently supported.";throw I(e),i(e)}const a="function"==typeof r?r(u(n)):r;Ci(e,t,n.key,a).forEach(((e,t)=>s.set(t,e)))}const d=l({set:c,get:u,reset:function(e){c(e,Ni)}},r);if(void 0!==d)throw a(d)?i("Recoil: Async selector sets are not currently supported."):i("Recoil: selector set should be a void function.");return o=!0,s},init:m,invalidate:B,clearCache:P,shouldDeleteConfigOnRelease:v,dangerouslyAllowMutability:e.dangerouslyAllowMutability,shouldRestoreFromSnapshots:!1,retainedBy:d})}return t=zi({key:n,nodeType:"selector",peek:L,get:z,init:m,invalidate:B,clearCache:P,shouldDeleteConfigOnRelease:v,dangerouslyAllowMutability:e.dangerouslyAllowMutability,shouldRestoreFromSnapshots:!1,retainedBy:d})}$i.value=e=>new Ei(e);var Hi=$i;const{isLoadable:Zi,loadableWithError:qi,loadableWithPromise:Gi,loadableWithValue:Ki}=C,{WrappedValue:Qi}=ri,{peekNodeInfo:Yi}=Ze,{DEFAULT_VALUE:Ji,DefaultValue:Xi,getConfigDeletionHandler:ea,registerNode:ta,setConfigDeletionHandler:na}=le,{isRecoilValue:ra}=Y,{getRecoilValueAsLoadable:oa,markRecoilValueModified:ia,setRecoilValue:aa,setRecoilValueLoadable:sa}=vt,{retainedByOptionWithDefault:la}=Ct,ua=e=>e instanceof Qi?e.value:e;function ca(e){const{key:t,persistence_UNSTABLE:n}=e,r=la(e.retainedBy_UNSTABLE);let o=0;function l(e){return Gi(e.then((e=>(c=Ki(e),e))).catch((e=>{throw c=qi(e),e})))}let u,c=a(e.default)?l(e.default):Zi(e.default)?"loading"===e.default.state?l(e.default.contents):e.default:Ki(ua(e.default));f(c.contents);const d=new Map;function f(e){return e}function h(e,n){var r,o;return null!==(r=null!==(o=n.atomValues.get(t))&&void 0!==o?o:u)&&void 0!==r?r:c}const p=ta({key:t,nodeType:"atom",peek:h,get:function(e,r){if(r.atomValues.has(t))return s(r.atomValues.get(t));if(r.nonvalidatedAtoms.has(t)){if(null!=u)return u;if(null==n)return J(`Tried to restore a persisted value for atom ${t} but it has no persistence settings.`),c;const e=r.nonvalidatedAtoms.get(t),o=n.validator(e,Ji),i=o instanceof Xi?c:Ki(o);return u=i,u}return c},set:function(e,n,r){if(n.atomValues.has(t)){const e=s(n.atomValues.get(t));if("hasValue"===e.state&&r===e.contents)return new Map}else if(!n.nonvalidatedAtoms.has(t)&&r instanceof Xi)return new Map;return u=void 0,(new Map).set(t,Ki(r))},init:function(n,r,s){var l;if(o++,n.getState().knownAtoms.add(t),"loading"===c.state){const v=()=>{var e;(null!==(e=n.getState().nextTree)&&void 0!==e?e:n.getState().currentTree).atomValues.has(t)||ia(n,p)};c.contents.finally(v)}const u=null!==(l=e.effects)&&void 0!==l?l:e.effects_UNSTABLE;if(null!=u){let g=Ji,y=!0,b=!1,A=null;function w(e){if(y&&e.key===t){const e=g;return e instanceof Xi?h(n,r):a(e)?Gi(e.then((e=>e instanceof Xi?c.toPromise():e))):Ki(e)}return oa(n,e)}function _(e){return w(e).toPromise()}function S(e){var r;const o=Yi(n,null!==(r=n.getState().nextTree)&&void 0!==r?r:n.getState().currentTree,e.key);return!y||e.key!==t||g instanceof Xi?o:{...o,isSet:!0,loadable:w(e)}}const k=e=>t=>{if(y){const n=w(p),r="hasValue"===n.state?n.contents:Ji;g="function"==typeof t?t(r):t,a(g)&&(g=g.then((t=>(A={effect:e,value:t},t))))}else{if(a(t))throw i("Setting atoms to async values is not implemented.");"function"!=typeof t&&(A={effect:e,value:ua(t)}),aa(n,p,"function"==typeof t?n=>{const r=ua(t(n));return A={effect:e,value:r},r}:ua(t))}},E=e=>()=>k(e)(Ji),x=e=>r=>{var o;const{release:i}=n.subscribeToTransactions((n=>{var o;let{currentTree:i,previousTree:a}=n.getState();a||(I("Transaction subscribers notified without a next tree being present -- this is a bug in Recoil"),a=i);const s=null!==(o=i.atomValues.get(t))&&void 0!==o?o:c;if("hasValue"===s.state){var l,u,d,f;const n=s.contents,o=null!==(l=a.atomValues.get(t))&&void 0!==l?l:c,h="hasValue"===o.state?o.contents:Ji;(null===(u=A)||void 0===u?void 0:u.effect)!==e||(null===(d=A)||void 0===d?void 0:d.value)!==n?r(n,h,!i.atomValues.has(t)):(null===(f=A)||void 0===f?void 0:f.effect)===e&&(A=null)}}),t);d.set(n,[...null!==(o=d.get(n))&&void 0!==o?o:[],i])};for(const T of u)try{const C=T({node:p,storeID:n.storeID,parentStoreID_UNSTABLE:n.parentStoreID,trigger:s,setSelf:k(T),resetSelf:E(T),onSet:x(T),getPromise:_,getLoadable:w,getInfo_UNSTABLE:S});var f;if(null!=C)d.set(n,[...null!==(f=d.get(n))&&void 0!==f?f:[],C])}catch(R){g=R,b=!0}if(y=!1,!(g instanceof Xi)){var m;const N=b?qi(g):a(g)?Gi(function(e,n){const r=n.then((n=>{var o,i;return(null===(i=(null!==(o=e.getState().nextTree)&&void 0!==o?o:e.getState().currentTree).atomValues.get(t))||void 0===i?void 0:i.contents)===r&&aa(e,p,n),n})).catch((n=>{var o,i;throw(null===(i=(null!==(o=e.getState().nextTree)&&void 0!==o?o:e.getState().currentTree).atomValues.get(t))||void 0===i?void 0:i.contents)===r&&sa(e,p,qi(n)),n}));return r}(n,g)):Ki(ua(g));N.contents,r.atomValues.set(t,N),null===(m=n.getState().nextTree)||void 0===m||m.atomValues.set(t,N)}}return()=>{var e;o--,null===(e=d.get(n))||void 0===e||e.forEach((e=>e())),d.delete(n)}},invalidate:function(){u=void 0},shouldDeleteConfigOnRelease:function(){return void 0!==ea(t)&&o<=0},dangerouslyAllowMutability:e.dangerouslyAllowMutability,persistence_UNSTABLE:e.persistence_UNSTABLE?{type:e.persistence_UNSTABLE.type,backButton:e.persistence_UNSTABLE.backButton}:void 0,shouldRestoreFromSnapshots:!0,retainedBy:r});return p}function da(e){const{...t}=e,n="default"in e?e.default:new Promise((()=>{}));return ra(n)?function(e){const t=da({...e,default:Ji,persistence_UNSTABLE:void 0===e.persistence_UNSTABLE?void 0:{...e.persistence_UNSTABLE,validator:t=>t instanceof Xi?t:s(e.persistence_UNSTABLE).validator(t,Ji)},effects:e.effects,effects_UNSTABLE:e.effects_UNSTABLE}),n=Hi({key:`${e.key}__withFallback`,get:({get:n})=>{const r=n(t);return r instanceof Xi?e.default:r},set:({set:e},n)=>e(t,n),cachePolicy_UNSTABLE:{eviction:"most-recent"},dangerouslyAllowMutability:e.dangerouslyAllowMutability});return na(n.key,ea(e.key)),n}({...t,default:n}):ca({...t,default:n})}da.value=e=>new Qi(e);var fa=da;var ha=class{constructor(e){var t;l(this,"_map",void 0),l(this,"_keyMapper",void 0),this._map=new Map,this._keyMapper=null!==(t=null==e?void 0:e.mapKey)&&void 0!==t?t:e=>e}size(){return this._map.size}has(e){return this._map.has(this._keyMapper(e))}get(e){return this._map.get(this._keyMapper(e))}set(e,t){this._map.set(this._keyMapper(e),t)}delete(e){this._map.delete(this._keyMapper(e))}clear(){this._map.clear()}},pa=Object.freeze({__proto__:null,MapCache:ha});const{LRUCache:ma}=ui,{MapCache:va}=pa,ga={equality:"reference",eviction:"none",maxSize:1/0};var ya=function({equality:e=ga.equality,eviction:t=ga.eviction,maxSize:n=ga.maxSize}=ga){const r=function(e){switch(e){case"reference":return e=>e;case"value":return e=>pi(e)}throw i(`Unrecognized equality policy ${e}`)}(e),o=function(e,t,n){switch(e){case"keep-all":return new va({mapKey:n});case"lru":return new ma({mapKey:n,maxSize:s(t)});case"most-recent":return new ma({mapKey:n,maxSize:1})}throw i(`Unrecognized eviction policy ${e}`)}(t,n,r);return o};const{setConfigDeletionHandler:ba}=le;var Aa=function(e){var t,n;const r=ya({equality:null!==(t=null===(n=e.cachePolicyForParams_UNSTABLE)||void 0===n?void 0:n.equality)&&void 0!==t?t:"value",eviction:"keep-all"});return t=>{var n,o;const i=r.get(t);if(null!=i)return i;const{cachePolicyForParams_UNSTABLE:a,...s}=e,l="default"in e?e.default:new Promise((()=>{})),u=fa({...s,key:`${e.key}__${null!==(n=pi(t))&&void 0!==n?n:"void"}`,default:"function"==typeof l?l(t):l,retainedBy_UNSTABLE:"function"==typeof e.retainedBy_UNSTABLE?e.retainedBy_UNSTABLE(t):e.retainedBy_UNSTABLE,effects:"function"==typeof e.effects?e.effects(t):"function"==typeof e.effects_UNSTABLE?e.effects_UNSTABLE(t):null!==(o=e.effects)&&void 0!==o?o:e.effects_UNSTABLE});return r.set(t,u),ba(u.key,(()=>{r.delete(t)})),u}};const{setConfigDeletionHandler:wa}=le;let _a=0;var Sa=function(e){var t,n;const r=ya({equality:null!==(t=null===(n=e.cachePolicyForParams_UNSTABLE)||void 0===n?void 0:n.equality)&&void 0!==t?t:"value",eviction:"keep-all"});return t=>{var n;let o;try{o=r.get(t)}catch(t){throw i(`Problem with cache lookup for selector ${e.key}: ${t.message}`)}if(null!=o)return o;const a=`${e.key}__selectorFamily/${null!==(n=pi(t,{allowFunctions:!0}))&&void 0!==n?n:"void"}/${_a++}`,s=n=>e.get(t)(n),l=e.cachePolicy_UNSTABLE,u="function"==typeof e.retainedBy_UNSTABLE?e.retainedBy_UNSTABLE(t):e.retainedBy_UNSTABLE;let c;if(null!=e.set){const n=e.set;c=Hi({key:a,get:s,set:(e,r)=>n(t)(e,r),cachePolicy_UNSTABLE:l,dangerouslyAllowMutability:e.dangerouslyAllowMutability,retainedBy_UNSTABLE:u})}else c=Hi({key:a,get:s,cachePolicy_UNSTABLE:l,dangerouslyAllowMutability:e.dangerouslyAllowMutability,retainedBy_UNSTABLE:u});return r.set(t,c),wa(c.key,(()=>{r.delete(t)})),c}};const ka=Sa({key:"__constant",get:e=>()=>e,cachePolicyForParams_UNSTABLE:{equality:"reference"}});var Ea=function(e){return ka(e)};const xa=Sa({key:"__error",get:e=>()=>{throw i(e)},cachePolicyForParams_UNSTABLE:{equality:"reference"}});var Ta=function(e){return xa(e)};var Ca=function(e){return e};const{loadableWithError:Ra,loadableWithPromise:Na,loadableWithValue:Oa}=C;function La(e,t){const n=Array(t.length).fill(void 0),r=Array(t.length).fill(void 0);for(const[o,i]of t.entries())try{n[o]=e(i)}catch(e){r[o]=e}return[n,r]}function za(e){return null!=e&&!a(e)}function Ba(e){return Array.isArray(e)?e:Object.getOwnPropertyNames(e).map((t=>e[t]))}function Ia(e,t){return Array.isArray(e)?t:Object.getOwnPropertyNames(e).reduce(((e,n,r)=>({...e,[n]:t[r]})),{})}function Pa(e,t,n){return Ia(e,n.map(((e,n)=>null==e?Oa(t[n]):a(e)?Na(e):Ra(e))))}var Da={waitForNone:Sa({key:"__waitForNone",get:e=>({get:t})=>{const n=Ba(e),[r,o]=La(t,n);return Pa(e,r,o)},dangerouslyAllowMutability:!0}),waitForAny:Sa({key:"__waitForAny",get:e=>({get:t})=>{const n=Ba(e),[r,o]=La(t,n);return o.some((e=>!a(e)))?Pa(e,r,o):new Promise((t=>{for(const[n,i]of o.entries())a(i)&&i.then((i=>{r[n]=i,o[n]=void 0,t(Pa(e,r,o))})).catch((i=>{o[n]=i,t(Pa(e,r,o))}))}))},dangerouslyAllowMutability:!0}),waitForAll:Sa({key:"__waitForAll",get:e=>({get:t})=>{const n=Ba(e),[r,o]=La(t,n);if(o.every((e=>null==e)))return Ia(e,r);const i=o.find(za);if(null!=i)throw i;return Promise.all(o).then((t=>{return Ia(e,(n=r,t.map(((e,t)=>void 0===e?n[t]:e))));var n}))},dangerouslyAllowMutability:!0}),waitForAllSettled:Sa({key:"__waitForAllSettled",get:e=>({get:t})=>{const n=Ba(e),[r,o]=La(t,n);return o.every((e=>!a(e)))?Pa(e,r,o):Promise.all(o.map(((e,t)=>a(e)?e.then((e=>{r[t]=e,o[t]=void 0})).catch((e=>{r[t]=void 0,o[t]=e})):null))).then((()=>Pa(e,r,o)))},dangerouslyAllowMutability:!0}),noWait:Sa({key:"__noWait",get:e=>({get:t})=>{try{return Hi.value(Oa(t(e)))}catch(e){return Hi.value(a(e)?Na(e):Ra(e))}},dangerouslyAllowMutability:!0})};const{RecoilLoadable:Ma}=C,{DefaultValue:Ua}=le,{RecoilRoot:Fa,useRecoilStoreID:Va}=er,{isRecoilValue:ja}=Y,{retentionZone:Wa}=Le,{freshSnapshot:$a}=gn,{useRecoilState:Ha,useRecoilState_TRANSITION_SUPPORT_UNSTABLE:Za,useRecoilStateLoadable:qa,useRecoilValue:Ga,useRecoilValue_TRANSITION_SUPPORT_UNSTABLE:Ka,useRecoilValueLoadable:Qa,useRecoilValueLoadable_TRANSITION_SUPPORT_UNSTABLE:Ya,useResetRecoilState:Ja,useSetRecoilState:Xa}=$r,{useGotoRecoilSnapshot:es,useRecoilSnapshot:ts,useRecoilTransactionObserver:ns}=fo,{useRecoilCallback:rs}=qo,{noWait:os,waitForAll:is,waitForAllSettled:as,waitForAny:ss,waitForNone:ls}=Da;var us={DefaultValue:Ua,isRecoilValue:ja,RecoilLoadable:Ma,RecoilEnv:j,RecoilRoot:Fa,useRecoilStoreID:Va,useRecoilBridgeAcrossReactRoots_UNSTABLE:Ao,atom:fa,selector:Hi,atomFamily:Aa,selectorFamily:Sa,constSelector:Ea,errorSelector:Ta,readOnlySelector:Ca,noWait:os,waitForNone:ls,waitForAny:ss,waitForAll:is,waitForAllSettled:as,useRecoilValue:Ga,useRecoilValueLoadable:Qa,useRecoilState:Ha,useRecoilStateLoadable:qa,useSetRecoilState:Xa,useResetRecoilState:Ja,useGetRecoilValueInfo_UNSTABLE:mo,useRecoilRefresher_UNSTABLE:Yo,useRecoilValueLoadable_TRANSITION_SUPPORT_UNSTABLE:Ya,useRecoilValue_TRANSITION_SUPPORT_UNSTABLE:Ka,useRecoilState_TRANSITION_SUPPORT_UNSTABLE:Za,useRecoilCallback:rs,useRecoilTransaction_UNSTABLE:ti,useGotoRecoilSnapshot:es,useRecoilSnapshot:ts,useRecoilTransactionObserver_UNSTABLE:ns,snapshot_UNSTABLE:$a,useRetain:fr,retentionZone:Wa},cs=us.DefaultValue,ds=us.isRecoilValue,fs=us.RecoilLoadable,hs=us.RecoilEnv,ps=us.RecoilRoot,ms=us.useRecoilStoreID,vs=us.useRecoilBridgeAcrossReactRoots_UNSTABLE,gs=us.atom,ys=us.selector,bs=us.atomFamily,As=us.selectorFamily,ws=us.constSelector,_s=us.errorSelector,Ss=us.readOnlySelector,ks=us.noWait,Es=us.waitForNone,xs=us.waitForAny,Ts=us.waitForAll,Cs=us.waitForAllSettled,Rs=us.useRecoilValue,Ns=us.useRecoilValueLoadable,Os=us.useRecoilState,Ls=us.useRecoilStateLoadable,zs=us.useSetRecoilState,Bs=us.useResetRecoilState,Is=us.useGetRecoilValueInfo_UNSTABLE,Ps=us.useRecoilRefresher_UNSTABLE,Ds=us.useRecoilValueLoadable_TRANSITION_SUPPORT_UNSTABLE,Ms=us.useRecoilValue_TRANSITION_SUPPORT_UNSTABLE,Us=us.useRecoilState_TRANSITION_SUPPORT_UNSTABLE,Fs=us.useRecoilCallback,Vs=us.useRecoilTransaction_UNSTABLE,js=us.useGotoRecoilSnapshot,Ws=us.useRecoilSnapshot,$s=us.useRecoilTransactionObserver_UNSTABLE,Hs=us.snapshot_UNSTABLE,Zs=us.useRetain,qs=us.retentionZone;const Gs=us},53:(e,t)=>{"use strict";function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,o=e[r];if(!(0<i(o,t)))break e;e[r]=t,e[n]=o,n=r}}function r(e){return 0===e.length?null:e[0]}function o(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length,a=o>>>1;r<a;){var s=2*(r+1)-1,l=e[s],u=s+1,c=e[u];if(0>i(l,n))u<o&&0>i(c,l)?(e[r]=c,e[u]=n,r=u):(e[r]=l,e[s]=n,r=s);else{if(!(u<o&&0>i(c,n)))break e;e[r]=c,e[u]=n,r=u}}}return t}function i(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var a=performance;t.unstable_now=function(){return a.now()}}else{var s=Date,l=s.now();t.unstable_now=function(){return s.now()-l}}var u=[],c=[],d=1,f=null,h=3,p=!1,m=!1,v=!1,g="function"==typeof setTimeout?setTimeout:null,y="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function A(e){for(var t=r(c);null!==t;){if(null===t.callback)o(c);else{if(!(t.startTime<=e))break;o(c),t.sortIndex=t.expirationTime,n(u,t)}t=r(c)}}function w(e){if(v=!1,A(e),!m)if(null!==r(u))m=!0,z(_);else{var t=r(c);null!==t&&B(w,t.startTime-e)}}function _(e,n){m=!1,v&&(v=!1,y(x),x=-1),p=!0;var i=h;try{for(A(n),f=r(u);null!==f&&(!(f.expirationTime>n)||e&&!R());){var a=f.callback;if("function"==typeof a){f.callback=null,h=f.priorityLevel;var s=a(f.expirationTime<=n);n=t.unstable_now(),"function"==typeof s?f.callback=s:f===r(u)&&o(u),A(n)}else o(u);f=r(u)}if(null!==f)var l=!0;else{var d=r(c);null!==d&&B(w,d.startTime-n),l=!1}return l}finally{f=null,h=i,p=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var S,k=!1,E=null,x=-1,T=5,C=-1;function R(){return!(t.unstable_now()-C<T)}function N(){if(null!==E){var e=t.unstable_now();C=e;var n=!0;try{n=E(!0,e)}finally{n?S():(k=!1,E=null)}}else k=!1}if("function"==typeof b)S=function(){b(N)};else if("undefined"!=typeof MessageChannel){var O=new MessageChannel,L=O.port2;O.port1.onmessage=N,S=function(){L.postMessage(null)}}else S=function(){g(N,0)};function z(e){E=e,k||(k=!0,S())}function B(e,n){x=g((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){m||p||(m=!0,z(_))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):T=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return h},t.unstable_getFirstCallbackNode=function(){return r(u)},t.unstable_next=function(e){switch(h){case 1:case 2:case 3:var t=3;break;default:t=h}var n=h;h=t;try{return e()}finally{h=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=h;h=e;try{return t()}finally{h=n}},t.unstable_scheduleCallback=function(e,o,i){var a=t.unstable_now();switch("object"==typeof i&&null!==i?i="number"==typeof(i=i.delay)&&0<i?a+i:a:i=a,e){case 1:var s=-1;break;case 2:s=250;break;case 5:s=1073741823;break;case 4:s=1e4;break;default:s=5e3}return e={id:d++,callback:o,priorityLevel:e,startTime:i,expirationTime:s=i+s,sortIndex:-1},i>a?(e.sortIndex=i,n(c,e),null===r(u)&&e===r(c)&&(v?(y(x),x=-1):v=!0,B(w,i-a))):(e.sortIndex=s,n(u,e),m||p||(m=!0,z(_))),e},t.unstable_shouldYield=R,t.unstable_wrapCallback=function(e){var t=h;return function(){var n=h;h=t;try{return e.apply(this,arguments)}finally{h=n}}}},840:(e,t,n)=>{"use strict";e.exports=n(53)},47:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>m});var r=n(379),o=n.n(r),i=n(795),a=n.n(i),s=n(565),l=n.n(s),u=n(216),c=n.n(u),d=n(589),f=n.n(d),h=n(387),p={};p.styleTagTransform=f(),p.setAttributes=l(),p.insert=e=>{window.addEventListener("DOMContentLoaded",(()=>{document.head.appendChild(e)}))},p.domAPI=a(),p.insertStyleElement=c();o()(h.Z,p);const m=h.Z&&h.Z.locals?h.Z.locals:void 0},379:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var i={},a=[],s=0;s<e.length;s++){var l=e[s],u=r.base?l[0]+r.base:l[0],c=i[u]||0,d="".concat(u," ").concat(c);i[u]=c+1;var f=n(d),h={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==f)t[f].references++,t[f].updater(h);else{var p=o(h,r);r.byIndex=s,t.splice(s,0,{identifier:d,updater:p,references:1})}a.push(d)}return a}function o(e,t){var n=t.domAPI(t);n.update(e);return function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var s=n(i[a]);t[s].references--}for(var l=r(e,o),u=0;u<i.length;u++){var c=n(i[u]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}i=l}}},216:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{"use strict";e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},222:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.App=void 0;const r=n(893),o=n(294),i=n(500),a=n(393),s=n(650),l=n(134);t.App=function({}){const[e,t]=(0,o.useState)(),n=(0,o.useCallback)((async()=>{try{console.log("loadDirectory");const e=await unsafeWindow.showDirectoryPicker({mode:"readwrite"});t(e),console.log("save directory")}catch(e){console.log("caught error",e),i.toast.error("error"),i.toast.error(String(e))}}),[t]),u=(0,l.useDialog)(257),c=(0,o.useCallback)((async()=>{try{const t=e=>new Promise((t=>{u.showModal((0,r.jsxs)("div",{className:"flex flex-col bg-white",children:[(0,r.jsxs)("div",{className:"bg-white",children:['file "',e,'" overwrite?']}),(0,r.jsxs)("div",{className:"flex flex-row bg-white justify-around",children:[(0,r.jsx)("div",{className:"select-none bg-slate-50 border-2 border-black rounded-lg",onClick:()=>{u.close(),t(!0)},children:"yes"}),(0,r.jsx)("div",{className:"select-none bg-slate-50 border-2 border-black rounded-lg",onClick:()=>{u.close(),t(!1)},children:"no"})]})]}))})),n=(0,a.getLoadedTweets)(unsafeWindow.document);console.log("tweets",n);0===await(0,a.downloadNoSaveContents)(e,t)?((0,s.scrollBottomTweet)(),i.toast.success("load next tweets")):i.toast.success("save tweets")}catch(e){i.toast.error(String(e))}}),[e,u]);return console.log("current directory",e),(0,r.jsx)(r.Fragment,{children:(0,r.jsx)("div",{className:"rounded-full bg-white select-none text-center border-2",onClick:()=>{console.log("directory",e),void 0===e?n():c()},children:void 0===e?"保存ディレクトリの設定":"ロード済みツイートの保存"})})}},134:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Dialog=t.useDialog=void 0;const r=n(893),o=n(294),i=n(745),a=new Map;class s{ref;root;createRoot(){null!=this.ref.current&&(this.root=(0,i.createRoot)(this.ref.current))}constructor(e){this.ref=e}showModal(e){void 0===this.root&&this.createRoot(),this.root.render((0,r.jsx)(r.Fragment,{children:e})),this.ref.current.showModal()}close(){this.ref.current.close()}}t.useDialog=function(e){const t=a.get(e);if(void 0===t)throw new Error(`dialogId: ${e} is undefined`);return new s(t)},t.Dialog=function({dialogId:e}){const t=(0,o.createRef)();return a.set(e,t),console.log("dialogMap registered",e),(0,o.useEffect)((()=>()=>{a.delete(e)}),[e]),(0,r.jsx)("dialog",{ref:t,className:"bg-white"})}},320:(e,t)=>{"use strict";function n(e){const t=[],n=function(e){const t=[];return void 0!==e.content.itemContent?t.push(e.content.itemContent):void 0!==e.content.items&&e.content.items.forEach((e=>{t.push(e.item.itemContent)})),t}(e);return 0===n.length||(n.forEach((e=>{let n=e.tweet_results;if(void 0===n||void 0===n.result||!["Tweet"].includes(n.result.__typename))return;console.log("tweet",e);const r=n.result,o=n.result.core.user_results.result,i=r.rest_id,a=o.rest_id;let s,l,u,c,d,f,h,p=o.legacy.entities.description.urls.length>0?o.legacy.entities.description.urls[0].expanded_url:void 0;void 0!==r.legacy.retweeted_status_result&&(s=r.legacy.retweeted_status_result.result.rest_id,l=r.legacy.retweeted_status_result.result.core.user_results.result.rest_id,void 0!==r.legacy.entities.user_mentions?(u=r.legacy.entities.user_mentions[0].name,c=r.legacy.entities.user_mentions[0].screen_name):(u="",c=""),d=r.legacy.retweeted_status_result.result.legacy.description,f=void 0!==r.legacy.retweeted_status_result.result.legacy.entities.description&&void 0!==r.legacy.retweeted_status_result.result.legacy.entities.description.url&&r.legacy.retweeted_status_result.result.legacy.entities.description?.url?.urls.length>0?r.legacy.retweeted_status_result.result.legacy.entities.description.url.urls[0].url:"",h=r.legacy.retweeted_status_result.result.legacy.full_text);let m=Array();if(void 0!==r.legacy.extended_entities)for(let e of r.legacy.extended_entities.media)if("photo"===e.type)m.push({media_type:"photo",url:e.media_url_https});else{if(!["animated_gif","video"].includes(e.type))throw new TypeError(`unknown media type: ${e.type}`);{let t=e.video_info.variants.filter((e=>void 0!==e.bitrate)).sort(((e,t)=>e.bitrate>t.bitrate?-1:e.bitrate<t.bitrate?1:0))[0];m.push({media_type:e.type,url:t.url,metadata:t.content_type})}}let v={user:{id:void 0===l?parseInt(a):parseInt(l),id_str:void 0===l?a:l,name:u??o.legacy.name,screen_name:c??o.legacy.screen_name,description:d??o.legacy.description,url:f??p},id:void 0===s?parseInt(i):parseInt(s),id_str:s??i,user_id:void 0===l?parseInt(a):parseInt(l),user_id_str:l??a,full_text:h??r.legacy.full_text,media:m};t.push(v)})),n.forEach((e=>{let n=e.tweet_results;if(void 0===n||void 0===n.result||!["TweetWithVisibilityResults"].includes(n.result.__typename))return;console.log("visibility result",e);const r=n.result.tweet,o=n.result.tweet.core.user_results.result,i=r.rest_id,a=o.rest_id;let s,l,u,c,d,f,h,p=o.legacy.entities.description.urls.length>0?o.legacy.entities.description.urls[0].expanded_url:void 0;void 0!==r.legacy.retweeted_status_result&&(s=r.legacy.retweeted_status_result.result.tweet.rest_id,l=r.legacy.retweeted_status_result.result.tweet.core.user_results.result.rest_id,void 0!==r.legacy.entities.user_mentions?(u=r.legacy.entities.user_mentions[0].name,c=r.legacy.entities.user_mentions[0].screen_name):(u="",c=""),d=r.legacy.retweeted_status_result.result.tweet.core.user_results.result.legacy.description,f=void 0!==r.legacy.retweeted_status_result.result.tweet.legacy.entities.urls&&void 0!==r.legacy.retweeted_status_result.result.tweet.legacy.entities.urls&&r.legacy.retweeted_status_result.result.tweet.legacy.entities.urls.length>0?r.legacy.retweeted_status_result.result.tweet.legacy.entities.urls[0].url:"",h=r.legacy.retweeted_status_result.result.tweet.legacy.full_text);let m=Array();if(void 0!==r.legacy.extended_entities)for(let e of r.legacy.extended_entities.media)if("photo"===e.type)m.push({media_type:"photo",url:e.media_url_https});else{if(!["animated_gif","video"].includes(e.type))throw new TypeError(`unknown media type: ${e.type}`);{let t=e.video_info.variants.filter((e=>void 0!==e.bitrate)).sort(((e,t)=>e.bitrate>t.bitrate?-1:e.bitrate<t.bitrate?1:0))[0];m.push({media_type:e.type,url:t.url,metadata:t.content_type})}}let v={user:{id:void 0===l?parseInt(a):parseInt(l),id_str:void 0===l?a:l,name:u??o.legacy.name,screen_name:c??o.legacy.screen_name,description:d??o.legacy.description,url:f??p},id:void 0===s?parseInt(i):parseInt(s),id_str:s??i,user_id:void 0===l?parseInt(a):parseInt(l),user_id_str:l??a,full_text:h??r.legacy.full_text,media:m};console.log(`tweet id: ${v.id_str}`),t.push(v)}))),t}function r(e){let t=new Array;if("TimelinePinEntry"===e.type){let r=n(e.entry);void 0!==r&&(t=t.concat(r))}if("TimelineAddEntries"===e.type)for(let r of e.entries){let e=n(r);void 0!==e&&(t=t.concat(e))}return t}Object.defineProperty(t,"__esModule",{value:!0}),t.parse=void 0,t.parse=function(e){let t=new Array;if(void 0!==e.data.user){if(void 0!==e.data.user.result.timeline)for(let n of e.data.user.result.timeline.timeline.instructions){let e=r(n);e.length>0&&(t=t.concat(e))}if(void 0!==e.data.user.result.timeline_v2)for(let n of e.data.user.result.timeline_v2.timeline.instructions){let e=r(n);e.length>0&&(t=t.concat(e))}}if(void 0!==e.data.home)for(let n of e.data.home.home_timeline_urt.instructions){let e=r(n);e.length>0&&(t=t.concat(e))}if(void 0!==e.data.threaded_conversation_with_injections)for(let n of e.data.threaded_conversation_with_injections.instructions){let e=r(n);e.length>0&&(t=t.concat(e))}if(void 0!==e.data.threaded_conversation_with_injections_v2)for(let n of e.data.threaded_conversation_with_injections_v2.instructions){let e=r(n);e.length>0&&(t=t.concat(e))}if(void 0!==e.data.bookmark_timeline)for(let n of e.data.bookmark_timeline.timeline.instructions){let e=r(n);e.length>0&&(t=t.concat(e))}if(void 0!==e.data.list?.tweets_timeline.timeline)for(let n of e.data.list.tweets_timeline.timeline.instructions){let e=r(n);e.length>0&&(t=t.concat(e))}return t}},965:(e,t)=>{"use strict";function n(e){let t=null!=e.entities.url?e.entities.url.urls[0].expanded_url:void 0;return{id:e.id,id_str:e.id_str,name:e.name,screen_name:e.screen_name,description:e.description?e.description:void 0,url:t}}function r(e){if("photo"!==e.type)return function(e){let t=e.variants.filter((e=>void 0!==e.bitrate)).reduce(((e,t)=>void 0===e||t.bitrate>e.bitrate?t:e),void 0);return{media_type:"video",url:t.url,metadata:t.content_type}}(e.video_info);return{media_type:e.type,url:e.media_url_https}}function o(e){let t=new Array;if(void 0!==e)for(let n of e.media)t.push(r(n));return t}function i(e){return{user:void 0,id:e.id,id_str:e.id_str,user_id:e.user_id,user_id_str:e.user_id_str,full_text:e.full_text,retweet_id_str:e.retweeted_status_id_str?e.retweeted_status_id_str:void 0,media:o(e.extended_entities)}}Object.defineProperty(t,"__esModule",{value:!0}),t.parse=void 0,t.parse=function(e){let t=[];if(void 0!==e.globalObjects.users&&(t=function(e){let t=new Array;for(let r of Object.keys(e)){let o=e[r];t.push(n(o))}return t}(e.globalObjects.users)),0===t.length)return[];let r=[];return void 0!==e.globalObjects.tweets&&(r=function(e){let t=new Array;for(let n of Object.keys(e)){let r=e[n];t.push(i(r))}return t}(e.globalObjects.tweets)),0===r.length?[]:function(e,t){let n=new Map;return t.forEach((e=>{n.set(e.id_str,e)})),e.map((e=>{let t=e;return t.user=n.get(e.user_id_str),t}))}(r,t)}},824:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SAVED_COLOR=t.NONSAVE_COLOR=void 0,t.NONSAVE_COLOR="gray",t.SAVED_COLOR="green"},380:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SAVED_COLOR=t.NONSAVE_COLOR=void 0;var r=n(824);Object.defineProperty(t,"NONSAVE_COLOR",{enumerable:!0,get:function(){return r.NONSAVE_COLOR}}),Object.defineProperty(t,"SAVED_COLOR",{enumerable:!0,get:function(){return r.SAVED_COLOR}})},133:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.extension=void 0;const n=new RegExp("^.*[.]([^.?]+)(?:[?].*)?$");t.extension=function(e){let t=n.exec(e);if(null===t)throw new TypeError(`ext pattern not found: ${e}`);return t[1]}},128:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.registerXHRHook=t.createElementHook=t.changeColor=void 0;const r=n(500),o=n(131),i=n(363),a=n(643),s=n(393),l=n(162),u=n(804),c=n(965),d=n(320),f=n(380);function h(e,t){t?(e.style.background=f.SAVED_COLOR,e.innerText="already saved",e.dataset.downloaded="true"):(e.style.background=f.NONSAVE_COLOR,e.innerText="save",e.dataset.downloaded="false")}t.changeColor=h,t.createElementHook=function(e,t){return(n,u)=>{let c=e.call(t,n,u);if("article"===n.toLowerCase()){c.style.display="block";let e=e=>{let n,u=e.querySelector("a time");if(n=null!==u?(0,o.getId)(u.parentNode.href):(0,o.getId)(window.location.href),void 0===n)return e;let c=t.createElement("button");c.style.width="100%",c.dataset.type="download",c.dataset.tweetId=n,(0,i.getMark)(n)?h(c,!0):h(c,!1);const d=e=>{c.innerText=e};let p=0;const m=e=>{p+=e,d(`${p} bytes downloaded`)};c.addEventListener("click",(()=>{if(void 0===n)return void r.toast.error("id is undefined");let e=(0,a.load)(n);void 0!==e&&(0,s.save)(e,m,d).then((([e,t])=>{(0,l.saveAs)(e,t)})).then((()=>{(0,i.mark)(e),c.style.background=f.SAVED_COLOR,c.dataset.downloaded="downloaded",postMessage({tweet:e},"*")})).catch((e=>{alert(e)}))})),e.appendChild(c)};setTimeout((()=>{e(c)}),0)}return c}},t.registerXHRHook=function(){(0,u.xhrHook)((async(e,...t)=>{const n=new RegExp("^https://twitter[.]com/i/api/2/timeline/home_latest[.]json.*$"),o=new RegExp("^https://twitter[.]com/i/api/2/notifications/all[.]json.*$"),i=new RegExp("^https://twitter[.]com/i/api/2/rux[.]json.*$"),s=new RegExp("^https://twitter[.]com/i/api/graphql/[^/]+/TweetDetail.*$"),l=new RegExp("^https://twitter.com/i/api/graphql/[^/]+/UserMedia.*$"),u=new RegExp("^https://twitter.com/i/api/graphql/[^/]+/UserTweets.*$"),f=new RegExp("^https://twitter.com/i/api/graphql/[^/]+/Bookmarks.*$"),h=new RegExp("^https://twitter.com/i/api/graphql/[^/]+/HomeLatestTimeline.*$"),p=new RegExp("^https://twitter.com/i/api/graphql/[^/]+/ListLatestTweetsTimeline.*$");let m;try{n.test(e.responseURL)?(console.log(`home: ${e.responseURL}`),m=(0,c.parse)(JSON.parse(e.responseText))):o.test(e.responseURL)?(console.log(`all: ${e.responseURL}`),m=(0,c.parse)(JSON.parse(e.responseText))):i.test(e.responseURL)?(console.log(`rux: ${e.responseURL}`),m=(0,c.parse)(JSON.parse(e.responseText))):s.test(e.responseURL)?(console.log(`detail: ${e.responseURL}`),m=(0,d.parse)(JSON.parse(e.responseText))):l.test(e.responseURL)?(console.log(`userMedia: ${e.responseURL}`),m=(0,d.parse)(JSON.parse(e.responseText))):u.test(e.responseURL)?(console.log(`userTweets: ${e.responseURL}`),m=(0,d.parse)(JSON.parse(e.responseText))):f.test(e.responseURL)?(console.log(`bookmark: ${e.responseURL}`),m=(0,d.parse)(JSON.parse(e.responseText))):h.test(e.responseURL)?(console.log(`HomeLatestTimeline: ${e.responseURL}`),m=(0,d.parse)(JSON.parse(e.responseText))):p.test(e.responseURL)&&(console.log(`ListLatestTweetsTimeline: ${e.responseURL}`),m=(0,d.parse)(JSON.parse(e.responseText)))}catch(t){r.toast.error(`error url: ${e.responseURL}`),r.toast.error(String(t)),console.error(`error url: ${e.responseURL}`),console.error(t)}try{void 0!==m&&await Promise.all(m.map((e=>(console.log(`tweet: ${e.id} ${e.id_str}`),(0,a.store)(e.id_str,e)))))}catch(e){e instanceof Array?e.filter((e=>e instanceof Error)).forEach((e=>{console.error(e),r.toast.error(String(e))})):(console.error(e),r.toast.error(String(e)))}}))}},131:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getId=void 0;const n=new RegExp("^(?:https://twitter.com)?/(?:[^/]+)/status/([0-9]+)(?:(?:[?]|/).*)?$");t.getId=function(e){let t=n.exec(e);if(null!==t)return t[1]}},643:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.load=t.store=void 0;async function n(e,t){const r=t.slice(0,100),o=t.slice(100);for(const t of r){const n=localStorage.getItem(t);if(null===n){localStorage.removeItem(t);continue}const r=JSON.parse(n);"number"==typeof r.time?r.time<e&&localStorage.removeItem(t):localStorage.removeItem(t)}if(o.length>0)return await new Promise((e=>{e()})),n(e,o)}t.store=async function(e,t){const r=t;r.time=Date.now();try{localStorage.setItem(e,JSON.stringify(r))}catch(t){const o=[];for(let e=0;e<localStorage.length;++e)o.push(localStorage.key(e));const i=Date.now()-6048e5;await n(i,o),localStorage.setItem(e,JSON.stringify(r))}},t.load=function(e){let t=localStorage.getItem(e);if(null!==t)return JSON.parse(t)}},363:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getMark=t.mark=void 0,t.mark=function(e){"string"==typeof e||"number"==typeof e?localStorage.setItem(`saved:${e}`,"true"):localStorage.setItem(`saved:${e.id_str}`,"true")},t.getMark=function(e){return null!==localStorage.getItem(`saved:${e}`)}},393:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.getLoadedTweets=t.saveOnDirectory=t.fileExists=t.downloadNoSaveContents=t.save=void 0;const o=r(n(733)),i=n(804),a=n(500),s=n(133),l=n(643),u=n(363),c=n(128);async function d(e,t,n){let r=new o.default;const a=`${e.user.id_str}_${e.id_str}_${e.user.name}.zip`;r.file("tweet.txt",e.full_text);let l=0,u=e.media.map((async e=>{let n=e.url;if("photo"===e.media_type){let t=(0,s.extension)(e.url);n=n.substring(0,n.length-(t.length+1)),n=`${n}?format=${t}&name=orig`}let o=0;const a=await(0,i.GM_fetch)(n,{onDownloadProgress:e=>{let n=e.loaded-o;o=e.loaded,void 0!==t&&t(n)}});if(!a.ok)throw new TypeError(a.statusText);r.file(`${l++}.${(0,s.extension)(e.url)}`,a.blob())}));await Promise.all(u);return[await r.generateAsync({type:"blob"},(e=>{void 0!==n&&(null===e.currentFile?n(`${e.percent.toPrecision(5)} %`):n(`${e.currentFile}: ${e.percent.toPrecision(5)} %`))})),a]}function f(e){return e.replace(/[:\/\\?*~\|\[\]\(\)\<\>\!\"\'#\$%&]/g,"_")}async function h(e,t){try{return await e.getFileHandle(t),console.debug(`file exists: ${t}`),!0}catch(e){return console.debug("file not exists"),!1}}async function p(e,t,n,r){if(t=t.replace(/\u200d/g,"_"),console.log(`filename: ${t}`,function(e){const t=[];for(let n=0;n<e.length;++n)t.push(e[n].charCodeAt(0));return new Uint16Array(t)}(t)),await h(e,t)&&!await r(t))return console.warn(`filename: ${t} does not saved`),!1;console.log(`filename: ${t} does not exists`);const o=await e.getFileHandle(t,{create:!0}),i=await o.createWritable({keepExistingData:!1});try{return await i.write(n),a.toast.success(`${t} saved`),!0}finally{await i.close()}}t.save=d,t.downloadNoSaveContents=async function(e,t){let n=0;try{const r=Array.from(document.querySelectorAll("button[data-downloaded=false][data-tweet-id]"));a.toast.success(`try saving ${r.length} tweets`),console.log("candidates",r.length);const o=[];for(const e of r){const t=e.dataset.tweetId,n=(0,l.load)(t);void 0!==n?o.push(n):a.toast.error(`tweet id ${t} does not cached.`)}const i=await Promise.all(o.map((e=>d(e).then((([t,n])=>[e.id_str,t,n])))));for await(const[r,o,a]of i){if(await p(e,f(a),o,t)){(0,u.mark)(r),++n;const e=document.querySelector(`button[data-type=download][data-tweet-id="${r}"]`);null!==e&&(0,c.changeColor)(e,!0)}}}catch(e){a.toast.error(String(e))}return n},t.fileExists=h,t.saveOnDirectory=p,t.getLoadedTweets=function(e){const t=Array.from(e.querySelectorAll("button[data-type=download][data-tweet-id]")).map((e=>e.dataset.tweetId)).map((e=>{const t=(0,l.load)(e);return void 0===t&&a.toast.error(`tweet id: ${e} is not cached`),t})).filter((e=>void 0!==e));return new Map(t.map((e=>[e.id_str,e])))}},650:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.scrollBottomTweet=void 0,t.scrollBottomTweet=function(){const e=Array.from(document.querySelectorAll("article"));e.length>0&&e.slice(-1)[0].scrollIntoView({behavior:"smooth"})}},925:(e,t)=>{let n={data:""},r=e=>"object"==typeof window?((e?e.querySelector("#_goober"):window._goober)||Object.assign((e||document.head).appendChild(document.createElement("style")),{innerHTML:" ",id:"_goober"})).firstChild:e||n,o=/(?:([\u0080-\uFFFF\w-%@]+) *:? *([^{;]+?);|([^;}{]*?) *{)|(}\s*)/g,i=/\/\*[^]*?\*\/|  +/g,a=/\n+/g,s=(e,t)=>{let n="",r="",o="";for(let i in e){let a=e[i];"@"==i[0]?"i"==i[1]?n=i+" "+a+";":r+="f"==i[1]?s(a,i):i+"{"+s(a,"k"==i[1]?"":t)+"}":"object"==typeof a?r+=s(a,t?t.replace(/([^,])+/g,(e=>i.replace(/(^:.*)|([^,])+/g,(t=>/&/.test(t)?t.replace(/&/g,e):e?e+" "+t:t)))):i):null!=a&&(i=/^--/.test(i)?i:i.replace(/[A-Z]/g,"-$&").toLowerCase(),o+=s.p?s.p(i,a):i+":"+a+";")}return n+(t&&o?t+"{"+o+"}":o)+r},l={},u=e=>{if("object"==typeof e){let t="";for(let n in e)t+=n+u(e[n]);return t}return e},c=(e,t,n,r,c)=>{let d=u(e),f=l[d]||(l[d]=(e=>{let t=0,n=11;for(;t<e.length;)n=101*n+e.charCodeAt(t++)>>>0;return"go"+n})(d));if(!l[f]){let t=d!==e?e:(e=>{let t,n,r=[{}];for(;t=o.exec(e.replace(i,""));)t[4]?r.shift():t[3]?(n=t[3].replace(a," ").trim(),r.unshift(r[0][n]=r[0][n]||{})):r[0][t[1]]=t[2].replace(a," ").trim();return r[0]})(e);l[f]=s(c?{["@keyframes "+f]:t}:t,n?"":"."+f)}let h=n&&l.g?l.g:null;return n&&(l.g=l[f]),((e,t,n,r)=>{r?t.data=t.data.replace(r,e):-1===t.data.indexOf(e)&&(t.data=n?e+t.data:t.data+e)})(l[f],t,r,h),f},d=(e,t,n)=>e.reduce(((e,r,o)=>{let i=t[o];if(i&&i.call){let e=i(n),t=e&&e.props&&e.props.className||/^go/.test(e)&&e;i=t?"."+t:e&&"object"==typeof e?e.props?"":s(e,""):!1===e?"":e}return e+r+(null==i?"":i)}),"");function f(e){let t=this||{},n=e.call?e(t.p):e;return c(n.unshift?n.raw?d(n,[].slice.call(arguments,1),t.p):n.reduce(((e,n)=>Object.assign(e,n&&n.call?n(t.p):n)),{}):n,r(t.target),t.g,t.o,t.k)}let h,p,m,v=f.bind({g:1}),g=f.bind({k:1});t.css=f,t.extractCss=e=>{let t=r(e),n=t.data;return t.data="",n},t.glob=v,t.keyframes=g,t.setup=function(e,t,n,r){s.p=t,h=e,p=n,m=r},t.styled=function(e,t){let n=this||{};return function(){let r=arguments;function o(i,a){let s=Object.assign({},i),l=s.className||o.className;n.p=Object.assign({theme:p&&p()},s),n.o=/ *go\d+/.test(l),s.className=f.apply(n,r)+(l?" "+l:""),t&&(s.ref=a);let u=e;return e[0]&&(u=s.as||e,delete s.as),m&&u[0]&&m(s),h(u,s)}return t?t(o):o}}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={id:r,loaded:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.loaded=!0,i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),n.nc=void 0;(()=>{"use strict";const e=n(893),t=n(745),r=n(500),o=n(480),i=n(222),a=n(134),s=n(128);n(47),unsafeWindow.document.createElement=(0,s.createElementHook)(unsafeWindow.document.createElement,unsafeWindow.document),window.addEventListener("DOMContentLoaded",(()=>{console.log("DOMContent loaded");const n=unsafeWindow.document.createElement("div");n.id="extension",n.innerText="batch download",n.className="bg-white fixed top-16 right-16 z-10 min-w-20 min-h-3",unsafeWindow.document.body.appendChild(n);(0,t.createRoot)(n).render((0,e.jsxs)(o.RecoilRoot,{children:[(0,e.jsx)(r.Toaster,{position:"top-center"}),(0,e.jsx)(a.Dialog,{dialogId:257}),(0,e.jsx)(i.App,{})]}))}));(0,n(128).registerXHRHook)()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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b0JBQW9CLEtBQzFDaEQsUUFBUUMsSUFBSSxxQkFFWixNQUFNaXRHLEVBQU1ocEcsYUFBYWIsU0FBU0MsY0FBYyxPQUNoRDRwRyxFQUFJbG9HLEdBQUssWUFDVGtvRyxFQUFJemtHLFVBQVksaUJBQ2hCeWtHLEVBQUk1N0MsVUFBWSx1REFDaEJwdEQsYUFBYWIsU0FBUy9ELEtBQUs4RSxZQUFZOG9HLElBRTFCLElBQUExL0MsWUFBVzAvQyxHQUNuQmxnRixRQUFPLFVBQUMsRUFBQWt0RCxXQUFVLFlBQ3JCLFNBQUMsRUFBQXJyQixRQUFPLENBQUMwQixTQUFTLGdCQUNsQixTQUFDLEVBQUE0OEMsT0FBTSxDQUFDM0osU0FBVSxPQUNsQixTQUFDLEVBQUE0SixJQUFHLE9BQ1EsS0FLaEIsRUFGQSxPQUVBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3R3ZWV0cyBkb3dubG9hZGVyLy4vbGliL2dtLWdvb2RpZXMvZ20tZmV0Y2guanMiLCJ3ZWJwYWNrOi8vdHdlZXRzIGRvd25sb2FkZXIvLi9saWIvZ20tZ29vZGllcy9pbmRleC5qcyIsIndlYnBhY2s6Ly90d2VldHMgZG93bmxvYWRlci8uL2xpYi9nbS1nb29kaWVzL3hoci1ob29rLmpzIiwid2VicGFjazovL3R3ZWV0cyBkb3dubG9hZGVyLy4vc3JjL2luZGV4LmNzcyIsIndlYnBhY2s6Ly90d2VldHMgZG93bmxvYWRlci8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vdHdlZXRzIGRvd25sb2FkZXIvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIndlYnBhY2s6Ly90d2VldHMgZG93bmxvYWRlci8uL25vZGVfbW9kdWxlcy9maWxlLXNhdmVyL2Rpc3QvRmlsZVNhdmVyLm1pbi5qcyIsIndlYnBhY2s6Ly90d2VldHMgZG93bmxvYWRlci8uL25vZGVfbW9kdWxlcy9qc3ppcC9kaXN0L2pzemlwLm1pbi5qcyIsIndlYnBhY2s6Ly90d2VldHMgZG93bmxvYWRlci8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly90d2VldHMgZG93bmxvYWRlci8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2xpZW50LmpzIiwid2VicGFjazovL3R3ZWV0cyBkb3dubG9hZGVyLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly90d2VldHMgZG93bmxvYWRlci8uL25vZGVfbW9kdWxlcy9yZWFjdC1ob3QtdG9hc3QvZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly90d2VldHMgZG93bmxvYWRlci8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QtanN4LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vdHdlZXRzIGRvd25sb2FkZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL3R3ZWV0cyBkb3dubG9hZGVyLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovL3R3ZWV0cyBkb3dubG9hZGVyLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2pzeC1ydW50aW1lLmpzIiwid2VicGFjazovL3R3ZWV0cyBkb3dubG9hZGVyLy4vbm9kZV9tb2R1bGVzL3JlY29pbC9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly90d2VldHMgZG93bmxvYWRlci8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly90d2VldHMgZG93bmxvYWRlci8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdHdlZXRzIGRvd25sb2FkZXIvLi9zcmMvaW5kZXguY3NzPzViZmQiLCJ3ZWJwYWNrOi8vdHdlZXRzIGRvd25sb2FkZXIvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vdHdlZXRzIGRvd25sb2FkZXIvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vdHdlZXRzIGRvd25sb2FkZXIvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vdHdlZXRzIGRvd25sb2FkZXIvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly90d2VldHMgZG93bmxvYWRlci8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzIiwid2VicGFjazovL3R3ZWV0cyBkb3dubG9hZGVyLy4vc3JjL2NvbXBvbmVudHMvYXBwLnRzeCIsIndlYnBhY2s6Ly90d2VldHMgZG93bmxvYWRlci8uL3NyYy9jb21wb25lbnRzL2RpYWxvZy50c3giLCJ3ZWJwYWNrOi8vdHdlZXRzIGRvd25sb2FkZXIvLi9zcmMvcGFyc2VyL0dyYXBoVHdlZXRQYXJzZXIudHMiLCJ3ZWJwYWNrOi8vdHdlZXRzIGRvd25sb2FkZXIvLi9zcmMvcGFyc2VyL1hIUlR3ZWV0UGFyc2VyLnRzIiwid2VicGFjazovL3R3ZWV0cyBkb3dubG9hZGVyLy4vc3JjL3R5cGVzL2NvbnN0YW50cy50cyIsIndlYnBhY2s6Ly90d2VldHMgZG93bmxvYWRlci8uL3NyYy90eXBlcy9pbmRleC50cyIsIndlYnBhY2s6Ly90d2VldHMgZG93bmxvYWRlci8uL3NyYy91dGlscy9leHRlbnNpb25zLnRzIiwid2VicGFjazovL3R3ZWV0cyBkb3dubG9hZGVyLy4vc3JjL3V0aWxzL2hvb2tzLnRzIiwid2VicGFjazovL3R3ZWV0cyBkb3dubG9hZGVyLy4vc3JjL3V0aWxzL2lkcy50cyIsIndlYnBhY2s6Ly90d2VldHMgZG93bmxvYWRlci8uL3NyYy91dGlscy9sb2NhbC1zdG9yYWdlLnRzIiwid2VicGFjazovL3R3ZWV0cyBkb3dubG9hZGVyLy4vc3JjL3V0aWxzL21hcmsudHMiLCJ3ZWJwYWNrOi8vdHdlZXRzIGRvd25sb2FkZXIvLi9zcmMvdXRpbHMvc2F2ZS50cyIsIndlYnBhY2s6Ly90d2VldHMgZG93bmxvYWRlci8uL3NyYy91dGlscy9zY3JvbGwudHMiLCJ3ZWJwYWNrOi8vdHdlZXRzIGRvd25sb2FkZXIvLi9ub2RlX21vZHVsZXMvZ29vYmVyL2Rpc3QvZ29vYmVyLmNqcyIsIndlYnBhY2s6Ly90d2VldHMgZG93bmxvYWRlci93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly90d2VldHMgZG93bmxvYWRlci93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly90d2VldHMgZG93bmxvYWRlci93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vdHdlZXRzIGRvd25sb2FkZXIvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly90d2VldHMgZG93bmxvYWRlci93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3R3ZWV0cyBkb3dubG9hZGVyL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vdHdlZXRzIGRvd25sb2FkZXIvd2VicGFjay9ydW50aW1lL25vZGUgbW9kdWxlIGRlY29yYXRvciIsIndlYnBhY2s6Ly90d2VldHMgZG93bmxvYWRlci93ZWJwYWNrL3J1bnRpbWUvbm9uY2UiLCJ3ZWJwYWNrOi8vdHdlZXRzIGRvd25sb2FkZXIvLi9zcmMvbWFpbi50c3giXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIFByb21pc2UgPSB3aW5kb3cuQmx1ZWJpcmQgfHwgd2luZG93LlByb21pc2U7XG5cbiAgbGV0IHNlbGYgPSB0eXBlb2Ygd2luZG93ID09PSB1bmRlZmluZWQgPyBnbG9iYWwgOiB3aW5kb3c7XG5cbiAgaWYgKHNlbGYuR01fZmV0Y2gpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBmdW5jdGlvbiBub3JtYWxpemVOYW1lKG5hbWUpIHtcbiAgICBpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICBuYW1lID0gbmFtZS50b1N0cmluZygpO1xuICAgIH1cbiAgICBpZiAoL1teYS16MC05XFwtIyQlJicqKy5cXF5fYHx+XS9pLnRlc3QobmFtZSkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgY2hhcmFjdGVyIGluIGhlYWRlciBmaWVsZCBuYW1lJyk7XG4gICAgfVxuICAgIHJldHVybiBuYW1lLnRvTG93ZXJDYXNlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBub3JtYWxpemVWYWx1ZSh2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICB2YWx1ZSA9IHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEhlYWRlcnMoaGVhZGVycykge1xuICAgIHRoaXMubWFwID0ge307XG5cbiAgICBpZiAoaGVhZGVycyBpbnN0YW5jZW9mIEhlYWRlcnMpIHtcbiAgICAgIGhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgICAgICB0aGlzLmFwcGVuZChuYW1lLCB2YWx1ZSk7XG4gICAgICB9LCB0aGlzKTtcblxuICAgIH0gZWxzZSBpZiAoaGVhZGVycykge1xuICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoaGVhZGVycykuZm9yRWFjaChmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgIHRoaXMuYXBwZW5kKG5hbWUsIGhlYWRlcnNbbmFtZV0pO1xuICAgICAgfSwgdGhpcyk7XG4gICAgfVxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICBuYW1lID0gbm9ybWFsaXplTmFtZShuYW1lKTtcbiAgICB2YWx1ZSA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlKTtcbiAgICB2YXIgbGlzdCA9IHRoaXMubWFwW25hbWVdO1xuICAgIGlmICghbGlzdCkge1xuICAgICAgbGlzdCA9IFtdO1xuICAgICAgdGhpcy5tYXBbbmFtZV0gPSBsaXN0O1xuICAgIH1cbiAgICBsaXN0LnB1c2godmFsdWUpO1xuICB9O1xuXG4gIEhlYWRlcnMucHJvdG90eXBlWydkZWxldGUnXSA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBkZWxldGUgdGhpcy5tYXBbbm9ybWFsaXplTmFtZShuYW1lKV07XG4gIH07XG5cbiAgSGVhZGVycy5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24obmFtZSkge1xuICAgIHZhciB2YWx1ZXMgPSB0aGlzLm1hcFtub3JtYWxpemVOYW1lKG5hbWUpXTtcbiAgICByZXR1cm4gdmFsdWVzID8gdmFsdWVzWzBdIDogbnVsbDtcbiAgfTtcblxuICBIZWFkZXJzLnByb3RvdHlwZS5nZXRBbGwgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwW25vcm1hbGl6ZU5hbWUobmFtZSldIHx8IFtdO1xuICB9O1xuXG4gIEhlYWRlcnMucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAuaGFzT3duUHJvcGVydHkobm9ybWFsaXplTmFtZShuYW1lKSk7XG4gIH07XG5cbiAgSGVhZGVycy5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICB0aGlzLm1hcFtub3JtYWxpemVOYW1lKG5hbWUpXSA9IFtub3JtYWxpemVWYWx1ZSh2YWx1ZSldO1xuICB9O1xuXG4gIEhlYWRlcnMucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbihjYWxsYmFjaywgdGhpc0FyZykge1xuICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMubWFwKS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIHRoaXMubWFwW25hbWVdLmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgY2FsbGJhY2suY2FsbCh0aGlzQXJnLCB2YWx1ZSwgbmFtZSwgdGhpcyk7XG4gICAgICB9LCB0aGlzKTtcbiAgICB9LCB0aGlzKTtcbiAgfTtcblxuICBmdW5jdGlvbiBjb25zdW1lZChib2R5KSB7XG4gICAgaWYgKGJvZHkuYm9keVVzZWQpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgVHlwZUVycm9yKCdBbHJlYWR5IHJlYWQnKSk7XG4gICAgfVxuICAgIGJvZHkuYm9keVVzZWQgPSB0cnVlO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGZpbGVSZWFkZXJSZWFkeShyZWFkZXIpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICByZWFkZXIub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlc29sdmUocmVhZGVyLnJlc3VsdCk7XG4gICAgICB9O1xuICAgICAgcmVhZGVyLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVqZWN0KHJlYWRlci5lcnJvcik7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVhZEJsb2JBc0FycmF5QnVmZmVyKGJsb2IpIHtcbiAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoYmxvYik7XG4gICAgcmV0dXJuIGZpbGVSZWFkZXJSZWFkeShyZWFkZXIpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVhZEJsb2JBc1RleHQoYmxvYikge1xuICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgIHJlYWRlci5yZWFkQXNUZXh0KGJsb2IpO1xuICAgIHJldHVybiBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKTtcbiAgfVxuXG4gIHZhciBzdXBwb3J0ID0ge1xuICAgIGJsb2I6ICdGaWxlUmVhZGVyJyBpbiBzZWxmICYmICdCbG9iJyBpbiBzZWxmICYmIChmdW5jdGlvbigpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIG5ldyBCbG9iKCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBjYXRjaChlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9KSgpLFxuICAgIGZvcm1EYXRhOiAnRm9ybURhdGEnIGluIHNlbGZcbiAgfTtcblxuICBmdW5jdGlvbiBCb2R5KCkge1xuICAgIHRoaXMuYm9keVVzZWQgPSBmYWxzZTtcblxuXG4gICAgdGhpcy5faW5pdEJvZHkgPSBmdW5jdGlvbihib2R5KSB7XG4gICAgICB0aGlzLl9ib2R5SW5pdCA9IGJvZHk7XG4gICAgICBpZiAodHlwZW9mIGJvZHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRoaXMuX2JvZHlUZXh0ID0gYm9keTtcbiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5ibG9iICYmIEJsb2IucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgICAgdGhpcy5fYm9keUJsb2IgPSBib2R5O1xuICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LmZvcm1EYXRhICYmIEZvcm1EYXRhLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICAgIHRoaXMuX2JvZHlGb3JtRGF0YSA9IGJvZHk7XG4gICAgICB9IGVsc2UgaWYgKCFib2R5KSB7XG4gICAgICAgIHRoaXMuX2JvZHlUZXh0ID0gJyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Vuc3VwcG9ydGVkIEJvZHlJbml0IHR5cGUnKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgaWYgKHN1cHBvcnQuYmxvYikge1xuICAgICAgdGhpcy5ibG9iID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciByZWplY3RlZCA9IGNvbnN1bWVkKHRoaXMpO1xuICAgICAgICBpZiAocmVqZWN0ZWQpIHtcbiAgICAgICAgICByZXR1cm4gcmVqZWN0ZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fYm9keUJsb2IpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2JvZHlCbG9iKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5Rm9ybURhdGEpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkIG5vdCByZWFkIEZvcm1EYXRhIGJvZHkgYXMgYmxvYicpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobmV3IEJsb2IoW3RoaXMuX2JvZHlUZXh0XSkpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICB0aGlzLmFycmF5QnVmZmVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJsb2IoKS50aGVuKHJlYWRCbG9iQXNBcnJheUJ1ZmZlcik7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLnRleHQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHJlamVjdGVkID0gY29uc3VtZWQodGhpcyk7XG4gICAgICAgIGlmIChyZWplY3RlZCkge1xuICAgICAgICAgIHJldHVybiByZWplY3RlZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9ib2R5QmxvYikge1xuICAgICAgICAgIHJldHVybiByZWFkQmxvYkFzVGV4dCh0aGlzLl9ib2R5QmxvYik7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUZvcm1EYXRhKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb3VsZCBub3QgcmVhZCBGb3JtRGF0YSBib2R5IGFzIHRleHQnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2JvZHlUZXh0KTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy50ZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciByZWplY3RlZCA9IGNvbnN1bWVkKHRoaXMpO1xuICAgICAgICByZXR1cm4gcmVqZWN0ZWQgPyByZWplY3RlZCA6IFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5VGV4dCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmIChzdXBwb3J0LmZvcm1EYXRhKSB7XG4gICAgICB0aGlzLmZvcm1EYXRhID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRleHQoKS50aGVuKGRlY29kZSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIHRoaXMuanNvbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMudGV4dCgpLnRoZW4oSlNPTi5wYXJzZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyBIVFRQIG1ldGhvZHMgd2hvc2UgY2FwaXRhbGl6YXRpb24gc2hvdWxkIGJlIG5vcm1hbGl6ZWRcbiAgdmFyIG1ldGhvZHMgPSBbJ0RFTEVURScsICdHRVQnLCAnSEVBRCcsICdPUFRJT05TJywgJ1BPU1QnLCAnUFVUJ107XG5cbiAgZnVuY3Rpb24gbm9ybWFsaXplTWV0aG9kKG1ldGhvZCkge1xuICAgIHZhciB1cGNhc2VkID0gbWV0aG9kLnRvVXBwZXJDYXNlKCk7XG4gICAgcmV0dXJuIChtZXRob2RzLmluZGV4T2YodXBjYXNlZCkgPiAtMSkgPyB1cGNhc2VkIDogbWV0aG9kO1xuICB9XG5cbiAgZnVuY3Rpb24gUmVxdWVzdCh1cmwsIG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICB0aGlzLnVybCA9IHVybDtcblxuICAgIHRoaXMuY3JlZGVudGlhbHMgPSBvcHRpb25zLmNyZWRlbnRpYWxzIHx8ICdvbWl0JztcbiAgICB0aGlzLmhlYWRlcnMgPSBuZXcgSGVhZGVycyhvcHRpb25zLmhlYWRlcnMpO1xuICAgIHRoaXMubWV0aG9kID0gbm9ybWFsaXplTWV0aG9kKG9wdGlvbnMubWV0aG9kIHx8ICdHRVQnKTtcbiAgICB0aGlzLm1vZGUgPSBvcHRpb25zLm1vZGUgfHwgbnVsbDtcbiAgICB0aGlzLnJlZmVycmVyID0gbnVsbDtcblxuICAgIGlmICgodGhpcy5tZXRob2QgPT09ICdHRVQnIHx8IHRoaXMubWV0aG9kID09PSAnSEVBRCcpICYmIG9wdGlvbnMuYm9keSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQm9keSBub3QgYWxsb3dlZCBmb3IgR0VUIG9yIEhFQUQgcmVxdWVzdHMnKTtcbiAgICB9XG4gICAgdGhpcy5faW5pdEJvZHkob3B0aW9ucy5ib2R5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlY29kZShib2R5KSB7XG4gICAgdmFyIGZvcm0gPSBuZXcgRm9ybURhdGEoKTtcbiAgICBib2R5LnRyaW0oKS5zcGxpdCgnJicpLmZvckVhY2goZnVuY3Rpb24oYnl0ZXMpIHtcbiAgICAgIGlmIChieXRlcykge1xuICAgICAgICB2YXIgc3BsaXQgPSBieXRlcy5zcGxpdCgnPScpO1xuICAgICAgICB2YXIgbmFtZSA9IHNwbGl0LnNoaWZ0KCkucmVwbGFjZSgvXFwrL2csICcgJyk7XG4gICAgICAgIHZhciB2YWx1ZSA9IHNwbGl0LmpvaW4oJz0nKS5yZXBsYWNlKC9cXCsvZywgJyAnKTtcbiAgICAgICAgZm9ybS5hcHBlbmQoZGVjb2RlVVJJQ29tcG9uZW50KG5hbWUpLCBkZWNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gZm9ybTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhlYWRlcnMocmVzcG9uc2VIZWFkZXJzKSB7XG4gICAgdmFyIGhlYWQgPSBuZXcgSGVhZGVycygpO1xuICAgIHZhciBwYWlycyA9IHJlc3BvbnNlSGVhZGVycy50cmltKCkuc3BsaXQoJ1xcbicpO1xuICAgIHBhaXJzLmZvckVhY2goZnVuY3Rpb24oaGVhZGVyKSB7XG4gICAgICB2YXIgc3BsaXQgPSBoZWFkZXIudHJpbSgpLnNwbGl0KCc6Jyk7XG4gICAgICB2YXIga2V5ID0gc3BsaXQuc2hpZnQoKS50cmltKCk7XG4gICAgICB2YXIgdmFsdWUgPSBzcGxpdC5qb2luKCc6JykudHJpbSgpO1xuICAgICAgaGVhZC5hcHBlbmQoa2V5LCB2YWx1ZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGhlYWQ7XG4gIH1cblxuICBCb2R5LmNhbGwoUmVxdWVzdC5wcm90b3R5cGUpO1xuXG4gIGZ1bmN0aW9uIFJlc3BvbnNlKGJvZHlJbml0LCBvcHRpb25zKSB7XG4gICAgaWYgKCFvcHRpb25zKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgdGhpcy5faW5pdEJvZHkoYm9keUluaXQpO1xuICAgIHRoaXMudHlwZSA9ICdkZWZhdWx0JztcbiAgICB0aGlzLnVybCA9IG51bGw7XG4gICAgdGhpcy5zdGF0dXMgPSBvcHRpb25zLnN0YXR1cztcbiAgICB0aGlzLm9rID0gdGhpcy5zdGF0dXMgPj0gMjAwICYmIHRoaXMuc3RhdHVzIDwgMzAwO1xuICAgIHRoaXMuc3RhdHVzVGV4dCA9IG9wdGlvbnMuc3RhdHVzVGV4dDtcbiAgICB0aGlzLmhlYWRlcnMgPSBvcHRpb25zLmhlYWRlcnMgaW5zdGFuY2VvZiBIZWFkZXJzID8gb3B0aW9ucy5oZWFkZXJzIDogbmV3IEhlYWRlcnMob3B0aW9ucy5oZWFkZXJzKTtcbiAgICB0aGlzLnVybCA9IG9wdGlvbnMudXJsIHx8ICcnO1xuICB9XG5cbiAgQm9keS5jYWxsKFJlc3BvbnNlLnByb3RvdHlwZSk7XG5cbiAgc2VsZi5IZWFkZXJzID0gSGVhZGVycztcbiAgc2VsZi5SZXF1ZXN0ID0gUmVxdWVzdDtcbiAgc2VsZi5SZXNwb25zZSA9IFJlc3BvbnNlO1xuXG4gIHNlbGYuR01fZmV0Y2ggPSBmdW5jdGlvbihpbnB1dCwgaW5pdCkge1xuICAgIC8vIFRPRE86IFJlcXVlc3QgY29uc3RydWN0b3Igc2hvdWxkIGFjY2VwdCBpbnB1dCwgaW5pdFxuICAgIHZhciByZXF1ZXN0O1xuICAgIGlmIChSZXF1ZXN0LnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGlucHV0KSAmJiAhaW5pdCkge1xuICAgICAgcmVxdWVzdCA9IGlucHV0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXF1ZXN0ID0gbmV3IFJlcXVlc3QoaW5wdXQsIGluaXQpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciB4aHJfZGV0YWlscyA9IHt9O1xuICAgICAgdmFyIF9wYXJzZWRSZXNwSGVhZGVycztcblxuICAgICAgZnVuY3Rpb24gcmVzcG9uc2VVUkwoZmluYWxVcmwsIHJhd1Jlc3BIZWFkZXJzLCByZXNwSGVhZGVycykge1xuICAgICAgICBpZiAoZmluYWxVcmwpIHtcbiAgICAgICAgICByZXR1cm4gZmluYWxVcmw7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBdm9pZCBzZWN1cml0eSB3YXJuaW5ncyBvbiBnZXRSZXNwb25zZUhlYWRlciB3aGVuIG5vdCBhbGxvd2VkIGJ5IENPUlNcbiAgICAgICAgaWYgKC9eWC1SZXF1ZXN0LVVSTDovbS50ZXN0KHJhd1Jlc3BIZWFkZXJzKSkge1xuICAgICAgICAgIHJldHVybiByZXNwSGVhZGVycy5nZXQoJ1gtUmVxdWVzdC1VUkwnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHhocl9kZXRhaWxzLm1ldGhvZCA9IHJlcXVlc3QubWV0aG9kO1xuXG4gICAgICB4aHJfZGV0YWlscy51cmwgPSByZXF1ZXN0LnVybDtcblxuICAgICAgeGhyX2RldGFpbHMuc3luY2hyb25vdXMgPSBmYWxzZTtcblxuICAgICAgeGhyX2RldGFpbHMub25sb2FkID0gZnVuY3Rpb24ocmVzcCkge1xuICAgICAgICB2YXIgc3RhdHVzID0gcmVzcC5zdGF0dXM7XG4gICAgICAgIGlmIChzdGF0dXMgPCAxMDAgfHwgc3RhdHVzID4gNTk5KSB7XG4gICAgICAgICAgcmVqZWN0KG5ldyBUeXBlRXJyb3IoJ05ldHdvcmsgcmVxdWVzdCBmYWlsZWQnKSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHJhd1Jlc3BIZWFkZXJzID0gcmVzcC5yZXNwb25zZUhlYWRlcnM7XG4gICAgICAgIF9wYXJzZWRSZXNwSGVhZGVycyA9IGhlYWRlcnMocmF3UmVzcEhlYWRlcnMpO1xuXG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgIHN0YXR1czogc3RhdHVzLFxuICAgICAgICAgIHN0YXR1c1RleHQ6IHJlc3Auc3RhdHVzVGV4dCxcbiAgICAgICAgICBoZWFkZXJzOiBfcGFyc2VkUmVzcEhlYWRlcnMsXG4gICAgICAgICAgdXJsOiByZXNwb25zZVVSTChyZXNwLmZpbmFsVXJsLCByYXdSZXNwSGVhZGVycywgX3BhcnNlZFJlc3BIZWFkZXJzKVxuICAgICAgICB9O1xuICAgICAgICB2YXIgYm9keSA9IHJlc3AucmVzcG9uc2U7XG4gICAgICAgIHJlc29sdmUobmV3IFJlc3BvbnNlKGJvZHksIG9wdGlvbnMpKTtcbiAgICAgIH07XG5cbiAgICAgIHhocl9kZXRhaWxzLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVqZWN0KG5ldyBUeXBlRXJyb3IoJ05ldHdvcmsgcmVxdWVzdCBmYWlsZWQnKSk7XG4gICAgICB9O1xuXG4gICAgICB4aHJfZGV0YWlscy5oZWFkZXJzID0ge307XG4gICAgICByZXF1ZXN0LmhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgICAgICB4aHJfZGV0YWlscy5oZWFkZXJzW25hbWVdID0gdmFsdWU7XG4gICAgICB9KTtcblxuICAgICAgaWYodHlwZW9mIHJlcXVlc3QuX2JvZHlJbml0ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB4aHJfZGV0YWlscy5kYXRhID0gcmVxdWVzdC5fYm9keUluaXQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChpbml0ICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIChpbml0Lm9uRG93bmxvYWRQcm9ncmVzcykgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgeGhyX2RldGFpbHMub25wcm9ncmVzcyA9IGluaXQub25Eb3dubG9hZFByb2dyZXNzO1xuICAgICAgfVxuXG4gICAgICB4aHJfZGV0YWlscy5yZXNwb25zZVR5cGUgPSBcImJsb2JcIjtcbiAgICAgIEdNX3htbGh0dHBSZXF1ZXN0KHhocl9kZXRhaWxzKTtcblxuICAgICAgLypcbiAgICAgIC8vIG5lZWQgdG8gc2VlIGlmIHRoZXJlJ3MgYW55IHdheSBvZiBkb2luZyB0aGlzXG4gICAgICBpZiAocmVxdWVzdC5jcmVkZW50aWFscyA9PT0gJ2luY2x1ZGUnKSB7XG4gICAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSB0cnVlXG4gICAgICB9XG5cbiAgICAgIEdNX3htbGh0dHBSZXF1ZXN0IGhhcyBhIHJlc3BvbnNlVHlwZSBwYXJhbSwgYnV0IHRoaXMgZGlkbid0IHNlZW0gdG8gd29yaywgYXQgbGVhc3QgaW4gVGFtcGVyTW9ua2V5XG4gICAgICBpZiAoJ3Jlc3BvbnNlVHlwZScgaW4geGhyICYmIHN1cHBvcnQuYmxvYikge1xuICAgICAgICB4aHIucmVzcG9uc2VUeXBlID0gJ2Jsb2InXG4gICAgICB9XG4gICAgICAqL1xuICAgIH0pO1xuICB9O1xuICBzZWxmLkdNX2ZldGNoLnBvbHlmaWxsID0gdHJ1ZTtcbiAgY29uc29sZS5sb2coYG1vZHVsZTogJHttb2R1bGV9YCk7XG5cbiAgaWYgKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSB7IEdNX2ZldGNoIH07XG4gIH1cbn0pKCk7XG4iLCJcblxuY29uc3QgeyBHTV9mZXRjaCB9ID0gcmVxdWlyZSgnLi9nbS1mZXRjaCcpO1xuY29uc3QgeyB4aHJIb29rLCB4aHJIb29rMiB9ID0gcmVxdWlyZSgnLi94aHItaG9vaycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgR01fZmV0Y2gsXG4gIHhockhvb2ssXG4gIHhockhvb2syXG59XG4iLCJmdW5jdGlvbiB4aHJIb29rMihob29rKSB7XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgKGV2KSA9PiB7XG4gICAgbGV0IHsgdHlwZTogdHlwZSwgcmVzcG9uc2VUeXBlOiByZXNUeXBlLCB1cmw6IHVybCwgY29udGVudDogY29udGVudCB9ID0gZXYuZGF0YTtcbiAgICBpZiAodHlwZSA9PT0gXCJ0cmFwXCIpIHtcbiAgICAgIGhvb2sodXJsLCByZXNUeXBlLCBjb250ZW50KTtcbiAgICB9XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIHRyYXAoKSB7XG4gICAgY29uc3Qgb3JpZ1NlbmQgPSB3aW5kb3cuWE1MSHR0cFJlcXVlc3QucHJvdG90eXBlLnNlbmQ7XG4gICAgd2luZG93LlhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24oKSB7XG4gICAgICBjb25zdCB4aHIgPSB0aGlzO1xuICAgICAgY29uc3QgYXJncyA9IEFycmF5LmZyb20oYXJndW1lbnRzKTtcbiAgICAgIGNvbnN0IGNhbGxiYWNrID0gKCkgPT4ge1xuICAgICAgICB3aW5kb3cucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgIHR5cGU6IFwidHJhcFwiLFxuXHQgIHJlc3BvbnNlVHlwZTogeGhyLnJlc3BvbnNlVHlwZSxcbiAgICAgICAgICB1cmw6IHhoci5yZXNwb25zZVVSTCxcbiAgICAgICAgICBjb250ZW50OiB4aHIucmVzcG9uc2VcbiAgICAgICAgfSwgXCIqXCIpO1xuICAgICAgICB4aHIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgY2FsbGJhY2spO1xuICAgICAgfTtcbiAgICAgIHhoci5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCBjYWxsYmFjayk7XG5cbiAgICAgIHJldHVybiBvcmlnU2VuZC5hcHBseSh4aHIsIGFyZ3MpO1xuICAgIH07XG4gIH1cblxuICBsZXQgc2NyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiAgc2NyLnRleHQgPSBcIihcIiArIHRyYXAudG9TdHJpbmcoKSArIFwiKSgpO1wiO1xuICB1bnNhZmVXaW5kb3cuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKHNjcik7XG59XG5cbmZ1bmN0aW9uIHhockhvb2soaG9vaykge1xuICBjb25zdCB4bWxodHRwUmVxdWVzdCA9IHVuc2FmZVdpbmRvdy5YTUxIdHRwUmVxdWVzdDtcblxuICBsZXQgbWV0aG9kSG9vayA9IHtcbiAgICBnZXQ6ICh4aHIsIHByb3AsIF9wcm94eSkgPT4ge1xuICAgICAgbGV0IGZ1bmNPclZhbHVlID0geGhyW3Byb3BdO1xuXG4gICAgICBpZiAodHlwZW9mIGZ1bmNPclZhbHVlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgaWYgKHByb3AgPT09IFwic2VuZFwiKSB7XG5cbiAgICAgICAgICByZXR1cm4gKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgICAgIGxldCBzYXZlZE9ubG9hZCA9IHhoci5vbmxvYWQ7XG4gICAgICAgICAgICB4aHIub25sb2FkID0gKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgICAgICAgaG9vay5hcHBseShob29rLCBbeGhyXS5jb25jYXQoYXJncykpO1xuICAgICAgICAgICAgICB4aHIub25sb2FkID0gc2F2ZWRPbmxvYWQ7XG5cbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzYXZlZE9ubG9hZCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNhdmVkT25sb2FkLmFwcGx5KHhociwgYXJncyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHhoci5zZW5kLmFwcGx5KHhociwgYXJncyk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAoLi4uYXJncykgPT4ge1xuICAgICAgICAgIGxldCByZXN1bHQgPSB4aHJbcHJvcF0uYXBwbHkoeGhyLCBhcmdzKTtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmNPclZhbHVlO1xuICAgIH0sXG5cbiAgICBzZXQ6ICh4aHIsIHByb3AsIHZhbHVlLCBfcHJveHkpID0+IHtcbiAgICAgIHhocltwcm9wXSA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9O1xuXG4gIGxldCBjb25zdHJ1Y3Rvckhvb2sgPSB7XG4gICAgY29uc3RydWN0OiAoKSA9PiB7XG4gICAgICByZXR1cm4gbmV3IFByb3h5KG5ldyB4bWxodHRwUmVxdWVzdCgpLCBtZXRob2RIb29rKTtcbiAgICB9XG4gIH07XG5cbiAgdW5zYWZlV2luZG93LlhNTEh0dHBSZXF1ZXN0ID0gbmV3IFByb3h5KHhtbGh0dHBSZXF1ZXN0LCBjb25zdHJ1Y3Rvckhvb2spO1xufVxuXG5pZiAodHlwZW9mIHNlbGYgPT09ICdvYmplY3QnKSB7XG4gIHNlbGYueGhySG9vayA9IHhockhvb2s7XG4gIHNlbGYueGhySG9vazIgPSB4aHJIb29rMjtcbn1cbmlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHsgeGhySG9vaywgeGhySG9vazIgfTtcbn1cbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLypcXG4hIHRhaWx3aW5kY3NzIHYzLjIuNCB8IE1JVCBMaWNlbnNlIHwgaHR0cHM6Ly90YWlsd2luZGNzcy5jb21cXG4qLy8qXFxuMS4gUHJldmVudCBwYWRkaW5nIGFuZCBib3JkZXIgZnJvbSBhZmZlY3RpbmcgZWxlbWVudCB3aWR0aC4gKGh0dHBzOi8vZ2l0aHViLmNvbS9tb3pkZXZzL2Nzc3JlbWVkeS9pc3N1ZXMvNClcXG4yLiBBbGxvdyBhZGRpbmcgYSBib3JkZXIgdG8gYW4gZWxlbWVudCBieSBqdXN0IGFkZGluZyBhIGJvcmRlci13aWR0aC4gKGh0dHBzOi8vZ2l0aHViLmNvbS90YWlsd2luZGNzcy90YWlsd2luZGNzcy9wdWxsLzExNilcXG4qL1xcblxcbiosXFxuOjpiZWZvcmUsXFxuOjphZnRlciB7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94OyAvKiAxICovXFxuICBib3JkZXItd2lkdGg6IDA7IC8qIDIgKi9cXG4gIGJvcmRlci1zdHlsZTogc29saWQ7IC8qIDIgKi9cXG4gIGJvcmRlci1jb2xvcjogI2U1ZTdlYjsgLyogMiAqL1xcbn1cXG5cXG46OmJlZm9yZSxcXG46OmFmdGVyIHtcXG4gIC0tdHctY29udGVudDogJyc7XFxufVxcblxcbi8qXFxuMS4gVXNlIGEgY29uc2lzdGVudCBzZW5zaWJsZSBsaW5lLWhlaWdodCBpbiBhbGwgYnJvd3NlcnMuXFxuMi4gUHJldmVudCBhZGp1c3RtZW50cyBvZiBmb250IHNpemUgYWZ0ZXIgb3JpZW50YXRpb24gY2hhbmdlcyBpbiBpT1MuXFxuMy4gVXNlIGEgbW9yZSByZWFkYWJsZSB0YWIgc2l6ZS5cXG40LiBVc2UgdGhlIHVzZXIncyBjb25maWd1cmVkIGBzYW5zYCBmb250LWZhbWlseSBieSBkZWZhdWx0LlxcbjUuIFVzZSB0aGUgdXNlcidzIGNvbmZpZ3VyZWQgYHNhbnNgIGZvbnQtZmVhdHVyZS1zZXR0aW5ncyBieSBkZWZhdWx0LlxcbiovXFxuXFxuaHRtbCB7XFxuICBsaW5lLWhlaWdodDogMS41OyAvKiAxICovXFxuICAtd2Via2l0LXRleHQtc2l6ZS1hZGp1c3Q6IDEwMCU7IC8qIDIgKi9cXG4gIC1tb3otdGFiLXNpemU6IDQ7IC8qIDMgKi9cXG4gIC1vLXRhYi1zaXplOiA0O1xcbiAgICAgdGFiLXNpemU6IDQ7IC8qIDMgKi9cXG4gIGZvbnQtZmFtaWx5OiB1aS1zYW5zLXNlcmlmLCBzeXN0ZW0tdWksIC1hcHBsZS1zeXN0ZW0sIEJsaW5rTWFjU3lzdGVtRm9udCwgXFxcIlNlZ29lIFVJXFxcIiwgUm9ib3RvLCBcXFwiSGVsdmV0aWNhIE5ldWVcXFwiLCBBcmlhbCwgXFxcIk5vdG8gU2Fuc1xcXCIsIHNhbnMtc2VyaWYsIFxcXCJBcHBsZSBDb2xvciBFbW9qaVxcXCIsIFxcXCJTZWdvZSBVSSBFbW9qaVxcXCIsIFxcXCJTZWdvZSBVSSBTeW1ib2xcXFwiLCBcXFwiTm90byBDb2xvciBFbW9qaVxcXCI7IC8qIDQgKi9cXG4gIGZvbnQtZmVhdHVyZS1zZXR0aW5nczogbm9ybWFsOyAvKiA1ICovXFxufVxcblxcbi8qXFxuMS4gUmVtb3ZlIHRoZSBtYXJnaW4gaW4gYWxsIGJyb3dzZXJzLlxcbjIuIEluaGVyaXQgbGluZS1oZWlnaHQgZnJvbSBgaHRtbGAgc28gdXNlcnMgY2FuIHNldCB0aGVtIGFzIGEgY2xhc3MgZGlyZWN0bHkgb24gdGhlIGBodG1sYCBlbGVtZW50LlxcbiovXFxuXFxuYm9keSB7XFxuICBtYXJnaW46IDA7IC8qIDEgKi9cXG4gIGxpbmUtaGVpZ2h0OiBpbmhlcml0OyAvKiAyICovXFxufVxcblxcbi8qXFxuMS4gQWRkIHRoZSBjb3JyZWN0IGhlaWdodCBpbiBGaXJlZm94LlxcbjIuIENvcnJlY3QgdGhlIGluaGVyaXRhbmNlIG9mIGJvcmRlciBjb2xvciBpbiBGaXJlZm94LiAoaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTkwNjU1KVxcbjMuIEVuc3VyZSBob3Jpem9udGFsIHJ1bGVzIGFyZSB2aXNpYmxlIGJ5IGRlZmF1bHQuXFxuKi9cXG5cXG5ociB7XFxuICBoZWlnaHQ6IDA7IC8qIDEgKi9cXG4gIGNvbG9yOiBpbmhlcml0OyAvKiAyICovXFxuICBib3JkZXItdG9wLXdpZHRoOiAxcHg7IC8qIDMgKi9cXG59XFxuXFxuLypcXG5BZGQgdGhlIGNvcnJlY3QgdGV4dCBkZWNvcmF0aW9uIGluIENocm9tZSwgRWRnZSwgYW5kIFNhZmFyaS5cXG4qL1xcblxcbmFiYnI6d2hlcmUoW3RpdGxlXSkge1xcbiAgLXdlYmtpdC10ZXh0LWRlY29yYXRpb246IHVuZGVybGluZSBkb3R0ZWQ7XFxuICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lIGRvdHRlZDtcXG59XFxuXFxuLypcXG5SZW1vdmUgdGhlIGRlZmF1bHQgZm9udCBzaXplIGFuZCB3ZWlnaHQgZm9yIGhlYWRpbmdzLlxcbiovXFxuXFxuaDEsXFxuaDIsXFxuaDMsXFxuaDQsXFxuaDUsXFxuaDYge1xcbiAgZm9udC1zaXplOiBpbmhlcml0O1xcbiAgZm9udC13ZWlnaHQ6IGluaGVyaXQ7XFxufVxcblxcbi8qXFxuUmVzZXQgbGlua3MgdG8gb3B0aW1pemUgZm9yIG9wdC1pbiBzdHlsaW5nIGluc3RlYWQgb2Ygb3B0LW91dC5cXG4qL1xcblxcbmEge1xcbiAgY29sb3I6IGluaGVyaXQ7XFxuICB0ZXh0LWRlY29yYXRpb246IGluaGVyaXQ7XFxufVxcblxcbi8qXFxuQWRkIHRoZSBjb3JyZWN0IGZvbnQgd2VpZ2h0IGluIEVkZ2UgYW5kIFNhZmFyaS5cXG4qL1xcblxcbmIsXFxuc3Ryb25nIHtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkZXI7XFxufVxcblxcbi8qXFxuMS4gVXNlIHRoZSB1c2VyJ3MgY29uZmlndXJlZCBgbW9ub2AgZm9udCBmYW1pbHkgYnkgZGVmYXVsdC5cXG4yLiBDb3JyZWN0IHRoZSBvZGQgYGVtYCBmb250IHNpemluZyBpbiBhbGwgYnJvd3NlcnMuXFxuKi9cXG5cXG5jb2RlLFxcbmtiZCxcXG5zYW1wLFxcbnByZSB7XFxuICBmb250LWZhbWlseTogdWktbW9ub3NwYWNlLCBTRk1vbm8tUmVndWxhciwgTWVubG8sIE1vbmFjbywgQ29uc29sYXMsIFxcXCJMaWJlcmF0aW9uIE1vbm9cXFwiLCBcXFwiQ291cmllciBOZXdcXFwiLCBtb25vc3BhY2U7IC8qIDEgKi9cXG4gIGZvbnQtc2l6ZTogMWVtOyAvKiAyICovXFxufVxcblxcbi8qXFxuQWRkIHRoZSBjb3JyZWN0IGZvbnQgc2l6ZSBpbiBhbGwgYnJvd3NlcnMuXFxuKi9cXG5cXG5zbWFsbCB7XFxuICBmb250LXNpemU6IDgwJTtcXG59XFxuXFxuLypcXG5QcmV2ZW50IGBzdWJgIGFuZCBgc3VwYCBlbGVtZW50cyBmcm9tIGFmZmVjdGluZyB0aGUgbGluZSBoZWlnaHQgaW4gYWxsIGJyb3dzZXJzLlxcbiovXFxuXFxuc3ViLFxcbnN1cCB7XFxuICBmb250LXNpemU6IDc1JTtcXG4gIGxpbmUtaGVpZ2h0OiAwO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lO1xcbn1cXG5cXG5zdWIge1xcbiAgYm90dG9tOiAtMC4yNWVtO1xcbn1cXG5cXG5zdXAge1xcbiAgdG9wOiAtMC41ZW07XFxufVxcblxcbi8qXFxuMS4gUmVtb3ZlIHRleHQgaW5kZW50YXRpb24gZnJvbSB0YWJsZSBjb250ZW50cyBpbiBDaHJvbWUgYW5kIFNhZmFyaS4gKGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTk5OTA4OCwgaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTIwMTI5NylcXG4yLiBDb3JyZWN0IHRhYmxlIGJvcmRlciBjb2xvciBpbmhlcml0YW5jZSBpbiBhbGwgQ2hyb21lIGFuZCBTYWZhcmkuIChodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD05MzU3MjksIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xOTUwMTYpXFxuMy4gUmVtb3ZlIGdhcHMgYmV0d2VlbiB0YWJsZSBib3JkZXJzIGJ5IGRlZmF1bHQuXFxuKi9cXG5cXG50YWJsZSB7XFxuICB0ZXh0LWluZGVudDogMDsgLyogMSAqL1xcbiAgYm9yZGVyLWNvbG9yOiBpbmhlcml0OyAvKiAyICovXFxuICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlOyAvKiAzICovXFxufVxcblxcbi8qXFxuMS4gQ2hhbmdlIHRoZSBmb250IHN0eWxlcyBpbiBhbGwgYnJvd3NlcnMuXFxuMi4gUmVtb3ZlIHRoZSBtYXJnaW4gaW4gRmlyZWZveCBhbmQgU2FmYXJpLlxcbjMuIFJlbW92ZSBkZWZhdWx0IHBhZGRpbmcgaW4gYWxsIGJyb3dzZXJzLlxcbiovXFxuXFxuYnV0dG9uLFxcbmlucHV0LFxcbm9wdGdyb3VwLFxcbnNlbGVjdCxcXG50ZXh0YXJlYSB7XFxuICBmb250LWZhbWlseTogaW5oZXJpdDsgLyogMSAqL1xcbiAgZm9udC1zaXplOiAxMDAlOyAvKiAxICovXFxuICBmb250LXdlaWdodDogaW5oZXJpdDsgLyogMSAqL1xcbiAgbGluZS1oZWlnaHQ6IGluaGVyaXQ7IC8qIDEgKi9cXG4gIGNvbG9yOiBpbmhlcml0OyAvKiAxICovXFxuICBtYXJnaW46IDA7IC8qIDIgKi9cXG4gIHBhZGRpbmc6IDA7IC8qIDMgKi9cXG59XFxuXFxuLypcXG5SZW1vdmUgdGhlIGluaGVyaXRhbmNlIG9mIHRleHQgdHJhbnNmb3JtIGluIEVkZ2UgYW5kIEZpcmVmb3guXFxuKi9cXG5cXG5idXR0b24sXFxuc2VsZWN0IHtcXG4gIHRleHQtdHJhbnNmb3JtOiBub25lO1xcbn1cXG5cXG4vKlxcbjEuIENvcnJlY3QgdGhlIGluYWJpbGl0eSB0byBzdHlsZSBjbGlja2FibGUgdHlwZXMgaW4gaU9TIGFuZCBTYWZhcmkuXFxuMi4gUmVtb3ZlIGRlZmF1bHQgYnV0dG9uIHN0eWxlcy5cXG4qL1xcblxcbmJ1dHRvbixcXG5bdHlwZT0nYnV0dG9uJ10sXFxuW3R5cGU9J3Jlc2V0J10sXFxuW3R5cGU9J3N1Ym1pdCddIHtcXG4gIC13ZWJraXQtYXBwZWFyYW5jZTogYnV0dG9uOyAvKiAxICovXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsgLyogMiAqL1xcbiAgYmFja2dyb3VuZC1pbWFnZTogbm9uZTsgLyogMiAqL1xcbn1cXG5cXG4vKlxcblVzZSB0aGUgbW9kZXJuIEZpcmVmb3ggZm9jdXMgc3R5bGUgZm9yIGFsbCBmb2N1c2FibGUgZWxlbWVudHMuXFxuKi9cXG5cXG46LW1vei1mb2N1c3Jpbmcge1xcbiAgb3V0bGluZTogYXV0bztcXG59XFxuXFxuLypcXG5SZW1vdmUgdGhlIGFkZGl0aW9uYWwgYDppbnZhbGlkYCBzdHlsZXMgaW4gRmlyZWZveC4gKGh0dHBzOi8vZ2l0aHViLmNvbS9tb3ppbGxhL2dlY2tvLWRldi9ibG9iLzJmOWVhY2Q5ZDNkOTk1YzkzN2I0MjUxYTU1NTdkOTVkNDk0YzliZTEvbGF5b3V0L3N0eWxlL3Jlcy9mb3Jtcy5jc3MjTDcyOC1MNzM3KVxcbiovXFxuXFxuOi1tb3otdWktaW52YWxpZCB7XFxuICBib3gtc2hhZG93OiBub25lO1xcbn1cXG5cXG4vKlxcbkFkZCB0aGUgY29ycmVjdCB2ZXJ0aWNhbCBhbGlnbm1lbnQgaW4gQ2hyb21lIGFuZCBGaXJlZm94LlxcbiovXFxuXFxucHJvZ3Jlc3Mge1xcbiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lO1xcbn1cXG5cXG4vKlxcbkNvcnJlY3QgdGhlIGN1cnNvciBzdHlsZSBvZiBpbmNyZW1lbnQgYW5kIGRlY3JlbWVudCBidXR0b25zIGluIFNhZmFyaS5cXG4qL1xcblxcbjo6LXdlYmtpdC1pbm5lci1zcGluLWJ1dHRvbixcXG46Oi13ZWJraXQtb3V0ZXItc3Bpbi1idXR0b24ge1xcbiAgaGVpZ2h0OiBhdXRvO1xcbn1cXG5cXG4vKlxcbjEuIENvcnJlY3QgdGhlIG9kZCBhcHBlYXJhbmNlIGluIENocm9tZSBhbmQgU2FmYXJpLlxcbjIuIENvcnJlY3QgdGhlIG91dGxpbmUgc3R5bGUgaW4gU2FmYXJpLlxcbiovXFxuXFxuW3R5cGU9J3NlYXJjaCddIHtcXG4gIC13ZWJraXQtYXBwZWFyYW5jZTogdGV4dGZpZWxkOyAvKiAxICovXFxuICBvdXRsaW5lLW9mZnNldDogLTJweDsgLyogMiAqL1xcbn1cXG5cXG4vKlxcblJlbW92ZSB0aGUgaW5uZXIgcGFkZGluZyBpbiBDaHJvbWUgYW5kIFNhZmFyaSBvbiBtYWNPUy5cXG4qL1xcblxcbjo6LXdlYmtpdC1zZWFyY2gtZGVjb3JhdGlvbiB7XFxuICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XFxufVxcblxcbi8qXFxuMS4gQ29ycmVjdCB0aGUgaW5hYmlsaXR5IHRvIHN0eWxlIGNsaWNrYWJsZSB0eXBlcyBpbiBpT1MgYW5kIFNhZmFyaS5cXG4yLiBDaGFuZ2UgZm9udCBwcm9wZXJ0aWVzIHRvIGBpbmhlcml0YCBpbiBTYWZhcmkuXFxuKi9cXG5cXG46Oi13ZWJraXQtZmlsZS11cGxvYWQtYnV0dG9uIHtcXG4gIC13ZWJraXQtYXBwZWFyYW5jZTogYnV0dG9uOyAvKiAxICovXFxuICBmb250OiBpbmhlcml0OyAvKiAyICovXFxufVxcblxcbi8qXFxuQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gQ2hyb21lIGFuZCBTYWZhcmkuXFxuKi9cXG5cXG5zdW1tYXJ5IHtcXG4gIGRpc3BsYXk6IGxpc3QtaXRlbTtcXG59XFxuXFxuLypcXG5SZW1vdmVzIHRoZSBkZWZhdWx0IHNwYWNpbmcgYW5kIGJvcmRlciBmb3IgYXBwcm9wcmlhdGUgZWxlbWVudHMuXFxuKi9cXG5cXG5ibG9ja3F1b3RlLFxcbmRsLFxcbmRkLFxcbmgxLFxcbmgyLFxcbmgzLFxcbmg0LFxcbmg1LFxcbmg2LFxcbmhyLFxcbmZpZ3VyZSxcXG5wLFxcbnByZSB7XFxuICBtYXJnaW46IDA7XFxufVxcblxcbmZpZWxkc2V0IHtcXG4gIG1hcmdpbjogMDtcXG4gIHBhZGRpbmc6IDA7XFxufVxcblxcbmxlZ2VuZCB7XFxuICBwYWRkaW5nOiAwO1xcbn1cXG5cXG5vbCxcXG51bCxcXG5tZW51IHtcXG4gIGxpc3Qtc3R5bGU6IG5vbmU7XFxuICBtYXJnaW46IDA7XFxuICBwYWRkaW5nOiAwO1xcbn1cXG5cXG4vKlxcblByZXZlbnQgcmVzaXppbmcgdGV4dGFyZWFzIGhvcml6b250YWxseSBieSBkZWZhdWx0LlxcbiovXFxuXFxudGV4dGFyZWEge1xcbiAgcmVzaXplOiB2ZXJ0aWNhbDtcXG59XFxuXFxuLypcXG4xLiBSZXNldCB0aGUgZGVmYXVsdCBwbGFjZWhvbGRlciBvcGFjaXR5IGluIEZpcmVmb3guIChodHRwczovL2dpdGh1Yi5jb20vdGFpbHdpbmRsYWJzL3RhaWx3aW5kY3NzL2lzc3Vlcy8zMzAwKVxcbjIuIFNldCB0aGUgZGVmYXVsdCBwbGFjZWhvbGRlciBjb2xvciB0byB0aGUgdXNlcidzIGNvbmZpZ3VyZWQgZ3JheSA0MDAgY29sb3IuXFxuKi9cXG5cXG5pbnB1dDo6LW1vei1wbGFjZWhvbGRlciwgdGV4dGFyZWE6Oi1tb3otcGxhY2Vob2xkZXIge1xcbiAgb3BhY2l0eTogMTsgLyogMSAqL1xcbiAgY29sb3I6ICM5Y2EzYWY7IC8qIDIgKi9cXG59XFxuXFxuaW5wdXQ6OnBsYWNlaG9sZGVyLFxcbnRleHRhcmVhOjpwbGFjZWhvbGRlciB7XFxuICBvcGFjaXR5OiAxOyAvKiAxICovXFxuICBjb2xvcjogIzljYTNhZjsgLyogMiAqL1xcbn1cXG5cXG4vKlxcblNldCB0aGUgZGVmYXVsdCBjdXJzb3IgZm9yIGJ1dHRvbnMuXFxuKi9cXG5cXG5idXR0b24sXFxuW3JvbGU9XFxcImJ1dHRvblxcXCJdIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLypcXG5NYWtlIHN1cmUgZGlzYWJsZWQgYnV0dG9ucyBkb24ndCBnZXQgdGhlIHBvaW50ZXIgY3Vyc29yLlxcbiovXFxuOmRpc2FibGVkIHtcXG4gIGN1cnNvcjogZGVmYXVsdDtcXG59XFxuXFxuLypcXG4xLiBNYWtlIHJlcGxhY2VkIGVsZW1lbnRzIGBkaXNwbGF5OiBibG9ja2AgYnkgZGVmYXVsdC4gKGh0dHBzOi8vZ2l0aHViLmNvbS9tb3pkZXZzL2Nzc3JlbWVkeS9pc3N1ZXMvMTQpXFxuMi4gQWRkIGB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlYCB0byBhbGlnbiByZXBsYWNlZCBlbGVtZW50cyBtb3JlIHNlbnNpYmx5IGJ5IGRlZmF1bHQuIChodHRwczovL2dpdGh1Yi5jb20vamVuc2ltbW9ucy9jc3NyZW1lZHkvaXNzdWVzLzE0I2lzc3VlY29tbWVudC02MzQ5MzQyMTApXFxuICAgVGhpcyBjYW4gdHJpZ2dlciBhIHBvb3JseSBjb25zaWRlcmVkIGxpbnQgZXJyb3IgaW4gc29tZSB0b29scyBidXQgaXMgaW5jbHVkZWQgYnkgZGVzaWduLlxcbiovXFxuXFxuaW1nLFxcbnN2ZyxcXG52aWRlbyxcXG5jYW52YXMsXFxuYXVkaW8sXFxuaWZyYW1lLFxcbmVtYmVkLFxcbm9iamVjdCB7XFxuICBkaXNwbGF5OiBibG9jazsgLyogMSAqL1xcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTsgLyogMiAqL1xcbn1cXG5cXG4vKlxcbkNvbnN0cmFpbiBpbWFnZXMgYW5kIHZpZGVvcyB0byB0aGUgcGFyZW50IHdpZHRoIGFuZCBwcmVzZXJ2ZSB0aGVpciBpbnRyaW5zaWMgYXNwZWN0IHJhdGlvLiAoaHR0cHM6Ly9naXRodWIuY29tL21vemRldnMvY3NzcmVtZWR5L2lzc3Vlcy8xNClcXG4qL1xcblxcbmltZyxcXG52aWRlbyB7XFxuICBtYXgtd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IGF1dG87XFxufVxcblxcbi8qIE1ha2UgZWxlbWVudHMgd2l0aCB0aGUgSFRNTCBoaWRkZW4gYXR0cmlidXRlIHN0YXkgaGlkZGVuIGJ5IGRlZmF1bHQgKi9cXG5baGlkZGVuXSB7XFxuICBkaXNwbGF5OiBub25lO1xcbn1cXG5cXG4qLCA6OmJlZm9yZSwgOjphZnRlciB7XFxuICAtLXR3LWJvcmRlci1zcGFjaW5nLXg6IDA7XFxuICAtLXR3LWJvcmRlci1zcGFjaW5nLXk6IDA7XFxuICAtLXR3LXRyYW5zbGF0ZS14OiAwO1xcbiAgLS10dy10cmFuc2xhdGUteTogMDtcXG4gIC0tdHctcm90YXRlOiAwO1xcbiAgLS10dy1za2V3LXg6IDA7XFxuICAtLXR3LXNrZXcteTogMDtcXG4gIC0tdHctc2NhbGUteDogMTtcXG4gIC0tdHctc2NhbGUteTogMTtcXG4gIC0tdHctcGFuLXg6ICA7XFxuICAtLXR3LXBhbi15OiAgO1xcbiAgLS10dy1waW5jaC16b29tOiAgO1xcbiAgLS10dy1zY3JvbGwtc25hcC1zdHJpY3RuZXNzOiBwcm94aW1pdHk7XFxuICAtLXR3LW9yZGluYWw6ICA7XFxuICAtLXR3LXNsYXNoZWQtemVybzogIDtcXG4gIC0tdHctbnVtZXJpYy1maWd1cmU6ICA7XFxuICAtLXR3LW51bWVyaWMtc3BhY2luZzogIDtcXG4gIC0tdHctbnVtZXJpYy1mcmFjdGlvbjogIDtcXG4gIC0tdHctcmluZy1pbnNldDogIDtcXG4gIC0tdHctcmluZy1vZmZzZXQtd2lkdGg6IDBweDtcXG4gIC0tdHctcmluZy1vZmZzZXQtY29sb3I6ICNmZmY7XFxuICAtLXR3LXJpbmctY29sb3I6IHJnYig1OSAxMzAgMjQ2IC8gMC41KTtcXG4gIC0tdHctcmluZy1vZmZzZXQtc2hhZG93OiAwIDAgIzAwMDA7XFxuICAtLXR3LXJpbmctc2hhZG93OiAwIDAgIzAwMDA7XFxuICAtLXR3LXNoYWRvdzogMCAwICMwMDAwO1xcbiAgLS10dy1zaGFkb3ctY29sb3JlZDogMCAwICMwMDAwO1xcbiAgLS10dy1ibHVyOiAgO1xcbiAgLS10dy1icmlnaHRuZXNzOiAgO1xcbiAgLS10dy1jb250cmFzdDogIDtcXG4gIC0tdHctZ3JheXNjYWxlOiAgO1xcbiAgLS10dy1odWUtcm90YXRlOiAgO1xcbiAgLS10dy1pbnZlcnQ6ICA7XFxuICAtLXR3LXNhdHVyYXRlOiAgO1xcbiAgLS10dy1zZXBpYTogIDtcXG4gIC0tdHctZHJvcC1zaGFkb3c6ICA7XFxuICAtLXR3LWJhY2tkcm9wLWJsdXI6ICA7XFxuICAtLXR3LWJhY2tkcm9wLWJyaWdodG5lc3M6ICA7XFxuICAtLXR3LWJhY2tkcm9wLWNvbnRyYXN0OiAgO1xcbiAgLS10dy1iYWNrZHJvcC1ncmF5c2NhbGU6ICA7XFxuICAtLXR3LWJhY2tkcm9wLWh1ZS1yb3RhdGU6ICA7XFxuICAtLXR3LWJhY2tkcm9wLWludmVydDogIDtcXG4gIC0tdHctYmFja2Ryb3Atb3BhY2l0eTogIDtcXG4gIC0tdHctYmFja2Ryb3Atc2F0dXJhdGU6ICA7XFxuICAtLXR3LWJhY2tkcm9wLXNlcGlhOiAgO1xcbn1cXG5cXG46OmJhY2tkcm9wIHtcXG4gIC0tdHctYm9yZGVyLXNwYWNpbmcteDogMDtcXG4gIC0tdHctYm9yZGVyLXNwYWNpbmcteTogMDtcXG4gIC0tdHctdHJhbnNsYXRlLXg6IDA7XFxuICAtLXR3LXRyYW5zbGF0ZS15OiAwO1xcbiAgLS10dy1yb3RhdGU6IDA7XFxuICAtLXR3LXNrZXcteDogMDtcXG4gIC0tdHctc2tldy15OiAwO1xcbiAgLS10dy1zY2FsZS14OiAxO1xcbiAgLS10dy1zY2FsZS15OiAxO1xcbiAgLS10dy1wYW4teDogIDtcXG4gIC0tdHctcGFuLXk6ICA7XFxuICAtLXR3LXBpbmNoLXpvb206ICA7XFxuICAtLXR3LXNjcm9sbC1zbmFwLXN0cmljdG5lc3M6IHByb3hpbWl0eTtcXG4gIC0tdHctb3JkaW5hbDogIDtcXG4gIC0tdHctc2xhc2hlZC16ZXJvOiAgO1xcbiAgLS10dy1udW1lcmljLWZpZ3VyZTogIDtcXG4gIC0tdHctbnVtZXJpYy1zcGFjaW5nOiAgO1xcbiAgLS10dy1udW1lcmljLWZyYWN0aW9uOiAgO1xcbiAgLS10dy1yaW5nLWluc2V0OiAgO1xcbiAgLS10dy1yaW5nLW9mZnNldC13aWR0aDogMHB4O1xcbiAgLS10dy1yaW5nLW9mZnNldC1jb2xvcjogI2ZmZjtcXG4gIC0tdHctcmluZy1jb2xvcjogcmdiKDU5IDEzMCAyNDYgLyAwLjUpO1xcbiAgLS10dy1yaW5nLW9mZnNldC1zaGFkb3c6IDAgMCAjMDAwMDtcXG4gIC0tdHctcmluZy1zaGFkb3c6IDAgMCAjMDAwMDtcXG4gIC0tdHctc2hhZG93OiAwIDAgIzAwMDA7XFxuICAtLXR3LXNoYWRvdy1jb2xvcmVkOiAwIDAgIzAwMDA7XFxuICAtLXR3LWJsdXI6ICA7XFxuICAtLXR3LWJyaWdodG5lc3M6ICA7XFxuICAtLXR3LWNvbnRyYXN0OiAgO1xcbiAgLS10dy1ncmF5c2NhbGU6ICA7XFxuICAtLXR3LWh1ZS1yb3RhdGU6ICA7XFxuICAtLXR3LWludmVydDogIDtcXG4gIC0tdHctc2F0dXJhdGU6ICA7XFxuICAtLXR3LXNlcGlhOiAgO1xcbiAgLS10dy1kcm9wLXNoYWRvdzogIDtcXG4gIC0tdHctYmFja2Ryb3AtYmx1cjogIDtcXG4gIC0tdHctYmFja2Ryb3AtYnJpZ2h0bmVzczogIDtcXG4gIC0tdHctYmFja2Ryb3AtY29udHJhc3Q6ICA7XFxuICAtLXR3LWJhY2tkcm9wLWdyYXlzY2FsZTogIDtcXG4gIC0tdHctYmFja2Ryb3AtaHVlLXJvdGF0ZTogIDtcXG4gIC0tdHctYmFja2Ryb3AtaW52ZXJ0OiAgO1xcbiAgLS10dy1iYWNrZHJvcC1vcGFjaXR5OiAgO1xcbiAgLS10dy1iYWNrZHJvcC1zYXR1cmF0ZTogIDtcXG4gIC0tdHctYmFja2Ryb3Atc2VwaWE6ICA7XFxufVxcbi5maXhlZCB7XFxuICBwb3NpdGlvbjogZml4ZWQ7XFxufVxcbi50b3AtMTYge1xcbiAgdG9wOiA0cmVtO1xcbn1cXG4ucmlnaHQtMTYge1xcbiAgcmlnaHQ6IDRyZW07XFxufVxcbi56LTEwIHtcXG4gIHotaW5kZXg6IDEwO1xcbn1cXG4uYmxvY2sge1xcbiAgZGlzcGxheTogYmxvY2s7XFxufVxcbi5mbGV4IHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxufVxcbi5zZWxlY3Qtbm9uZSB7XFxuICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lO1xcbiAgICAgLW1vei11c2VyLXNlbGVjdDogbm9uZTtcXG4gICAgICAgICAgdXNlci1zZWxlY3Q6IG5vbmU7XFxufVxcbi5yZXNpemUge1xcbiAgcmVzaXplOiBib3RoO1xcbn1cXG4uZmxleC1yb3cge1xcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcXG59XFxuLmZsZXgtY29sIHtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxufVxcbi5qdXN0aWZ5LWFyb3VuZCB7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZDtcXG59XFxuLnJvdW5kZWQtbGcge1xcbiAgYm9yZGVyLXJhZGl1czogMC41cmVtO1xcbn1cXG4ucm91bmRlZC1mdWxsIHtcXG4gIGJvcmRlci1yYWRpdXM6IDk5OTlweDtcXG59XFxuLmJvcmRlci0yIHtcXG4gIGJvcmRlci13aWR0aDogMnB4O1xcbn1cXG4uYm9yZGVyLWJsYWNrIHtcXG4gIC0tdHctYm9yZGVyLW9wYWNpdHk6IDE7XFxuICBib3JkZXItY29sb3I6IHJnYigwIDAgMCAvIHZhcigtLXR3LWJvcmRlci1vcGFjaXR5KSk7XFxufVxcbi5iZy13aGl0ZSB7XFxuICAtLXR3LWJnLW9wYWNpdHk6IDE7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjU1IDI1NSAyNTUgLyB2YXIoLS10dy1iZy1vcGFjaXR5KSk7XFxufVxcbi5iZy1zbGF0ZS01MCB7XFxuICAtLXR3LWJnLW9wYWNpdHk6IDE7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjQ4IDI1MCAyNTIgLyB2YXIoLS10dy1iZy1vcGFjaXR5KSk7XFxufVxcbi50ZXh0LWNlbnRlciB7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVxcbi5maWx0ZXIge1xcbiAgZmlsdGVyOiB2YXIoLS10dy1ibHVyKSB2YXIoLS10dy1icmlnaHRuZXNzKSB2YXIoLS10dy1jb250cmFzdCkgdmFyKC0tdHctZ3JheXNjYWxlKSB2YXIoLS10dy1odWUtcm90YXRlKSB2YXIoLS10dy1pbnZlcnQpIHZhcigtLXR3LXNhdHVyYXRlKSB2YXIoLS10dy1zZXBpYSkgdmFyKC0tdHctZHJvcC1zaGFkb3cpO1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvaW5kZXguY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBOztDQUFjLENBQWQ7OztDQUFjOztBQUFkOzs7RUFBQSxzQkFBYyxFQUFkLE1BQWM7RUFBZCxlQUFjLEVBQWQsTUFBYztFQUFkLG1CQUFjLEVBQWQsTUFBYztFQUFkLHFCQUFjLEVBQWQsTUFBYztBQUFBOztBQUFkOztFQUFBLGdCQUFjO0FBQUE7O0FBQWQ7Ozs7OztDQUFjOztBQUFkO0VBQUEsZ0JBQWMsRUFBZCxNQUFjO0VBQWQsOEJBQWMsRUFBZCxNQUFjO0VBQWQsZ0JBQWMsRUFBZCxNQUFjO0VBQWQsY0FBYztLQUFkLFdBQWMsRUFBZCxNQUFjO0VBQWQsNE5BQWMsRUFBZCxNQUFjO0VBQWQsNkJBQWMsRUFBZCxNQUFjO0FBQUE7O0FBQWQ7OztDQUFjOztBQUFkO0VBQUEsU0FBYyxFQUFkLE1BQWM7RUFBZCxvQkFBYyxFQUFkLE1BQWM7QUFBQTs7QUFBZDs7OztDQUFjOztBQUFkO0VBQUEsU0FBYyxFQUFkLE1BQWM7RUFBZCxjQUFjLEVBQWQsTUFBYztFQUFkLHFCQUFjLEVBQWQsTUFBYztBQUFBOztBQUFkOztDQUFjOztBQUFkO0VBQUEseUNBQWM7VUFBZCxpQ0FBYztBQUFBOztBQUFkOztDQUFjOztBQUFkOzs7Ozs7RUFBQSxrQkFBYztFQUFkLG9CQUFjO0FBQUE7O0FBQWQ7O0NBQWM7O0FBQWQ7RUFBQSxjQUFjO0VBQWQsd0JBQWM7QUFBQTs7QUFBZDs7Q0FBYzs7QUFBZDs7RUFBQSxtQkFBYztBQUFBOztBQUFkOzs7Q0FBYzs7QUFBZDs7OztFQUFBLCtHQUFjLEVBQWQsTUFBYztFQUFkLGNBQWMsRUFBZCxNQUFjO0FBQUE7O0FBQWQ7O0NBQWM7O0FBQWQ7RUFBQSxjQUFjO0FBQUE7O0FBQWQ7O0NBQWM7O0FBQWQ7O0VBQUEsY0FBYztFQUFkLGNBQWM7RUFBZCxrQkFBYztFQUFkLHdCQUFjO0FBQUE7O0FBQWQ7RUFBQSxlQUFjO0FBQUE7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QWM7RUFBZCxlQUFjO0VBQWQsZUFBYztFQUFkLGFBQWM7RUFBZCxhQUFjO0VBQWQsa0JBQWM7RUFBZCxzQ0FBYztFQUFkLGVBQWM7RUFBZCxvQkFBYztFQUFkLHNCQUFjO0VBQWQsdUJBQWM7RUFBZCx3QkFBYztFQUFkLGtCQUFjO0VBQWQsMkJBQWM7RUFBZCw0QkFBYztFQUFkLHNDQUFjO0VBQWQsa0NBQWM7RUFBZCwyQkFBYztFQUFkLHNCQUFjO0VBQWQsOEJBQWM7RUFBZCxZQUFjO0VBQWQsa0JBQWM7RUFBZCxnQkFBYztFQUFkLGlCQUFjO0VBQWQsa0JBQWM7RUFBZCxjQUFjO0VBQWQsZ0JBQWM7RUFBZCxhQUFjO0VBQWQsbUJBQWM7RUFBZCxxQkFBYztFQUFkLDJCQUFjO0VBQWQseUJBQWM7RUFBZCwwQkFBYztFQUFkLDJCQUFjO0VBQWQsdUJBQWM7RUFBZCx3QkFBYztFQUFkLHlCQUFjO0VBQWQ7QUFBYztBQUVkO0VBQUE7QUFBbUI7QUFBbkI7RUFBQTtBQUFtQjtBQUFuQjtFQUFBO0FBQW1CO0FBQW5CO0VBQUE7QUFBbUI7QUFBbkI7RUFBQTtBQUFtQjtBQUFuQjtFQUFBO0FBQW1CO0FBQW5CO0VBQUEseUJBQW1CO0tBQW5CLHNCQUFtQjtVQUFuQjtBQUFtQjtBQUFuQjtFQUFBO0FBQW1CO0FBQW5CO0VBQUE7QUFBbUI7QUFBbkI7RUFBQTtBQUFtQjtBQUFuQjtFQUFBO0FBQW1CO0FBQW5CO0VBQUE7QUFBbUI7QUFBbkI7RUFBQTtBQUFtQjtBQUFuQjtFQUFBO0FBQW1CO0FBQW5CO0VBQUEsc0JBQW1CO0VBQW5CO0FBQW1CO0FBQW5CO0VBQUEsa0JBQW1CO0VBQW5CO0FBQW1CO0FBQW5CO0VBQUEsa0JBQW1CO0VBQW5CO0FBQW1CO0FBQW5CO0VBQUE7QUFBbUI7QUFBbkI7RUFBQTtBQUFtQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAdGFpbHdpbmQgYmFzZTtcXG5AdGFpbHdpbmQgY29tcG9uZW50cztcXG5AdGFpbHdpbmQgdXRpbGl0aWVzO1xcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTtcblxuICAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTtcblxuICAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCBcIlwiKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiKGZ1bmN0aW9uKGEsYil7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kKWRlZmluZShbXSxiKTtlbHNlIGlmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBleHBvcnRzKWIoKTtlbHNle2IoKSxhLkZpbGVTYXZlcj17ZXhwb3J0czp7fX0uZXhwb3J0c319KSh0aGlzLGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gYihhLGIpe3JldHVyblwidW5kZWZpbmVkXCI9PXR5cGVvZiBiP2I9e2F1dG9Cb206ITF9Olwib2JqZWN0XCIhPXR5cGVvZiBiJiYoY29uc29sZS53YXJuKFwiRGVwcmVjYXRlZDogRXhwZWN0ZWQgdGhpcmQgYXJndW1lbnQgdG8gYmUgYSBvYmplY3RcIiksYj17YXV0b0JvbTohYn0pLGIuYXV0b0JvbSYmL15cXHMqKD86dGV4dFxcL1xcUyp8YXBwbGljYXRpb25cXC94bWx8XFxTKlxcL1xcUypcXCt4bWwpXFxzKjsuKmNoYXJzZXRcXHMqPVxccyp1dGYtOC9pLnRlc3QoYS50eXBlKT9uZXcgQmxvYihbXCJcXHVGRUZGXCIsYV0se3R5cGU6YS50eXBlfSk6YX1mdW5jdGlvbiBjKGEsYixjKXt2YXIgZD1uZXcgWE1MSHR0cFJlcXVlc3Q7ZC5vcGVuKFwiR0VUXCIsYSksZC5yZXNwb25zZVR5cGU9XCJibG9iXCIsZC5vbmxvYWQ9ZnVuY3Rpb24oKXtnKGQucmVzcG9uc2UsYixjKX0sZC5vbmVycm9yPWZ1bmN0aW9uKCl7Y29uc29sZS5lcnJvcihcImNvdWxkIG5vdCBkb3dubG9hZCBmaWxlXCIpfSxkLnNlbmQoKX1mdW5jdGlvbiBkKGEpe3ZhciBiPW5ldyBYTUxIdHRwUmVxdWVzdDtiLm9wZW4oXCJIRUFEXCIsYSwhMSk7dHJ5e2Iuc2VuZCgpfWNhdGNoKGEpe31yZXR1cm4gMjAwPD1iLnN0YXR1cyYmMjk5Pj1iLnN0YXR1c31mdW5jdGlvbiBlKGEpe3RyeXthLmRpc3BhdGNoRXZlbnQobmV3IE1vdXNlRXZlbnQoXCJjbGlja1wiKSl9Y2F0Y2goYyl7dmFyIGI9ZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJNb3VzZUV2ZW50c1wiKTtiLmluaXRNb3VzZUV2ZW50KFwiY2xpY2tcIiwhMCwhMCx3aW5kb3csMCwwLDAsODAsMjAsITEsITEsITEsITEsMCxudWxsKSxhLmRpc3BhdGNoRXZlbnQoYil9fXZhciBmPVwib2JqZWN0XCI9PXR5cGVvZiB3aW5kb3cmJndpbmRvdy53aW5kb3c9PT13aW5kb3c/d2luZG93Olwib2JqZWN0XCI9PXR5cGVvZiBzZWxmJiZzZWxmLnNlbGY9PT1zZWxmP3NlbGY6XCJvYmplY3RcIj09dHlwZW9mIGdsb2JhbCYmZ2xvYmFsLmdsb2JhbD09PWdsb2JhbD9nbG9iYWw6dm9pZCAwLGE9Zi5uYXZpZ2F0b3ImJi9NYWNpbnRvc2gvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkmJi9BcHBsZVdlYktpdC8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSYmIS9TYWZhcmkvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCksZz1mLnNhdmVBc3x8KFwib2JqZWN0XCIhPXR5cGVvZiB3aW5kb3d8fHdpbmRvdyE9PWY/ZnVuY3Rpb24oKXt9OlwiZG93bmxvYWRcImluIEhUTUxBbmNob3JFbGVtZW50LnByb3RvdHlwZSYmIWE/ZnVuY3Rpb24oYixnLGgpe3ZhciBpPWYuVVJMfHxmLndlYmtpdFVSTCxqPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpO2c9Z3x8Yi5uYW1lfHxcImRvd25sb2FkXCIsai5kb3dubG9hZD1nLGoucmVsPVwibm9vcGVuZXJcIixcInN0cmluZ1wiPT10eXBlb2YgYj8oai5ocmVmPWIsai5vcmlnaW49PT1sb2NhdGlvbi5vcmlnaW4/ZShqKTpkKGouaHJlZik/YyhiLGcsaCk6ZShqLGoudGFyZ2V0PVwiX2JsYW5rXCIpKTooai5ocmVmPWkuY3JlYXRlT2JqZWN0VVJMKGIpLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtpLnJldm9rZU9iamVjdFVSTChqLmhyZWYpfSw0RTQpLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtlKGopfSwwKSl9OlwibXNTYXZlT3JPcGVuQmxvYlwiaW4gbmF2aWdhdG9yP2Z1bmN0aW9uKGYsZyxoKXtpZihnPWd8fGYubmFtZXx8XCJkb3dubG9hZFwiLFwic3RyaW5nXCIhPXR5cGVvZiBmKW5hdmlnYXRvci5tc1NhdmVPck9wZW5CbG9iKGIoZixoKSxnKTtlbHNlIGlmKGQoZikpYyhmLGcsaCk7ZWxzZXt2YXIgaT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtpLmhyZWY9ZixpLnRhcmdldD1cIl9ibGFua1wiLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtlKGkpfSl9fTpmdW5jdGlvbihiLGQsZSxnKXtpZihnPWd8fG9wZW4oXCJcIixcIl9ibGFua1wiKSxnJiYoZy5kb2N1bWVudC50aXRsZT1nLmRvY3VtZW50LmJvZHkuaW5uZXJUZXh0PVwiZG93bmxvYWRpbmcuLi5cIiksXCJzdHJpbmdcIj09dHlwZW9mIGIpcmV0dXJuIGMoYixkLGUpO3ZhciBoPVwiYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtXCI9PT1iLnR5cGUsaT0vY29uc3RydWN0b3IvaS50ZXN0KGYuSFRNTEVsZW1lbnQpfHxmLnNhZmFyaSxqPS9DcmlPU1xcL1tcXGRdKy8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtpZigoanx8aCYmaXx8YSkmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBGaWxlUmVhZGVyKXt2YXIgaz1uZXcgRmlsZVJlYWRlcjtrLm9ubG9hZGVuZD1mdW5jdGlvbigpe3ZhciBhPWsucmVzdWx0O2E9aj9hOmEucmVwbGFjZSgvXmRhdGE6W147XSo7LyxcImRhdGE6YXR0YWNobWVudC9maWxlO1wiKSxnP2cubG9jYXRpb24uaHJlZj1hOmxvY2F0aW9uPWEsZz1udWxsfSxrLnJlYWRBc0RhdGFVUkwoYil9ZWxzZXt2YXIgbD1mLlVSTHx8Zi53ZWJraXRVUkwsbT1sLmNyZWF0ZU9iamVjdFVSTChiKTtnP2cubG9jYXRpb249bTpsb2NhdGlvbi5ocmVmPW0sZz1udWxsLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtsLnJldm9rZU9iamVjdFVSTChtKX0sNEU0KX19KTtmLnNhdmVBcz1nLnNhdmVBcz1nLFwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGUmJihtb2R1bGUuZXhwb3J0cz1nKX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1GaWxlU2F2ZXIubWluLmpzLm1hcCIsIi8qIVxuXG5KU1ppcCB2My43LjAgLSBBIEphdmFTY3JpcHQgY2xhc3MgZm9yIGdlbmVyYXRpbmcgYW5kIHJlYWRpbmcgemlwIGZpbGVzXG48aHR0cDovL3N0dWFydGsuY29tL2pzemlwPlxuXG4oYykgMjAwOS0yMDE2IFN0dWFydCBLbmlnaHRsZXkgPHN0dWFydCBbYXRdIHN0dWFydGsuY29tPlxuRHVhbCBsaWNlbmNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2Ugb3IgR1BMdjMuIFNlZSBodHRwczovL3Jhdy5naXRodWIuY29tL1N0dWsvanN6aXAvbWFzdGVyL0xJQ0VOU0UubWFya2Rvd24uXG5cbkpTWmlwIHVzZXMgdGhlIGxpYnJhcnkgcGFrbyByZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgOlxuaHR0cHM6Ly9naXRodWIuY29tL25vZGVjYS9wYWtvL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiovXG5cbiFmdW5jdGlvbihlKXtpZihcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZSltb2R1bGUuZXhwb3J0cz1lKCk7ZWxzZSBpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQpZGVmaW5lKFtdLGUpO2Vsc2V7KFwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93OlwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWw/Z2xvYmFsOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6dGhpcykuSlNaaXA9ZSgpfX0oZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24gcyhvLGEsZil7ZnVuY3Rpb24gdShyLGUpe2lmKCFhW3JdKXtpZighb1tyXSl7dmFyIHQ9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighZSYmdClyZXR1cm4gdChyLCEwKTtpZihkKXJldHVybiBkKHIsITApO3ZhciBuPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrcitcIidcIik7dGhyb3cgbi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLG59dmFyIGk9YVtyXT17ZXhwb3J0czp7fX07b1tyXVswXS5jYWxsKGkuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgdD1vW3JdWzFdW2VdO3JldHVybiB1KHR8fGUpfSxpLGkuZXhwb3J0cyxzLG8sYSxmKX1yZXR1cm4gYVtyXS5leHBvcnRzfWZvcih2YXIgZD1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGU9MDtlPGYubGVuZ3RoO2UrKyl1KGZbZV0pO3JldHVybiB1fSh7MTpbZnVuY3Rpb24oaCx0LG4peyhmdW5jdGlvbihyKXshZnVuY3Rpb24oZSl7XCJvYmplY3RcIj09dHlwZW9mIG4mJnZvaWQgMCE9PXQ/dC5leHBvcnRzPWUoKTooXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6dm9pZCAwIT09cj9yOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6dGhpcykuSlNaaXA9ZSgpfShmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbiBzKG8sYSxmKXtmdW5jdGlvbiB1KHQsZSl7aWYoIWFbdF0pe2lmKCFvW3RdKXt2YXIgcj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBoJiZoO2lmKCFlJiZyKXJldHVybiByKHQsITApO2lmKGQpcmV0dXJuIGQodCwhMCk7dmFyIG49bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIit0K1wiJ1wiKTt0aHJvdyBuLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsbn12YXIgaT1hW3RdPXtleHBvcnRzOnt9fTtvW3RdWzBdLmNhbGwoaS5leHBvcnRzLGZ1bmN0aW9uKGUpe3JldHVybiB1KG9bdF1bMV1bZV18fGUpfSxpLGkuZXhwb3J0cyxzLG8sYSxmKX1yZXR1cm4gYVt0XS5leHBvcnRzfWZvcih2YXIgZD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBoJiZoLGU9MDtlPGYubGVuZ3RoO2UrKyl1KGZbZV0pO3JldHVybiB1fSh7MTpbZnVuY3Rpb24oaCx0LG4peyhmdW5jdGlvbihyKXshZnVuY3Rpb24oZSl7XCJvYmplY3RcIj09dHlwZW9mIG4mJnZvaWQgMCE9PXQ/dC5leHBvcnRzPWUoKTooXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6dm9pZCAwIT09cj9yOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6dGhpcykuSlNaaXA9ZSgpfShmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbiBzKG8sYSxmKXtmdW5jdGlvbiB1KHQsZSl7aWYoIWFbdF0pe2lmKCFvW3RdKXt2YXIgcj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBoJiZoO2lmKCFlJiZyKXJldHVybiByKHQsITApO2lmKGQpcmV0dXJuIGQodCwhMCk7dmFyIG49bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIit0K1wiJ1wiKTt0aHJvdyBuLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsbn12YXIgaT1hW3RdPXtleHBvcnRzOnt9fTtvW3RdWzBdLmNhbGwoaS5leHBvcnRzLGZ1bmN0aW9uKGUpe3JldHVybiB1KG9bdF1bMV1bZV18fGUpfSxpLGkuZXhwb3J0cyxzLG8sYSxmKX1yZXR1cm4gYVt0XS5leHBvcnRzfWZvcih2YXIgZD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBoJiZoLGU9MDtlPGYubGVuZ3RoO2UrKyl1KGZbZV0pO3JldHVybiB1fSh7MTpbZnVuY3Rpb24oaCx0LG4peyhmdW5jdGlvbihyKXshZnVuY3Rpb24oZSl7XCJvYmplY3RcIj09dHlwZW9mIG4mJnZvaWQgMCE9PXQ/dC5leHBvcnRzPWUoKTooXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6dm9pZCAwIT09cj9yOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6dGhpcykuSlNaaXA9ZSgpfShmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbiBzKG8sYSxmKXtmdW5jdGlvbiB1KHQsZSl7aWYoIWFbdF0pe2lmKCFvW3RdKXt2YXIgcj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBoJiZoO2lmKCFlJiZyKXJldHVybiByKHQsITApO2lmKGQpcmV0dXJuIGQodCwhMCk7dmFyIG49bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIit0K1wiJ1wiKTt0aHJvdyBuLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsbn12YXIgaT1hW3RdPXtleHBvcnRzOnt9fTtvW3RdWzBdLmNhbGwoaS5leHBvcnRzLGZ1bmN0aW9uKGUpe3JldHVybiB1KG9bdF1bMV1bZV18fGUpfSxpLGkuZXhwb3J0cyxzLG8sYSxmKX1yZXR1cm4gYVt0XS5leHBvcnRzfWZvcih2YXIgZD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBoJiZoLGU9MDtlPGYubGVuZ3RoO2UrKyl1KGZbZV0pO3JldHVybiB1fSh7MTpbZnVuY3Rpb24oaCx0LG4peyhmdW5jdGlvbihyKXshZnVuY3Rpb24oZSl7XCJvYmplY3RcIj09dHlwZW9mIG4mJnZvaWQgMCE9PXQ/dC5leHBvcnRzPWUoKTooXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6dm9pZCAwIT09cj9yOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6dGhpcykuSlNaaXA9ZSgpfShmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbiBzKG8sYSxmKXtmdW5jdGlvbiB1KHQsZSl7aWYoIWFbdF0pe2lmKCFvW3RdKXt2YXIgcj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBoJiZoO2lmKCFlJiZyKXJldHVybiByKHQsITApO2lmKGQpcmV0dXJuIGQodCwhMCk7dmFyIG49bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIit0K1wiJ1wiKTt0aHJvdyBuLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsbn12YXIgaT1hW3RdPXtleHBvcnRzOnt9fTtvW3RdWzBdLmNhbGwoaS5leHBvcnRzLGZ1bmN0aW9uKGUpe3JldHVybiB1KG9bdF1bMV1bZV18fGUpfSxpLGkuZXhwb3J0cyxzLG8sYSxmKX1yZXR1cm4gYVt0XS5leHBvcnRzfWZvcih2YXIgZD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBoJiZoLGU9MDtlPGYubGVuZ3RoO2UrKyl1KGZbZV0pO3JldHVybiB1fSh7MTpbZnVuY3Rpb24oaCx0LG4peyhmdW5jdGlvbihyKXshZnVuY3Rpb24oZSl7XCJvYmplY3RcIj09dHlwZW9mIG4mJnZvaWQgMCE9PXQ/dC5leHBvcnRzPWUoKTooXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6dm9pZCAwIT09cj9yOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6dGhpcykuSlNaaXA9ZSgpfShmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbiBzKG8sYSxmKXtmdW5jdGlvbiB1KHQsZSl7aWYoIWFbdF0pe2lmKCFvW3RdKXt2YXIgcj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBoJiZoO2lmKCFlJiZyKXJldHVybiByKHQsITApO2lmKGQpcmV0dXJuIGQodCwhMCk7dmFyIG49bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIit0K1wiJ1wiKTt0aHJvdyBuLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsbn12YXIgaT1hW3RdPXtleHBvcnRzOnt9fTtvW3RdWzBdLmNhbGwoaS5leHBvcnRzLGZ1bmN0aW9uKGUpe3JldHVybiB1KG9bdF1bMV1bZV18fGUpfSxpLGkuZXhwb3J0cyxzLG8sYSxmKX1yZXR1cm4gYVt0XS5leHBvcnRzfWZvcih2YXIgZD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBoJiZoLGU9MDtlPGYubGVuZ3RoO2UrKyl1KGZbZV0pO3JldHVybiB1fSh7MTpbZnVuY3Rpb24oaCx0LG4peyhmdW5jdGlvbihyKXshZnVuY3Rpb24oZSl7XCJvYmplY3RcIj09dHlwZW9mIG4mJnZvaWQgMCE9PXQ/dC5leHBvcnRzPWUoKTooXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6dm9pZCAwIT09cj9yOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6dGhpcykuSlNaaXA9ZSgpfShmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbiBzKG8sYSxmKXtmdW5jdGlvbiB1KHQsZSl7aWYoIWFbdF0pe2lmKCFvW3RdKXt2YXIgcj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBoJiZoO2lmKCFlJiZyKXJldHVybiByKHQsITApO2lmKGQpcmV0dXJuIGQodCwhMCk7dmFyIG49bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIit0K1wiJ1wiKTt0aHJvdyBuLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsbn12YXIgaT1hW3RdPXtleHBvcnRzOnt9fTtvW3RdWzBdLmNhbGwoaS5leHBvcnRzLGZ1bmN0aW9uKGUpe3JldHVybiB1KG9bdF1bMV1bZV18fGUpfSxpLGkuZXhwb3J0cyxzLG8sYSxmKX1yZXR1cm4gYVt0XS5leHBvcnRzfWZvcih2YXIgZD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBoJiZoLGU9MDtlPGYubGVuZ3RoO2UrKyl1KGZbZV0pO3JldHVybiB1fSh7MTpbZnVuY3Rpb24oaCx0LG4peyhmdW5jdGlvbihyKXshZnVuY3Rpb24oZSl7XCJvYmplY3RcIj09dHlwZW9mIG4mJnZvaWQgMCE9PXQ/dC5leHBvcnRzPWUoKTooXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6dm9pZCAwIT09cj9yOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6dGhpcykuSlNaaXA9ZSgpfShmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbiBzKG8sYSxmKXtmdW5jdGlvbiB1KHQsZSl7aWYoIWFbdF0pe2lmKCFvW3RdKXt2YXIgcj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBoJiZoO2lmKCFlJiZyKXJldHVybiByKHQsITApO2lmKGQpcmV0dXJuIGQodCwhMCk7dmFyIG49bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIit0K1wiJ1wiKTt0aHJvdyBuLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsbn12YXIgaT1hW3RdPXtleHBvcnRzOnt9fTtvW3RdWzBdLmNhbGwoaS5leHBvcnRzLGZ1bmN0aW9uKGUpe3JldHVybiB1KG9bdF1bMV1bZV18fGUpfSxpLGkuZXhwb3J0cyxzLG8sYSxmKX1yZXR1cm4gYVt0XS5leHBvcnRzfWZvcih2YXIgZD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBoJiZoLGU9MDtlPGYubGVuZ3RoO2UrKyl1KGZbZV0pO3JldHVybiB1fSh7MTpbZnVuY3Rpb24oaCx0LG4peyhmdW5jdGlvbihyKXshZnVuY3Rpb24oZSl7XCJvYmplY3RcIj09dHlwZW9mIG4mJnZvaWQgMCE9PXQ/dC5leHBvcnRzPWUoKTooXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6dm9pZCAwIT09cj9yOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6dGhpcykuSlNaaXA9ZSgpfShmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbiBzKG8sYSxmKXtmdW5jdGlvbiB1KHQsZSl7aWYoIWFbdF0pe2lmKCFvW3RdKXt2YXIgcj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBoJiZoO2lmKCFlJiZyKXJldHVybiByKHQsITApO2lmKGQpcmV0dXJuIGQodCwhMCk7dmFyIG49bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIit0K1wiJ1wiKTt0aHJvdyBuLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsbn12YXIgaT1hW3RdPXtleHBvcnRzOnt9fTtvW3RdWzBdLmNhbGwoaS5leHBvcnRzLGZ1bmN0aW9uKGUpe3JldHVybiB1KG9bdF1bMV1bZV18fGUpfSxpLGkuZXhwb3J0cyxzLG8sYSxmKX1yZXR1cm4gYVt0XS5leHBvcnRzfWZvcih2YXIgZD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBoJiZoLGU9MDtlPGYubGVuZ3RoO2UrKyl1KGZbZV0pO3JldHVybiB1fSh7MTpbZnVuY3Rpb24oaCx0LG4peyhmdW5jdGlvbihyKXshZnVuY3Rpb24oZSl7XCJvYmplY3RcIj09dHlwZW9mIG4mJnZvaWQgMCE9PXQ/dC5leHBvcnRzPWUoKTooXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6dm9pZCAwIT09cj9yOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6dGhpcykuSlNaaXA9ZSgpfShmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbiBzKG8sYSxmKXtmdW5jdGlvbiB1KHQsZSl7aWYoIWFbdF0pe2lmKCFvW3RdKXt2YXIgcj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBoJiZoO2lmKCFlJiZyKXJldHVybiByKHQsITApO2lmKGQpcmV0dXJuIGQodCwhMCk7dmFyIG49bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIit0K1wiJ1wiKTt0aHJvdyBuLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsbn12YXIgaT1hW3RdPXtleHBvcnRzOnt9fTtvW3RdWzBdLmNhbGwoaS5leHBvcnRzLGZ1bmN0aW9uKGUpe3JldHVybiB1KG9bdF1bMV1bZV18fGUpfSxpLGkuZXhwb3J0cyxzLG8sYSxmKX1yZXR1cm4gYVt0XS5leHBvcnRzfWZvcih2YXIgZD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBoJiZoLGU9MDtlPGYubGVuZ3RoO2UrKyl1KGZbZV0pO3JldHVybiB1fSh7MTpbZnVuY3Rpb24oaCx0LG4peyhmdW5jdGlvbihyKXshZnVuY3Rpb24oZSl7XCJvYmplY3RcIj09dHlwZW9mIG4mJnZvaWQgMCE9PXQ/dC5leHBvcnRzPWUoKTooXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6dm9pZCAwIT09cj9yOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6dGhpcykuSlNaaXA9ZSgpfShmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbiBzKG8sYSxmKXtmdW5jdGlvbiB1KHQsZSl7aWYoIWFbdF0pe2lmKCFvW3RdKXt2YXIgcj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBoJiZoO2lmKCFlJiZyKXJldHVybiByKHQsITApO2lmKGQpcmV0dXJuIGQodCwhMCk7dmFyIG49bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIit0K1wiJ1wiKTt0aHJvdyBuLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsbn12YXIgaT1hW3RdPXtleHBvcnRzOnt9fTtvW3RdWzBdLmNhbGwoaS5leHBvcnRzLGZ1bmN0aW9uKGUpe3JldHVybiB1KG9bdF1bMV1bZV18fGUpfSxpLGkuZXhwb3J0cyxzLG8sYSxmKX1yZXR1cm4gYVt0XS5leHBvcnRzfWZvcih2YXIgZD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBoJiZoLGU9MDtlPGYubGVuZ3RoO2UrKyl1KGZbZV0pO3JldHVybiB1fSh7MTpbZnVuY3Rpb24oaCx0LG4peyhmdW5jdGlvbihyKXshZnVuY3Rpb24oZSl7XCJvYmplY3RcIj09dHlwZW9mIG4mJnZvaWQgMCE9PXQ/dC5leHBvcnRzPWUoKTooXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6dm9pZCAwIT09cj9yOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6dGhpcykuSlNaaXA9ZSgpfShmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbiBzKG8sYSxmKXtmdW5jdGlvbiB1KHQsZSl7aWYoIWFbdF0pe2lmKCFvW3RdKXt2YXIgcj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBoJiZoO2lmKCFlJiZyKXJldHVybiByKHQsITApO2lmKGQpcmV0dXJuIGQodCwhMCk7dmFyIG49bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIit0K1wiJ1wiKTt0aHJvdyBuLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsbn12YXIgaT1hW3RdPXtleHBvcnRzOnt9fTtvW3RdWzBdLmNhbGwoaS5leHBvcnRzLGZ1bmN0aW9uKGUpe3JldHVybiB1KG9bdF1bMV1bZV18fGUpfSxpLGkuZXhwb3J0cyxzLG8sYSxmKX1yZXR1cm4gYVt0XS5leHBvcnRzfWZvcih2YXIgZD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBoJiZoLGU9MDtlPGYubGVuZ3RoO2UrKyl1KGZbZV0pO3JldHVybiB1fSh7MTpbZnVuY3Rpb24oaCx0LG4peyhmdW5jdGlvbihyKXshZnVuY3Rpb24oZSl7XCJvYmplY3RcIj09dHlwZW9mIG4mJnZvaWQgMCE9PXQ/dC5leHBvcnRzPWUoKTooXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6dm9pZCAwIT09cj9yOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6dGhpcykuSlNaaXA9ZSgpfShmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbiBzKG8sYSxmKXtmdW5jdGlvbiB1KHQsZSl7aWYoIWFbdF0pe2lmKCFvW3RdKXt2YXIgcj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBoJiZoO2lmKCFlJiZyKXJldHVybiByKHQsITApO2lmKGQpcmV0dXJuIGQodCwhMCk7dmFyIG49bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIit0K1wiJ1wiKTt0aHJvdyBuLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsbn12YXIgaT1hW3RdPXtleHBvcnRzOnt9fTtvW3RdWzBdLmNhbGwoaS5leHBvcnRzLGZ1bmN0aW9uKGUpe3JldHVybiB1KG9bdF1bMV1bZV18fGUpfSxpLGkuZXhwb3J0cyxzLG8sYSxmKX1yZXR1cm4gYVt0XS5leHBvcnRzfWZvcih2YXIgZD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBoJiZoLGU9MDtlPGYubGVuZ3RoO2UrKyl1KGZbZV0pO3JldHVybiB1fSh7MTpbZnVuY3Rpb24oaCx0LG4peyhmdW5jdGlvbihyKXshZnVuY3Rpb24oZSl7XCJvYmplY3RcIj09dHlwZW9mIG4mJnZvaWQgMCE9PXQ/dC5leHBvcnRzPWUoKTooXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6dm9pZCAwIT09cj9yOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6dGhpcykuSlNaaXA9ZSgpfShmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbiBzKG8sYSxmKXtmdW5jdGlvbiB1KHQsZSl7aWYoIWFbdF0pe2lmKCFvW3RdKXt2YXIgcj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBoJiZoO2lmKCFlJiZyKXJldHVybiByKHQsITApO2lmKGQpcmV0dXJuIGQodCwhMCk7dmFyIG49bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIit0K1wiJ1wiKTt0aHJvdyBuLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsbn12YXIgaT1hW3RdPXtleHBvcnRzOnt9fTtvW3RdWzBdLmNhbGwoaS5leHBvcnRzLGZ1bmN0aW9uKGUpe3JldHVybiB1KG9bdF1bMV1bZV18fGUpfSxpLGkuZXhwb3J0cyxzLG8sYSxmKX1yZXR1cm4gYVt0XS5leHBvcnRzfWZvcih2YXIgZD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBoJiZoLGU9MDtlPGYubGVuZ3RoO2UrKyl1KGZbZV0pO3JldHVybiB1fSh7MTpbZnVuY3Rpb24oaCx0LG4peyhmdW5jdGlvbihyKXshZnVuY3Rpb24oZSl7XCJvYmplY3RcIj09dHlwZW9mIG4mJnZvaWQgMCE9PXQ/dC5leHBvcnRzPWUoKTooXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6dm9pZCAwIT09cj9yOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6dGhpcykuSlNaaXA9ZSgpfShmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbiBzKG8sYSxmKXtmdW5jdGlvbiB1KHQsZSl7aWYoIWFbdF0pe2lmKCFvW3RdKXt2YXIgcj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBoJiZoO2lmKCFlJiZyKXJldHVybiByKHQsITApO2lmKGQpcmV0dXJuIGQodCwhMCk7dmFyIG49bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIit0K1wiJ1wiKTt0aHJvdyBuLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsbn12YXIgaT1hW3RdPXtleHBvcnRzOnt9fTtvW3RdWzBdLmNhbGwoaS5leHBvcnRzLGZ1bmN0aW9uKGUpe3JldHVybiB1KG9bdF1bMV1bZV18fGUpfSxpLGkuZXhwb3J0cyxzLG8sYSxmKX1yZXR1cm4gYVt0XS5leHBvcnRzfWZvcih2YXIgZD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBoJiZoLGU9MDtlPGYubGVuZ3RoO2UrKyl1KGZbZV0pO3JldHVybiB1fSh7MTpbZnVuY3Rpb24oaCx0LG4peyhmdW5jdGlvbihyKXshZnVuY3Rpb24oZSl7XCJvYmplY3RcIj09dHlwZW9mIG4mJnZvaWQgMCE9PXQ/dC5leHBvcnRzPWUoKTooXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6dm9pZCAwIT09cj9yOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6dGhpcykuSlNaaXA9ZSgpfShmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbiBzKG8sYSxmKXtmdW5jdGlvbiB1KHQsZSl7aWYoIWFbdF0pe2lmKCFvW3RdKXt2YXIgcj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBoJiZoO2lmKCFlJiZyKXJldHVybiByKHQsITApO2lmKGQpcmV0dXJuIGQodCwhMCk7dmFyIG49bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIit0K1wiJ1wiKTt0aHJvdyBuLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsbn12YXIgaT1hW3RdPXtleHBvcnRzOnt9fTtvW3RdWzBdLmNhbGwoaS5leHBvcnRzLGZ1bmN0aW9uKGUpe3JldHVybiB1KG9bdF1bMV1bZV18fGUpfSxpLGkuZXhwb3J0cyxzLG8sYSxmKX1yZXR1cm4gYVt0XS5leHBvcnRzfWZvcih2YXIgZD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBoJiZoLGU9MDtlPGYubGVuZ3RoO2UrKyl1KGZbZV0pO3JldHVybiB1fSh7MTpbZnVuY3Rpb24oaCx0LG4peyhmdW5jdGlvbihyKXshZnVuY3Rpb24oZSl7XCJvYmplY3RcIj09dHlwZW9mIG4mJnZvaWQgMCE9PXQ/dC5leHBvcnRzPWUoKTooXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6dm9pZCAwIT09cj9yOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6dGhpcykuSlNaaXA9ZSgpfShmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbiBzKG8sYSxmKXtmdW5jdGlvbiB1KHQsZSl7aWYoIWFbdF0pe2lmKCFvW3RdKXt2YXIgcj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBoJiZoO2lmKCFlJiZyKXJldHVybiByKHQsITApO2lmKGQpcmV0dXJuIGQodCwhMCk7dmFyIG49bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIit0K1wiJ1wiKTt0aHJvdyBuLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsbn12YXIgaT1hW3RdPXtleHBvcnRzOnt9fTtvW3RdWzBdLmNhbGwoaS5leHBvcnRzLGZ1bmN0aW9uKGUpe3JldHVybiB1KG9bdF1bMV1bZV18fGUpfSxpLGkuZXhwb3J0cyxzLG8sYSxmKX1yZXR1cm4gYVt0XS5leHBvcnRzfWZvcih2YXIgZD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBoJiZoLGU9MDtlPGYubGVuZ3RoO2UrKyl1KGZbZV0pO3JldHVybiB1fSh7MTpbZnVuY3Rpb24oaCx0LG4peyhmdW5jdGlvbihyKXshZnVuY3Rpb24oZSl7XCJvYmplY3RcIj09dHlwZW9mIG4mJnZvaWQgMCE9PXQ/dC5leHBvcnRzPWUoKTooXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6dm9pZCAwIT09cj9yOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6dGhpcykuSlNaaXA9ZSgpfShmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbiBzKG8sYSxmKXtmdW5jdGlvbiB1KHQsZSl7aWYoIWFbdF0pe2lmKCFvW3RdKXt2YXIgcj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBoJiZoO2lmKCFlJiZyKXJldHVybiByKHQsITApO2lmKGQpcmV0dXJuIGQodCwhMCk7dmFyIG49bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIit0K1wiJ1wiKTt0aHJvdyBuLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsbn12YXIgaT1hW3RdPXtleHBvcnRzOnt9fTtvW3RdWzBdLmNhbGwoaS5leHBvcnRzLGZ1bmN0aW9uKGUpe3JldHVybiB1KG9bdF1bMV1bZV18fGUpfSxpLGkuZXhwb3J0cyxzLG8sYSxmKX1yZXR1cm4gYVt0XS5leHBvcnRzfWZvcih2YXIgZD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBoJiZoLGU9MDtlPGYubGVuZ3RoO2UrKyl1KGZbZV0pO3JldHVybiB1fSh7MTpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBjPWUoXCIuL3V0aWxzXCIpLGg9ZShcIi4vc3VwcG9ydFwiKSxwPVwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLz1cIjtyLmVuY29kZT1mdW5jdGlvbihlKXtmb3IodmFyIHQscixuLGkscyxvLGEsZj1bXSx1PTAsZD1lLmxlbmd0aCxoPWQsbD1cInN0cmluZ1wiIT09Yy5nZXRUeXBlT2YoZSk7dTxlLmxlbmd0aDspaD1kLXUsbj1sPyh0PWVbdSsrXSxyPXU8ZD9lW3UrK106MCx1PGQ/ZVt1KytdOjApOih0PWUuY2hhckNvZGVBdCh1KyspLHI9dTxkP2UuY2hhckNvZGVBdCh1KyspOjAsdTxkP2UuY2hhckNvZGVBdCh1KyspOjApLGk9dD4+MixzPSgzJnQpPDw0fHI+PjQsbz0xPGg/KDE1JnIpPDwyfG4+PjY6NjQsYT0yPGg/NjMmbjo2NCxmLnB1c2gocC5jaGFyQXQoaSkrcC5jaGFyQXQocykrcC5jaGFyQXQobykrcC5jaGFyQXQoYSkpO3JldHVybiBmLmpvaW4oXCJcIil9LHIuZGVjb2RlPWZ1bmN0aW9uKGUpe3ZhciB0LHIsbixpLHMsbyxhPTAsZj0wO2lmKFwiZGF0YTpcIj09PWUuc3Vic3RyKDAsXCJkYXRhOlwiLmxlbmd0aCkpdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBiYXNlNjQgaW5wdXQsIGl0IGxvb2tzIGxpa2UgYSBkYXRhIHVybC5cIik7dmFyIHUsZD0zKihlPWUucmVwbGFjZSgvW15BLVphLXowLTlcXCtcXC9cXD1dL2csXCJcIikpLmxlbmd0aC80O2lmKGUuY2hhckF0KGUubGVuZ3RoLTEpPT09cC5jaGFyQXQoNjQpJiZkLS0sZS5jaGFyQXQoZS5sZW5ndGgtMik9PT1wLmNoYXJBdCg2NCkmJmQtLSxkJTEhPTApdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBiYXNlNjQgaW5wdXQsIGJhZCBjb250ZW50IGxlbmd0aC5cIik7Zm9yKHU9aC51aW50OGFycmF5P25ldyBVaW50OEFycmF5KDB8ZCk6bmV3IEFycmF5KDB8ZCk7YTxlLmxlbmd0aDspdD1wLmluZGV4T2YoZS5jaGFyQXQoYSsrKSk8PDJ8KGk9cC5pbmRleE9mKGUuY2hhckF0KGErKykpKT4+NCxyPSgxNSZpKTw8NHwocz1wLmluZGV4T2YoZS5jaGFyQXQoYSsrKSkpPj4yLG49KDMmcyk8PDZ8KG89cC5pbmRleE9mKGUuY2hhckF0KGErKykpKSx1W2YrK109dCw2NCE9PXMmJih1W2YrK109ciksNjQhPT1vJiYodVtmKytdPW4pO3JldHVybiB1fX0se1wiLi9zdXBwb3J0XCI6MzAsXCIuL3V0aWxzXCI6MzJ9XSwyOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIi4vZXh0ZXJuYWxcIiksaT1lKFwiLi9zdHJlYW0vRGF0YVdvcmtlclwiKSxzPWUoXCIuL3N0cmVhbS9DcmMzMlByb2JlXCIpLG89ZShcIi4vc3RyZWFtL0RhdGFMZW5ndGhQcm9iZVwiKTtmdW5jdGlvbiBhKGUsdCxyLG4saSl7dGhpcy5jb21wcmVzc2VkU2l6ZT1lLHRoaXMudW5jb21wcmVzc2VkU2l6ZT10LHRoaXMuY3JjMzI9cix0aGlzLmNvbXByZXNzaW9uPW4sdGhpcy5jb21wcmVzc2VkQ29udGVudD1pfWEucHJvdG90eXBlPXtnZXRDb250ZW50V29ya2VyOmZ1bmN0aW9uKCl7dmFyIGU9bmV3IGkobi5Qcm9taXNlLnJlc29sdmUodGhpcy5jb21wcmVzc2VkQ29udGVudCkpLnBpcGUodGhpcy5jb21wcmVzc2lvbi51bmNvbXByZXNzV29ya2VyKCkpLnBpcGUobmV3IG8oXCJkYXRhX2xlbmd0aFwiKSksdD10aGlzO3JldHVybiBlLm9uKFwiZW5kXCIsZnVuY3Rpb24oKXtpZih0aGlzLnN0cmVhbUluZm8uZGF0YV9sZW5ndGghPT10LnVuY29tcHJlc3NlZFNpemUpdGhyb3cgbmV3IEVycm9yKFwiQnVnIDogdW5jb21wcmVzc2VkIGRhdGEgc2l6ZSBtaXNtYXRjaFwiKX0pLGV9LGdldENvbXByZXNzZWRXb3JrZXI6ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IGkobi5Qcm9taXNlLnJlc29sdmUodGhpcy5jb21wcmVzc2VkQ29udGVudCkpLndpdGhTdHJlYW1JbmZvKFwiY29tcHJlc3NlZFNpemVcIix0aGlzLmNvbXByZXNzZWRTaXplKS53aXRoU3RyZWFtSW5mbyhcInVuY29tcHJlc3NlZFNpemVcIix0aGlzLnVuY29tcHJlc3NlZFNpemUpLndpdGhTdHJlYW1JbmZvKFwiY3JjMzJcIix0aGlzLmNyYzMyKS53aXRoU3RyZWFtSW5mbyhcImNvbXByZXNzaW9uXCIsdGhpcy5jb21wcmVzc2lvbil9fSxhLmNyZWF0ZVdvcmtlckZyb209ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBlLnBpcGUobmV3IHMpLnBpcGUobmV3IG8oXCJ1bmNvbXByZXNzZWRTaXplXCIpKS5waXBlKHQuY29tcHJlc3NXb3JrZXIocikpLnBpcGUobmV3IG8oXCJjb21wcmVzc2VkU2l6ZVwiKSkud2l0aFN0cmVhbUluZm8oXCJjb21wcmVzc2lvblwiLHQpfSx0LmV4cG9ydHM9YX0se1wiLi9leHRlcm5hbFwiOjYsXCIuL3N0cmVhbS9DcmMzMlByb2JlXCI6MjUsXCIuL3N0cmVhbS9EYXRhTGVuZ3RoUHJvYmVcIjoyNixcIi4vc3RyZWFtL0RhdGFXb3JrZXJcIjoyN31dLDM6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiLi9zdHJlYW0vR2VuZXJpY1dvcmtlclwiKTtyLlNUT1JFPXttYWdpYzpcIlxcMFxcMFwiLGNvbXByZXNzV29ya2VyOmZ1bmN0aW9uKGUpe3JldHVybiBuZXcgbihcIlNUT1JFIGNvbXByZXNzaW9uXCIpfSx1bmNvbXByZXNzV29ya2VyOmZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBuKFwiU1RPUkUgZGVjb21wcmVzc2lvblwiKX19LHIuREVGTEFURT1lKFwiLi9mbGF0ZVwiKX0se1wiLi9mbGF0ZVwiOjcsXCIuL3N0cmVhbS9HZW5lcmljV29ya2VyXCI6Mjh9XSw0OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIi4vdXRpbHNcIiksbz1mdW5jdGlvbigpe2Zvcih2YXIgZSx0PVtdLHI9MDtyPDI1NjtyKyspe2U9cjtmb3IodmFyIG49MDtuPDg7bisrKWU9MSZlPzM5ODgyOTIzODReZT4+PjE6ZT4+PjE7dFtyXT1lfXJldHVybiB0fSgpO3QuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3JldHVybiB2b2lkIDAhPT1lJiZlLmxlbmd0aD9cInN0cmluZ1wiIT09bi5nZXRUeXBlT2YoZSk/ZnVuY3Rpb24oZSx0LHIpe3ZhciBuPW8saT0wK3I7ZV49LTE7Zm9yKHZhciBzPTA7czxpO3MrKyllPWU+Pj44Xm5bMjU1JihlXnRbc10pXTtyZXR1cm4tMV5lfSgwfHQsZSxlLmxlbmd0aCk6ZnVuY3Rpb24oZSx0LHIpe3ZhciBuPW8saT0wK3I7ZV49LTE7Zm9yKHZhciBzPTA7czxpO3MrKyllPWU+Pj44Xm5bMjU1JihlXnQuY2hhckNvZGVBdChzKSldO3JldHVybi0xXmV9KDB8dCxlLGUubGVuZ3RoKTowfX0se1wiLi91dGlsc1wiOjMyfV0sNTpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3IuYmFzZTY0PSExLHIuYmluYXJ5PSExLHIuZGlyPSExLHIuY3JlYXRlRm9sZGVycz0hMCxyLmRhdGU9bnVsbCxyLmNvbXByZXNzaW9uPW51bGwsci5jb21wcmVzc2lvbk9wdGlvbnM9bnVsbCxyLmNvbW1lbnQ9bnVsbCxyLnVuaXhQZXJtaXNzaW9ucz1udWxsLHIuZG9zUGVybWlzc2lvbnM9bnVsbH0se31dLDY6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbjtuPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBQcm9taXNlP1Byb21pc2U6ZShcImxpZVwiKSx0LmV4cG9ydHM9e1Byb21pc2U6bn19LHtsaWU6Mzd9XSw3OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFVpbnQ4QXJyYXkmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBVaW50MTZBcnJheSYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIFVpbnQzMkFycmF5LGk9ZShcInBha29cIikscz1lKFwiLi91dGlsc1wiKSxvPWUoXCIuL3N0cmVhbS9HZW5lcmljV29ya2VyXCIpLGE9bj9cInVpbnQ4YXJyYXlcIjpcImFycmF5XCI7ZnVuY3Rpb24gZihlLHQpe28uY2FsbCh0aGlzLFwiRmxhdGVXb3JrZXIvXCIrZSksdGhpcy5fcGFrbz1udWxsLHRoaXMuX3Bha29BY3Rpb249ZSx0aGlzLl9wYWtvT3B0aW9ucz10LHRoaXMubWV0YT17fX1yLm1hZ2ljPVwiXFxiXFwwXCIscy5pbmhlcml0cyhmLG8pLGYucHJvdG90eXBlLnByb2Nlc3NDaHVuaz1mdW5jdGlvbihlKXt0aGlzLm1ldGE9ZS5tZXRhLG51bGw9PT10aGlzLl9wYWtvJiZ0aGlzLl9jcmVhdGVQYWtvKCksdGhpcy5fcGFrby5wdXNoKHMudHJhbnNmb3JtVG8oYSxlLmRhdGEpLCExKX0sZi5wcm90b3R5cGUuZmx1c2g9ZnVuY3Rpb24oKXtvLnByb3RvdHlwZS5mbHVzaC5jYWxsKHRoaXMpLG51bGw9PT10aGlzLl9wYWtvJiZ0aGlzLl9jcmVhdGVQYWtvKCksdGhpcy5fcGFrby5wdXNoKFtdLCEwKX0sZi5wcm90b3R5cGUuY2xlYW5VcD1mdW5jdGlvbigpe28ucHJvdG90eXBlLmNsZWFuVXAuY2FsbCh0aGlzKSx0aGlzLl9wYWtvPW51bGx9LGYucHJvdG90eXBlLl9jcmVhdGVQYWtvPWZ1bmN0aW9uKCl7dGhpcy5fcGFrbz1uZXcgaVt0aGlzLl9wYWtvQWN0aW9uXSh7cmF3OiEwLGxldmVsOnRoaXMuX3Bha29PcHRpb25zLmxldmVsfHwtMX0pO3ZhciB0PXRoaXM7dGhpcy5fcGFrby5vbkRhdGE9ZnVuY3Rpb24oZSl7dC5wdXNoKHtkYXRhOmUsbWV0YTp0Lm1ldGF9KX19LHIuY29tcHJlc3NXb3JrZXI9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBmKFwiRGVmbGF0ZVwiLGUpfSxyLnVuY29tcHJlc3NXb3JrZXI9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IGYoXCJJbmZsYXRlXCIse30pfX0se1wiLi9zdHJlYW0vR2VuZXJpY1dvcmtlclwiOjI4LFwiLi91dGlsc1wiOjMyLHBha286Mzh9XSw4OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gTyhlLHQpe3ZhciByLG49XCJcIjtmb3Iocj0wO3I8dDtyKyspbis9U3RyaW5nLmZyb21DaGFyQ29kZSgyNTUmZSksZT4+Pj04O3JldHVybiBufWZ1bmN0aW9uIGkoZSx0LHIsbixpLHMpe3ZhciBvLGEsZj1lLmZpbGUsdT1lLmNvbXByZXNzaW9uLGQ9cyE9PUQudXRmOGVuY29kZSxoPUkudHJhbnNmb3JtVG8oXCJzdHJpbmdcIixzKGYubmFtZSkpLGw9SS50cmFuc2Zvcm1UbyhcInN0cmluZ1wiLEQudXRmOGVuY29kZShmLm5hbWUpKSxjPWYuY29tbWVudCxwPUkudHJhbnNmb3JtVG8oXCJzdHJpbmdcIixzKGMpKSxtPUkudHJhbnNmb3JtVG8oXCJzdHJpbmdcIixELnV0ZjhlbmNvZGUoYykpLF89bC5sZW5ndGghPT1mLm5hbWUubGVuZ3RoLHc9bS5sZW5ndGghPT1jLmxlbmd0aCx2PVwiXCIsZz1cIlwiLHk9XCJcIixiPWYuZGlyLGs9Zi5kYXRlLHg9e2NyYzMyOjAsY29tcHJlc3NlZFNpemU6MCx1bmNvbXByZXNzZWRTaXplOjB9O3QmJiFyfHwoeC5jcmMzMj1lLmNyYzMyLHguY29tcHJlc3NlZFNpemU9ZS5jb21wcmVzc2VkU2l6ZSx4LnVuY29tcHJlc3NlZFNpemU9ZS51bmNvbXByZXNzZWRTaXplKTt2YXIgUz0wO3QmJihTfD04KSxkfHwhXyYmIXd8fChTfD0yMDQ4KTt2YXIgRSx6PTAsQz0wO2ImJih6fD0xNiksXCJVTklYXCI9PT1pPyhDPTc5OCx6fD0oKEU9Zi51bml4UGVybWlzc2lvbnMpfHwoRT1iPzE2ODkzOjMzMjA0KSwoNjU1MzUmRSk8PDE2KSk6KEM9MjAsenw9NjMmKGYuZG9zUGVybWlzc2lvbnN8fDApKSxvPWsuZ2V0VVRDSG91cnMoKSxvPDw9NixvfD1rLmdldFVUQ01pbnV0ZXMoKSxvPDw9NSxvfD1rLmdldFVUQ1NlY29uZHMoKS8yLGE9ay5nZXRVVENGdWxsWWVhcigpLTE5ODAsYTw8PTQsYXw9ay5nZXRVVENNb250aCgpKzEsYTw8PTUsYXw9ay5nZXRVVENEYXRlKCksXyYmKHYrPVwidXBcIitPKChnPU8oMSwxKStPKEIoaCksNCkrbCkubGVuZ3RoLDIpK2cpLHcmJih2Kz1cInVjXCIrTygoeT1PKDEsMSkrTyhCKHApLDQpK20pLmxlbmd0aCwyKSt5KTt2YXIgQT1cIlwiO3JldHVybiBBKz1cIlxcblxcMFwiLEErPU8oUywyKSxBKz11Lm1hZ2ljLEErPU8obywyKSxBKz1PKGEsMiksQSs9Tyh4LmNyYzMyLDQpLEErPU8oeC5jb21wcmVzc2VkU2l6ZSw0KSxBKz1PKHgudW5jb21wcmVzc2VkU2l6ZSw0KSxBKz1PKGgubGVuZ3RoLDIpLEErPU8odi5sZW5ndGgsMikse2ZpbGVSZWNvcmQ6VC5MT0NBTF9GSUxFX0hFQURFUitBK2grdixkaXJSZWNvcmQ6VC5DRU5UUkFMX0ZJTEVfSEVBREVSK08oQywyKStBK08ocC5sZW5ndGgsMikrXCJcXDBcXDBcXDBcXDBcIitPKHosNCkrTyhuLDQpK2grditwfX12YXIgST1lKFwiLi4vdXRpbHNcIikscz1lKFwiLi4vc3RyZWFtL0dlbmVyaWNXb3JrZXJcIiksRD1lKFwiLi4vdXRmOFwiKSxCPWUoXCIuLi9jcmMzMlwiKSxUPWUoXCIuLi9zaWduYXR1cmVcIik7ZnVuY3Rpb24gbihlLHQscixuKXtzLmNhbGwodGhpcyxcIlppcEZpbGVXb3JrZXJcIiksdGhpcy5ieXRlc1dyaXR0ZW49MCx0aGlzLnppcENvbW1lbnQ9dCx0aGlzLnppcFBsYXRmb3JtPXIsdGhpcy5lbmNvZGVGaWxlTmFtZT1uLHRoaXMuc3RyZWFtRmlsZXM9ZSx0aGlzLmFjY3VtdWxhdGU9ITEsdGhpcy5jb250ZW50QnVmZmVyPVtdLHRoaXMuZGlyUmVjb3Jkcz1bXSx0aGlzLmN1cnJlbnRTb3VyY2VPZmZzZXQ9MCx0aGlzLmVudHJpZXNDb3VudD0wLHRoaXMuY3VycmVudEZpbGU9bnVsbCx0aGlzLl9zb3VyY2VzPVtdfUkuaW5oZXJpdHMobixzKSxuLnByb3RvdHlwZS5wdXNoPWZ1bmN0aW9uKGUpe3ZhciB0PWUubWV0YS5wZXJjZW50fHwwLHI9dGhpcy5lbnRyaWVzQ291bnQsbj10aGlzLl9zb3VyY2VzLmxlbmd0aDt0aGlzLmFjY3VtdWxhdGU/dGhpcy5jb250ZW50QnVmZmVyLnB1c2goZSk6KHRoaXMuYnl0ZXNXcml0dGVuKz1lLmRhdGEubGVuZ3RoLHMucHJvdG90eXBlLnB1c2guY2FsbCh0aGlzLHtkYXRhOmUuZGF0YSxtZXRhOntjdXJyZW50RmlsZTp0aGlzLmN1cnJlbnRGaWxlLHBlcmNlbnQ6cj8odCsxMDAqKHItbi0xKSkvcjoxMDB9fSkpfSxuLnByb3RvdHlwZS5vcGVuZWRTb3VyY2U9ZnVuY3Rpb24oZSl7dGhpcy5jdXJyZW50U291cmNlT2Zmc2V0PXRoaXMuYnl0ZXNXcml0dGVuLHRoaXMuY3VycmVudEZpbGU9ZS5maWxlLm5hbWU7dmFyIHQ9dGhpcy5zdHJlYW1GaWxlcyYmIWUuZmlsZS5kaXI7aWYodCl7dmFyIHI9aShlLHQsITEsdGhpcy5jdXJyZW50U291cmNlT2Zmc2V0LHRoaXMuemlwUGxhdGZvcm0sdGhpcy5lbmNvZGVGaWxlTmFtZSk7dGhpcy5wdXNoKHtkYXRhOnIuZmlsZVJlY29yZCxtZXRhOntwZXJjZW50OjB9fSl9ZWxzZSB0aGlzLmFjY3VtdWxhdGU9ITB9LG4ucHJvdG90eXBlLmNsb3NlZFNvdXJjZT1mdW5jdGlvbihlKXt0aGlzLmFjY3VtdWxhdGU9ITE7dmFyIHQscj10aGlzLnN0cmVhbUZpbGVzJiYhZS5maWxlLmRpcixuPWkoZSxyLCEwLHRoaXMuY3VycmVudFNvdXJjZU9mZnNldCx0aGlzLnppcFBsYXRmb3JtLHRoaXMuZW5jb2RlRmlsZU5hbWUpO2lmKHRoaXMuZGlyUmVjb3Jkcy5wdXNoKG4uZGlyUmVjb3JkKSxyKXRoaXMucHVzaCh7ZGF0YToodD1lLFQuREFUQV9ERVNDUklQVE9SK08odC5jcmMzMiw0KStPKHQuY29tcHJlc3NlZFNpemUsNCkrTyh0LnVuY29tcHJlc3NlZFNpemUsNCkpLG1ldGE6e3BlcmNlbnQ6MTAwfX0pO2Vsc2UgZm9yKHRoaXMucHVzaCh7ZGF0YTpuLmZpbGVSZWNvcmQsbWV0YTp7cGVyY2VudDowfX0pO3RoaXMuY29udGVudEJ1ZmZlci5sZW5ndGg7KXRoaXMucHVzaCh0aGlzLmNvbnRlbnRCdWZmZXIuc2hpZnQoKSk7dGhpcy5jdXJyZW50RmlsZT1udWxsfSxuLnByb3RvdHlwZS5mbHVzaD1mdW5jdGlvbigpe2Zvcih2YXIgZT10aGlzLmJ5dGVzV3JpdHRlbix0PTA7dDx0aGlzLmRpclJlY29yZHMubGVuZ3RoO3QrKyl0aGlzLnB1c2goe2RhdGE6dGhpcy5kaXJSZWNvcmRzW3RdLG1ldGE6e3BlcmNlbnQ6MTAwfX0pO3ZhciByLG4saSxzLG8sYSxmPXRoaXMuYnl0ZXNXcml0dGVuLWUsdT0ocj10aGlzLmRpclJlY29yZHMubGVuZ3RoLG49ZixpPWUscz10aGlzLnppcENvbW1lbnQsbz10aGlzLmVuY29kZUZpbGVOYW1lLGE9SS50cmFuc2Zvcm1UbyhcInN0cmluZ1wiLG8ocykpLFQuQ0VOVFJBTF9ESVJFQ1RPUllfRU5EK1wiXFwwXFwwXFwwXFwwXCIrTyhyLDIpK08ociwyKStPKG4sNCkrTyhpLDQpK08oYS5sZW5ndGgsMikrYSk7dGhpcy5wdXNoKHtkYXRhOnUsbWV0YTp7cGVyY2VudDoxMDB9fSl9LG4ucHJvdG90eXBlLnByZXBhcmVOZXh0U291cmNlPWZ1bmN0aW9uKCl7dGhpcy5wcmV2aW91cz10aGlzLl9zb3VyY2VzLnNoaWZ0KCksdGhpcy5vcGVuZWRTb3VyY2UodGhpcy5wcmV2aW91cy5zdHJlYW1JbmZvKSx0aGlzLmlzUGF1c2VkP3RoaXMucHJldmlvdXMucGF1c2UoKTp0aGlzLnByZXZpb3VzLnJlc3VtZSgpfSxuLnByb3RvdHlwZS5yZWdpc3RlclByZXZpb3VzPWZ1bmN0aW9uKGUpe3RoaXMuX3NvdXJjZXMucHVzaChlKTt2YXIgdD10aGlzO3JldHVybiBlLm9uKFwiZGF0YVwiLGZ1bmN0aW9uKGUpe3QucHJvY2Vzc0NodW5rKGUpfSksZS5vbihcImVuZFwiLGZ1bmN0aW9uKCl7dC5jbG9zZWRTb3VyY2UodC5wcmV2aW91cy5zdHJlYW1JbmZvKSx0Ll9zb3VyY2VzLmxlbmd0aD90LnByZXBhcmVOZXh0U291cmNlKCk6dC5lbmQoKX0pLGUub24oXCJlcnJvclwiLGZ1bmN0aW9uKGUpe3QuZXJyb3IoZSl9KSx0aGlzfSxuLnByb3RvdHlwZS5yZXN1bWU9ZnVuY3Rpb24oKXtyZXR1cm4hIXMucHJvdG90eXBlLnJlc3VtZS5jYWxsKHRoaXMpJiYoIXRoaXMucHJldmlvdXMmJnRoaXMuX3NvdXJjZXMubGVuZ3RoPyh0aGlzLnByZXBhcmVOZXh0U291cmNlKCksITApOnRoaXMucHJldmlvdXN8fHRoaXMuX3NvdXJjZXMubGVuZ3RofHx0aGlzLmdlbmVyYXRlZEVycm9yP3ZvaWQgMDoodGhpcy5lbmQoKSwhMCkpfSxuLnByb3RvdHlwZS5lcnJvcj1mdW5jdGlvbihlKXt2YXIgdD10aGlzLl9zb3VyY2VzO2lmKCFzLnByb3RvdHlwZS5lcnJvci5jYWxsKHRoaXMsZSkpcmV0dXJuITE7Zm9yKHZhciByPTA7cjx0Lmxlbmd0aDtyKyspdHJ5e3Rbcl0uZXJyb3IoZSl9Y2F0Y2goZSl7fXJldHVybiEwfSxuLnByb3RvdHlwZS5sb2NrPWZ1bmN0aW9uKCl7cy5wcm90b3R5cGUubG9jay5jYWxsKHRoaXMpO2Zvcih2YXIgZT10aGlzLl9zb3VyY2VzLHQ9MDt0PGUubGVuZ3RoO3QrKyllW3RdLmxvY2soKX0sdC5leHBvcnRzPW59LHtcIi4uL2NyYzMyXCI6NCxcIi4uL3NpZ25hdHVyZVwiOjIzLFwiLi4vc3RyZWFtL0dlbmVyaWNXb3JrZXJcIjoyOCxcIi4uL3V0ZjhcIjozMSxcIi4uL3V0aWxzXCI6MzJ9XSw5OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIHU9ZShcIi4uL2NvbXByZXNzaW9uc1wiKSxuPWUoXCIuL1ppcEZpbGVXb3JrZXJcIik7ci5nZW5lcmF0ZVdvcmtlcj1mdW5jdGlvbihlLG8sdCl7dmFyIGE9bmV3IG4oby5zdHJlYW1GaWxlcyx0LG8ucGxhdGZvcm0sby5lbmNvZGVGaWxlTmFtZSksZj0wO3RyeXtlLmZvckVhY2goZnVuY3Rpb24oZSx0KXtmKys7dmFyIHI9ZnVuY3Rpb24oZSx0KXt2YXIgcj1lfHx0LG49dVtyXTtpZighbil0aHJvdyBuZXcgRXJyb3IocitcIiBpcyBub3QgYSB2YWxpZCBjb21wcmVzc2lvbiBtZXRob2QgIVwiKTtyZXR1cm4gbn0odC5vcHRpb25zLmNvbXByZXNzaW9uLG8uY29tcHJlc3Npb24pLG49dC5vcHRpb25zLmNvbXByZXNzaW9uT3B0aW9uc3x8by5jb21wcmVzc2lvbk9wdGlvbnN8fHt9LGk9dC5kaXIscz10LmRhdGU7dC5fY29tcHJlc3NXb3JrZXIocixuKS53aXRoU3RyZWFtSW5mbyhcImZpbGVcIix7bmFtZTplLGRpcjppLGRhdGU6cyxjb21tZW50OnQuY29tbWVudHx8XCJcIix1bml4UGVybWlzc2lvbnM6dC51bml4UGVybWlzc2lvbnMsZG9zUGVybWlzc2lvbnM6dC5kb3NQZXJtaXNzaW9uc30pLnBpcGUoYSl9KSxhLmVudHJpZXNDb3VudD1mfWNhdGNoKGUpe2EuZXJyb3IoZSl9cmV0dXJuIGF9fSx7XCIuLi9jb21wcmVzc2lvbnNcIjozLFwiLi9aaXBGaWxlV29ya2VyXCI6OH1dLDEwOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbigpe2lmKCEodGhpcyBpbnN0YW5jZW9mIG4pKXJldHVybiBuZXcgbjtpZihhcmd1bWVudHMubGVuZ3RoKXRocm93IG5ldyBFcnJvcihcIlRoZSBjb25zdHJ1Y3RvciB3aXRoIHBhcmFtZXRlcnMgaGFzIGJlZW4gcmVtb3ZlZCBpbiBKU1ppcCAzLjAsIHBsZWFzZSBjaGVjayB0aGUgdXBncmFkZSBndWlkZS5cIik7dGhpcy5maWxlcz17fSx0aGlzLmNvbW1lbnQ9bnVsbCx0aGlzLnJvb3Q9XCJcIix0aGlzLmNsb25lPWZ1bmN0aW9uKCl7dmFyIGU9bmV3IG47Zm9yKHZhciB0IGluIHRoaXMpXCJmdW5jdGlvblwiIT10eXBlb2YgdGhpc1t0XSYmKGVbdF09dGhpc1t0XSk7cmV0dXJuIGV9fShuLnByb3RvdHlwZT1lKFwiLi9vYmplY3RcIikpLmxvYWRBc3luYz1lKFwiLi9sb2FkXCIpLG4uc3VwcG9ydD1lKFwiLi9zdXBwb3J0XCIpLG4uZGVmYXVsdHM9ZShcIi4vZGVmYXVsdHNcIiksbi52ZXJzaW9uPVwiMy41LjBcIixuLmxvYWRBc3luYz1mdW5jdGlvbihlLHQpe3JldHVybihuZXcgbikubG9hZEFzeW5jKGUsdCl9LG4uZXh0ZXJuYWw9ZShcIi4vZXh0ZXJuYWxcIiksdC5leHBvcnRzPW59LHtcIi4vZGVmYXVsdHNcIjo1LFwiLi9leHRlcm5hbFwiOjYsXCIuL2xvYWRcIjoxMSxcIi4vb2JqZWN0XCI6MTUsXCIuL3N1cHBvcnRcIjozMH1dLDExOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIi4vdXRpbHNcIiksaT1lKFwiLi9leHRlcm5hbFwiKSxhPWUoXCIuL3V0ZjhcIiksZj1lKFwiLi96aXBFbnRyaWVzXCIpLHM9ZShcIi4vc3RyZWFtL0NyYzMyUHJvYmVcIiksdT1lKFwiLi9ub2RlanNVdGlsc1wiKTtmdW5jdGlvbiBkKG4pe3JldHVybiBuZXcgaS5Qcm9taXNlKGZ1bmN0aW9uKGUsdCl7dmFyIHI9bi5kZWNvbXByZXNzZWQuZ2V0Q29udGVudFdvcmtlcigpLnBpcGUobmV3IHMpO3Iub24oXCJlcnJvclwiLGZ1bmN0aW9uKGUpe3QoZSl9KS5vbihcImVuZFwiLGZ1bmN0aW9uKCl7ci5zdHJlYW1JbmZvLmNyYzMyIT09bi5kZWNvbXByZXNzZWQuY3JjMzI/dChuZXcgRXJyb3IoXCJDb3JydXB0ZWQgemlwIDogQ1JDMzIgbWlzbWF0Y2hcIikpOmUoKX0pLnJlc3VtZSgpfSl9dC5leHBvcnRzPWZ1bmN0aW9uKGUscyl7dmFyIG89dGhpcztyZXR1cm4gcz1uLmV4dGVuZChzfHx7fSx7YmFzZTY0OiExLGNoZWNrQ1JDMzI6ITEsb3B0aW1pemVkQmluYXJ5U3RyaW5nOiExLGNyZWF0ZUZvbGRlcnM6ITEsZGVjb2RlRmlsZU5hbWU6YS51dGY4ZGVjb2RlfSksdS5pc05vZGUmJnUuaXNTdHJlYW0oZSk/aS5Qcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJKU1ppcCBjYW4ndCBhY2NlcHQgYSBzdHJlYW0gd2hlbiBsb2FkaW5nIGEgemlwIGZpbGUuXCIpKTpuLnByZXBhcmVDb250ZW50KFwidGhlIGxvYWRlZCB6aXAgZmlsZVwiLGUsITAscy5vcHRpbWl6ZWRCaW5hcnlTdHJpbmcscy5iYXNlNjQpLnRoZW4oZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IGYocyk7cmV0dXJuIHQubG9hZChlKSx0fSkudGhlbihmdW5jdGlvbihlKXt2YXIgdD1baS5Qcm9taXNlLnJlc29sdmUoZSldLHI9ZS5maWxlcztpZihzLmNoZWNrQ1JDMzIpZm9yKHZhciBuPTA7bjxyLmxlbmd0aDtuKyspdC5wdXNoKGQocltuXSkpO3JldHVybiBpLlByb21pc2UuYWxsKHQpfSkudGhlbihmdW5jdGlvbihlKXtmb3IodmFyIHQ9ZS5zaGlmdCgpLHI9dC5maWxlcyxuPTA7bjxyLmxlbmd0aDtuKyspe3ZhciBpPXJbbl07by5maWxlKGkuZmlsZU5hbWVTdHIsaS5kZWNvbXByZXNzZWQse2JpbmFyeTohMCxvcHRpbWl6ZWRCaW5hcnlTdHJpbmc6ITAsZGF0ZTppLmRhdGUsZGlyOmkuZGlyLGNvbW1lbnQ6aS5maWxlQ29tbWVudFN0ci5sZW5ndGg/aS5maWxlQ29tbWVudFN0cjpudWxsLHVuaXhQZXJtaXNzaW9uczppLnVuaXhQZXJtaXNzaW9ucyxkb3NQZXJtaXNzaW9uczppLmRvc1Blcm1pc3Npb25zLGNyZWF0ZUZvbGRlcnM6cy5jcmVhdGVGb2xkZXJzfSl9cmV0dXJuIHQuemlwQ29tbWVudC5sZW5ndGgmJihvLmNvbW1lbnQ9dC56aXBDb21tZW50KSxvfSl9fSx7XCIuL2V4dGVybmFsXCI6NixcIi4vbm9kZWpzVXRpbHNcIjoxNCxcIi4vc3RyZWFtL0NyYzMyUHJvYmVcIjoyNSxcIi4vdXRmOFwiOjMxLFwiLi91dGlsc1wiOjMyLFwiLi96aXBFbnRyaWVzXCI6MzN9XSwxMjpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCIuLi91dGlsc1wiKSxpPWUoXCIuLi9zdHJlYW0vR2VuZXJpY1dvcmtlclwiKTtmdW5jdGlvbiBzKGUsdCl7aS5jYWxsKHRoaXMsXCJOb2RlanMgc3RyZWFtIGlucHV0IGFkYXB0ZXIgZm9yIFwiK2UpLHRoaXMuX3Vwc3RyZWFtRW5kZWQ9ITEsdGhpcy5fYmluZFN0cmVhbSh0KX1uLmluaGVyaXRzKHMsaSkscy5wcm90b3R5cGUuX2JpbmRTdHJlYW09ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpczsodGhpcy5fc3RyZWFtPWUpLnBhdXNlKCksZS5vbihcImRhdGFcIixmdW5jdGlvbihlKXt0LnB1c2goe2RhdGE6ZSxtZXRhOntwZXJjZW50OjB9fSl9KS5vbihcImVycm9yXCIsZnVuY3Rpb24oZSl7dC5pc1BhdXNlZD90aGlzLmdlbmVyYXRlZEVycm9yPWU6dC5lcnJvcihlKX0pLm9uKFwiZW5kXCIsZnVuY3Rpb24oKXt0LmlzUGF1c2VkP3QuX3Vwc3RyZWFtRW5kZWQ9ITA6dC5lbmQoKX0pfSxzLnByb3RvdHlwZS5wYXVzZT1mdW5jdGlvbigpe3JldHVybiEhaS5wcm90b3R5cGUucGF1c2UuY2FsbCh0aGlzKSYmKHRoaXMuX3N0cmVhbS5wYXVzZSgpLCEwKX0scy5wcm90b3R5cGUucmVzdW1lPWZ1bmN0aW9uKCl7cmV0dXJuISFpLnByb3RvdHlwZS5yZXN1bWUuY2FsbCh0aGlzKSYmKHRoaXMuX3Vwc3RyZWFtRW5kZWQ/dGhpcy5lbmQoKTp0aGlzLl9zdHJlYW0ucmVzdW1lKCksITApfSx0LmV4cG9ydHM9c30se1wiLi4vc3RyZWFtL0dlbmVyaWNXb3JrZXJcIjoyOCxcIi4uL3V0aWxzXCI6MzJ9XSwxMzpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBpPWUoXCJyZWFkYWJsZS1zdHJlYW1cIikuUmVhZGFibGU7ZnVuY3Rpb24gbihlLHQscil7aS5jYWxsKHRoaXMsdCksdGhpcy5faGVscGVyPWU7dmFyIG49dGhpcztlLm9uKFwiZGF0YVwiLGZ1bmN0aW9uKGUsdCl7bi5wdXNoKGUpfHxuLl9oZWxwZXIucGF1c2UoKSxyJiZyKHQpfSkub24oXCJlcnJvclwiLGZ1bmN0aW9uKGUpe24uZW1pdChcImVycm9yXCIsZSl9KS5vbihcImVuZFwiLGZ1bmN0aW9uKCl7bi5wdXNoKG51bGwpfSl9ZShcIi4uL3V0aWxzXCIpLmluaGVyaXRzKG4saSksbi5wcm90b3R5cGUuX3JlYWQ9ZnVuY3Rpb24oKXt0aGlzLl9oZWxwZXIucmVzdW1lKCl9LHQuZXhwb3J0cz1ufSx7XCIuLi91dGlsc1wiOjMyLFwicmVhZGFibGUtc3RyZWFtXCI6MTZ9XSwxNDpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3QuZXhwb3J0cz17aXNOb2RlOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBCdWZmZXIsbmV3QnVmZmVyRnJvbTpmdW5jdGlvbihlLHQpe2lmKEJ1ZmZlci5mcm9tJiZCdWZmZXIuZnJvbSE9PVVpbnQ4QXJyYXkuZnJvbSlyZXR1cm4gQnVmZmVyLmZyb20oZSx0KTtpZihcIm51bWJlclwiPT10eXBlb2YgZSl0aHJvdyBuZXcgRXJyb3IoJ1RoZSBcImRhdGFcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlcicpO3JldHVybiBuZXcgQnVmZmVyKGUsdCl9LGFsbG9jQnVmZmVyOmZ1bmN0aW9uKGUpe2lmKEJ1ZmZlci5hbGxvYylyZXR1cm4gQnVmZmVyLmFsbG9jKGUpO3ZhciB0PW5ldyBCdWZmZXIoZSk7cmV0dXJuIHQuZmlsbCgwKSx0fSxpc0J1ZmZlcjpmdW5jdGlvbihlKXtyZXR1cm4gQnVmZmVyLmlzQnVmZmVyKGUpfSxpc1N0cmVhbTpmdW5jdGlvbihlKXtyZXR1cm4gZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgZS5vbiYmXCJmdW5jdGlvblwiPT10eXBlb2YgZS5wYXVzZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgZS5yZXN1bWV9fX0se31dLDE1OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcyhlLHQscil7dmFyIG4saT1kLmdldFR5cGVPZih0KSxzPWQuZXh0ZW5kKHJ8fHt9LGwpO3MuZGF0ZT1zLmRhdGV8fG5ldyBEYXRlLG51bGwhPT1zLmNvbXByZXNzaW9uJiYocy5jb21wcmVzc2lvbj1zLmNvbXByZXNzaW9uLnRvVXBwZXJDYXNlKCkpLFwic3RyaW5nXCI9PXR5cGVvZiBzLnVuaXhQZXJtaXNzaW9ucyYmKHMudW5peFBlcm1pc3Npb25zPXBhcnNlSW50KHMudW5peFBlcm1pc3Npb25zLDgpKSxzLnVuaXhQZXJtaXNzaW9ucyYmMTYzODQmcy51bml4UGVybWlzc2lvbnMmJihzLmRpcj0hMCkscy5kb3NQZXJtaXNzaW9ucyYmMTYmcy5kb3NQZXJtaXNzaW9ucyYmKHMuZGlyPSEwKSxzLmRpciYmKGU9dShlKSkscy5jcmVhdGVGb2xkZXJzJiYobj1mdW5jdGlvbihlKXtcIi9cIj09PWUuc2xpY2UoLTEpJiYoZT1lLnN1YnN0cmluZygwLGUubGVuZ3RoLTEpKTt2YXIgdD1lLmxhc3RJbmRleE9mKFwiL1wiKTtyZXR1cm4gMDx0P2Uuc3Vic3RyaW5nKDAsdCk6XCJcIn0oZSkpJiZ3LmNhbGwodGhpcyxuLCEwKTt2YXIgbyxhPVwic3RyaW5nXCI9PT1pJiYhMT09PXMuYmluYXJ5JiYhMT09PXMuYmFzZTY0O3ImJnZvaWQgMCE9PXIuYmluYXJ5fHwocy5iaW5hcnk9IWEpLCh0IGluc3RhbmNlb2YgYyYmMD09PXQudW5jb21wcmVzc2VkU2l6ZXx8cy5kaXJ8fCF0fHwwPT09dC5sZW5ndGgpJiYocy5iYXNlNjQ9ITEscy5iaW5hcnk9ITAsdD1cIlwiLHMuY29tcHJlc3Npb249XCJTVE9SRVwiLGk9XCJzdHJpbmdcIiksbz10IGluc3RhbmNlb2YgY3x8dCBpbnN0YW5jZW9mIGg/dDptLmlzTm9kZSYmbS5pc1N0cmVhbSh0KT9uZXcgXyhlLHQpOmQucHJlcGFyZUNvbnRlbnQoZSx0LHMuYmluYXJ5LHMub3B0aW1pemVkQmluYXJ5U3RyaW5nLHMuYmFzZTY0KTt2YXIgZj1uZXcgcChlLG8scyk7dGhpcy5maWxlc1tlXT1mfWZ1bmN0aW9uIHUoZSl7cmV0dXJuXCIvXCIhPT1lLnNsaWNlKC0xKSYmKGUrPVwiL1wiKSxlfXZhciBpPWUoXCIuL3V0ZjhcIiksZD1lKFwiLi91dGlsc1wiKSxoPWUoXCIuL3N0cmVhbS9HZW5lcmljV29ya2VyXCIpLG89ZShcIi4vc3RyZWFtL1N0cmVhbUhlbHBlclwiKSxsPWUoXCIuL2RlZmF1bHRzXCIpLGM9ZShcIi4vY29tcHJlc3NlZE9iamVjdFwiKSxwPWUoXCIuL3ppcE9iamVjdFwiKSxhPWUoXCIuL2dlbmVyYXRlXCIpLG09ZShcIi4vbm9kZWpzVXRpbHNcIiksXz1lKFwiLi9ub2RlanMvTm9kZWpzU3RyZWFtSW5wdXRBZGFwdGVyXCIpLHc9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdD12b2lkIDAhPT10P3Q6bC5jcmVhdGVGb2xkZXJzLGU9dShlKSx0aGlzLmZpbGVzW2VdfHxzLmNhbGwodGhpcyxlLG51bGwse2RpcjohMCxjcmVhdGVGb2xkZXJzOnR9KSx0aGlzLmZpbGVzW2VdfTtmdW5jdGlvbiBmKGUpe3JldHVyblwiW29iamVjdCBSZWdFeHBdXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSl9dmFyIG49e2xvYWQ6ZnVuY3Rpb24oKXt0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIG1ldGhvZCBoYXMgYmVlbiByZW1vdmVkIGluIEpTWmlwIDMuMCwgcGxlYXNlIGNoZWNrIHRoZSB1cGdyYWRlIGd1aWRlLlwiKX0sZm9yRWFjaDpmdW5jdGlvbihlKXt2YXIgdCxyLG47Zm9yKHQgaW4gdGhpcy5maWxlcyl0aGlzLmZpbGVzLmhhc093blByb3BlcnR5KHQpJiYobj10aGlzLmZpbGVzW3RdLChyPXQuc2xpY2UodGhpcy5yb290Lmxlbmd0aCx0Lmxlbmd0aCkpJiZ0LnNsaWNlKDAsdGhpcy5yb290Lmxlbmd0aCk9PT10aGlzLnJvb3QmJmUocixuKSl9LGZpbHRlcjpmdW5jdGlvbihyKXt2YXIgbj1bXTtyZXR1cm4gdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKGUsdCl7cihlLHQpJiZuLnB1c2godCl9KSxufSxmaWxlOmZ1bmN0aW9uKGUsdCxyKXtpZigxIT09YXJndW1lbnRzLmxlbmd0aClyZXR1cm4gZT10aGlzLnJvb3QrZSxzLmNhbGwodGhpcyxlLHQsciksdGhpcztpZihmKGUpKXt2YXIgbj1lO3JldHVybiB0aGlzLmZpbHRlcihmdW5jdGlvbihlLHQpe3JldHVybiF0LmRpciYmbi50ZXN0KGUpfSl9dmFyIGk9dGhpcy5maWxlc1t0aGlzLnJvb3QrZV07cmV0dXJuIGkmJiFpLmRpcj9pOm51bGx9LGZvbGRlcjpmdW5jdGlvbihyKXtpZighcilyZXR1cm4gdGhpcztpZihmKHIpKXJldHVybiB0aGlzLmZpbHRlcihmdW5jdGlvbihlLHQpe3JldHVybiB0LmRpciYmci50ZXN0KGUpfSk7dmFyIGU9dGhpcy5yb290K3IsdD13LmNhbGwodGhpcyxlKSxuPXRoaXMuY2xvbmUoKTtyZXR1cm4gbi5yb290PXQubmFtZSxufSxyZW1vdmU6ZnVuY3Rpb24ocil7cj10aGlzLnJvb3Qrcjt2YXIgZT10aGlzLmZpbGVzW3JdO2lmKGV8fChcIi9cIiE9PXIuc2xpY2UoLTEpJiYocis9XCIvXCIpLGU9dGhpcy5maWxlc1tyXSksZSYmIWUuZGlyKWRlbGV0ZSB0aGlzLmZpbGVzW3JdO2Vsc2UgZm9yKHZhciB0PXRoaXMuZmlsdGVyKGZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQubmFtZS5zbGljZSgwLHIubGVuZ3RoKT09PXJ9KSxuPTA7bjx0Lmxlbmd0aDtuKyspZGVsZXRlIHRoaXMuZmlsZXNbdFtuXS5uYW1lXTtyZXR1cm4gdGhpc30sZ2VuZXJhdGU6ZnVuY3Rpb24oZSl7dGhyb3cgbmV3IEVycm9yKFwiVGhpcyBtZXRob2QgaGFzIGJlZW4gcmVtb3ZlZCBpbiBKU1ppcCAzLjAsIHBsZWFzZSBjaGVjayB0aGUgdXBncmFkZSBndWlkZS5cIil9LGdlbmVyYXRlSW50ZXJuYWxTdHJlYW06ZnVuY3Rpb24oZSl7dmFyIHQscj17fTt0cnl7aWYoKHI9ZC5leHRlbmQoZXx8e30se3N0cmVhbUZpbGVzOiExLGNvbXByZXNzaW9uOlwiU1RPUkVcIixjb21wcmVzc2lvbk9wdGlvbnM6bnVsbCx0eXBlOlwiXCIscGxhdGZvcm06XCJET1NcIixjb21tZW50Om51bGwsbWltZVR5cGU6XCJhcHBsaWNhdGlvbi96aXBcIixlbmNvZGVGaWxlTmFtZTppLnV0ZjhlbmNvZGV9KSkudHlwZT1yLnR5cGUudG9Mb3dlckNhc2UoKSxyLmNvbXByZXNzaW9uPXIuY29tcHJlc3Npb24udG9VcHBlckNhc2UoKSxcImJpbmFyeXN0cmluZ1wiPT09ci50eXBlJiYoci50eXBlPVwic3RyaW5nXCIpLCFyLnR5cGUpdGhyb3cgbmV3IEVycm9yKFwiTm8gb3V0cHV0IHR5cGUgc3BlY2lmaWVkLlwiKTtkLmNoZWNrU3VwcG9ydChyLnR5cGUpLFwiZGFyd2luXCIhPT1yLnBsYXRmb3JtJiZcImZyZWVic2RcIiE9PXIucGxhdGZvcm0mJlwibGludXhcIiE9PXIucGxhdGZvcm0mJlwic3Vub3NcIiE9PXIucGxhdGZvcm18fChyLnBsYXRmb3JtPVwiVU5JWFwiKSxcIndpbjMyXCI9PT1yLnBsYXRmb3JtJiYoci5wbGF0Zm9ybT1cIkRPU1wiKTt2YXIgbj1yLmNvbW1lbnR8fHRoaXMuY29tbWVudHx8XCJcIjt0PWEuZ2VuZXJhdGVXb3JrZXIodGhpcyxyLG4pfWNhdGNoKGUpeyh0PW5ldyBoKFwiZXJyb3JcIikpLmVycm9yKGUpfXJldHVybiBuZXcgbyh0LHIudHlwZXx8XCJzdHJpbmdcIixyLm1pbWVUeXBlKX0sZ2VuZXJhdGVBc3luYzpmdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLmdlbmVyYXRlSW50ZXJuYWxTdHJlYW0oZSkuYWNjdW11bGF0ZSh0KX0sZ2VuZXJhdGVOb2RlU3RyZWFtOmZ1bmN0aW9uKGUsdCl7cmV0dXJuKGU9ZXx8e30pLnR5cGV8fChlLnR5cGU9XCJub2RlYnVmZmVyXCIpLHRoaXMuZ2VuZXJhdGVJbnRlcm5hbFN0cmVhbShlKS50b05vZGVqc1N0cmVhbSh0KX19O3QuZXhwb3J0cz1ufSx7XCIuL2NvbXByZXNzZWRPYmplY3RcIjoyLFwiLi9kZWZhdWx0c1wiOjUsXCIuL2dlbmVyYXRlXCI6OSxcIi4vbm9kZWpzL05vZGVqc1N0cmVhbUlucHV0QWRhcHRlclwiOjEyLFwiLi9ub2RlanNVdGlsc1wiOjE0LFwiLi9zdHJlYW0vR2VuZXJpY1dvcmtlclwiOjI4LFwiLi9zdHJlYW0vU3RyZWFtSGVscGVyXCI6MjksXCIuL3V0ZjhcIjozMSxcIi4vdXRpbHNcIjozMixcIi4vemlwT2JqZWN0XCI6MzV9XSwxNjpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz1lKFwic3RyZWFtXCIpfSx7c3RyZWFtOnZvaWQgMH1dLDE3OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIi4vRGF0YVJlYWRlclwiKTtmdW5jdGlvbiBpKGUpe24uY2FsbCh0aGlzLGUpO2Zvcih2YXIgdD0wO3Q8dGhpcy5kYXRhLmxlbmd0aDt0KyspZVt0XT0yNTUmZVt0XX1lKFwiLi4vdXRpbHNcIikuaW5oZXJpdHMoaSxuKSxpLnByb3RvdHlwZS5ieXRlQXQ9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZGF0YVt0aGlzLnplcm8rZV19LGkucHJvdG90eXBlLmxhc3RJbmRleE9mU2lnbmF0dXJlPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1lLmNoYXJDb2RlQXQoMCkscj1lLmNoYXJDb2RlQXQoMSksbj1lLmNoYXJDb2RlQXQoMiksaT1lLmNoYXJDb2RlQXQoMykscz10aGlzLmxlbmd0aC00OzA8PXM7LS1zKWlmKHRoaXMuZGF0YVtzXT09PXQmJnRoaXMuZGF0YVtzKzFdPT09ciYmdGhpcy5kYXRhW3MrMl09PT1uJiZ0aGlzLmRhdGFbcyszXT09PWkpcmV0dXJuIHMtdGhpcy56ZXJvO3JldHVybi0xfSxpLnByb3RvdHlwZS5yZWFkQW5kQ2hlY2tTaWduYXR1cmU9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5jaGFyQ29kZUF0KDApLHI9ZS5jaGFyQ29kZUF0KDEpLG49ZS5jaGFyQ29kZUF0KDIpLGk9ZS5jaGFyQ29kZUF0KDMpLHM9dGhpcy5yZWFkRGF0YSg0KTtyZXR1cm4gdD09PXNbMF0mJnI9PT1zWzFdJiZuPT09c1syXSYmaT09PXNbM119LGkucHJvdG90eXBlLnJlYWREYXRhPWZ1bmN0aW9uKGUpe2lmKHRoaXMuY2hlY2tPZmZzZXQoZSksMD09PWUpcmV0dXJuW107dmFyIHQ9dGhpcy5kYXRhLnNsaWNlKHRoaXMuemVybyt0aGlzLmluZGV4LHRoaXMuemVybyt0aGlzLmluZGV4K2UpO3JldHVybiB0aGlzLmluZGV4Kz1lLHR9LHQuZXhwb3J0cz1pfSx7XCIuLi91dGlsc1wiOjMyLFwiLi9EYXRhUmVhZGVyXCI6MTh9XSwxODpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCIuLi91dGlsc1wiKTtmdW5jdGlvbiBpKGUpe3RoaXMuZGF0YT1lLHRoaXMubGVuZ3RoPWUubGVuZ3RoLHRoaXMuaW5kZXg9MCx0aGlzLnplcm89MH1pLnByb3RvdHlwZT17Y2hlY2tPZmZzZXQ6ZnVuY3Rpb24oZSl7dGhpcy5jaGVja0luZGV4KHRoaXMuaW5kZXgrZSl9LGNoZWNrSW5kZXg6ZnVuY3Rpb24oZSl7aWYodGhpcy5sZW5ndGg8dGhpcy56ZXJvK2V8fGU8MCl0aHJvdyBuZXcgRXJyb3IoXCJFbmQgb2YgZGF0YSByZWFjaGVkIChkYXRhIGxlbmd0aCA9IFwiK3RoaXMubGVuZ3RoK1wiLCBhc2tlZCBpbmRleCA9IFwiK2UrXCIpLiBDb3JydXB0ZWQgemlwID9cIil9LHNldEluZGV4OmZ1bmN0aW9uKGUpe3RoaXMuY2hlY2tJbmRleChlKSx0aGlzLmluZGV4PWV9LHNraXA6ZnVuY3Rpb24oZSl7dGhpcy5zZXRJbmRleCh0aGlzLmluZGV4K2UpfSxieXRlQXQ6ZnVuY3Rpb24oZSl7fSxyZWFkSW50OmZ1bmN0aW9uKGUpe3ZhciB0LHI9MDtmb3IodGhpcy5jaGVja09mZnNldChlKSx0PXRoaXMuaW5kZXgrZS0xO3Q+PXRoaXMuaW5kZXg7dC0tKXI9KHI8PDgpK3RoaXMuYnl0ZUF0KHQpO3JldHVybiB0aGlzLmluZGV4Kz1lLHJ9LHJlYWRTdHJpbmc6ZnVuY3Rpb24oZSl7cmV0dXJuIG4udHJhbnNmb3JtVG8oXCJzdHJpbmdcIix0aGlzLnJlYWREYXRhKGUpKX0scmVhZERhdGE6ZnVuY3Rpb24oZSl7fSxsYXN0SW5kZXhPZlNpZ25hdHVyZTpmdW5jdGlvbihlKXt9LHJlYWRBbmRDaGVja1NpZ25hdHVyZTpmdW5jdGlvbihlKXt9LHJlYWREYXRlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5yZWFkSW50KDQpO3JldHVybiBuZXcgRGF0ZShEYXRlLlVUQygxOTgwKyhlPj4yNSYxMjcpLChlPj4yMSYxNSktMSxlPj4xNiYzMSxlPj4xMSYzMSxlPj41JjYzLCgzMSZlKTw8MSkpfX0sdC5leHBvcnRzPWl9LHtcIi4uL3V0aWxzXCI6MzJ9XSwxOTpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCIuL1VpbnQ4QXJyYXlSZWFkZXJcIik7ZnVuY3Rpb24gaShlKXtuLmNhbGwodGhpcyxlKX1lKFwiLi4vdXRpbHNcIikuaW5oZXJpdHMoaSxuKSxpLnByb3RvdHlwZS5yZWFkRGF0YT1mdW5jdGlvbihlKXt0aGlzLmNoZWNrT2Zmc2V0KGUpO3ZhciB0PXRoaXMuZGF0YS5zbGljZSh0aGlzLnplcm8rdGhpcy5pbmRleCx0aGlzLnplcm8rdGhpcy5pbmRleCtlKTtyZXR1cm4gdGhpcy5pbmRleCs9ZSx0fSx0LmV4cG9ydHM9aX0se1wiLi4vdXRpbHNcIjozMixcIi4vVWludDhBcnJheVJlYWRlclwiOjIxfV0sMjA6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiLi9EYXRhUmVhZGVyXCIpO2Z1bmN0aW9uIGkoZSl7bi5jYWxsKHRoaXMsZSl9ZShcIi4uL3V0aWxzXCIpLmluaGVyaXRzKGksbiksaS5wcm90b3R5cGUuYnl0ZUF0PWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmRhdGEuY2hhckNvZGVBdCh0aGlzLnplcm8rZSl9LGkucHJvdG90eXBlLmxhc3RJbmRleE9mU2lnbmF0dXJlPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmRhdGEubGFzdEluZGV4T2YoZSktdGhpcy56ZXJvfSxpLnByb3RvdHlwZS5yZWFkQW5kQ2hlY2tTaWduYXR1cmU9ZnVuY3Rpb24oZSl7cmV0dXJuIGU9PT10aGlzLnJlYWREYXRhKDQpfSxpLnByb3RvdHlwZS5yZWFkRGF0YT1mdW5jdGlvbihlKXt0aGlzLmNoZWNrT2Zmc2V0KGUpO3ZhciB0PXRoaXMuZGF0YS5zbGljZSh0aGlzLnplcm8rdGhpcy5pbmRleCx0aGlzLnplcm8rdGhpcy5pbmRleCtlKTtyZXR1cm4gdGhpcy5pbmRleCs9ZSx0fSx0LmV4cG9ydHM9aX0se1wiLi4vdXRpbHNcIjozMixcIi4vRGF0YVJlYWRlclwiOjE4fV0sMjE6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiLi9BcnJheVJlYWRlclwiKTtmdW5jdGlvbiBpKGUpe24uY2FsbCh0aGlzLGUpfWUoXCIuLi91dGlsc1wiKS5pbmhlcml0cyhpLG4pLGkucHJvdG90eXBlLnJlYWREYXRhPWZ1bmN0aW9uKGUpe2lmKHRoaXMuY2hlY2tPZmZzZXQoZSksMD09PWUpcmV0dXJuIG5ldyBVaW50OEFycmF5KDApO3ZhciB0PXRoaXMuZGF0YS5zdWJhcnJheSh0aGlzLnplcm8rdGhpcy5pbmRleCx0aGlzLnplcm8rdGhpcy5pbmRleCtlKTtyZXR1cm4gdGhpcy5pbmRleCs9ZSx0fSx0LmV4cG9ydHM9aX0se1wiLi4vdXRpbHNcIjozMixcIi4vQXJyYXlSZWFkZXJcIjoxN31dLDIyOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIi4uL3V0aWxzXCIpLGk9ZShcIi4uL3N1cHBvcnRcIikscz1lKFwiLi9BcnJheVJlYWRlclwiKSxvPWUoXCIuL1N0cmluZ1JlYWRlclwiKSxhPWUoXCIuL05vZGVCdWZmZXJSZWFkZXJcIiksZj1lKFwiLi9VaW50OEFycmF5UmVhZGVyXCIpO3QuZXhwb3J0cz1mdW5jdGlvbihlKXt2YXIgdD1uLmdldFR5cGVPZihlKTtyZXR1cm4gbi5jaGVja1N1cHBvcnQodCksXCJzdHJpbmdcIiE9PXR8fGkudWludDhhcnJheT9cIm5vZGVidWZmZXJcIj09PXQ/bmV3IGEoZSk6aS51aW50OGFycmF5P25ldyBmKG4udHJhbnNmb3JtVG8oXCJ1aW50OGFycmF5XCIsZSkpOm5ldyBzKG4udHJhbnNmb3JtVG8oXCJhcnJheVwiLGUpKTpuZXcgbyhlKX19LHtcIi4uL3N1cHBvcnRcIjozMCxcIi4uL3V0aWxzXCI6MzIsXCIuL0FycmF5UmVhZGVyXCI6MTcsXCIuL05vZGVCdWZmZXJSZWFkZXJcIjoxOSxcIi4vU3RyaW5nUmVhZGVyXCI6MjAsXCIuL1VpbnQ4QXJyYXlSZWFkZXJcIjoyMX1dLDIzOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7ci5MT0NBTF9GSUxFX0hFQURFUj1cIlBLXHUwMDAzXHUwMDA0XCIsci5DRU5UUkFMX0ZJTEVfSEVBREVSPVwiUEtcdTAwMDFcdTAwMDJcIixyLkNFTlRSQUxfRElSRUNUT1JZX0VORD1cIlBLXHUwMDA1XHUwMDA2XCIsci5aSVA2NF9DRU5UUkFMX0RJUkVDVE9SWV9MT0NBVE9SPVwiUEtcdTAwMDZcdTAwMDdcIixyLlpJUDY0X0NFTlRSQUxfRElSRUNUT1JZX0VORD1cIlBLXHUwMDA2XHUwMDA2XCIsci5EQVRBX0RFU0NSSVBUT1I9XCJQS1x1MDAwN1xcYlwifSx7fV0sMjQ6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiLi9HZW5lcmljV29ya2VyXCIpLGk9ZShcIi4uL3V0aWxzXCIpO2Z1bmN0aW9uIHMoZSl7bi5jYWxsKHRoaXMsXCJDb252ZXJ0V29ya2VyIHRvIFwiK2UpLHRoaXMuZGVzdFR5cGU9ZX1pLmluaGVyaXRzKHMsbikscy5wcm90b3R5cGUucHJvY2Vzc0NodW5rPWZ1bmN0aW9uKGUpe3RoaXMucHVzaCh7ZGF0YTppLnRyYW5zZm9ybVRvKHRoaXMuZGVzdFR5cGUsZS5kYXRhKSxtZXRhOmUubWV0YX0pfSx0LmV4cG9ydHM9c30se1wiLi4vdXRpbHNcIjozMixcIi4vR2VuZXJpY1dvcmtlclwiOjI4fV0sMjU6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiLi9HZW5lcmljV29ya2VyXCIpLGk9ZShcIi4uL2NyYzMyXCIpO2Z1bmN0aW9uIHMoKXtuLmNhbGwodGhpcyxcIkNyYzMyUHJvYmVcIiksdGhpcy53aXRoU3RyZWFtSW5mbyhcImNyYzMyXCIsMCl9ZShcIi4uL3V0aWxzXCIpLmluaGVyaXRzKHMsbikscy5wcm90b3R5cGUucHJvY2Vzc0NodW5rPWZ1bmN0aW9uKGUpe3RoaXMuc3RyZWFtSW5mby5jcmMzMj1pKGUuZGF0YSx0aGlzLnN0cmVhbUluZm8uY3JjMzJ8fDApLHRoaXMucHVzaChlKX0sdC5leHBvcnRzPXN9LHtcIi4uL2NyYzMyXCI6NCxcIi4uL3V0aWxzXCI6MzIsXCIuL0dlbmVyaWNXb3JrZXJcIjoyOH1dLDI2OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIi4uL3V0aWxzXCIpLGk9ZShcIi4vR2VuZXJpY1dvcmtlclwiKTtmdW5jdGlvbiBzKGUpe2kuY2FsbCh0aGlzLFwiRGF0YUxlbmd0aFByb2JlIGZvciBcIitlKSx0aGlzLnByb3BOYW1lPWUsdGhpcy53aXRoU3RyZWFtSW5mbyhlLDApfW4uaW5oZXJpdHMocyxpKSxzLnByb3RvdHlwZS5wcm9jZXNzQ2h1bms9ZnVuY3Rpb24oZSl7aWYoZSl7dmFyIHQ9dGhpcy5zdHJlYW1JbmZvW3RoaXMucHJvcE5hbWVdfHwwO3RoaXMuc3RyZWFtSW5mb1t0aGlzLnByb3BOYW1lXT10K2UuZGF0YS5sZW5ndGh9aS5wcm90b3R5cGUucHJvY2Vzc0NodW5rLmNhbGwodGhpcyxlKX0sdC5leHBvcnRzPXN9LHtcIi4uL3V0aWxzXCI6MzIsXCIuL0dlbmVyaWNXb3JrZXJcIjoyOH1dLDI3OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIi4uL3V0aWxzXCIpLGk9ZShcIi4vR2VuZXJpY1dvcmtlclwiKTtmdW5jdGlvbiBzKGUpe2kuY2FsbCh0aGlzLFwiRGF0YVdvcmtlclwiKTt2YXIgdD10aGlzO3RoaXMuZGF0YUlzUmVhZHk9ITEsdGhpcy5pbmRleD0wLHRoaXMubWF4PTAsdGhpcy5kYXRhPW51bGwsdGhpcy50eXBlPVwiXCIsdGhpcy5fdGlja1NjaGVkdWxlZD0hMSxlLnRoZW4oZnVuY3Rpb24oZSl7dC5kYXRhSXNSZWFkeT0hMCx0LmRhdGE9ZSx0Lm1heD1lJiZlLmxlbmd0aHx8MCx0LnR5cGU9bi5nZXRUeXBlT2YoZSksdC5pc1BhdXNlZHx8dC5fdGlja0FuZFJlcGVhdCgpfSxmdW5jdGlvbihlKXt0LmVycm9yKGUpfSl9bi5pbmhlcml0cyhzLGkpLHMucHJvdG90eXBlLmNsZWFuVXA9ZnVuY3Rpb24oKXtpLnByb3RvdHlwZS5jbGVhblVwLmNhbGwodGhpcyksdGhpcy5kYXRhPW51bGx9LHMucHJvdG90eXBlLnJlc3VtZT1mdW5jdGlvbigpe3JldHVybiEhaS5wcm90b3R5cGUucmVzdW1lLmNhbGwodGhpcykmJighdGhpcy5fdGlja1NjaGVkdWxlZCYmdGhpcy5kYXRhSXNSZWFkeSYmKHRoaXMuX3RpY2tTY2hlZHVsZWQ9ITAsbi5kZWxheSh0aGlzLl90aWNrQW5kUmVwZWF0LFtdLHRoaXMpKSwhMCl9LHMucHJvdG90eXBlLl90aWNrQW5kUmVwZWF0PWZ1bmN0aW9uKCl7dGhpcy5fdGlja1NjaGVkdWxlZD0hMSx0aGlzLmlzUGF1c2VkfHx0aGlzLmlzRmluaXNoZWR8fCh0aGlzLl90aWNrKCksdGhpcy5pc0ZpbmlzaGVkfHwobi5kZWxheSh0aGlzLl90aWNrQW5kUmVwZWF0LFtdLHRoaXMpLHRoaXMuX3RpY2tTY2hlZHVsZWQ9ITApKX0scy5wcm90b3R5cGUuX3RpY2s9ZnVuY3Rpb24oKXtpZih0aGlzLmlzUGF1c2VkfHx0aGlzLmlzRmluaXNoZWQpcmV0dXJuITE7dmFyIGU9bnVsbCx0PU1hdGgubWluKHRoaXMubWF4LHRoaXMuaW5kZXgrMTYzODQpO2lmKHRoaXMuaW5kZXg+PXRoaXMubWF4KXJldHVybiB0aGlzLmVuZCgpO3N3aXRjaCh0aGlzLnR5cGUpe2Nhc2VcInN0cmluZ1wiOmU9dGhpcy5kYXRhLnN1YnN0cmluZyh0aGlzLmluZGV4LHQpO2JyZWFrO2Nhc2VcInVpbnQ4YXJyYXlcIjplPXRoaXMuZGF0YS5zdWJhcnJheSh0aGlzLmluZGV4LHQpO2JyZWFrO2Nhc2VcImFycmF5XCI6Y2FzZVwibm9kZWJ1ZmZlclwiOmU9dGhpcy5kYXRhLnNsaWNlKHRoaXMuaW5kZXgsdCl9cmV0dXJuIHRoaXMuaW5kZXg9dCx0aGlzLnB1c2goe2RhdGE6ZSxtZXRhOntwZXJjZW50OnRoaXMubWF4P3RoaXMuaW5kZXgvdGhpcy5tYXgqMTAwOjB9fSl9LHQuZXhwb3J0cz1zfSx7XCIuLi91dGlsc1wiOjMyLFwiLi9HZW5lcmljV29ya2VyXCI6Mjh9XSwyODpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIG4oZSl7dGhpcy5uYW1lPWV8fFwiZGVmYXVsdFwiLHRoaXMuc3RyZWFtSW5mbz17fSx0aGlzLmdlbmVyYXRlZEVycm9yPW51bGwsdGhpcy5leHRyYVN0cmVhbUluZm89e30sdGhpcy5pc1BhdXNlZD0hMCx0aGlzLmlzRmluaXNoZWQ9ITEsdGhpcy5pc0xvY2tlZD0hMSx0aGlzLl9saXN0ZW5lcnM9e2RhdGE6W10sZW5kOltdLGVycm9yOltdfSx0aGlzLnByZXZpb3VzPW51bGx9bi5wcm90b3R5cGU9e3B1c2g6ZnVuY3Rpb24oZSl7dGhpcy5lbWl0KFwiZGF0YVwiLGUpfSxlbmQ6ZnVuY3Rpb24oKXtpZih0aGlzLmlzRmluaXNoZWQpcmV0dXJuITE7dGhpcy5mbHVzaCgpO3RyeXt0aGlzLmVtaXQoXCJlbmRcIiksdGhpcy5jbGVhblVwKCksdGhpcy5pc0ZpbmlzaGVkPSEwfWNhdGNoKGUpe3RoaXMuZW1pdChcImVycm9yXCIsZSl9cmV0dXJuITB9LGVycm9yOmZ1bmN0aW9uKGUpe3JldHVybiF0aGlzLmlzRmluaXNoZWQmJih0aGlzLmlzUGF1c2VkP3RoaXMuZ2VuZXJhdGVkRXJyb3I9ZToodGhpcy5pc0ZpbmlzaGVkPSEwLHRoaXMuZW1pdChcImVycm9yXCIsZSksdGhpcy5wcmV2aW91cyYmdGhpcy5wcmV2aW91cy5lcnJvcihlKSx0aGlzLmNsZWFuVXAoKSksITApfSxvbjpmdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLl9saXN0ZW5lcnNbZV0ucHVzaCh0KSx0aGlzfSxjbGVhblVwOmZ1bmN0aW9uKCl7dGhpcy5zdHJlYW1JbmZvPXRoaXMuZ2VuZXJhdGVkRXJyb3I9dGhpcy5leHRyYVN0cmVhbUluZm89bnVsbCx0aGlzLl9saXN0ZW5lcnM9W119LGVtaXQ6ZnVuY3Rpb24oZSx0KXtpZih0aGlzLl9saXN0ZW5lcnNbZV0pZm9yKHZhciByPTA7cjx0aGlzLl9saXN0ZW5lcnNbZV0ubGVuZ3RoO3IrKyl0aGlzLl9saXN0ZW5lcnNbZV1bcl0uY2FsbCh0aGlzLHQpfSxwaXBlOmZ1bmN0aW9uKGUpe3JldHVybiBlLnJlZ2lzdGVyUHJldmlvdXModGhpcyl9LHJlZ2lzdGVyUHJldmlvdXM6ZnVuY3Rpb24oZSl7aWYodGhpcy5pc0xvY2tlZCl0aHJvdyBuZXcgRXJyb3IoXCJUaGUgc3RyZWFtICdcIit0aGlzK1wiJyBoYXMgYWxyZWFkeSBiZWVuIHVzZWQuXCIpO3RoaXMuc3RyZWFtSW5mbz1lLnN0cmVhbUluZm8sdGhpcy5tZXJnZVN0cmVhbUluZm8oKSx0aGlzLnByZXZpb3VzPWU7dmFyIHQ9dGhpcztyZXR1cm4gZS5vbihcImRhdGFcIixmdW5jdGlvbihlKXt0LnByb2Nlc3NDaHVuayhlKX0pLGUub24oXCJlbmRcIixmdW5jdGlvbigpe3QuZW5kKCl9KSxlLm9uKFwiZXJyb3JcIixmdW5jdGlvbihlKXt0LmVycm9yKGUpfSksdGhpc30scGF1c2U6ZnVuY3Rpb24oKXtyZXR1cm4hdGhpcy5pc1BhdXNlZCYmIXRoaXMuaXNGaW5pc2hlZCYmKHRoaXMuaXNQYXVzZWQ9ITAsdGhpcy5wcmV2aW91cyYmdGhpcy5wcmV2aW91cy5wYXVzZSgpLCEwKX0scmVzdW1lOmZ1bmN0aW9uKCl7aWYoIXRoaXMuaXNQYXVzZWR8fHRoaXMuaXNGaW5pc2hlZClyZXR1cm4hMTt2YXIgZT10aGlzLmlzUGF1c2VkPSExO3JldHVybiB0aGlzLmdlbmVyYXRlZEVycm9yJiYodGhpcy5lcnJvcih0aGlzLmdlbmVyYXRlZEVycm9yKSxlPSEwKSx0aGlzLnByZXZpb3VzJiZ0aGlzLnByZXZpb3VzLnJlc3VtZSgpLCFlfSxmbHVzaDpmdW5jdGlvbigpe30scHJvY2Vzc0NodW5rOmZ1bmN0aW9uKGUpe3RoaXMucHVzaChlKX0sd2l0aFN0cmVhbUluZm86ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5leHRyYVN0cmVhbUluZm9bZV09dCx0aGlzLm1lcmdlU3RyZWFtSW5mbygpLHRoaXN9LG1lcmdlU3RyZWFtSW5mbzpmdW5jdGlvbigpe2Zvcih2YXIgZSBpbiB0aGlzLmV4dHJhU3RyZWFtSW5mbyl0aGlzLmV4dHJhU3RyZWFtSW5mby5oYXNPd25Qcm9wZXJ0eShlKSYmKHRoaXMuc3RyZWFtSW5mb1tlXT10aGlzLmV4dHJhU3RyZWFtSW5mb1tlXSl9LGxvY2s6ZnVuY3Rpb24oKXtpZih0aGlzLmlzTG9ja2VkKXRocm93IG5ldyBFcnJvcihcIlRoZSBzdHJlYW0gJ1wiK3RoaXMrXCInIGhhcyBhbHJlYWR5IGJlZW4gdXNlZC5cIik7dGhpcy5pc0xvY2tlZD0hMCx0aGlzLnByZXZpb3VzJiZ0aGlzLnByZXZpb3VzLmxvY2soKX0sdG9TdHJpbmc6ZnVuY3Rpb24oKXt2YXIgZT1cIldvcmtlciBcIit0aGlzLm5hbWU7cmV0dXJuIHRoaXMucHJldmlvdXM/dGhpcy5wcmV2aW91cytcIiAtPiBcIitlOmV9fSx0LmV4cG9ydHM9bn0se31dLDI5OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIHU9ZShcIi4uL3V0aWxzXCIpLGk9ZShcIi4vQ29udmVydFdvcmtlclwiKSxzPWUoXCIuL0dlbmVyaWNXb3JrZXJcIiksZD1lKFwiLi4vYmFzZTY0XCIpLG49ZShcIi4uL3N1cHBvcnRcIiksbz1lKFwiLi4vZXh0ZXJuYWxcIiksYT1udWxsO2lmKG4ubm9kZXN0cmVhbSl0cnl7YT1lKFwiLi4vbm9kZWpzL05vZGVqc1N0cmVhbU91dHB1dEFkYXB0ZXJcIil9Y2F0Y2goZSl7fWZ1bmN0aW9uIGYoZSx0LHIpe3ZhciBuPXQ7c3dpdGNoKHQpe2Nhc2VcImJsb2JcIjpjYXNlXCJhcnJheWJ1ZmZlclwiOm49XCJ1aW50OGFycmF5XCI7YnJlYWs7Y2FzZVwiYmFzZTY0XCI6bj1cInN0cmluZ1wifXRyeXt0aGlzLl9pbnRlcm5hbFR5cGU9bix0aGlzLl9vdXRwdXRUeXBlPXQsdGhpcy5fbWltZVR5cGU9cix1LmNoZWNrU3VwcG9ydChuKSx0aGlzLl93b3JrZXI9ZS5waXBlKG5ldyBpKG4pKSxlLmxvY2soKX1jYXRjaChlKXt0aGlzLl93b3JrZXI9bmV3IHMoXCJlcnJvclwiKSx0aGlzLl93b3JrZXIuZXJyb3IoZSl9fWYucHJvdG90eXBlPXthY2N1bXVsYXRlOmZ1bmN0aW9uKGUpe3JldHVybiBhPXRoaXMsZj1lLG5ldyBvLlByb21pc2UoZnVuY3Rpb24odCxyKXt2YXIgbj1bXSxpPWEuX2ludGVybmFsVHlwZSxzPWEuX291dHB1dFR5cGUsbz1hLl9taW1lVHlwZTthLm9uKFwiZGF0YVwiLGZ1bmN0aW9uKGUsdCl7bi5wdXNoKGUpLGYmJmYodCl9KS5vbihcImVycm9yXCIsZnVuY3Rpb24oZSl7bj1bXSxyKGUpfSkub24oXCJlbmRcIixmdW5jdGlvbigpe3RyeXt2YXIgZT1mdW5jdGlvbihlLHQscil7c3dpdGNoKGUpe2Nhc2VcImJsb2JcIjpyZXR1cm4gdS5uZXdCbG9iKHUudHJhbnNmb3JtVG8oXCJhcnJheWJ1ZmZlclwiLHQpLHIpO2Nhc2VcImJhc2U2NFwiOnJldHVybiBkLmVuY29kZSh0KTtkZWZhdWx0OnJldHVybiB1LnRyYW5zZm9ybVRvKGUsdCl9fShzLGZ1bmN0aW9uKGUsdCl7dmFyIHIsbj0wLGk9bnVsbCxzPTA7Zm9yKHI9MDtyPHQubGVuZ3RoO3IrKylzKz10W3JdLmxlbmd0aDtzd2l0Y2goZSl7Y2FzZVwic3RyaW5nXCI6cmV0dXJuIHQuam9pbihcIlwiKTtjYXNlXCJhcnJheVwiOnJldHVybiBBcnJheS5wcm90b3R5cGUuY29uY2F0LmFwcGx5KFtdLHQpO2Nhc2VcInVpbnQ4YXJyYXlcIjpmb3IoaT1uZXcgVWludDhBcnJheShzKSxyPTA7cjx0Lmxlbmd0aDtyKyspaS5zZXQodFtyXSxuKSxuKz10W3JdLmxlbmd0aDtyZXR1cm4gaTtjYXNlXCJub2RlYnVmZmVyXCI6cmV0dXJuIEJ1ZmZlci5jb25jYXQodCk7ZGVmYXVsdDp0aHJvdyBuZXcgRXJyb3IoXCJjb25jYXQgOiB1bnN1cHBvcnRlZCB0eXBlICdcIitlK1wiJ1wiKX19KGksbiksbyk7dChlKX1jYXRjaChlKXtyKGUpfW49W119KS5yZXN1bWUoKX0pO3ZhciBhLGZ9LG9uOmZ1bmN0aW9uKGUsdCl7dmFyIHI9dGhpcztyZXR1cm5cImRhdGFcIj09PWU/dGhpcy5fd29ya2VyLm9uKGUsZnVuY3Rpb24oZSl7dC5jYWxsKHIsZS5kYXRhLGUubWV0YSl9KTp0aGlzLl93b3JrZXIub24oZSxmdW5jdGlvbigpe3UuZGVsYXkodCxhcmd1bWVudHMscil9KSx0aGlzfSxyZXN1bWU6ZnVuY3Rpb24oKXtyZXR1cm4gdS5kZWxheSh0aGlzLl93b3JrZXIucmVzdW1lLFtdLHRoaXMuX3dvcmtlciksdGhpc30scGF1c2U6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fd29ya2VyLnBhdXNlKCksdGhpc30sdG9Ob2RlanNTdHJlYW06ZnVuY3Rpb24oZSl7aWYodS5jaGVja1N1cHBvcnQoXCJub2Rlc3RyZWFtXCIpLFwibm9kZWJ1ZmZlclwiIT09dGhpcy5fb3V0cHV0VHlwZSl0aHJvdyBuZXcgRXJyb3IodGhpcy5fb3V0cHV0VHlwZStcIiBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgbWV0aG9kXCIpO3JldHVybiBuZXcgYSh0aGlzLHtvYmplY3RNb2RlOlwibm9kZWJ1ZmZlclwiIT09dGhpcy5fb3V0cHV0VHlwZX0sZSl9fSx0LmV4cG9ydHM9Zn0se1wiLi4vYmFzZTY0XCI6MSxcIi4uL2V4dGVybmFsXCI6NixcIi4uL25vZGVqcy9Ob2RlanNTdHJlYW1PdXRwdXRBZGFwdGVyXCI6MTMsXCIuLi9zdXBwb3J0XCI6MzAsXCIuLi91dGlsc1wiOjMyLFwiLi9Db252ZXJ0V29ya2VyXCI6MjQsXCIuL0dlbmVyaWNXb3JrZXJcIjoyOH1dLDMwOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7aWYoci5iYXNlNjQ9ITAsci5hcnJheT0hMCxyLnN0cmluZz0hMCxyLmFycmF5YnVmZmVyPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBBcnJheUJ1ZmZlciYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIFVpbnQ4QXJyYXksci5ub2RlYnVmZmVyPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBCdWZmZXIsci51aW50OGFycmF5PVwidW5kZWZpbmVkXCIhPXR5cGVvZiBVaW50OEFycmF5LFwidW5kZWZpbmVkXCI9PXR5cGVvZiBBcnJheUJ1ZmZlcilyLmJsb2I9ITE7ZWxzZXt2YXIgbj1uZXcgQXJyYXlCdWZmZXIoMCk7dHJ5e3IuYmxvYj0wPT09bmV3IEJsb2IoW25dLHt0eXBlOlwiYXBwbGljYXRpb24vemlwXCJ9KS5zaXplfWNhdGNoKGUpe3RyeXt2YXIgaT1uZXcoc2VsZi5CbG9iQnVpbGRlcnx8c2VsZi5XZWJLaXRCbG9iQnVpbGRlcnx8c2VsZi5Nb3pCbG9iQnVpbGRlcnx8c2VsZi5NU0Jsb2JCdWlsZGVyKTtpLmFwcGVuZChuKSxyLmJsb2I9MD09PWkuZ2V0QmxvYihcImFwcGxpY2F0aW9uL3ppcFwiKS5zaXplfWNhdGNoKGUpe3IuYmxvYj0hMX19fXRyeXtyLm5vZGVzdHJlYW09ISFlKFwicmVhZGFibGUtc3RyZWFtXCIpLlJlYWRhYmxlfWNhdGNoKGUpe3Iubm9kZXN0cmVhbT0hMX19LHtcInJlYWRhYmxlLXN0cmVhbVwiOjE2fV0sMzE6W2Z1bmN0aW9uKGUsdCxzKXtcInVzZSBzdHJpY3RcIjtmb3IodmFyIGE9ZShcIi4vdXRpbHNcIiksZj1lKFwiLi9zdXBwb3J0XCIpLHI9ZShcIi4vbm9kZWpzVXRpbHNcIiksbj1lKFwiLi9zdHJlYW0vR2VuZXJpY1dvcmtlclwiKSx1PW5ldyBBcnJheSgyNTYpLGk9MDtpPDI1NjtpKyspdVtpXT0yNTI8PWk/NjoyNDg8PWk/NToyNDA8PWk/NDoyMjQ8PWk/MzoxOTI8PWk/MjoxO2Z1bmN0aW9uIG8oKXtuLmNhbGwodGhpcyxcInV0Zi04IGRlY29kZVwiKSx0aGlzLmxlZnRPdmVyPW51bGx9ZnVuY3Rpb24gZCgpe24uY2FsbCh0aGlzLFwidXRmLTggZW5jb2RlXCIpfXVbMjU0XT11WzI1NF09MSxzLnV0ZjhlbmNvZGU9ZnVuY3Rpb24oZSl7cmV0dXJuIGYubm9kZWJ1ZmZlcj9yLm5ld0J1ZmZlckZyb20oZSxcInV0Zi04XCIpOmZ1bmN0aW9uKGUpe3ZhciB0LHIsbixpLHMsbz1lLmxlbmd0aCxhPTA7Zm9yKGk9MDtpPG87aSsrKTU1Mjk2PT0oNjQ1MTImKHI9ZS5jaGFyQ29kZUF0KGkpKSkmJmkrMTxvJiY1NjMyMD09KDY0NTEyJihuPWUuY2hhckNvZGVBdChpKzEpKSkmJihyPTY1NTM2KyhyLTU1Mjk2PDwxMCkrKG4tNTYzMjApLGkrKyksYSs9cjwxMjg/MTpyPDIwNDg/MjpyPDY1NTM2PzM6NDtmb3IodD1mLnVpbnQ4YXJyYXk/bmV3IFVpbnQ4QXJyYXkoYSk6bmV3IEFycmF5KGEpLGk9cz0wO3M8YTtpKyspNTUyOTY9PSg2NDUxMiYocj1lLmNoYXJDb2RlQXQoaSkpKSYmaSsxPG8mJjU2MzIwPT0oNjQ1MTImKG49ZS5jaGFyQ29kZUF0KGkrMSkpKSYmKHI9NjU1MzYrKHItNTUyOTY8PDEwKSsobi01NjMyMCksaSsrKSxyPDEyOD90W3MrK109cjoocjwyMDQ4P3RbcysrXT0xOTJ8cj4+PjY6KHI8NjU1MzY/dFtzKytdPTIyNHxyPj4+MTI6KHRbcysrXT0yNDB8cj4+PjE4LHRbcysrXT0xMjh8cj4+PjEyJjYzKSx0W3MrK109MTI4fHI+Pj42JjYzKSx0W3MrK109MTI4fDYzJnIpO3JldHVybiB0fShlKX0scy51dGY4ZGVjb2RlPWZ1bmN0aW9uKGUpe3JldHVybiBmLm5vZGVidWZmZXI/YS50cmFuc2Zvcm1UbyhcIm5vZGVidWZmZXJcIixlKS50b1N0cmluZyhcInV0Zi04XCIpOmZ1bmN0aW9uKGUpe3ZhciB0LHIsbixpLHM9ZS5sZW5ndGgsbz1uZXcgQXJyYXkoMipzKTtmb3IodD1yPTA7dDxzOylpZigobj1lW3QrK10pPDEyOClvW3IrK109bjtlbHNlIGlmKDQ8KGk9dVtuXSkpb1tyKytdPTY1NTMzLHQrPWktMTtlbHNle2ZvcihuJj0yPT09aT8zMTozPT09aT8xNTo3OzE8aSYmdDxzOyluPW48PDZ8NjMmZVt0KytdLGktLTsxPGk/b1tyKytdPTY1NTMzOm48NjU1MzY/b1tyKytdPW46KG4tPTY1NTM2LG9bcisrXT01NTI5NnxuPj4xMCYxMDIzLG9bcisrXT01NjMyMHwxMDIzJm4pfXJldHVybiBvLmxlbmd0aCE9PXImJihvLnN1YmFycmF5P289by5zdWJhcnJheSgwLHIpOm8ubGVuZ3RoPXIpLGEuYXBwbHlGcm9tQ2hhckNvZGUobyl9KGU9YS50cmFuc2Zvcm1UbyhmLnVpbnQ4YXJyYXk/XCJ1aW50OGFycmF5XCI6XCJhcnJheVwiLGUpKX0sYS5pbmhlcml0cyhvLG4pLG8ucHJvdG90eXBlLnByb2Nlc3NDaHVuaz1mdW5jdGlvbihlKXt2YXIgdD1hLnRyYW5zZm9ybVRvKGYudWludDhhcnJheT9cInVpbnQ4YXJyYXlcIjpcImFycmF5XCIsZS5kYXRhKTtpZih0aGlzLmxlZnRPdmVyJiZ0aGlzLmxlZnRPdmVyLmxlbmd0aCl7aWYoZi51aW50OGFycmF5KXt2YXIgcj10Oyh0PW5ldyBVaW50OEFycmF5KHIubGVuZ3RoK3RoaXMubGVmdE92ZXIubGVuZ3RoKSkuc2V0KHRoaXMubGVmdE92ZXIsMCksdC5zZXQocix0aGlzLmxlZnRPdmVyLmxlbmd0aCl9ZWxzZSB0PXRoaXMubGVmdE92ZXIuY29uY2F0KHQpO3RoaXMubGVmdE92ZXI9bnVsbH12YXIgbj1mdW5jdGlvbihlLHQpe3ZhciByO2ZvcigodD10fHxlLmxlbmd0aCk+ZS5sZW5ndGgmJih0PWUubGVuZ3RoKSxyPXQtMTswPD1yJiYxMjg9PSgxOTImZVtyXSk7KXItLTtyZXR1cm4gcjwwP3Q6MD09PXI/dDpyK3VbZVtyXV0+dD9yOnR9KHQpLGk9dDtuIT09dC5sZW5ndGgmJihmLnVpbnQ4YXJyYXk/KGk9dC5zdWJhcnJheSgwLG4pLHRoaXMubGVmdE92ZXI9dC5zdWJhcnJheShuLHQubGVuZ3RoKSk6KGk9dC5zbGljZSgwLG4pLHRoaXMubGVmdE92ZXI9dC5zbGljZShuLHQubGVuZ3RoKSkpLHRoaXMucHVzaCh7ZGF0YTpzLnV0ZjhkZWNvZGUoaSksbWV0YTplLm1ldGF9KX0sby5wcm90b3R5cGUuZmx1c2g9ZnVuY3Rpb24oKXt0aGlzLmxlZnRPdmVyJiZ0aGlzLmxlZnRPdmVyLmxlbmd0aCYmKHRoaXMucHVzaCh7ZGF0YTpzLnV0ZjhkZWNvZGUodGhpcy5sZWZ0T3ZlciksbWV0YTp7fX0pLHRoaXMubGVmdE92ZXI9bnVsbCl9LHMuVXRmOERlY29kZVdvcmtlcj1vLGEuaW5oZXJpdHMoZCxuKSxkLnByb3RvdHlwZS5wcm9jZXNzQ2h1bms9ZnVuY3Rpb24oZSl7dGhpcy5wdXNoKHtkYXRhOnMudXRmOGVuY29kZShlLmRhdGEpLG1ldGE6ZS5tZXRhfSl9LHMuVXRmOEVuY29kZVdvcmtlcj1kfSx7XCIuL25vZGVqc1V0aWxzXCI6MTQsXCIuL3N0cmVhbS9HZW5lcmljV29ya2VyXCI6MjgsXCIuL3N1cHBvcnRcIjozMCxcIi4vdXRpbHNcIjozMn1dLDMyOltmdW5jdGlvbihlLHQsYSl7XCJ1c2Ugc3RyaWN0XCI7dmFyIGY9ZShcIi4vc3VwcG9ydFwiKSx1PWUoXCIuL2Jhc2U2NFwiKSxyPWUoXCIuL25vZGVqc1V0aWxzXCIpLG49ZShcInNldC1pbW1lZGlhdGUtc2hpbVwiKSxkPWUoXCIuL2V4dGVybmFsXCIpO2Z1bmN0aW9uIGkoZSl7cmV0dXJuIGV9ZnVuY3Rpb24gaChlLHQpe2Zvcih2YXIgcj0wO3I8ZS5sZW5ndGg7KytyKXRbcl09MjU1JmUuY2hhckNvZGVBdChyKTtyZXR1cm4gdH1hLm5ld0Jsb2I9ZnVuY3Rpb24odCxyKXthLmNoZWNrU3VwcG9ydChcImJsb2JcIik7dHJ5e3JldHVybiBuZXcgQmxvYihbdF0se3R5cGU6cn0pfWNhdGNoKGUpe3RyeXt2YXIgbj1uZXcoc2VsZi5CbG9iQnVpbGRlcnx8c2VsZi5XZWJLaXRCbG9iQnVpbGRlcnx8c2VsZi5Nb3pCbG9iQnVpbGRlcnx8c2VsZi5NU0Jsb2JCdWlsZGVyKTtyZXR1cm4gbi5hcHBlbmQodCksbi5nZXRCbG9iKHIpfWNhdGNoKGUpe3Rocm93IG5ldyBFcnJvcihcIkJ1ZyA6IGNhbid0IGNvbnN0cnVjdCB0aGUgQmxvYi5cIil9fX07dmFyIHM9e3N0cmluZ2lmeUJ5Q2h1bms6ZnVuY3Rpb24oZSx0LHIpe3ZhciBuPVtdLGk9MCxzPWUubGVuZ3RoO2lmKHM8PXIpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCxlKTtmb3IoO2k8czspXCJhcnJheVwiPT09dHx8XCJub2RlYnVmZmVyXCI9PT10P24ucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsZS5zbGljZShpLE1hdGgubWluKGkrcixzKSkpKTpuLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLGUuc3ViYXJyYXkoaSxNYXRoLm1pbihpK3IscykpKSksaSs9cjtyZXR1cm4gbi5qb2luKFwiXCIpfSxzdHJpbmdpZnlCeUNoYXI6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PVwiXCIscj0wO3I8ZS5sZW5ndGg7cisrKXQrPVN0cmluZy5mcm9tQ2hhckNvZGUoZVtyXSk7cmV0dXJuIHR9LGFwcGx5Q2FuQmVVc2VkOnt1aW50OGFycmF5OmZ1bmN0aW9uKCl7dHJ5e3JldHVybiBmLnVpbnQ4YXJyYXkmJjE9PT1TdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsbmV3IFVpbnQ4QXJyYXkoMSkpLmxlbmd0aH1jYXRjaChlKXtyZXR1cm4hMX19KCksbm9kZWJ1ZmZlcjpmdW5jdGlvbigpe3RyeXtyZXR1cm4gZi5ub2RlYnVmZmVyJiYxPT09U3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLHIuYWxsb2NCdWZmZXIoMSkpLmxlbmd0aH1jYXRjaChlKXtyZXR1cm4hMX19KCl9fTtmdW5jdGlvbiBvKGUpe3ZhciB0PTY1NTM2LHI9YS5nZXRUeXBlT2YoZSksbj0hMDtpZihcInVpbnQ4YXJyYXlcIj09PXI/bj1zLmFwcGx5Q2FuQmVVc2VkLnVpbnQ4YXJyYXk6XCJub2RlYnVmZmVyXCI9PT1yJiYobj1zLmFwcGx5Q2FuQmVVc2VkLm5vZGVidWZmZXIpLG4pZm9yKDsxPHQ7KXRyeXtyZXR1cm4gcy5zdHJpbmdpZnlCeUNodW5rKGUscix0KX1jYXRjaChlKXt0PU1hdGguZmxvb3IodC8yKX1yZXR1cm4gcy5zdHJpbmdpZnlCeUNoYXIoZSl9ZnVuY3Rpb24gbChlLHQpe2Zvcih2YXIgcj0wO3I8ZS5sZW5ndGg7cisrKXRbcl09ZVtyXTtyZXR1cm4gdH1hLmFwcGx5RnJvbUNoYXJDb2RlPW87dmFyIGM9e307Yy5zdHJpbmc9e3N0cmluZzppLGFycmF5OmZ1bmN0aW9uKGUpe3JldHVybiBoKGUsbmV3IEFycmF5KGUubGVuZ3RoKSl9LGFycmF5YnVmZmVyOmZ1bmN0aW9uKGUpe3JldHVybiBjLnN0cmluZy51aW50OGFycmF5KGUpLmJ1ZmZlcn0sdWludDhhcnJheTpmdW5jdGlvbihlKXtyZXR1cm4gaChlLG5ldyBVaW50OEFycmF5KGUubGVuZ3RoKSl9LG5vZGVidWZmZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIGgoZSxyLmFsbG9jQnVmZmVyKGUubGVuZ3RoKSl9fSxjLmFycmF5PXtzdHJpbmc6byxhcnJheTppLGFycmF5YnVmZmVyOmZ1bmN0aW9uKGUpe3JldHVybiBuZXcgVWludDhBcnJheShlKS5idWZmZXJ9LHVpbnQ4YXJyYXk6ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBVaW50OEFycmF5KGUpfSxub2RlYnVmZmVyOmZ1bmN0aW9uKGUpe3JldHVybiByLm5ld0J1ZmZlckZyb20oZSl9fSxjLmFycmF5YnVmZmVyPXtzdHJpbmc6ZnVuY3Rpb24oZSl7cmV0dXJuIG8obmV3IFVpbnQ4QXJyYXkoZSkpfSxhcnJheTpmdW5jdGlvbihlKXtyZXR1cm4gbChuZXcgVWludDhBcnJheShlKSxuZXcgQXJyYXkoZS5ieXRlTGVuZ3RoKSl9LGFycmF5YnVmZmVyOmksdWludDhhcnJheTpmdW5jdGlvbihlKXtyZXR1cm4gbmV3IFVpbnQ4QXJyYXkoZSl9LG5vZGVidWZmZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIHIubmV3QnVmZmVyRnJvbShuZXcgVWludDhBcnJheShlKSl9fSxjLnVpbnQ4YXJyYXk9e3N0cmluZzpvLGFycmF5OmZ1bmN0aW9uKGUpe3JldHVybiBsKGUsbmV3IEFycmF5KGUubGVuZ3RoKSl9LGFycmF5YnVmZmVyOmZ1bmN0aW9uKGUpe3JldHVybiBlLmJ1ZmZlcn0sdWludDhhcnJheTppLG5vZGVidWZmZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIHIubmV3QnVmZmVyRnJvbShlKX19LGMubm9kZWJ1ZmZlcj17c3RyaW5nOm8sYXJyYXk6ZnVuY3Rpb24oZSl7cmV0dXJuIGwoZSxuZXcgQXJyYXkoZS5sZW5ndGgpKX0sYXJyYXlidWZmZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIGMubm9kZWJ1ZmZlci51aW50OGFycmF5KGUpLmJ1ZmZlcn0sdWludDhhcnJheTpmdW5jdGlvbihlKXtyZXR1cm4gbChlLG5ldyBVaW50OEFycmF5KGUubGVuZ3RoKSl9LG5vZGVidWZmZXI6aX0sYS50cmFuc2Zvcm1Ubz1mdW5jdGlvbihlLHQpe2lmKHQ9dHx8XCJcIiwhZSlyZXR1cm4gdDthLmNoZWNrU3VwcG9ydChlKTt2YXIgcj1hLmdldFR5cGVPZih0KTtyZXR1cm4gY1tyXVtlXSh0KX0sYS5nZXRUeXBlT2Y9ZnVuY3Rpb24oZSl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIGU/XCJzdHJpbmdcIjpcIltvYmplY3QgQXJyYXldXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSk/XCJhcnJheVwiOmYubm9kZWJ1ZmZlciYmci5pc0J1ZmZlcihlKT9cIm5vZGVidWZmZXJcIjpmLnVpbnQ4YXJyYXkmJmUgaW5zdGFuY2VvZiBVaW50OEFycmF5P1widWludDhhcnJheVwiOmYuYXJyYXlidWZmZXImJmUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcj9cImFycmF5YnVmZmVyXCI6dm9pZCAwfSxhLmNoZWNrU3VwcG9ydD1mdW5jdGlvbihlKXtpZighZltlLnRvTG93ZXJDYXNlKCldKXRocm93IG5ldyBFcnJvcihlK1wiIGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhpcyBwbGF0Zm9ybVwiKX0sYS5NQVhfVkFMVUVfMTZCSVRTPTY1NTM1LGEuTUFYX1ZBTFVFXzMyQklUUz0tMSxhLnByZXR0eT1mdW5jdGlvbihlKXt2YXIgdCxyLG49XCJcIjtmb3Iocj0wO3I8KGV8fFwiXCIpLmxlbmd0aDtyKyspbis9XCJcXFxceFwiKygodD1lLmNoYXJDb2RlQXQocikpPDE2P1wiMFwiOlwiXCIpK3QudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCk7cmV0dXJuIG59LGEuZGVsYXk9ZnVuY3Rpb24oZSx0LHIpe24oZnVuY3Rpb24oKXtlLmFwcGx5KHJ8fG51bGwsdHx8W10pfSl9LGEuaW5oZXJpdHM9ZnVuY3Rpb24oZSx0KXtmdW5jdGlvbiByKCl7fXIucHJvdG90eXBlPXQucHJvdG90eXBlLGUucHJvdG90eXBlPW5ldyByfSxhLmV4dGVuZD1mdW5jdGlvbigpe3ZhciBlLHQscj17fTtmb3IoZT0wO2U8YXJndW1lbnRzLmxlbmd0aDtlKyspZm9yKHQgaW4gYXJndW1lbnRzW2VdKWFyZ3VtZW50c1tlXS5oYXNPd25Qcm9wZXJ0eSh0KSYmdm9pZCAwPT09clt0XSYmKHJbdF09YXJndW1lbnRzW2VdW3RdKTtyZXR1cm4gcn0sYS5wcmVwYXJlQ29udGVudD1mdW5jdGlvbihuLGUsaSxzLG8pe3JldHVybiBkLlByb21pc2UucmVzb2x2ZShlKS50aGVuKGZ1bmN0aW9uKG4pe3JldHVybiBmLmJsb2ImJihuIGluc3RhbmNlb2YgQmxvYnx8LTEhPT1bXCJbb2JqZWN0IEZpbGVdXCIsXCJbb2JqZWN0IEJsb2JdXCJdLmluZGV4T2YoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG4pKSkmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBGaWxlUmVhZGVyP25ldyBkLlByb21pc2UoZnVuY3Rpb24odCxyKXt2YXIgZT1uZXcgRmlsZVJlYWRlcjtlLm9ubG9hZD1mdW5jdGlvbihlKXt0KGUudGFyZ2V0LnJlc3VsdCl9LGUub25lcnJvcj1mdW5jdGlvbihlKXtyKGUudGFyZ2V0LmVycm9yKX0sZS5yZWFkQXNBcnJheUJ1ZmZlcihuKX0pOm59KS50aGVuKGZ1bmN0aW9uKGUpe3ZhciB0LHI9YS5nZXRUeXBlT2YoZSk7cmV0dXJuIHI/KFwiYXJyYXlidWZmZXJcIj09PXI/ZT1hLnRyYW5zZm9ybVRvKFwidWludDhhcnJheVwiLGUpOlwic3RyaW5nXCI9PT1yJiYobz9lPXUuZGVjb2RlKGUpOmkmJiEwIT09cyYmKGU9aCh0PWUsZi51aW50OGFycmF5P25ldyBVaW50OEFycmF5KHQubGVuZ3RoKTpuZXcgQXJyYXkodC5sZW5ndGgpKSkpLGUpOmQuUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiQ2FuJ3QgcmVhZCB0aGUgZGF0YSBvZiAnXCIrbitcIicuIElzIGl0IGluIGEgc3VwcG9ydGVkIEphdmFTY3JpcHQgdHlwZSAoU3RyaW5nLCBCbG9iLCBBcnJheUJ1ZmZlciwgZXRjKSA/XCIpKX0pfX0se1wiLi9iYXNlNjRcIjoxLFwiLi9leHRlcm5hbFwiOjYsXCIuL25vZGVqc1V0aWxzXCI6MTQsXCIuL3N1cHBvcnRcIjozMCxcInNldC1pbW1lZGlhdGUtc2hpbVwiOjU0fV0sMzM6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiLi9yZWFkZXIvcmVhZGVyRm9yXCIpLGk9ZShcIi4vdXRpbHNcIikscz1lKFwiLi9zaWduYXR1cmVcIiksbz1lKFwiLi96aXBFbnRyeVwiKSxhPShlKFwiLi91dGY4XCIpLGUoXCIuL3N1cHBvcnRcIikpO2Z1bmN0aW9uIGYoZSl7dGhpcy5maWxlcz1bXSx0aGlzLmxvYWRPcHRpb25zPWV9Zi5wcm90b3R5cGU9e2NoZWNrU2lnbmF0dXJlOmZ1bmN0aW9uKGUpe2lmKCF0aGlzLnJlYWRlci5yZWFkQW5kQ2hlY2tTaWduYXR1cmUoZSkpe3RoaXMucmVhZGVyLmluZGV4LT00O3ZhciB0PXRoaXMucmVhZGVyLnJlYWRTdHJpbmcoNCk7dGhyb3cgbmV3IEVycm9yKFwiQ29ycnVwdGVkIHppcCBvciBidWc6IHVuZXhwZWN0ZWQgc2lnbmF0dXJlIChcIitpLnByZXR0eSh0KStcIiwgZXhwZWN0ZWQgXCIraS5wcmV0dHkoZSkrXCIpXCIpfX0saXNTaWduYXR1cmU6ZnVuY3Rpb24oZSx0KXt2YXIgcj10aGlzLnJlYWRlci5pbmRleDt0aGlzLnJlYWRlci5zZXRJbmRleChlKTt2YXIgbj10aGlzLnJlYWRlci5yZWFkU3RyaW5nKDQpPT09dDtyZXR1cm4gdGhpcy5yZWFkZXIuc2V0SW5kZXgociksbn0scmVhZEJsb2NrRW5kT2ZDZW50cmFsOmZ1bmN0aW9uKCl7dGhpcy5kaXNrTnVtYmVyPXRoaXMucmVhZGVyLnJlYWRJbnQoMiksdGhpcy5kaXNrV2l0aENlbnRyYWxEaXJTdGFydD10aGlzLnJlYWRlci5yZWFkSW50KDIpLHRoaXMuY2VudHJhbERpclJlY29yZHNPblRoaXNEaXNrPXRoaXMucmVhZGVyLnJlYWRJbnQoMiksdGhpcy5jZW50cmFsRGlyUmVjb3Jkcz10aGlzLnJlYWRlci5yZWFkSW50KDIpLHRoaXMuY2VudHJhbERpclNpemU9dGhpcy5yZWFkZXIucmVhZEludCg0KSx0aGlzLmNlbnRyYWxEaXJPZmZzZXQ9dGhpcy5yZWFkZXIucmVhZEludCg0KSx0aGlzLnppcENvbW1lbnRMZW5ndGg9dGhpcy5yZWFkZXIucmVhZEludCgyKTt2YXIgZT10aGlzLnJlYWRlci5yZWFkRGF0YSh0aGlzLnppcENvbW1lbnRMZW5ndGgpLHQ9YS51aW50OGFycmF5P1widWludDhhcnJheVwiOlwiYXJyYXlcIixyPWkudHJhbnNmb3JtVG8odCxlKTt0aGlzLnppcENvbW1lbnQ9dGhpcy5sb2FkT3B0aW9ucy5kZWNvZGVGaWxlTmFtZShyKX0scmVhZEJsb2NrWmlwNjRFbmRPZkNlbnRyYWw6ZnVuY3Rpb24oKXt0aGlzLnppcDY0RW5kT2ZDZW50cmFsU2l6ZT10aGlzLnJlYWRlci5yZWFkSW50KDgpLHRoaXMucmVhZGVyLnNraXAoNCksdGhpcy5kaXNrTnVtYmVyPXRoaXMucmVhZGVyLnJlYWRJbnQoNCksdGhpcy5kaXNrV2l0aENlbnRyYWxEaXJTdGFydD10aGlzLnJlYWRlci5yZWFkSW50KDQpLHRoaXMuY2VudHJhbERpclJlY29yZHNPblRoaXNEaXNrPXRoaXMucmVhZGVyLnJlYWRJbnQoOCksdGhpcy5jZW50cmFsRGlyUmVjb3Jkcz10aGlzLnJlYWRlci5yZWFkSW50KDgpLHRoaXMuY2VudHJhbERpclNpemU9dGhpcy5yZWFkZXIucmVhZEludCg4KSx0aGlzLmNlbnRyYWxEaXJPZmZzZXQ9dGhpcy5yZWFkZXIucmVhZEludCg4KSx0aGlzLnppcDY0RXh0ZW5zaWJsZURhdGE9e307Zm9yKHZhciBlLHQscixuPXRoaXMuemlwNjRFbmRPZkNlbnRyYWxTaXplLTQ0OzA8bjspZT10aGlzLnJlYWRlci5yZWFkSW50KDIpLHQ9dGhpcy5yZWFkZXIucmVhZEludCg0KSxyPXRoaXMucmVhZGVyLnJlYWREYXRhKHQpLHRoaXMuemlwNjRFeHRlbnNpYmxlRGF0YVtlXT17aWQ6ZSxsZW5ndGg6dCx2YWx1ZTpyfX0scmVhZEJsb2NrWmlwNjRFbmRPZkNlbnRyYWxMb2NhdG9yOmZ1bmN0aW9uKCl7aWYodGhpcy5kaXNrV2l0aFppcDY0Q2VudHJhbERpclN0YXJ0PXRoaXMucmVhZGVyLnJlYWRJbnQoNCksdGhpcy5yZWxhdGl2ZU9mZnNldEVuZE9mWmlwNjRDZW50cmFsRGlyPXRoaXMucmVhZGVyLnJlYWRJbnQoOCksdGhpcy5kaXNrc0NvdW50PXRoaXMucmVhZGVyLnJlYWRJbnQoNCksMTx0aGlzLmRpc2tzQ291bnQpdGhyb3cgbmV3IEVycm9yKFwiTXVsdGktdm9sdW1lcyB6aXAgYXJlIG5vdCBzdXBwb3J0ZWRcIil9LHJlYWRMb2NhbEZpbGVzOmZ1bmN0aW9uKCl7dmFyIGUsdDtmb3IoZT0wO2U8dGhpcy5maWxlcy5sZW5ndGg7ZSsrKXQ9dGhpcy5maWxlc1tlXSx0aGlzLnJlYWRlci5zZXRJbmRleCh0LmxvY2FsSGVhZGVyT2Zmc2V0KSx0aGlzLmNoZWNrU2lnbmF0dXJlKHMuTE9DQUxfRklMRV9IRUFERVIpLHQucmVhZExvY2FsUGFydCh0aGlzLnJlYWRlciksdC5oYW5kbGVVVEY4KCksdC5wcm9jZXNzQXR0cmlidXRlcygpfSxyZWFkQ2VudHJhbERpcjpmdW5jdGlvbigpe3ZhciBlO2Zvcih0aGlzLnJlYWRlci5zZXRJbmRleCh0aGlzLmNlbnRyYWxEaXJPZmZzZXQpO3RoaXMucmVhZGVyLnJlYWRBbmRDaGVja1NpZ25hdHVyZShzLkNFTlRSQUxfRklMRV9IRUFERVIpOykoZT1uZXcgbyh7emlwNjQ6dGhpcy56aXA2NH0sdGhpcy5sb2FkT3B0aW9ucykpLnJlYWRDZW50cmFsUGFydCh0aGlzLnJlYWRlciksdGhpcy5maWxlcy5wdXNoKGUpO2lmKHRoaXMuY2VudHJhbERpclJlY29yZHMhPT10aGlzLmZpbGVzLmxlbmd0aCYmMCE9PXRoaXMuY2VudHJhbERpclJlY29yZHMmJjA9PT10aGlzLmZpbGVzLmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoXCJDb3JydXB0ZWQgemlwIG9yIGJ1ZzogZXhwZWN0ZWQgXCIrdGhpcy5jZW50cmFsRGlyUmVjb3JkcytcIiByZWNvcmRzIGluIGNlbnRyYWwgZGlyLCBnb3QgXCIrdGhpcy5maWxlcy5sZW5ndGgpfSxyZWFkRW5kT2ZDZW50cmFsOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5yZWFkZXIubGFzdEluZGV4T2ZTaWduYXR1cmUocy5DRU5UUkFMX0RJUkVDVE9SWV9FTkQpO2lmKGU8MCl0aHJvdyB0aGlzLmlzU2lnbmF0dXJlKDAscy5MT0NBTF9GSUxFX0hFQURFUik/bmV3IEVycm9yKFwiQ29ycnVwdGVkIHppcDogY2FuJ3QgZmluZCBlbmQgb2YgY2VudHJhbCBkaXJlY3RvcnlcIik6bmV3IEVycm9yKFwiQ2FuJ3QgZmluZCBlbmQgb2YgY2VudHJhbCBkaXJlY3RvcnkgOiBpcyB0aGlzIGEgemlwIGZpbGUgPyBJZiBpdCBpcywgc2VlIGh0dHBzOi8vc3R1ay5naXRodWIuaW8vanN6aXAvZG9jdW1lbnRhdGlvbi9ob3d0by9yZWFkX3ppcC5odG1sXCIpO3RoaXMucmVhZGVyLnNldEluZGV4KGUpO3ZhciB0PWU7aWYodGhpcy5jaGVja1NpZ25hdHVyZShzLkNFTlRSQUxfRElSRUNUT1JZX0VORCksdGhpcy5yZWFkQmxvY2tFbmRPZkNlbnRyYWwoKSx0aGlzLmRpc2tOdW1iZXI9PT1pLk1BWF9WQUxVRV8xNkJJVFN8fHRoaXMuZGlza1dpdGhDZW50cmFsRGlyU3RhcnQ9PT1pLk1BWF9WQUxVRV8xNkJJVFN8fHRoaXMuY2VudHJhbERpclJlY29yZHNPblRoaXNEaXNrPT09aS5NQVhfVkFMVUVfMTZCSVRTfHx0aGlzLmNlbnRyYWxEaXJSZWNvcmRzPT09aS5NQVhfVkFMVUVfMTZCSVRTfHx0aGlzLmNlbnRyYWxEaXJTaXplPT09aS5NQVhfVkFMVUVfMzJCSVRTfHx0aGlzLmNlbnRyYWxEaXJPZmZzZXQ9PT1pLk1BWF9WQUxVRV8zMkJJVFMpe2lmKHRoaXMuemlwNjQ9ITAsKGU9dGhpcy5yZWFkZXIubGFzdEluZGV4T2ZTaWduYXR1cmUocy5aSVA2NF9DRU5UUkFMX0RJUkVDVE9SWV9MT0NBVE9SKSk8MCl0aHJvdyBuZXcgRXJyb3IoXCJDb3JydXB0ZWQgemlwOiBjYW4ndCBmaW5kIHRoZSBaSVA2NCBlbmQgb2YgY2VudHJhbCBkaXJlY3RvcnkgbG9jYXRvclwiKTtpZih0aGlzLnJlYWRlci5zZXRJbmRleChlKSx0aGlzLmNoZWNrU2lnbmF0dXJlKHMuWklQNjRfQ0VOVFJBTF9ESVJFQ1RPUllfTE9DQVRPUiksdGhpcy5yZWFkQmxvY2taaXA2NEVuZE9mQ2VudHJhbExvY2F0b3IoKSwhdGhpcy5pc1NpZ25hdHVyZSh0aGlzLnJlbGF0aXZlT2Zmc2V0RW5kT2ZaaXA2NENlbnRyYWxEaXIscy5aSVA2NF9DRU5UUkFMX0RJUkVDVE9SWV9FTkQpJiYodGhpcy5yZWxhdGl2ZU9mZnNldEVuZE9mWmlwNjRDZW50cmFsRGlyPXRoaXMucmVhZGVyLmxhc3RJbmRleE9mU2lnbmF0dXJlKHMuWklQNjRfQ0VOVFJBTF9ESVJFQ1RPUllfRU5EKSx0aGlzLnJlbGF0aXZlT2Zmc2V0RW5kT2ZaaXA2NENlbnRyYWxEaXI8MCkpdGhyb3cgbmV3IEVycm9yKFwiQ29ycnVwdGVkIHppcDogY2FuJ3QgZmluZCB0aGUgWklQNjQgZW5kIG9mIGNlbnRyYWwgZGlyZWN0b3J5XCIpO3RoaXMucmVhZGVyLnNldEluZGV4KHRoaXMucmVsYXRpdmVPZmZzZXRFbmRPZlppcDY0Q2VudHJhbERpciksdGhpcy5jaGVja1NpZ25hdHVyZShzLlpJUDY0X0NFTlRSQUxfRElSRUNUT1JZX0VORCksdGhpcy5yZWFkQmxvY2taaXA2NEVuZE9mQ2VudHJhbCgpfXZhciByPXRoaXMuY2VudHJhbERpck9mZnNldCt0aGlzLmNlbnRyYWxEaXJTaXplO3RoaXMuemlwNjQmJihyKz0yMCxyKz0xMit0aGlzLnppcDY0RW5kT2ZDZW50cmFsU2l6ZSk7dmFyIG49dC1yO2lmKDA8bil0aGlzLmlzU2lnbmF0dXJlKHQscy5DRU5UUkFMX0ZJTEVfSEVBREVSKXx8KHRoaXMucmVhZGVyLnplcm89bik7ZWxzZSBpZihuPDApdGhyb3cgbmV3IEVycm9yKFwiQ29ycnVwdGVkIHppcDogbWlzc2luZyBcIitNYXRoLmFicyhuKStcIiBieXRlcy5cIil9LHByZXBhcmVSZWFkZXI6ZnVuY3Rpb24oZSl7dGhpcy5yZWFkZXI9bihlKX0sbG9hZDpmdW5jdGlvbihlKXt0aGlzLnByZXBhcmVSZWFkZXIoZSksdGhpcy5yZWFkRW5kT2ZDZW50cmFsKCksdGhpcy5yZWFkQ2VudHJhbERpcigpLHRoaXMucmVhZExvY2FsRmlsZXMoKX19LHQuZXhwb3J0cz1mfSx7XCIuL3JlYWRlci9yZWFkZXJGb3JcIjoyMixcIi4vc2lnbmF0dXJlXCI6MjMsXCIuL3N1cHBvcnRcIjozMCxcIi4vdXRmOFwiOjMxLFwiLi91dGlsc1wiOjMyLFwiLi96aXBFbnRyeVwiOjM0fV0sMzQ6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiLi9yZWFkZXIvcmVhZGVyRm9yXCIpLHM9ZShcIi4vdXRpbHNcIiksaT1lKFwiLi9jb21wcmVzc2VkT2JqZWN0XCIpLG89ZShcIi4vY3JjMzJcIiksYT1lKFwiLi91dGY4XCIpLGY9ZShcIi4vY29tcHJlc3Npb25zXCIpLHU9ZShcIi4vc3VwcG9ydFwiKTtmdW5jdGlvbiBkKGUsdCl7dGhpcy5vcHRpb25zPWUsdGhpcy5sb2FkT3B0aW9ucz10fWQucHJvdG90eXBlPXtpc0VuY3J5cHRlZDpmdW5jdGlvbigpe3JldHVybiAxPT0oMSZ0aGlzLmJpdEZsYWcpfSx1c2VVVEY4OmZ1bmN0aW9uKCl7cmV0dXJuIDIwNDg9PSgyMDQ4JnRoaXMuYml0RmxhZyl9LHJlYWRMb2NhbFBhcnQ6ZnVuY3Rpb24oZSl7dmFyIHQscjtpZihlLnNraXAoMjIpLHRoaXMuZmlsZU5hbWVMZW5ndGg9ZS5yZWFkSW50KDIpLHI9ZS5yZWFkSW50KDIpLHRoaXMuZmlsZU5hbWU9ZS5yZWFkRGF0YSh0aGlzLmZpbGVOYW1lTGVuZ3RoKSxlLnNraXAociksLTE9PT10aGlzLmNvbXByZXNzZWRTaXplfHwtMT09PXRoaXMudW5jb21wcmVzc2VkU2l6ZSl0aHJvdyBuZXcgRXJyb3IoXCJCdWcgb3IgY29ycnVwdGVkIHppcCA6IGRpZG4ndCBnZXQgZW5vdWdoIGluZm9ybWF0aW9uIGZyb20gdGhlIGNlbnRyYWwgZGlyZWN0b3J5IChjb21wcmVzc2VkU2l6ZSA9PT0gLTEgfHwgdW5jb21wcmVzc2VkU2l6ZSA9PT0gLTEpXCIpO2lmKG51bGw9PT0odD1mdW5jdGlvbihlKXtmb3IodmFyIHQgaW4gZilpZihmLmhhc093blByb3BlcnR5KHQpJiZmW3RdLm1hZ2ljPT09ZSlyZXR1cm4gZlt0XTtyZXR1cm4gbnVsbH0odGhpcy5jb21wcmVzc2lvbk1ldGhvZCkpKXRocm93IG5ldyBFcnJvcihcIkNvcnJ1cHRlZCB6aXAgOiBjb21wcmVzc2lvbiBcIitzLnByZXR0eSh0aGlzLmNvbXByZXNzaW9uTWV0aG9kKStcIiB1bmtub3duIChpbm5lciBmaWxlIDogXCIrcy50cmFuc2Zvcm1UbyhcInN0cmluZ1wiLHRoaXMuZmlsZU5hbWUpK1wiKVwiKTt0aGlzLmRlY29tcHJlc3NlZD1uZXcgaSh0aGlzLmNvbXByZXNzZWRTaXplLHRoaXMudW5jb21wcmVzc2VkU2l6ZSx0aGlzLmNyYzMyLHQsZS5yZWFkRGF0YSh0aGlzLmNvbXByZXNzZWRTaXplKSl9LHJlYWRDZW50cmFsUGFydDpmdW5jdGlvbihlKXt0aGlzLnZlcnNpb25NYWRlQnk9ZS5yZWFkSW50KDIpLGUuc2tpcCgyKSx0aGlzLmJpdEZsYWc9ZS5yZWFkSW50KDIpLHRoaXMuY29tcHJlc3Npb25NZXRob2Q9ZS5yZWFkU3RyaW5nKDIpLHRoaXMuZGF0ZT1lLnJlYWREYXRlKCksdGhpcy5jcmMzMj1lLnJlYWRJbnQoNCksdGhpcy5jb21wcmVzc2VkU2l6ZT1lLnJlYWRJbnQoNCksdGhpcy51bmNvbXByZXNzZWRTaXplPWUucmVhZEludCg0KTt2YXIgdD1lLnJlYWRJbnQoMik7aWYodGhpcy5leHRyYUZpZWxkc0xlbmd0aD1lLnJlYWRJbnQoMiksdGhpcy5maWxlQ29tbWVudExlbmd0aD1lLnJlYWRJbnQoMiksdGhpcy5kaXNrTnVtYmVyU3RhcnQ9ZS5yZWFkSW50KDIpLHRoaXMuaW50ZXJuYWxGaWxlQXR0cmlidXRlcz1lLnJlYWRJbnQoMiksdGhpcy5leHRlcm5hbEZpbGVBdHRyaWJ1dGVzPWUucmVhZEludCg0KSx0aGlzLmxvY2FsSGVhZGVyT2Zmc2V0PWUucmVhZEludCg0KSx0aGlzLmlzRW5jcnlwdGVkKCkpdGhyb3cgbmV3IEVycm9yKFwiRW5jcnlwdGVkIHppcCBhcmUgbm90IHN1cHBvcnRlZFwiKTtlLnNraXAodCksdGhpcy5yZWFkRXh0cmFGaWVsZHMoZSksdGhpcy5wYXJzZVpJUDY0RXh0cmFGaWVsZChlKSx0aGlzLmZpbGVDb21tZW50PWUucmVhZERhdGEodGhpcy5maWxlQ29tbWVudExlbmd0aCl9LHByb2Nlc3NBdHRyaWJ1dGVzOmZ1bmN0aW9uKCl7dGhpcy51bml4UGVybWlzc2lvbnM9bnVsbCx0aGlzLmRvc1Blcm1pc3Npb25zPW51bGw7dmFyIGU9dGhpcy52ZXJzaW9uTWFkZUJ5Pj44O3RoaXMuZGlyPSEhKDE2JnRoaXMuZXh0ZXJuYWxGaWxlQXR0cmlidXRlcyksMD09ZSYmKHRoaXMuZG9zUGVybWlzc2lvbnM9NjMmdGhpcy5leHRlcm5hbEZpbGVBdHRyaWJ1dGVzKSwzPT1lJiYodGhpcy51bml4UGVybWlzc2lvbnM9dGhpcy5leHRlcm5hbEZpbGVBdHRyaWJ1dGVzPj4xNiY2NTUzNSksdGhpcy5kaXJ8fFwiL1wiIT09dGhpcy5maWxlTmFtZVN0ci5zbGljZSgtMSl8fCh0aGlzLmRpcj0hMCl9LHBhcnNlWklQNjRFeHRyYUZpZWxkOmZ1bmN0aW9uKGUpe2lmKHRoaXMuZXh0cmFGaWVsZHNbMV0pe3ZhciB0PW4odGhpcy5leHRyYUZpZWxkc1sxXS52YWx1ZSk7dGhpcy51bmNvbXByZXNzZWRTaXplPT09cy5NQVhfVkFMVUVfMzJCSVRTJiYodGhpcy51bmNvbXByZXNzZWRTaXplPXQucmVhZEludCg4KSksdGhpcy5jb21wcmVzc2VkU2l6ZT09PXMuTUFYX1ZBTFVFXzMyQklUUyYmKHRoaXMuY29tcHJlc3NlZFNpemU9dC5yZWFkSW50KDgpKSx0aGlzLmxvY2FsSGVhZGVyT2Zmc2V0PT09cy5NQVhfVkFMVUVfMzJCSVRTJiYodGhpcy5sb2NhbEhlYWRlck9mZnNldD10LnJlYWRJbnQoOCkpLHRoaXMuZGlza051bWJlclN0YXJ0PT09cy5NQVhfVkFMVUVfMzJCSVRTJiYodGhpcy5kaXNrTnVtYmVyU3RhcnQ9dC5yZWFkSW50KDQpKX19LHJlYWRFeHRyYUZpZWxkczpmdW5jdGlvbihlKXt2YXIgdCxyLG4saT1lLmluZGV4K3RoaXMuZXh0cmFGaWVsZHNMZW5ndGg7Zm9yKHRoaXMuZXh0cmFGaWVsZHN8fCh0aGlzLmV4dHJhRmllbGRzPXt9KTtlLmluZGV4KzQ8aTspdD1lLnJlYWRJbnQoMikscj1lLnJlYWRJbnQoMiksbj1lLnJlYWREYXRhKHIpLHRoaXMuZXh0cmFGaWVsZHNbdF09e2lkOnQsbGVuZ3RoOnIsdmFsdWU6bn07ZS5zZXRJbmRleChpKX0saGFuZGxlVVRGODpmdW5jdGlvbigpe3ZhciBlPXUudWludDhhcnJheT9cInVpbnQ4YXJyYXlcIjpcImFycmF5XCI7aWYodGhpcy51c2VVVEY4KCkpdGhpcy5maWxlTmFtZVN0cj1hLnV0ZjhkZWNvZGUodGhpcy5maWxlTmFtZSksdGhpcy5maWxlQ29tbWVudFN0cj1hLnV0ZjhkZWNvZGUodGhpcy5maWxlQ29tbWVudCk7ZWxzZXt2YXIgdD10aGlzLmZpbmRFeHRyYUZpZWxkVW5pY29kZVBhdGgoKTtpZihudWxsIT09dCl0aGlzLmZpbGVOYW1lU3RyPXQ7ZWxzZXt2YXIgcj1zLnRyYW5zZm9ybVRvKGUsdGhpcy5maWxlTmFtZSk7dGhpcy5maWxlTmFtZVN0cj10aGlzLmxvYWRPcHRpb25zLmRlY29kZUZpbGVOYW1lKHIpfXZhciBuPXRoaXMuZmluZEV4dHJhRmllbGRVbmljb2RlQ29tbWVudCgpO2lmKG51bGwhPT1uKXRoaXMuZmlsZUNvbW1lbnRTdHI9bjtlbHNle3ZhciBpPXMudHJhbnNmb3JtVG8oZSx0aGlzLmZpbGVDb21tZW50KTt0aGlzLmZpbGVDb21tZW50U3RyPXRoaXMubG9hZE9wdGlvbnMuZGVjb2RlRmlsZU5hbWUoaSl9fX0sZmluZEV4dHJhRmllbGRVbmljb2RlUGF0aDpmdW5jdGlvbigpe3ZhciBlPXRoaXMuZXh0cmFGaWVsZHNbMjg3ODldO2lmKGUpe3ZhciB0PW4oZS52YWx1ZSk7cmV0dXJuIDEhPT10LnJlYWRJbnQoMSk/bnVsbDpvKHRoaXMuZmlsZU5hbWUpIT09dC5yZWFkSW50KDQpP251bGw6YS51dGY4ZGVjb2RlKHQucmVhZERhdGEoZS5sZW5ndGgtNSkpfXJldHVybiBudWxsfSxmaW5kRXh0cmFGaWVsZFVuaWNvZGVDb21tZW50OmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5leHRyYUZpZWxkc1syNTQ2MV07aWYoZSl7dmFyIHQ9bihlLnZhbHVlKTtyZXR1cm4gMSE9PXQucmVhZEludCgxKT9udWxsOm8odGhpcy5maWxlQ29tbWVudCkhPT10LnJlYWRJbnQoNCk/bnVsbDphLnV0ZjhkZWNvZGUodC5yZWFkRGF0YShlLmxlbmd0aC01KSl9cmV0dXJuIG51bGx9fSx0LmV4cG9ydHM9ZH0se1wiLi9jb21wcmVzc2VkT2JqZWN0XCI6MixcIi4vY29tcHJlc3Npb25zXCI6MyxcIi4vY3JjMzJcIjo0LFwiLi9yZWFkZXIvcmVhZGVyRm9yXCI6MjIsXCIuL3N1cHBvcnRcIjozMCxcIi4vdXRmOFwiOjMxLFwiLi91dGlsc1wiOjMyfV0sMzU6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBuKGUsdCxyKXt0aGlzLm5hbWU9ZSx0aGlzLmRpcj1yLmRpcix0aGlzLmRhdGU9ci5kYXRlLHRoaXMuY29tbWVudD1yLmNvbW1lbnQsdGhpcy51bml4UGVybWlzc2lvbnM9ci51bml4UGVybWlzc2lvbnMsdGhpcy5kb3NQZXJtaXNzaW9ucz1yLmRvc1Blcm1pc3Npb25zLHRoaXMuX2RhdGE9dCx0aGlzLl9kYXRhQmluYXJ5PXIuYmluYXJ5LHRoaXMub3B0aW9ucz17Y29tcHJlc3Npb246ci5jb21wcmVzc2lvbixjb21wcmVzc2lvbk9wdGlvbnM6ci5jb21wcmVzc2lvbk9wdGlvbnN9fXZhciBzPWUoXCIuL3N0cmVhbS9TdHJlYW1IZWxwZXJcIiksaT1lKFwiLi9zdHJlYW0vRGF0YVdvcmtlclwiKSxvPWUoXCIuL3V0ZjhcIiksYT1lKFwiLi9jb21wcmVzc2VkT2JqZWN0XCIpLGY9ZShcIi4vc3RyZWFtL0dlbmVyaWNXb3JrZXJcIik7bi5wcm90b3R5cGU9e2ludGVybmFsU3RyZWFtOmZ1bmN0aW9uKGUpe3ZhciB0PW51bGwscj1cInN0cmluZ1wiO3RyeXtpZighZSl0aHJvdyBuZXcgRXJyb3IoXCJObyBvdXRwdXQgdHlwZSBzcGVjaWZpZWQuXCIpO3ZhciBuPVwic3RyaW5nXCI9PT0ocj1lLnRvTG93ZXJDYXNlKCkpfHxcInRleHRcIj09PXI7XCJiaW5hcnlzdHJpbmdcIiE9PXImJlwidGV4dFwiIT09cnx8KHI9XCJzdHJpbmdcIiksdD10aGlzLl9kZWNvbXByZXNzV29ya2VyKCk7dmFyIGk9IXRoaXMuX2RhdGFCaW5hcnk7aSYmIW4mJih0PXQucGlwZShuZXcgby5VdGY4RW5jb2RlV29ya2VyKSksIWkmJm4mJih0PXQucGlwZShuZXcgby5VdGY4RGVjb2RlV29ya2VyKSl9Y2F0Y2goZSl7KHQ9bmV3IGYoXCJlcnJvclwiKSkuZXJyb3IoZSl9cmV0dXJuIG5ldyBzKHQscixcIlwiKX0sYXN5bmM6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5pbnRlcm5hbFN0cmVhbShlKS5hY2N1bXVsYXRlKHQpfSxub2RlU3RyZWFtOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuaW50ZXJuYWxTdHJlYW0oZXx8XCJub2RlYnVmZmVyXCIpLnRvTm9kZWpzU3RyZWFtKHQpfSxfY29tcHJlc3NXb3JrZXI6ZnVuY3Rpb24oZSx0KXtpZih0aGlzLl9kYXRhIGluc3RhbmNlb2YgYSYmdGhpcy5fZGF0YS5jb21wcmVzc2lvbi5tYWdpYz09PWUubWFnaWMpcmV0dXJuIHRoaXMuX2RhdGEuZ2V0Q29tcHJlc3NlZFdvcmtlcigpO3ZhciByPXRoaXMuX2RlY29tcHJlc3NXb3JrZXIoKTtyZXR1cm4gdGhpcy5fZGF0YUJpbmFyeXx8KHI9ci5waXBlKG5ldyBvLlV0ZjhFbmNvZGVXb3JrZXIpKSxhLmNyZWF0ZVdvcmtlckZyb20ocixlLHQpfSxfZGVjb21wcmVzc1dvcmtlcjpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9kYXRhIGluc3RhbmNlb2YgYT90aGlzLl9kYXRhLmdldENvbnRlbnRXb3JrZXIoKTp0aGlzLl9kYXRhIGluc3RhbmNlb2YgZj90aGlzLl9kYXRhOm5ldyBpKHRoaXMuX2RhdGEpfX07Zm9yKHZhciB1PVtcImFzVGV4dFwiLFwiYXNCaW5hcnlcIixcImFzTm9kZUJ1ZmZlclwiLFwiYXNVaW50OEFycmF5XCIsXCJhc0FycmF5QnVmZmVyXCJdLGQ9ZnVuY3Rpb24oKXt0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIG1ldGhvZCBoYXMgYmVlbiByZW1vdmVkIGluIEpTWmlwIDMuMCwgcGxlYXNlIGNoZWNrIHRoZSB1cGdyYWRlIGd1aWRlLlwiKX0saD0wO2g8dS5sZW5ndGg7aCsrKW4ucHJvdG90eXBlW3VbaF1dPWQ7dC5leHBvcnRzPW59LHtcIi4vY29tcHJlc3NlZE9iamVjdFwiOjIsXCIuL3N0cmVhbS9EYXRhV29ya2VyXCI6MjcsXCIuL3N0cmVhbS9HZW5lcmljV29ya2VyXCI6MjgsXCIuL3N0cmVhbS9TdHJlYW1IZWxwZXJcIjoyOSxcIi4vdXRmOFwiOjMxfV0sMzY6W2Z1bmN0aW9uKGUsZCx0KXsoZnVuY3Rpb24odCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIHIsbixlPXQuTXV0YXRpb25PYnNlcnZlcnx8dC5XZWJLaXRNdXRhdGlvbk9ic2VydmVyO2lmKGUpe3ZhciBpPTAscz1uZXcgZSh1KSxvPXQuZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoXCJcIik7cy5vYnNlcnZlKG8se2NoYXJhY3RlckRhdGE6ITB9KSxyPWZ1bmN0aW9uKCl7by5kYXRhPWk9KytpJTJ9fWVsc2UgaWYodC5zZXRJbW1lZGlhdGV8fHZvaWQgMD09PXQuTWVzc2FnZUNoYW5uZWwpcj1cImRvY3VtZW50XCJpbiB0JiZcIm9ucmVhZHlzdGF0ZWNoYW5nZVwiaW4gdC5kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpP2Z1bmN0aW9uKCl7dmFyIGU9dC5kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO2Uub25yZWFkeXN0YXRlY2hhbmdlPWZ1bmN0aW9uKCl7dSgpLGUub25yZWFkeXN0YXRlY2hhbmdlPW51bGwsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGUpLGU9bnVsbH0sdC5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoZSl9OmZ1bmN0aW9uKCl7c2V0VGltZW91dCh1LDApfTtlbHNle3ZhciBhPW5ldyB0Lk1lc3NhZ2VDaGFubmVsO2EucG9ydDEub25tZXNzYWdlPXUscj1mdW5jdGlvbigpe2EucG9ydDIucG9zdE1lc3NhZ2UoMCl9fXZhciBmPVtdO2Z1bmN0aW9uIHUoKXt2YXIgZSx0O249ITA7Zm9yKHZhciByPWYubGVuZ3RoO3I7KXtmb3IodD1mLGY9W10sZT0tMTsrK2U8cjspdFtlXSgpO3I9Zi5sZW5ndGh9bj0hMX1kLmV4cG9ydHM9ZnVuY3Rpb24oZSl7MSE9PWYucHVzaChlKXx8bnx8cigpfX0pLmNhbGwodGhpcyx2b2lkIDAhPT1yP3I6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGY/c2VsZjpcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzp7fSl9LHt9XSwzNzpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBpPWUoXCJpbW1lZGlhdGVcIik7ZnVuY3Rpb24gdSgpe312YXIgZD17fSxzPVtcIlJFSkVDVEVEXCJdLG89W1wiRlVMRklMTEVEXCJdLG49W1wiUEVORElOR1wiXTtmdW5jdGlvbiBhKGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUpdGhyb3cgbmV3IFR5cGVFcnJvcihcInJlc29sdmVyIG11c3QgYmUgYSBmdW5jdGlvblwiKTt0aGlzLnN0YXRlPW4sdGhpcy5xdWV1ZT1bXSx0aGlzLm91dGNvbWU9dm9pZCAwLGUhPT11JiZjKHRoaXMsZSl9ZnVuY3Rpb24gZihlLHQscil7dGhpcy5wcm9taXNlPWUsXCJmdW5jdGlvblwiPT10eXBlb2YgdCYmKHRoaXMub25GdWxmaWxsZWQ9dCx0aGlzLmNhbGxGdWxmaWxsZWQ9dGhpcy5vdGhlckNhbGxGdWxmaWxsZWQpLFwiZnVuY3Rpb25cIj09dHlwZW9mIHImJih0aGlzLm9uUmVqZWN0ZWQ9cix0aGlzLmNhbGxSZWplY3RlZD10aGlzLm90aGVyQ2FsbFJlamVjdGVkKX1mdW5jdGlvbiBoKHQscixuKXtpKGZ1bmN0aW9uKCl7dmFyIGU7dHJ5e2U9cihuKX1jYXRjaChlKXtyZXR1cm4gZC5yZWplY3QodCxlKX1lPT09dD9kLnJlamVjdCh0LG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVzb2x2ZSBwcm9taXNlIHdpdGggaXRzZWxmXCIpKTpkLnJlc29sdmUodCxlKX0pfWZ1bmN0aW9uIGwoZSl7dmFyIHQ9ZSYmZS50aGVuO2lmKGUmJihcIm9iamVjdFwiPT10eXBlb2YgZXx8XCJmdW5jdGlvblwiPT10eXBlb2YgZSkmJlwiZnVuY3Rpb25cIj09dHlwZW9mIHQpcmV0dXJuIGZ1bmN0aW9uKCl7dC5hcHBseShlLGFyZ3VtZW50cyl9fWZ1bmN0aW9uIGModCxlKXt2YXIgcj0hMTtmdW5jdGlvbiBuKGUpe3J8fChyPSEwLGQucmVqZWN0KHQsZSkpfWZ1bmN0aW9uIGkoZSl7cnx8KHI9ITAsZC5yZXNvbHZlKHQsZSkpfXZhciBzPXAoZnVuY3Rpb24oKXtlKGksbil9KTtcImVycm9yXCI9PT1zLnN0YXR1cyYmbihzLnZhbHVlKX1mdW5jdGlvbiBwKGUsdCl7dmFyIHI9e307dHJ5e3IudmFsdWU9ZSh0KSxyLnN0YXR1cz1cInN1Y2Nlc3NcIn1jYXRjaChlKXtyLnN0YXR1cz1cImVycm9yXCIsci52YWx1ZT1lfXJldHVybiByfSh0LmV4cG9ydHM9YSkucHJvdG90eXBlLmZpbmFsbHk9ZnVuY3Rpb24odCl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdClyZXR1cm4gdGhpczt2YXIgcj10aGlzLmNvbnN0cnVjdG9yO3JldHVybiB0aGlzLnRoZW4oZnVuY3Rpb24oZSl7cmV0dXJuIHIucmVzb2x2ZSh0KCkpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gZX0pfSxmdW5jdGlvbihlKXtyZXR1cm4gci5yZXNvbHZlKHQoKSkudGhlbihmdW5jdGlvbigpe3Rocm93IGV9KX0pfSxhLnByb3RvdHlwZS5jYXRjaD1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy50aGVuKG51bGwsZSl9LGEucHJvdG90eXBlLnRoZW49ZnVuY3Rpb24oZSx0KXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlJiZ0aGlzLnN0YXRlPT09b3x8XCJmdW5jdGlvblwiIT10eXBlb2YgdCYmdGhpcy5zdGF0ZT09PXMpcmV0dXJuIHRoaXM7dmFyIHI9bmV3IHRoaXMuY29uc3RydWN0b3IodSk7cmV0dXJuIHRoaXMuc3RhdGUhPT1uP2gocix0aGlzLnN0YXRlPT09bz9lOnQsdGhpcy5vdXRjb21lKTp0aGlzLnF1ZXVlLnB1c2gobmV3IGYocixlLHQpKSxyfSxmLnByb3RvdHlwZS5jYWxsRnVsZmlsbGVkPWZ1bmN0aW9uKGUpe2QucmVzb2x2ZSh0aGlzLnByb21pc2UsZSl9LGYucHJvdG90eXBlLm90aGVyQ2FsbEZ1bGZpbGxlZD1mdW5jdGlvbihlKXtoKHRoaXMucHJvbWlzZSx0aGlzLm9uRnVsZmlsbGVkLGUpfSxmLnByb3RvdHlwZS5jYWxsUmVqZWN0ZWQ9ZnVuY3Rpb24oZSl7ZC5yZWplY3QodGhpcy5wcm9taXNlLGUpfSxmLnByb3RvdHlwZS5vdGhlckNhbGxSZWplY3RlZD1mdW5jdGlvbihlKXtoKHRoaXMucHJvbWlzZSx0aGlzLm9uUmVqZWN0ZWQsZSl9LGQucmVzb2x2ZT1mdW5jdGlvbihlLHQpe3ZhciByPXAobCx0KTtpZihcImVycm9yXCI9PT1yLnN0YXR1cylyZXR1cm4gZC5yZWplY3QoZSxyLnZhbHVlKTt2YXIgbj1yLnZhbHVlO2lmKG4pYyhlLG4pO2Vsc2V7ZS5zdGF0ZT1vLGUub3V0Y29tZT10O2Zvcih2YXIgaT0tMSxzPWUucXVldWUubGVuZ3RoOysraTxzOyllLnF1ZXVlW2ldLmNhbGxGdWxmaWxsZWQodCl9cmV0dXJuIGV9LGQucmVqZWN0PWZ1bmN0aW9uKGUsdCl7ZS5zdGF0ZT1zLGUub3V0Y29tZT10O2Zvcih2YXIgcj0tMSxuPWUucXVldWUubGVuZ3RoOysrcjxuOyllLnF1ZXVlW3JdLmNhbGxSZWplY3RlZCh0KTtyZXR1cm4gZX0sYS5yZXNvbHZlPWZ1bmN0aW9uKGUpe3JldHVybiBlIGluc3RhbmNlb2YgdGhpcz9lOmQucmVzb2x2ZShuZXcgdGhpcyh1KSxlKX0sYS5yZWplY3Q9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IHRoaXModSk7cmV0dXJuIGQucmVqZWN0KHQsZSl9LGEuYWxsPWZ1bmN0aW9uKGUpe3ZhciByPXRoaXM7aWYoXCJbb2JqZWN0IEFycmF5XVwiIT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpKXJldHVybiB0aGlzLnJlamVjdChuZXcgVHlwZUVycm9yKFwibXVzdCBiZSBhbiBhcnJheVwiKSk7dmFyIG49ZS5sZW5ndGgsaT0hMTtpZighbilyZXR1cm4gdGhpcy5yZXNvbHZlKFtdKTtmb3IodmFyIHM9bmV3IEFycmF5KG4pLG89MCx0PS0xLGE9bmV3IHRoaXModSk7Kyt0PG47KWYoZVt0XSx0KTtyZXR1cm4gYTtmdW5jdGlvbiBmKGUsdCl7ci5yZXNvbHZlKGUpLnRoZW4oZnVuY3Rpb24oZSl7c1t0XT1lLCsrbyE9PW58fGl8fChpPSEwLGQucmVzb2x2ZShhLHMpKX0sZnVuY3Rpb24oZSl7aXx8KGk9ITAsZC5yZWplY3QoYSxlKSl9KX19LGEucmFjZT1mdW5jdGlvbihlKXtpZihcIltvYmplY3QgQXJyYXldXCIhPT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkpcmV0dXJuIHRoaXMucmVqZWN0KG5ldyBUeXBlRXJyb3IoXCJtdXN0IGJlIGFuIGFycmF5XCIpKTt2YXIgdD1lLmxlbmd0aCxyPSExO2lmKCF0KXJldHVybiB0aGlzLnJlc29sdmUoW10pO2Zvcih2YXIgbixpPS0xLHM9bmV3IHRoaXModSk7KytpPHQ7KW49ZVtpXSx0aGlzLnJlc29sdmUobikudGhlbihmdW5jdGlvbihlKXtyfHwocj0hMCxkLnJlc29sdmUocyxlKSl9LGZ1bmN0aW9uKGUpe3J8fChyPSEwLGQucmVqZWN0KHMsZSkpfSk7cmV0dXJuIHN9fSx7aW1tZWRpYXRlOjM2fV0sMzg6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj17fTsoMCxlKFwiLi9saWIvdXRpbHMvY29tbW9uXCIpLmFzc2lnbikobixlKFwiLi9saWIvZGVmbGF0ZVwiKSxlKFwiLi9saWIvaW5mbGF0ZVwiKSxlKFwiLi9saWIvemxpYi9jb25zdGFudHNcIikpLHQuZXhwb3J0cz1ufSx7XCIuL2xpYi9kZWZsYXRlXCI6MzksXCIuL2xpYi9pbmZsYXRlXCI6NDAsXCIuL2xpYi91dGlscy9jb21tb25cIjo0MSxcIi4vbGliL3psaWIvY29uc3RhbnRzXCI6NDR9XSwzOTpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBvPWUoXCIuL3psaWIvZGVmbGF0ZVwiKSxhPWUoXCIuL3V0aWxzL2NvbW1vblwiKSxmPWUoXCIuL3V0aWxzL3N0cmluZ3NcIiksaT1lKFwiLi96bGliL21lc3NhZ2VzXCIpLHM9ZShcIi4vemxpYi96c3RyZWFtXCIpLHU9T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZyxkPTAsaD0tMSxsPTAsYz04O2Z1bmN0aW9uIHAoZSl7aWYoISh0aGlzIGluc3RhbmNlb2YgcCkpcmV0dXJuIG5ldyBwKGUpO3RoaXMub3B0aW9ucz1hLmFzc2lnbih7bGV2ZWw6aCxtZXRob2Q6YyxjaHVua1NpemU6MTYzODQsd2luZG93Qml0czoxNSxtZW1MZXZlbDo4LHN0cmF0ZWd5OmwsdG86XCJcIn0sZXx8e30pO3ZhciB0PXRoaXMub3B0aW9uczt0LnJhdyYmMDx0LndpbmRvd0JpdHM/dC53aW5kb3dCaXRzPS10LndpbmRvd0JpdHM6dC5nemlwJiYwPHQud2luZG93Qml0cyYmdC53aW5kb3dCaXRzPDE2JiYodC53aW5kb3dCaXRzKz0xNiksdGhpcy5lcnI9MCx0aGlzLm1zZz1cIlwiLHRoaXMuZW5kZWQ9ITEsdGhpcy5jaHVua3M9W10sdGhpcy5zdHJtPW5ldyBzLHRoaXMuc3RybS5hdmFpbF9vdXQ9MDt2YXIgcj1vLmRlZmxhdGVJbml0Mih0aGlzLnN0cm0sdC5sZXZlbCx0Lm1ldGhvZCx0LndpbmRvd0JpdHMsdC5tZW1MZXZlbCx0LnN0cmF0ZWd5KTtpZihyIT09ZCl0aHJvdyBuZXcgRXJyb3IoaVtyXSk7aWYodC5oZWFkZXImJm8uZGVmbGF0ZVNldEhlYWRlcih0aGlzLnN0cm0sdC5oZWFkZXIpLHQuZGljdGlvbmFyeSl7dmFyIG47aWYobj1cInN0cmluZ1wiPT10eXBlb2YgdC5kaWN0aW9uYXJ5P2Yuc3RyaW5nMmJ1Zih0LmRpY3Rpb25hcnkpOlwiW29iamVjdCBBcnJheUJ1ZmZlcl1cIj09PXUuY2FsbCh0LmRpY3Rpb25hcnkpP25ldyBVaW50OEFycmF5KHQuZGljdGlvbmFyeSk6dC5kaWN0aW9uYXJ5LChyPW8uZGVmbGF0ZVNldERpY3Rpb25hcnkodGhpcy5zdHJtLG4pKSE9PWQpdGhyb3cgbmV3IEVycm9yKGlbcl0pO3RoaXMuX2RpY3Rfc2V0PSEwfX1mdW5jdGlvbiBuKGUsdCl7dmFyIHI9bmV3IHAodCk7aWYoci5wdXNoKGUsITApLHIuZXJyKXRocm93IHIubXNnfHxpW3IuZXJyXTtyZXR1cm4gci5yZXN1bHR9cC5wcm90b3R5cGUucHVzaD1mdW5jdGlvbihlLHQpe3ZhciByLG4saT10aGlzLnN0cm0scz10aGlzLm9wdGlvbnMuY2h1bmtTaXplO2lmKHRoaXMuZW5kZWQpcmV0dXJuITE7bj10PT09fn50P3Q6ITA9PT10PzQ6MCxcInN0cmluZ1wiPT10eXBlb2YgZT9pLmlucHV0PWYuc3RyaW5nMmJ1ZihlKTpcIltvYmplY3QgQXJyYXlCdWZmZXJdXCI9PT11LmNhbGwoZSk/aS5pbnB1dD1uZXcgVWludDhBcnJheShlKTppLmlucHV0PWUsaS5uZXh0X2luPTAsaS5hdmFpbF9pbj1pLmlucHV0Lmxlbmd0aDtkb3tpZigwPT09aS5hdmFpbF9vdXQmJihpLm91dHB1dD1uZXcgYS5CdWY4KHMpLGkubmV4dF9vdXQ9MCxpLmF2YWlsX291dD1zKSwxIT09KHI9by5kZWZsYXRlKGksbikpJiZyIT09ZClyZXR1cm4gdGhpcy5vbkVuZChyKSwhKHRoaXMuZW5kZWQ9ITApOzAhPT1pLmF2YWlsX291dCYmKDAhPT1pLmF2YWlsX2lufHw0IT09biYmMiE9PW4pfHwoXCJzdHJpbmdcIj09PXRoaXMub3B0aW9ucy50bz90aGlzLm9uRGF0YShmLmJ1ZjJiaW5zdHJpbmcoYS5zaHJpbmtCdWYoaS5vdXRwdXQsaS5uZXh0X291dCkpKTp0aGlzLm9uRGF0YShhLnNocmlua0J1ZihpLm91dHB1dCxpLm5leHRfb3V0KSkpfXdoaWxlKCgwPGkuYXZhaWxfaW58fDA9PT1pLmF2YWlsX291dCkmJjEhPT1yKTtyZXR1cm4gND09PW4/KHI9by5kZWZsYXRlRW5kKHRoaXMuc3RybSksdGhpcy5vbkVuZChyKSx0aGlzLmVuZGVkPSEwLHI9PT1kKToyIT09bnx8KHRoaXMub25FbmQoZCksIShpLmF2YWlsX291dD0wKSl9LHAucHJvdG90eXBlLm9uRGF0YT1mdW5jdGlvbihlKXt0aGlzLmNodW5rcy5wdXNoKGUpfSxwLnByb3RvdHlwZS5vbkVuZD1mdW5jdGlvbihlKXtlPT09ZCYmKFwic3RyaW5nXCI9PT10aGlzLm9wdGlvbnMudG8/dGhpcy5yZXN1bHQ9dGhpcy5jaHVua3Muam9pbihcIlwiKTp0aGlzLnJlc3VsdD1hLmZsYXR0ZW5DaHVua3ModGhpcy5jaHVua3MpKSx0aGlzLmNodW5rcz1bXSx0aGlzLmVycj1lLHRoaXMubXNnPXRoaXMuc3RybS5tc2d9LHIuRGVmbGF0ZT1wLHIuZGVmbGF0ZT1uLHIuZGVmbGF0ZVJhdz1mdW5jdGlvbihlLHQpe3JldHVybih0PXR8fHt9KS5yYXc9ITAsbihlLHQpfSxyLmd6aXA9ZnVuY3Rpb24oZSx0KXtyZXR1cm4odD10fHx7fSkuZ3ppcD0hMCxuKGUsdCl9fSx7XCIuL3V0aWxzL2NvbW1vblwiOjQxLFwiLi91dGlscy9zdHJpbmdzXCI6NDIsXCIuL3psaWIvZGVmbGF0ZVwiOjQ2LFwiLi96bGliL21lc3NhZ2VzXCI6NTEsXCIuL3psaWIvenN0cmVhbVwiOjUzfV0sNDA6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbD1lKFwiLi96bGliL2luZmxhdGVcIiksYz1lKFwiLi91dGlscy9jb21tb25cIikscD1lKFwiLi91dGlscy9zdHJpbmdzXCIpLG09ZShcIi4vemxpYi9jb25zdGFudHNcIiksbj1lKFwiLi96bGliL21lc3NhZ2VzXCIpLGk9ZShcIi4vemxpYi96c3RyZWFtXCIpLHM9ZShcIi4vemxpYi9nemhlYWRlclwiKSxfPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7ZnVuY3Rpb24gbyhlKXtpZighKHRoaXMgaW5zdGFuY2VvZiBvKSlyZXR1cm4gbmV3IG8oZSk7dGhpcy5vcHRpb25zPWMuYXNzaWduKHtjaHVua1NpemU6MTYzODQsd2luZG93Qml0czowLHRvOlwiXCJ9LGV8fHt9KTt2YXIgdD10aGlzLm9wdGlvbnM7dC5yYXcmJjA8PXQud2luZG93Qml0cyYmdC53aW5kb3dCaXRzPDE2JiYodC53aW5kb3dCaXRzPS10LndpbmRvd0JpdHMsMD09PXQud2luZG93Qml0cyYmKHQud2luZG93Qml0cz0tMTUpKSwhKDA8PXQud2luZG93Qml0cyYmdC53aW5kb3dCaXRzPDE2KXx8ZSYmZS53aW5kb3dCaXRzfHwodC53aW5kb3dCaXRzKz0zMiksMTU8dC53aW5kb3dCaXRzJiZ0LndpbmRvd0JpdHM8NDgmJjA9PSgxNSZ0LndpbmRvd0JpdHMpJiYodC53aW5kb3dCaXRzfD0xNSksdGhpcy5lcnI9MCx0aGlzLm1zZz1cIlwiLHRoaXMuZW5kZWQ9ITEsdGhpcy5jaHVua3M9W10sdGhpcy5zdHJtPW5ldyBpLHRoaXMuc3RybS5hdmFpbF9vdXQ9MDt2YXIgcj1sLmluZmxhdGVJbml0Mih0aGlzLnN0cm0sdC53aW5kb3dCaXRzKTtpZihyIT09bS5aX09LKXRocm93IG5ldyBFcnJvcihuW3JdKTt0aGlzLmhlYWRlcj1uZXcgcyxsLmluZmxhdGVHZXRIZWFkZXIodGhpcy5zdHJtLHRoaXMuaGVhZGVyKX1mdW5jdGlvbiBhKGUsdCl7dmFyIHI9bmV3IG8odCk7aWYoci5wdXNoKGUsITApLHIuZXJyKXRocm93IHIubXNnfHxuW3IuZXJyXTtyZXR1cm4gci5yZXN1bHR9by5wcm90b3R5cGUucHVzaD1mdW5jdGlvbihlLHQpe3ZhciByLG4saSxzLG8sYSxmPXRoaXMuc3RybSx1PXRoaXMub3B0aW9ucy5jaHVua1NpemUsZD10aGlzLm9wdGlvbnMuZGljdGlvbmFyeSxoPSExO2lmKHRoaXMuZW5kZWQpcmV0dXJuITE7bj10PT09fn50P3Q6ITA9PT10P20uWl9GSU5JU0g6bS5aX05PX0ZMVVNILFwic3RyaW5nXCI9PXR5cGVvZiBlP2YuaW5wdXQ9cC5iaW5zdHJpbmcyYnVmKGUpOlwiW29iamVjdCBBcnJheUJ1ZmZlcl1cIj09PV8uY2FsbChlKT9mLmlucHV0PW5ldyBVaW50OEFycmF5KGUpOmYuaW5wdXQ9ZSxmLm5leHRfaW49MCxmLmF2YWlsX2luPWYuaW5wdXQubGVuZ3RoO2Rve2lmKDA9PT1mLmF2YWlsX291dCYmKGYub3V0cHV0PW5ldyBjLkJ1ZjgodSksZi5uZXh0X291dD0wLGYuYXZhaWxfb3V0PXUpLChyPWwuaW5mbGF0ZShmLG0uWl9OT19GTFVTSCkpPT09bS5aX05FRURfRElDVCYmZCYmKGE9XCJzdHJpbmdcIj09dHlwZW9mIGQ/cC5zdHJpbmcyYnVmKGQpOlwiW29iamVjdCBBcnJheUJ1ZmZlcl1cIj09PV8uY2FsbChkKT9uZXcgVWludDhBcnJheShkKTpkLHI9bC5pbmZsYXRlU2V0RGljdGlvbmFyeSh0aGlzLnN0cm0sYSkpLHI9PT1tLlpfQlVGX0VSUk9SJiYhMD09PWgmJihyPW0uWl9PSyxoPSExKSxyIT09bS5aX1NUUkVBTV9FTkQmJnIhPT1tLlpfT0spcmV0dXJuIHRoaXMub25FbmQociksISh0aGlzLmVuZGVkPSEwKTtmLm5leHRfb3V0JiYoMCE9PWYuYXZhaWxfb3V0JiZyIT09bS5aX1NUUkVBTV9FTkQmJigwIT09Zi5hdmFpbF9pbnx8biE9PW0uWl9GSU5JU0gmJm4hPT1tLlpfU1lOQ19GTFVTSCl8fChcInN0cmluZ1wiPT09dGhpcy5vcHRpb25zLnRvPyhpPXAudXRmOGJvcmRlcihmLm91dHB1dCxmLm5leHRfb3V0KSxzPWYubmV4dF9vdXQtaSxvPXAuYnVmMnN0cmluZyhmLm91dHB1dCxpKSxmLm5leHRfb3V0PXMsZi5hdmFpbF9vdXQ9dS1zLHMmJmMuYXJyYXlTZXQoZi5vdXRwdXQsZi5vdXRwdXQsaSxzLDApLHRoaXMub25EYXRhKG8pKTp0aGlzLm9uRGF0YShjLnNocmlua0J1ZihmLm91dHB1dCxmLm5leHRfb3V0KSkpKSwwPT09Zi5hdmFpbF9pbiYmMD09PWYuYXZhaWxfb3V0JiYoaD0hMCl9d2hpbGUoKDA8Zi5hdmFpbF9pbnx8MD09PWYuYXZhaWxfb3V0KSYmciE9PW0uWl9TVFJFQU1fRU5EKTtyZXR1cm4gcj09PW0uWl9TVFJFQU1fRU5EJiYobj1tLlpfRklOSVNIKSxuPT09bS5aX0ZJTklTSD8ocj1sLmluZmxhdGVFbmQodGhpcy5zdHJtKSx0aGlzLm9uRW5kKHIpLHRoaXMuZW5kZWQ9ITAscj09PW0uWl9PSyk6biE9PW0uWl9TWU5DX0ZMVVNIfHwodGhpcy5vbkVuZChtLlpfT0spLCEoZi5hdmFpbF9vdXQ9MCkpfSxvLnByb3RvdHlwZS5vbkRhdGE9ZnVuY3Rpb24oZSl7dGhpcy5jaHVua3MucHVzaChlKX0sby5wcm90b3R5cGUub25FbmQ9ZnVuY3Rpb24oZSl7ZT09PW0uWl9PSyYmKFwic3RyaW5nXCI9PT10aGlzLm9wdGlvbnMudG8/dGhpcy5yZXN1bHQ9dGhpcy5jaHVua3Muam9pbihcIlwiKTp0aGlzLnJlc3VsdD1jLmZsYXR0ZW5DaHVua3ModGhpcy5jaHVua3MpKSx0aGlzLmNodW5rcz1bXSx0aGlzLmVycj1lLHRoaXMubXNnPXRoaXMuc3RybS5tc2d9LHIuSW5mbGF0ZT1vLHIuaW5mbGF0ZT1hLHIuaW5mbGF0ZVJhdz1mdW5jdGlvbihlLHQpe3JldHVybih0PXR8fHt9KS5yYXc9ITAsYShlLHQpfSxyLnVuZ3ppcD1hfSx7XCIuL3V0aWxzL2NvbW1vblwiOjQxLFwiLi91dGlscy9zdHJpbmdzXCI6NDIsXCIuL3psaWIvY29uc3RhbnRzXCI6NDQsXCIuL3psaWIvZ3poZWFkZXJcIjo0NyxcIi4vemxpYi9pbmZsYXRlXCI6NDksXCIuL3psaWIvbWVzc2FnZXNcIjo1MSxcIi4vemxpYi96c3RyZWFtXCI6NTN9XSw0MTpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBVaW50OEFycmF5JiZcInVuZGVmaW5lZFwiIT10eXBlb2YgVWludDE2QXJyYXkmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBJbnQzMkFycmF5O3IuYXNzaWduPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMSk7dC5sZW5ndGg7KXt2YXIgcj10LnNoaWZ0KCk7aWYocil7aWYoXCJvYmplY3RcIiE9dHlwZW9mIHIpdGhyb3cgbmV3IFR5cGVFcnJvcihyK1wibXVzdCBiZSBub24tb2JqZWN0XCIpO2Zvcih2YXIgbiBpbiByKXIuaGFzT3duUHJvcGVydHkobikmJihlW25dPXJbbl0pfX1yZXR1cm4gZX0sci5zaHJpbmtCdWY9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS5sZW5ndGg9PT10P2U6ZS5zdWJhcnJheT9lLnN1YmFycmF5KDAsdCk6KGUubGVuZ3RoPXQsZSl9O3ZhciBpPXthcnJheVNldDpmdW5jdGlvbihlLHQscixuLGkpe2lmKHQuc3ViYXJyYXkmJmUuc3ViYXJyYXkpZS5zZXQodC5zdWJhcnJheShyLHIrbiksaSk7ZWxzZSBmb3IodmFyIHM9MDtzPG47cysrKWVbaStzXT10W3Irc119LGZsYXR0ZW5DaHVua3M6ZnVuY3Rpb24oZSl7dmFyIHQscixuLGkscyxvO2Zvcih0PW49MCxyPWUubGVuZ3RoO3Q8cjt0Kyspbis9ZVt0XS5sZW5ndGg7Zm9yKG89bmV3IFVpbnQ4QXJyYXkobiksdD1pPTAscj1lLmxlbmd0aDt0PHI7dCsrKXM9ZVt0XSxvLnNldChzLGkpLGkrPXMubGVuZ3RoO3JldHVybiBvfX0scz17YXJyYXlTZXQ6ZnVuY3Rpb24oZSx0LHIsbixpKXtmb3IodmFyIHM9MDtzPG47cysrKWVbaStzXT10W3Irc119LGZsYXR0ZW5DaHVua3M6ZnVuY3Rpb24oZSl7cmV0dXJuW10uY29uY2F0LmFwcGx5KFtdLGUpfX07ci5zZXRUeXBlZD1mdW5jdGlvbihlKXtlPyhyLkJ1Zjg9VWludDhBcnJheSxyLkJ1ZjE2PVVpbnQxNkFycmF5LHIuQnVmMzI9SW50MzJBcnJheSxyLmFzc2lnbihyLGkpKTooci5CdWY4PUFycmF5LHIuQnVmMTY9QXJyYXksci5CdWYzMj1BcnJheSxyLmFzc2lnbihyLHMpKX0sci5zZXRUeXBlZChuKX0se31dLDQyOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIGY9ZShcIi4vY29tbW9uXCIpLGk9ITAscz0hMDt0cnl7U3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLFswXSl9Y2F0Y2goZSl7aT0hMX10cnl7U3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLG5ldyBVaW50OEFycmF5KDEpKX1jYXRjaChlKXtzPSExfWZvcih2YXIgdT1uZXcgZi5CdWY4KDI1Niksbj0wO248MjU2O24rKyl1W25dPTI1Mjw9bj82OjI0ODw9bj81OjI0MDw9bj80OjIyNDw9bj8zOjE5Mjw9bj8yOjE7ZnVuY3Rpb24gZChlLHQpe2lmKHQ8NjU1MzcmJihlLnN1YmFycmF5JiZzfHwhZS5zdWJhcnJheSYmaSkpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCxmLnNocmlua0J1ZihlLHQpKTtmb3IodmFyIHI9XCJcIixuPTA7bjx0O24rKylyKz1TdHJpbmcuZnJvbUNoYXJDb2RlKGVbbl0pO3JldHVybiByfXVbMjU0XT11WzI1NF09MSxyLnN0cmluZzJidWY9ZnVuY3Rpb24oZSl7dmFyIHQscixuLGkscyxvPWUubGVuZ3RoLGE9MDtmb3IoaT0wO2k8bztpKyspNTUyOTY9PSg2NDUxMiYocj1lLmNoYXJDb2RlQXQoaSkpKSYmaSsxPG8mJjU2MzIwPT0oNjQ1MTImKG49ZS5jaGFyQ29kZUF0KGkrMSkpKSYmKHI9NjU1MzYrKHItNTUyOTY8PDEwKSsobi01NjMyMCksaSsrKSxhKz1yPDEyOD8xOnI8MjA0OD8yOnI8NjU1MzY/Mzo0O2Zvcih0PW5ldyBmLkJ1ZjgoYSksaT1zPTA7czxhO2krKyk1NTI5Nj09KDY0NTEyJihyPWUuY2hhckNvZGVBdChpKSkpJiZpKzE8byYmNTYzMjA9PSg2NDUxMiYobj1lLmNoYXJDb2RlQXQoaSsxKSkpJiYocj02NTUzNisoci01NTI5Njw8MTApKyhuLTU2MzIwKSxpKyspLHI8MTI4P3RbcysrXT1yOihyPDIwNDg/dFtzKytdPTE5MnxyPj4+Njoocjw2NTUzNj90W3MrK109MjI0fHI+Pj4xMjoodFtzKytdPTI0MHxyPj4+MTgsdFtzKytdPTEyOHxyPj4+MTImNjMpLHRbcysrXT0xMjh8cj4+PjYmNjMpLHRbcysrXT0xMjh8NjMmcik7cmV0dXJuIHR9LHIuYnVmMmJpbnN0cmluZz1mdW5jdGlvbihlKXtyZXR1cm4gZChlLGUubGVuZ3RoKX0sci5iaW5zdHJpbmcyYnVmPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1uZXcgZi5CdWY4KGUubGVuZ3RoKSxyPTAsbj10Lmxlbmd0aDtyPG47cisrKXRbcl09ZS5jaGFyQ29kZUF0KHIpO3JldHVybiB0fSxyLmJ1ZjJzdHJpbmc9ZnVuY3Rpb24oZSx0KXt2YXIgcixuLGkscyxvPXR8fGUubGVuZ3RoLGE9bmV3IEFycmF5KDIqbyk7Zm9yKHI9bj0wO3I8bzspaWYoKGk9ZVtyKytdKTwxMjgpYVtuKytdPWk7ZWxzZSBpZig0PChzPXVbaV0pKWFbbisrXT02NTUzMyxyKz1zLTE7ZWxzZXtmb3IoaSY9Mj09PXM/MzE6Mz09PXM/MTU6NzsxPHMmJnI8bzspaT1pPDw2fDYzJmVbcisrXSxzLS07MTxzP2FbbisrXT02NTUzMzppPDY1NTM2P2FbbisrXT1pOihpLT02NTUzNixhW24rK109NTUyOTZ8aT4+MTAmMTAyMyxhW24rK109NTYzMjB8MTAyMyZpKX1yZXR1cm4gZChhLG4pfSxyLnV0Zjhib3JkZXI9ZnVuY3Rpb24oZSx0KXt2YXIgcjtmb3IoKHQ9dHx8ZS5sZW5ndGgpPmUubGVuZ3RoJiYodD1lLmxlbmd0aCkscj10LTE7MDw9ciYmMTI4PT0oMTkyJmVbcl0pOylyLS07cmV0dXJuIHI8MD90OjA9PT1yP3Q6cit1W2Vbcl1dPnQ/cjp0fX0se1wiLi9jb21tb25cIjo0MX1dLDQzOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dC5leHBvcnRzPWZ1bmN0aW9uKGUsdCxyLG4pe2Zvcih2YXIgaT02NTUzNSZlfDAscz1lPj4+MTYmNjU1MzV8MCxvPTA7MCE9PXI7KXtmb3Ioci09bz0yZTM8cj8yZTM6cjtzPXMrKGk9aSt0W24rK118MCl8MCwtLW87KTtpJT02NTUyMSxzJT02NTUyMX1yZXR1cm4gaXxzPDwxNnwwfX0se31dLDQ0OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dC5leHBvcnRzPXtaX05PX0ZMVVNIOjAsWl9QQVJUSUFMX0ZMVVNIOjEsWl9TWU5DX0ZMVVNIOjIsWl9GVUxMX0ZMVVNIOjMsWl9GSU5JU0g6NCxaX0JMT0NLOjUsWl9UUkVFUzo2LFpfT0s6MCxaX1NUUkVBTV9FTkQ6MSxaX05FRURfRElDVDoyLFpfRVJSTk86LTEsWl9TVFJFQU1fRVJST1I6LTIsWl9EQVRBX0VSUk9SOi0zLFpfQlVGX0VSUk9SOi01LFpfTk9fQ09NUFJFU1NJT046MCxaX0JFU1RfU1BFRUQ6MSxaX0JFU1RfQ09NUFJFU1NJT046OSxaX0RFRkFVTFRfQ09NUFJFU1NJT046LTEsWl9GSUxURVJFRDoxLFpfSFVGRk1BTl9PTkxZOjIsWl9STEU6MyxaX0ZJWEVEOjQsWl9ERUZBVUxUX1NUUkFURUdZOjAsWl9CSU5BUlk6MCxaX1RFWFQ6MSxaX1VOS05PV046MixaX0RFRkxBVEVEOjh9fSx7fV0sNDU6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgYT1mdW5jdGlvbigpe2Zvcih2YXIgZSx0PVtdLHI9MDtyPDI1NjtyKyspe2U9cjtmb3IodmFyIG49MDtuPDg7bisrKWU9MSZlPzM5ODgyOTIzODReZT4+PjE6ZT4+PjE7dFtyXT1lfXJldHVybiB0fSgpO3QuZXhwb3J0cz1mdW5jdGlvbihlLHQscixuKXt2YXIgaT1hLHM9bityO2VePS0xO2Zvcih2YXIgbz1uO288cztvKyspZT1lPj4+OF5pWzI1NSYoZV50W29dKV07cmV0dXJuLTFeZX19LHt9XSw0NjpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBmLGw9ZShcIi4uL3V0aWxzL2NvbW1vblwiKSx1PWUoXCIuL3RyZWVzXCIpLGM9ZShcIi4vYWRsZXIzMlwiKSxwPWUoXCIuL2NyYzMyXCIpLG49ZShcIi4vbWVzc2FnZXNcIiksZD0wLGg9MCxtPS0yLGk9MixfPTgscz0yODYsbz0zMCxhPTE5LHc9MipzKzEsdj0xNSxnPTMseT0yNTgsYj15K2crMSxrPTQyLHg9MTEzO2Z1bmN0aW9uIFMoZSx0KXtyZXR1cm4gZS5tc2c9blt0XSx0fWZ1bmN0aW9uIEUoZSl7cmV0dXJuKGU8PDEpLSg0PGU/OTowKX1mdW5jdGlvbiB6KGUpe2Zvcih2YXIgdD1lLmxlbmd0aDswPD0tLXQ7KWVbdF09MH1mdW5jdGlvbiBDKGUpe3ZhciB0PWUuc3RhdGUscj10LnBlbmRpbmc7cj5lLmF2YWlsX291dCYmKHI9ZS5hdmFpbF9vdXQpLDAhPT1yJiYobC5hcnJheVNldChlLm91dHB1dCx0LnBlbmRpbmdfYnVmLHQucGVuZGluZ19vdXQscixlLm5leHRfb3V0KSxlLm5leHRfb3V0Kz1yLHQucGVuZGluZ19vdXQrPXIsZS50b3RhbF9vdXQrPXIsZS5hdmFpbF9vdXQtPXIsdC5wZW5kaW5nLT1yLDA9PT10LnBlbmRpbmcmJih0LnBlbmRpbmdfb3V0PTApKX1mdW5jdGlvbiBBKGUsdCl7dS5fdHJfZmx1c2hfYmxvY2soZSwwPD1lLmJsb2NrX3N0YXJ0P2UuYmxvY2tfc3RhcnQ6LTEsZS5zdHJzdGFydC1lLmJsb2NrX3N0YXJ0LHQpLGUuYmxvY2tfc3RhcnQ9ZS5zdHJzdGFydCxDKGUuc3RybSl9ZnVuY3Rpb24gTyhlLHQpe2UucGVuZGluZ19idWZbZS5wZW5kaW5nKytdPXR9ZnVuY3Rpb24gSShlLHQpe2UucGVuZGluZ19idWZbZS5wZW5kaW5nKytdPXQ+Pj44JjI1NSxlLnBlbmRpbmdfYnVmW2UucGVuZGluZysrXT0yNTUmdH1mdW5jdGlvbiBEKGUsdCl7dmFyIHIsbixpPWUubWF4X2NoYWluX2xlbmd0aCxzPWUuc3Ryc3RhcnQsbz1lLnByZXZfbGVuZ3RoLGE9ZS5uaWNlX21hdGNoLGY9ZS5zdHJzdGFydD5lLndfc2l6ZS1iP2Uuc3Ryc3RhcnQtKGUud19zaXplLWIpOjAsdT1lLndpbmRvdyxkPWUud19tYXNrLGg9ZS5wcmV2LGw9ZS5zdHJzdGFydCt5LGM9dVtzK28tMV0scD11W3Mrb107ZS5wcmV2X2xlbmd0aD49ZS5nb29kX21hdGNoJiYoaT4+PTIpLGE+ZS5sb29rYWhlYWQmJihhPWUubG9va2FoZWFkKTtkb3tpZih1WyhyPXQpK29dPT09cCYmdVtyK28tMV09PT1jJiZ1W3JdPT09dVtzXSYmdVsrK3JdPT09dVtzKzFdKXtzKz0yLHIrKztkb3t9d2hpbGUodVsrK3NdPT09dVsrK3JdJiZ1Wysrc109PT11Wysrcl0mJnVbKytzXT09PXVbKytyXSYmdVsrK3NdPT09dVsrK3JdJiZ1Wysrc109PT11Wysrcl0mJnVbKytzXT09PXVbKytyXSYmdVsrK3NdPT09dVsrK3JdJiZ1Wysrc109PT11Wysrcl0mJnM8bCk7aWYobj15LShsLXMpLHM9bC15LG88bil7aWYoZS5tYXRjaF9zdGFydD10LGE8PShvPW4pKWJyZWFrO2M9dVtzK28tMV0scD11W3Mrb119fX13aGlsZSgodD1oW3QmZF0pPmYmJjAhPS0taSk7cmV0dXJuIG88PWUubG9va2FoZWFkP286ZS5sb29rYWhlYWR9ZnVuY3Rpb24gQihlKXt2YXIgdCxyLG4saSxzLG8sYSxmLHUsZCxoPWUud19zaXplO2Rve2lmKGk9ZS53aW5kb3dfc2l6ZS1lLmxvb2thaGVhZC1lLnN0cnN0YXJ0LGUuc3Ryc3RhcnQ+PWgrKGgtYikpe2ZvcihsLmFycmF5U2V0KGUud2luZG93LGUud2luZG93LGgsaCwwKSxlLm1hdGNoX3N0YXJ0LT1oLGUuc3Ryc3RhcnQtPWgsZS5ibG9ja19zdGFydC09aCx0PXI9ZS5oYXNoX3NpemU7bj1lLmhlYWRbLS10XSxlLmhlYWRbdF09aDw9bj9uLWg6MCwtLXI7KTtmb3IodD1yPWg7bj1lLnByZXZbLS10XSxlLnByZXZbdF09aDw9bj9uLWg6MCwtLXI7KTtpKz1ofWlmKDA9PT1lLnN0cm0uYXZhaWxfaW4pYnJlYWs7aWYobz1lLnN0cm0sYT1lLndpbmRvdyxmPWUuc3Ryc3RhcnQrZS5sb29rYWhlYWQsZD12b2lkIDAsKHU9aSk8KGQ9by5hdmFpbF9pbikmJihkPXUpLHI9MD09PWQ/MDooby5hdmFpbF9pbi09ZCxsLmFycmF5U2V0KGEsby5pbnB1dCxvLm5leHRfaW4sZCxmKSwxPT09by5zdGF0ZS53cmFwP28uYWRsZXI9YyhvLmFkbGVyLGEsZCxmKToyPT09by5zdGF0ZS53cmFwJiYoby5hZGxlcj1wKG8uYWRsZXIsYSxkLGYpKSxvLm5leHRfaW4rPWQsby50b3RhbF9pbis9ZCxkKSxlLmxvb2thaGVhZCs9cixlLmxvb2thaGVhZCtlLmluc2VydD49Zylmb3Iocz1lLnN0cnN0YXJ0LWUuaW5zZXJ0LGUuaW5zX2g9ZS53aW5kb3dbc10sZS5pbnNfaD0oZS5pbnNfaDw8ZS5oYXNoX3NoaWZ0XmUud2luZG93W3MrMV0pJmUuaGFzaF9tYXNrO2UuaW5zZXJ0JiYoZS5pbnNfaD0oZS5pbnNfaDw8ZS5oYXNoX3NoaWZ0XmUud2luZG93W3MrZy0xXSkmZS5oYXNoX21hc2ssZS5wcmV2W3MmZS53X21hc2tdPWUuaGVhZFtlLmluc19oXSxlLmhlYWRbZS5pbnNfaF09cyxzKyssZS5pbnNlcnQtLSwhKGUubG9va2FoZWFkK2UuaW5zZXJ0PGcpKTspO313aGlsZShlLmxvb2thaGVhZDxiJiYwIT09ZS5zdHJtLmF2YWlsX2luKX1mdW5jdGlvbiBUKGUsdCl7Zm9yKHZhciByLG47Oyl7aWYoZS5sb29rYWhlYWQ8Yil7aWYoQihlKSxlLmxvb2thaGVhZDxiJiZ0PT09ZClyZXR1cm4gMTtpZigwPT09ZS5sb29rYWhlYWQpYnJlYWt9aWYocj0wLGUubG9va2FoZWFkPj1nJiYoZS5pbnNfaD0oZS5pbnNfaDw8ZS5oYXNoX3NoaWZ0XmUud2luZG93W2Uuc3Ryc3RhcnQrZy0xXSkmZS5oYXNoX21hc2sscj1lLnByZXZbZS5zdHJzdGFydCZlLndfbWFza109ZS5oZWFkW2UuaW5zX2hdLGUuaGVhZFtlLmluc19oXT1lLnN0cnN0YXJ0KSwwIT09ciYmZS5zdHJzdGFydC1yPD1lLndfc2l6ZS1iJiYoZS5tYXRjaF9sZW5ndGg9RChlLHIpKSxlLm1hdGNoX2xlbmd0aD49ZylpZihuPXUuX3RyX3RhbGx5KGUsZS5zdHJzdGFydC1lLm1hdGNoX3N0YXJ0LGUubWF0Y2hfbGVuZ3RoLWcpLGUubG9va2FoZWFkLT1lLm1hdGNoX2xlbmd0aCxlLm1hdGNoX2xlbmd0aDw9ZS5tYXhfbGF6eV9tYXRjaCYmZS5sb29rYWhlYWQ+PWcpe2ZvcihlLm1hdGNoX2xlbmd0aC0tO2Uuc3Ryc3RhcnQrKyxlLmluc19oPShlLmluc19oPDxlLmhhc2hfc2hpZnReZS53aW5kb3dbZS5zdHJzdGFydCtnLTFdKSZlLmhhc2hfbWFzayxyPWUucHJldltlLnN0cnN0YXJ0JmUud19tYXNrXT1lLmhlYWRbZS5pbnNfaF0sZS5oZWFkW2UuaW5zX2hdPWUuc3Ryc3RhcnQsMCE9LS1lLm1hdGNoX2xlbmd0aDspO2Uuc3Ryc3RhcnQrK31lbHNlIGUuc3Ryc3RhcnQrPWUubWF0Y2hfbGVuZ3RoLGUubWF0Y2hfbGVuZ3RoPTAsZS5pbnNfaD1lLndpbmRvd1tlLnN0cnN0YXJ0XSxlLmluc19oPShlLmluc19oPDxlLmhhc2hfc2hpZnReZS53aW5kb3dbZS5zdHJzdGFydCsxXSkmZS5oYXNoX21hc2s7ZWxzZSBuPXUuX3RyX3RhbGx5KGUsMCxlLndpbmRvd1tlLnN0cnN0YXJ0XSksZS5sb29rYWhlYWQtLSxlLnN0cnN0YXJ0Kys7aWYobiYmKEEoZSwhMSksMD09PWUuc3RybS5hdmFpbF9vdXQpKXJldHVybiAxfXJldHVybiBlLmluc2VydD1lLnN0cnN0YXJ0PGctMT9lLnN0cnN0YXJ0OmctMSw0PT09dD8oQShlLCEwKSwwPT09ZS5zdHJtLmF2YWlsX291dD8zOjQpOmUubGFzdF9saXQmJihBKGUsITEpLDA9PT1lLnN0cm0uYXZhaWxfb3V0KT8xOjJ9ZnVuY3Rpb24gUihlLHQpe2Zvcih2YXIgcixuLGk7Oyl7aWYoZS5sb29rYWhlYWQ8Yil7aWYoQihlKSxlLmxvb2thaGVhZDxiJiZ0PT09ZClyZXR1cm4gMTtpZigwPT09ZS5sb29rYWhlYWQpYnJlYWt9aWYocj0wLGUubG9va2FoZWFkPj1nJiYoZS5pbnNfaD0oZS5pbnNfaDw8ZS5oYXNoX3NoaWZ0XmUud2luZG93W2Uuc3Ryc3RhcnQrZy0xXSkmZS5oYXNoX21hc2sscj1lLnByZXZbZS5zdHJzdGFydCZlLndfbWFza109ZS5oZWFkW2UuaW5zX2hdLGUuaGVhZFtlLmluc19oXT1lLnN0cnN0YXJ0KSxlLnByZXZfbGVuZ3RoPWUubWF0Y2hfbGVuZ3RoLGUucHJldl9tYXRjaD1lLm1hdGNoX3N0YXJ0LGUubWF0Y2hfbGVuZ3RoPWctMSwwIT09ciYmZS5wcmV2X2xlbmd0aDxlLm1heF9sYXp5X21hdGNoJiZlLnN0cnN0YXJ0LXI8PWUud19zaXplLWImJihlLm1hdGNoX2xlbmd0aD1EKGUsciksZS5tYXRjaF9sZW5ndGg8PTUmJigxPT09ZS5zdHJhdGVneXx8ZS5tYXRjaF9sZW5ndGg9PT1nJiY0MDk2PGUuc3Ryc3RhcnQtZS5tYXRjaF9zdGFydCkmJihlLm1hdGNoX2xlbmd0aD1nLTEpKSxlLnByZXZfbGVuZ3RoPj1nJiZlLm1hdGNoX2xlbmd0aDw9ZS5wcmV2X2xlbmd0aCl7Zm9yKGk9ZS5zdHJzdGFydCtlLmxvb2thaGVhZC1nLG49dS5fdHJfdGFsbHkoZSxlLnN0cnN0YXJ0LTEtZS5wcmV2X21hdGNoLGUucHJldl9sZW5ndGgtZyksZS5sb29rYWhlYWQtPWUucHJldl9sZW5ndGgtMSxlLnByZXZfbGVuZ3RoLT0yOysrZS5zdHJzdGFydDw9aSYmKGUuaW5zX2g9KGUuaW5zX2g8PGUuaGFzaF9zaGlmdF5lLndpbmRvd1tlLnN0cnN0YXJ0K2ctMV0pJmUuaGFzaF9tYXNrLHI9ZS5wcmV2W2Uuc3Ryc3RhcnQmZS53X21hc2tdPWUuaGVhZFtlLmluc19oXSxlLmhlYWRbZS5pbnNfaF09ZS5zdHJzdGFydCksMCE9LS1lLnByZXZfbGVuZ3RoOyk7aWYoZS5tYXRjaF9hdmFpbGFibGU9MCxlLm1hdGNoX2xlbmd0aD1nLTEsZS5zdHJzdGFydCsrLG4mJihBKGUsITEpLDA9PT1lLnN0cm0uYXZhaWxfb3V0KSlyZXR1cm4gMX1lbHNlIGlmKGUubWF0Y2hfYXZhaWxhYmxlKXtpZigobj11Ll90cl90YWxseShlLDAsZS53aW5kb3dbZS5zdHJzdGFydC0xXSkpJiZBKGUsITEpLGUuc3Ryc3RhcnQrKyxlLmxvb2thaGVhZC0tLDA9PT1lLnN0cm0uYXZhaWxfb3V0KXJldHVybiAxfWVsc2UgZS5tYXRjaF9hdmFpbGFibGU9MSxlLnN0cnN0YXJ0KyssZS5sb29rYWhlYWQtLX1yZXR1cm4gZS5tYXRjaF9hdmFpbGFibGUmJihuPXUuX3RyX3RhbGx5KGUsMCxlLndpbmRvd1tlLnN0cnN0YXJ0LTFdKSxlLm1hdGNoX2F2YWlsYWJsZT0wKSxlLmluc2VydD1lLnN0cnN0YXJ0PGctMT9lLnN0cnN0YXJ0OmctMSw0PT09dD8oQShlLCEwKSwwPT09ZS5zdHJtLmF2YWlsX291dD8zOjQpOmUubGFzdF9saXQmJihBKGUsITEpLDA9PT1lLnN0cm0uYXZhaWxfb3V0KT8xOjJ9ZnVuY3Rpb24gRihlLHQscixuLGkpe3RoaXMuZ29vZF9sZW5ndGg9ZSx0aGlzLm1heF9sYXp5PXQsdGhpcy5uaWNlX2xlbmd0aD1yLHRoaXMubWF4X2NoYWluPW4sdGhpcy5mdW5jPWl9ZnVuY3Rpb24gTigpe3RoaXMuc3RybT1udWxsLHRoaXMuc3RhdHVzPTAsdGhpcy5wZW5kaW5nX2J1Zj1udWxsLHRoaXMucGVuZGluZ19idWZfc2l6ZT0wLHRoaXMucGVuZGluZ19vdXQ9MCx0aGlzLnBlbmRpbmc9MCx0aGlzLndyYXA9MCx0aGlzLmd6aGVhZD1udWxsLHRoaXMuZ3ppbmRleD0wLHRoaXMubWV0aG9kPV8sdGhpcy5sYXN0X2ZsdXNoPS0xLHRoaXMud19zaXplPTAsdGhpcy53X2JpdHM9MCx0aGlzLndfbWFzaz0wLHRoaXMud2luZG93PW51bGwsdGhpcy53aW5kb3dfc2l6ZT0wLHRoaXMucHJldj1udWxsLHRoaXMuaGVhZD1udWxsLHRoaXMuaW5zX2g9MCx0aGlzLmhhc2hfc2l6ZT0wLHRoaXMuaGFzaF9iaXRzPTAsdGhpcy5oYXNoX21hc2s9MCx0aGlzLmhhc2hfc2hpZnQ9MCx0aGlzLmJsb2NrX3N0YXJ0PTAsdGhpcy5tYXRjaF9sZW5ndGg9MCx0aGlzLnByZXZfbWF0Y2g9MCx0aGlzLm1hdGNoX2F2YWlsYWJsZT0wLHRoaXMuc3Ryc3RhcnQ9MCx0aGlzLm1hdGNoX3N0YXJ0PTAsdGhpcy5sb29rYWhlYWQ9MCx0aGlzLnByZXZfbGVuZ3RoPTAsdGhpcy5tYXhfY2hhaW5fbGVuZ3RoPTAsdGhpcy5tYXhfbGF6eV9tYXRjaD0wLHRoaXMubGV2ZWw9MCx0aGlzLnN0cmF0ZWd5PTAsdGhpcy5nb29kX21hdGNoPTAsdGhpcy5uaWNlX21hdGNoPTAsdGhpcy5keW5fbHRyZWU9bmV3IGwuQnVmMTYoMip3KSx0aGlzLmR5bl9kdHJlZT1uZXcgbC5CdWYxNigyKigyKm8rMSkpLHRoaXMuYmxfdHJlZT1uZXcgbC5CdWYxNigyKigyKmErMSkpLHoodGhpcy5keW5fbHRyZWUpLHoodGhpcy5keW5fZHRyZWUpLHoodGhpcy5ibF90cmVlKSx0aGlzLmxfZGVzYz1udWxsLHRoaXMuZF9kZXNjPW51bGwsdGhpcy5ibF9kZXNjPW51bGwsdGhpcy5ibF9jb3VudD1uZXcgbC5CdWYxNih2KzEpLHRoaXMuaGVhcD1uZXcgbC5CdWYxNigyKnMrMSkseih0aGlzLmhlYXApLHRoaXMuaGVhcF9sZW49MCx0aGlzLmhlYXBfbWF4PTAsdGhpcy5kZXB0aD1uZXcgbC5CdWYxNigyKnMrMSkseih0aGlzLmRlcHRoKSx0aGlzLmxfYnVmPTAsdGhpcy5saXRfYnVmc2l6ZT0wLHRoaXMubGFzdF9saXQ9MCx0aGlzLmRfYnVmPTAsdGhpcy5vcHRfbGVuPTAsdGhpcy5zdGF0aWNfbGVuPTAsdGhpcy5tYXRjaGVzPTAsdGhpcy5pbnNlcnQ9MCx0aGlzLmJpX2J1Zj0wLHRoaXMuYmlfdmFsaWQ9MH1mdW5jdGlvbiBVKGUpe3ZhciB0O3JldHVybiBlJiZlLnN0YXRlPyhlLnRvdGFsX2luPWUudG90YWxfb3V0PTAsZS5kYXRhX3R5cGU9aSwodD1lLnN0YXRlKS5wZW5kaW5nPTAsdC5wZW5kaW5nX291dD0wLHQud3JhcDwwJiYodC53cmFwPS10LndyYXApLHQuc3RhdHVzPXQud3JhcD9rOngsZS5hZGxlcj0yPT09dC53cmFwPzA6MSx0Lmxhc3RfZmx1c2g9ZCx1Ll90cl9pbml0KHQpLGgpOlMoZSxtKX1mdW5jdGlvbiBMKGUpe3ZhciB0LHI9VShlKTtyZXR1cm4gcj09PWgmJigodD1lLnN0YXRlKS53aW5kb3dfc2l6ZT0yKnQud19zaXplLHoodC5oZWFkKSx0Lm1heF9sYXp5X21hdGNoPWZbdC5sZXZlbF0ubWF4X2xhenksdC5nb29kX21hdGNoPWZbdC5sZXZlbF0uZ29vZF9sZW5ndGgsdC5uaWNlX21hdGNoPWZbdC5sZXZlbF0ubmljZV9sZW5ndGgsdC5tYXhfY2hhaW5fbGVuZ3RoPWZbdC5sZXZlbF0ubWF4X2NoYWluLHQuc3Ryc3RhcnQ9MCx0LmJsb2NrX3N0YXJ0PTAsdC5sb29rYWhlYWQ9MCx0Lmluc2VydD0wLHQubWF0Y2hfbGVuZ3RoPXQucHJldl9sZW5ndGg9Zy0xLHQubWF0Y2hfYXZhaWxhYmxlPTAsdC5pbnNfaD0wKSxyfWZ1bmN0aW9uIFAoZSx0LHIsbixpLHMpe2lmKCFlKXJldHVybiBtO3ZhciBvPTE7aWYoLTE9PT10JiYodD02KSxuPDA/KG89MCxuPS1uKToxNTxuJiYobz0yLG4tPTE2KSxpPDF8fDk8aXx8ciE9PV98fG48OHx8MTU8bnx8dDwwfHw5PHR8fHM8MHx8NDxzKXJldHVybiBTKGUsbSk7OD09PW4mJihuPTkpO3ZhciBhPW5ldyBOO3JldHVybihlLnN0YXRlPWEpLnN0cm09ZSxhLndyYXA9byxhLmd6aGVhZD1udWxsLGEud19iaXRzPW4sYS53X3NpemU9MTw8YS53X2JpdHMsYS53X21hc2s9YS53X3NpemUtMSxhLmhhc2hfYml0cz1pKzcsYS5oYXNoX3NpemU9MTw8YS5oYXNoX2JpdHMsYS5oYXNoX21hc2s9YS5oYXNoX3NpemUtMSxhLmhhc2hfc2hpZnQ9fn4oKGEuaGFzaF9iaXRzK2ctMSkvZyksYS53aW5kb3c9bmV3IGwuQnVmOCgyKmEud19zaXplKSxhLmhlYWQ9bmV3IGwuQnVmMTYoYS5oYXNoX3NpemUpLGEucHJldj1uZXcgbC5CdWYxNihhLndfc2l6ZSksYS5saXRfYnVmc2l6ZT0xPDxpKzYsYS5wZW5kaW5nX2J1Zl9zaXplPTQqYS5saXRfYnVmc2l6ZSxhLnBlbmRpbmdfYnVmPW5ldyBsLkJ1ZjgoYS5wZW5kaW5nX2J1Zl9zaXplKSxhLmRfYnVmPTEqYS5saXRfYnVmc2l6ZSxhLmxfYnVmPTMqYS5saXRfYnVmc2l6ZSxhLmxldmVsPXQsYS5zdHJhdGVneT1zLGEubWV0aG9kPXIsTChlKX1mPVtuZXcgRigwLDAsMCwwLGZ1bmN0aW9uKGUsdCl7dmFyIHI9NjU1MzU7Zm9yKHI+ZS5wZW5kaW5nX2J1Zl9zaXplLTUmJihyPWUucGVuZGluZ19idWZfc2l6ZS01KTs7KXtpZihlLmxvb2thaGVhZDw9MSl7aWYoQihlKSwwPT09ZS5sb29rYWhlYWQmJnQ9PT1kKXJldHVybiAxO2lmKDA9PT1lLmxvb2thaGVhZClicmVha31lLnN0cnN0YXJ0Kz1lLmxvb2thaGVhZCxlLmxvb2thaGVhZD0wO3ZhciBuPWUuYmxvY2tfc3RhcnQrcjtpZigoMD09PWUuc3Ryc3RhcnR8fGUuc3Ryc3RhcnQ+PW4pJiYoZS5sb29rYWhlYWQ9ZS5zdHJzdGFydC1uLGUuc3Ryc3RhcnQ9bixBKGUsITEpLDA9PT1lLnN0cm0uYXZhaWxfb3V0KSlyZXR1cm4gMTtpZihlLnN0cnN0YXJ0LWUuYmxvY2tfc3RhcnQ+PWUud19zaXplLWImJihBKGUsITEpLDA9PT1lLnN0cm0uYXZhaWxfb3V0KSlyZXR1cm4gMX1yZXR1cm4gZS5pbnNlcnQ9MCw0PT09dD8oQShlLCEwKSwwPT09ZS5zdHJtLmF2YWlsX291dD8zOjQpOihlLnN0cnN0YXJ0PmUuYmxvY2tfc3RhcnQmJihBKGUsITEpLGUuc3RybS5hdmFpbF9vdXQpLDEpfSksbmV3IEYoNCw0LDgsNCxUKSxuZXcgRig0LDUsMTYsOCxUKSxuZXcgRig0LDYsMzIsMzIsVCksbmV3IEYoNCw0LDE2LDE2LFIpLG5ldyBGKDgsMTYsMzIsMzIsUiksbmV3IEYoOCwxNiwxMjgsMTI4LFIpLG5ldyBGKDgsMzIsMTI4LDI1NixSKSxuZXcgRigzMiwxMjgsMjU4LDEwMjQsUiksbmV3IEYoMzIsMjU4LDI1OCw0MDk2LFIpXSxyLmRlZmxhdGVJbml0PWZ1bmN0aW9uKGUsdCl7cmV0dXJuIFAoZSx0LF8sMTUsOCwwKX0sci5kZWZsYXRlSW5pdDI9UCxyLmRlZmxhdGVSZXNldD1MLHIuZGVmbGF0ZVJlc2V0S2VlcD1VLHIuZGVmbGF0ZVNldEhlYWRlcj1mdW5jdGlvbihlLHQpe3JldHVybiBlJiZlLnN0YXRlPzIhPT1lLnN0YXRlLndyYXA/bTooZS5zdGF0ZS5nemhlYWQ9dCxoKTptfSxyLmRlZmxhdGU9ZnVuY3Rpb24oZSx0KXt2YXIgcixuLGkscztpZighZXx8IWUuc3RhdGV8fDU8dHx8dDwwKXJldHVybiBlP1MoZSxtKTptO2lmKG49ZS5zdGF0ZSwhZS5vdXRwdXR8fCFlLmlucHV0JiYwIT09ZS5hdmFpbF9pbnx8NjY2PT09bi5zdGF0dXMmJjQhPT10KXJldHVybiBTKGUsMD09PWUuYXZhaWxfb3V0Py01Om0pO2lmKG4uc3RybT1lLHI9bi5sYXN0X2ZsdXNoLG4ubGFzdF9mbHVzaD10LG4uc3RhdHVzPT09aylpZigyPT09bi53cmFwKWUuYWRsZXI9MCxPKG4sMzEpLE8obiwxMzkpLE8obiw4KSxuLmd6aGVhZD8oTyhuLChuLmd6aGVhZC50ZXh0PzE6MCkrKG4uZ3poZWFkLmhjcmM/MjowKSsobi5nemhlYWQuZXh0cmE/NDowKSsobi5nemhlYWQubmFtZT84OjApKyhuLmd6aGVhZC5jb21tZW50PzE2OjApKSxPKG4sMjU1Jm4uZ3poZWFkLnRpbWUpLE8obixuLmd6aGVhZC50aW1lPj44JjI1NSksTyhuLG4uZ3poZWFkLnRpbWU+PjE2JjI1NSksTyhuLG4uZ3poZWFkLnRpbWU+PjI0JjI1NSksTyhuLDk9PT1uLmxldmVsPzI6Mjw9bi5zdHJhdGVneXx8bi5sZXZlbDwyPzQ6MCksTyhuLDI1NSZuLmd6aGVhZC5vcyksbi5nemhlYWQuZXh0cmEmJm4uZ3poZWFkLmV4dHJhLmxlbmd0aCYmKE8obiwyNTUmbi5nemhlYWQuZXh0cmEubGVuZ3RoKSxPKG4sbi5nemhlYWQuZXh0cmEubGVuZ3RoPj44JjI1NSkpLG4uZ3poZWFkLmhjcmMmJihlLmFkbGVyPXAoZS5hZGxlcixuLnBlbmRpbmdfYnVmLG4ucGVuZGluZywwKSksbi5nemluZGV4PTAsbi5zdGF0dXM9NjkpOihPKG4sMCksTyhuLDApLE8obiwwKSxPKG4sMCksTyhuLDApLE8obiw5PT09bi5sZXZlbD8yOjI8PW4uc3RyYXRlZ3l8fG4ubGV2ZWw8Mj80OjApLE8obiwzKSxuLnN0YXR1cz14KTtlbHNle3ZhciBvPV8rKG4ud19iaXRzLTg8PDQpPDw4O298PSgyPD1uLnN0cmF0ZWd5fHxuLmxldmVsPDI/MDpuLmxldmVsPDY/MTo2PT09bi5sZXZlbD8yOjMpPDw2LDAhPT1uLnN0cnN0YXJ0JiYob3w9MzIpLG8rPTMxLW8lMzEsbi5zdGF0dXM9eCxJKG4sbyksMCE9PW4uc3Ryc3RhcnQmJihJKG4sZS5hZGxlcj4+PjE2KSxJKG4sNjU1MzUmZS5hZGxlcikpLGUuYWRsZXI9MX1pZig2OT09PW4uc3RhdHVzKWlmKG4uZ3poZWFkLmV4dHJhKXtmb3IoaT1uLnBlbmRpbmc7bi5nemluZGV4PCg2NTUzNSZuLmd6aGVhZC5leHRyYS5sZW5ndGgpJiYobi5wZW5kaW5nIT09bi5wZW5kaW5nX2J1Zl9zaXplfHwobi5nemhlYWQuaGNyYyYmbi5wZW5kaW5nPmkmJihlLmFkbGVyPXAoZS5hZGxlcixuLnBlbmRpbmdfYnVmLG4ucGVuZGluZy1pLGkpKSxDKGUpLGk9bi5wZW5kaW5nLG4ucGVuZGluZyE9PW4ucGVuZGluZ19idWZfc2l6ZSkpOylPKG4sMjU1Jm4uZ3poZWFkLmV4dHJhW24uZ3ppbmRleF0pLG4uZ3ppbmRleCsrO24uZ3poZWFkLmhjcmMmJm4ucGVuZGluZz5pJiYoZS5hZGxlcj1wKGUuYWRsZXIsbi5wZW5kaW5nX2J1ZixuLnBlbmRpbmctaSxpKSksbi5nemluZGV4PT09bi5nemhlYWQuZXh0cmEubGVuZ3RoJiYobi5nemluZGV4PTAsbi5zdGF0dXM9NzMpfWVsc2Ugbi5zdGF0dXM9NzM7aWYoNzM9PT1uLnN0YXR1cylpZihuLmd6aGVhZC5uYW1lKXtpPW4ucGVuZGluZztkb3tpZihuLnBlbmRpbmc9PT1uLnBlbmRpbmdfYnVmX3NpemUmJihuLmd6aGVhZC5oY3JjJiZuLnBlbmRpbmc+aSYmKGUuYWRsZXI9cChlLmFkbGVyLG4ucGVuZGluZ19idWYsbi5wZW5kaW5nLWksaSkpLEMoZSksaT1uLnBlbmRpbmcsbi5wZW5kaW5nPT09bi5wZW5kaW5nX2J1Zl9zaXplKSl7cz0xO2JyZWFrfXM9bi5nemluZGV4PG4uZ3poZWFkLm5hbWUubGVuZ3RoPzI1NSZuLmd6aGVhZC5uYW1lLmNoYXJDb2RlQXQobi5nemluZGV4KyspOjAsTyhuLHMpfXdoaWxlKDAhPT1zKTtuLmd6aGVhZC5oY3JjJiZuLnBlbmRpbmc+aSYmKGUuYWRsZXI9cChlLmFkbGVyLG4ucGVuZGluZ19idWYsbi5wZW5kaW5nLWksaSkpLDA9PT1zJiYobi5nemluZGV4PTAsbi5zdGF0dXM9OTEpfWVsc2Ugbi5zdGF0dXM9OTE7aWYoOTE9PT1uLnN0YXR1cylpZihuLmd6aGVhZC5jb21tZW50KXtpPW4ucGVuZGluZztkb3tpZihuLnBlbmRpbmc9PT1uLnBlbmRpbmdfYnVmX3NpemUmJihuLmd6aGVhZC5oY3JjJiZuLnBlbmRpbmc+aSYmKGUuYWRsZXI9cChlLmFkbGVyLG4ucGVuZGluZ19idWYsbi5wZW5kaW5nLWksaSkpLEMoZSksaT1uLnBlbmRpbmcsbi5wZW5kaW5nPT09bi5wZW5kaW5nX2J1Zl9zaXplKSl7cz0xO2JyZWFrfXM9bi5nemluZGV4PG4uZ3poZWFkLmNvbW1lbnQubGVuZ3RoPzI1NSZuLmd6aGVhZC5jb21tZW50LmNoYXJDb2RlQXQobi5nemluZGV4KyspOjAsTyhuLHMpfXdoaWxlKDAhPT1zKTtuLmd6aGVhZC5oY3JjJiZuLnBlbmRpbmc+aSYmKGUuYWRsZXI9cChlLmFkbGVyLG4ucGVuZGluZ19idWYsbi5wZW5kaW5nLWksaSkpLDA9PT1zJiYobi5zdGF0dXM9MTAzKX1lbHNlIG4uc3RhdHVzPTEwMztpZigxMDM9PT1uLnN0YXR1cyYmKG4uZ3poZWFkLmhjcmM/KG4ucGVuZGluZysyPm4ucGVuZGluZ19idWZfc2l6ZSYmQyhlKSxuLnBlbmRpbmcrMjw9bi5wZW5kaW5nX2J1Zl9zaXplJiYoTyhuLDI1NSZlLmFkbGVyKSxPKG4sZS5hZGxlcj4+OCYyNTUpLGUuYWRsZXI9MCxuLnN0YXR1cz14KSk6bi5zdGF0dXM9eCksMCE9PW4ucGVuZGluZyl7aWYoQyhlKSwwPT09ZS5hdmFpbF9vdXQpcmV0dXJuIG4ubGFzdF9mbHVzaD0tMSxofWVsc2UgaWYoMD09PWUuYXZhaWxfaW4mJkUodCk8PUUocikmJjQhPT10KXJldHVybiBTKGUsLTUpO2lmKDY2Nj09PW4uc3RhdHVzJiYwIT09ZS5hdmFpbF9pbilyZXR1cm4gUyhlLC01KTtpZigwIT09ZS5hdmFpbF9pbnx8MCE9PW4ubG9va2FoZWFkfHx0IT09ZCYmNjY2IT09bi5zdGF0dXMpe3ZhciBhPTI9PT1uLnN0cmF0ZWd5P2Z1bmN0aW9uKGUsdCl7Zm9yKHZhciByOzspe2lmKDA9PT1lLmxvb2thaGVhZCYmKEIoZSksMD09PWUubG9va2FoZWFkKSl7aWYodD09PWQpcmV0dXJuIDE7YnJlYWt9aWYoZS5tYXRjaF9sZW5ndGg9MCxyPXUuX3RyX3RhbGx5KGUsMCxlLndpbmRvd1tlLnN0cnN0YXJ0XSksZS5sb29rYWhlYWQtLSxlLnN0cnN0YXJ0KyssciYmKEEoZSwhMSksMD09PWUuc3RybS5hdmFpbF9vdXQpKXJldHVybiAxfXJldHVybiBlLmluc2VydD0wLDQ9PT10PyhBKGUsITApLDA9PT1lLnN0cm0uYXZhaWxfb3V0PzM6NCk6ZS5sYXN0X2xpdCYmKEEoZSwhMSksMD09PWUuc3RybS5hdmFpbF9vdXQpPzE6Mn0obix0KTozPT09bi5zdHJhdGVneT9mdW5jdGlvbihlLHQpe2Zvcih2YXIgcixuLGkscyxvPWUud2luZG93Ozspe2lmKGUubG9va2FoZWFkPD15KXtpZihCKGUpLGUubG9va2FoZWFkPD15JiZ0PT09ZClyZXR1cm4gMTtpZigwPT09ZS5sb29rYWhlYWQpYnJlYWt9aWYoZS5tYXRjaF9sZW5ndGg9MCxlLmxvb2thaGVhZD49ZyYmMDxlLnN0cnN0YXJ0JiYobj1vW2k9ZS5zdHJzdGFydC0xXSk9PT1vWysraV0mJm49PT1vWysraV0mJm49PT1vWysraV0pe3M9ZS5zdHJzdGFydCt5O2Rve313aGlsZShuPT09b1srK2ldJiZuPT09b1srK2ldJiZuPT09b1srK2ldJiZuPT09b1srK2ldJiZuPT09b1srK2ldJiZuPT09b1srK2ldJiZuPT09b1srK2ldJiZuPT09b1srK2ldJiZpPHMpO2UubWF0Y2hfbGVuZ3RoPXktKHMtaSksZS5tYXRjaF9sZW5ndGg+ZS5sb29rYWhlYWQmJihlLm1hdGNoX2xlbmd0aD1lLmxvb2thaGVhZCl9aWYoZS5tYXRjaF9sZW5ndGg+PWc/KHI9dS5fdHJfdGFsbHkoZSwxLGUubWF0Y2hfbGVuZ3RoLWcpLGUubG9va2FoZWFkLT1lLm1hdGNoX2xlbmd0aCxlLnN0cnN0YXJ0Kz1lLm1hdGNoX2xlbmd0aCxlLm1hdGNoX2xlbmd0aD0wKToocj11Ll90cl90YWxseShlLDAsZS53aW5kb3dbZS5zdHJzdGFydF0pLGUubG9va2FoZWFkLS0sZS5zdHJzdGFydCsrKSxyJiYoQShlLCExKSwwPT09ZS5zdHJtLmF2YWlsX291dCkpcmV0dXJuIDF9cmV0dXJuIGUuaW5zZXJ0PTAsND09PXQ/KEEoZSwhMCksMD09PWUuc3RybS5hdmFpbF9vdXQ/Mzo0KTplLmxhc3RfbGl0JiYoQShlLCExKSwwPT09ZS5zdHJtLmF2YWlsX291dCk/MToyfShuLHQpOmZbbi5sZXZlbF0uZnVuYyhuLHQpO2lmKDMhPT1hJiY0IT09YXx8KG4uc3RhdHVzPTY2NiksMT09PWF8fDM9PT1hKXJldHVybiAwPT09ZS5hdmFpbF9vdXQmJihuLmxhc3RfZmx1c2g9LTEpLGg7aWYoMj09PWEmJigxPT09dD91Ll90cl9hbGlnbihuKTo1IT09dCYmKHUuX3RyX3N0b3JlZF9ibG9jayhuLDAsMCwhMSksMz09PXQmJih6KG4uaGVhZCksMD09PW4ubG9va2FoZWFkJiYobi5zdHJzdGFydD0wLG4uYmxvY2tfc3RhcnQ9MCxuLmluc2VydD0wKSkpLEMoZSksMD09PWUuYXZhaWxfb3V0KSlyZXR1cm4gbi5sYXN0X2ZsdXNoPS0xLGh9cmV0dXJuIDQhPT10P2g6bi53cmFwPD0wPzE6KDI9PT1uLndyYXA/KE8obiwyNTUmZS5hZGxlciksTyhuLGUuYWRsZXI+PjgmMjU1KSxPKG4sZS5hZGxlcj4+MTYmMjU1KSxPKG4sZS5hZGxlcj4+MjQmMjU1KSxPKG4sMjU1JmUudG90YWxfaW4pLE8obixlLnRvdGFsX2luPj44JjI1NSksTyhuLGUudG90YWxfaW4+PjE2JjI1NSksTyhuLGUudG90YWxfaW4+PjI0JjI1NSkpOihJKG4sZS5hZGxlcj4+PjE2KSxJKG4sNjU1MzUmZS5hZGxlcikpLEMoZSksMDxuLndyYXAmJihuLndyYXA9LW4ud3JhcCksMCE9PW4ucGVuZGluZz9oOjEpfSxyLmRlZmxhdGVFbmQ9ZnVuY3Rpb24oZSl7dmFyIHQ7cmV0dXJuIGUmJmUuc3RhdGU/KHQ9ZS5zdGF0ZS5zdGF0dXMpIT09ayYmNjkhPT10JiY3MyE9PXQmJjkxIT09dCYmMTAzIT09dCYmdCE9PXgmJjY2NiE9PXQ/UyhlLG0pOihlLnN0YXRlPW51bGwsdD09PXg/UyhlLC0zKTpoKTptfSxyLmRlZmxhdGVTZXREaWN0aW9uYXJ5PWZ1bmN0aW9uKGUsdCl7dmFyIHIsbixpLHMsbyxhLGYsdSxkPXQubGVuZ3RoO2lmKCFlfHwhZS5zdGF0ZSlyZXR1cm4gbTtpZigyPT09KHM9KHI9ZS5zdGF0ZSkud3JhcCl8fDE9PT1zJiZyLnN0YXR1cyE9PWt8fHIubG9va2FoZWFkKXJldHVybiBtO2ZvcigxPT09cyYmKGUuYWRsZXI9YyhlLmFkbGVyLHQsZCwwKSksci53cmFwPTAsZD49ci53X3NpemUmJigwPT09cyYmKHooci5oZWFkKSxyLnN0cnN0YXJ0PTAsci5ibG9ja19zdGFydD0wLHIuaW5zZXJ0PTApLHU9bmV3IGwuQnVmOChyLndfc2l6ZSksbC5hcnJheVNldCh1LHQsZC1yLndfc2l6ZSxyLndfc2l6ZSwwKSx0PXUsZD1yLndfc2l6ZSksbz1lLmF2YWlsX2luLGE9ZS5uZXh0X2luLGY9ZS5pbnB1dCxlLmF2YWlsX2luPWQsZS5uZXh0X2luPTAsZS5pbnB1dD10LEIocik7ci5sb29rYWhlYWQ+PWc7KXtmb3Iobj1yLnN0cnN0YXJ0LGk9ci5sb29rYWhlYWQtKGctMSk7ci5pbnNfaD0oci5pbnNfaDw8ci5oYXNoX3NoaWZ0XnIud2luZG93W24rZy0xXSkmci5oYXNoX21hc2ssci5wcmV2W24mci53X21hc2tdPXIuaGVhZFtyLmluc19oXSxyLmhlYWRbci5pbnNfaF09bixuKyssLS1pOyk7ci5zdHJzdGFydD1uLHIubG9va2FoZWFkPWctMSxCKHIpfXJldHVybiByLnN0cnN0YXJ0Kz1yLmxvb2thaGVhZCxyLmJsb2NrX3N0YXJ0PXIuc3Ryc3RhcnQsci5pbnNlcnQ9ci5sb29rYWhlYWQsci5sb29rYWhlYWQ9MCxyLm1hdGNoX2xlbmd0aD1yLnByZXZfbGVuZ3RoPWctMSxyLm1hdGNoX2F2YWlsYWJsZT0wLGUubmV4dF9pbj1hLGUuaW5wdXQ9ZixlLmF2YWlsX2luPW8sci53cmFwPXMsaH0sci5kZWZsYXRlSW5mbz1cInBha28gZGVmbGF0ZSAoZnJvbSBOb2RlY2EgcHJvamVjdClcIn0se1wiLi4vdXRpbHMvY29tbW9uXCI6NDEsXCIuL2FkbGVyMzJcIjo0MyxcIi4vY3JjMzJcIjo0NSxcIi4vbWVzc2FnZXNcIjo1MSxcIi4vdHJlZXNcIjo1Mn1dLDQ3OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dC5leHBvcnRzPWZ1bmN0aW9uKCl7dGhpcy50ZXh0PTAsdGhpcy50aW1lPTAsdGhpcy54ZmxhZ3M9MCx0aGlzLm9zPTAsdGhpcy5leHRyYT1udWxsLHRoaXMuZXh0cmFfbGVuPTAsdGhpcy5uYW1lPVwiXCIsdGhpcy5jb21tZW50PVwiXCIsdGhpcy5oY3JjPTAsdGhpcy5kb25lPSExfX0se31dLDQ4OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dC5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7dmFyIHIsbixpLHMsbyxhLGYsdSxkLGgsbCxjLHAsbSxfLHcsdixnLHksYixrLHgsUyxFLHo7cj1lLnN0YXRlLG49ZS5uZXh0X2luLEU9ZS5pbnB1dCxpPW4rKGUuYXZhaWxfaW4tNSkscz1lLm5leHRfb3V0LHo9ZS5vdXRwdXQsbz1zLSh0LWUuYXZhaWxfb3V0KSxhPXMrKGUuYXZhaWxfb3V0LTI1NyksZj1yLmRtYXgsdT1yLndzaXplLGQ9ci53aGF2ZSxoPXIud25leHQsbD1yLndpbmRvdyxjPXIuaG9sZCxwPXIuYml0cyxtPXIubGVuY29kZSxfPXIuZGlzdGNvZGUsdz0oMTw8ci5sZW5iaXRzKS0xLHY9KDE8PHIuZGlzdGJpdHMpLTE7ZTpkb3twPDE1JiYoYys9RVtuKytdPDxwLHArPTgsYys9RVtuKytdPDxwLHArPTgpLGc9bVtjJnddO3Q6Zm9yKDs7KXtpZihjPj4+PXk9Zz4+PjI0LHAtPXksMD09KHk9Zz4+PjE2JjI1NSkpeltzKytdPTY1NTM1Jmc7ZWxzZXtpZighKDE2JnkpKXtpZigwPT0oNjQmeSkpe2c9bVsoNjU1MzUmZykrKGMmKDE8PHkpLTEpXTtjb250aW51ZSB0fWlmKDMyJnkpe3IubW9kZT0xMjticmVhayBlfWUubXNnPVwiaW52YWxpZCBsaXRlcmFsL2xlbmd0aCBjb2RlXCIsci5tb2RlPTMwO2JyZWFrIGV9Yj02NTUzNSZnLCh5Jj0xNSkmJihwPHkmJihjKz1FW24rK108PHAscCs9OCksYis9YyYoMTw8eSktMSxjPj4+PXkscC09eSkscDwxNSYmKGMrPUVbbisrXTw8cCxwKz04LGMrPUVbbisrXTw8cCxwKz04KSxnPV9bYyZ2XTtyOmZvcig7Oyl7aWYoYz4+Pj15PWc+Pj4yNCxwLT15LCEoMTYmKHk9Zz4+PjE2JjI1NSkpKXtpZigwPT0oNjQmeSkpe2c9X1soNjU1MzUmZykrKGMmKDE8PHkpLTEpXTtjb250aW51ZSByfWUubXNnPVwiaW52YWxpZCBkaXN0YW5jZSBjb2RlXCIsci5tb2RlPTMwO2JyZWFrIGV9aWYoaz02NTUzNSZnLHA8KHkmPTE1KSYmKGMrPUVbbisrXTw8cCwocCs9OCk8eSYmKGMrPUVbbisrXTw8cCxwKz04KSksZjwoays9YyYoMTw8eSktMSkpe2UubXNnPVwiaW52YWxpZCBkaXN0YW5jZSB0b28gZmFyIGJhY2tcIixyLm1vZGU9MzA7YnJlYWsgZX1pZihjPj4+PXkscC09eSwoeT1zLW8pPGspe2lmKGQ8KHk9ay15KSYmci5zYW5lKXtlLm1zZz1cImludmFsaWQgZGlzdGFuY2UgdG9vIGZhciBiYWNrXCIsci5tb2RlPTMwO2JyZWFrIGV9aWYoUz1sLCh4PTApPT09aCl7aWYoeCs9dS15LHk8Yil7Zm9yKGItPXk7eltzKytdPWxbeCsrXSwtLXk7KTt4PXMtayxTPXp9fWVsc2UgaWYoaDx5KXtpZih4Kz11K2gteSwoeS09aCk8Yil7Zm9yKGItPXk7eltzKytdPWxbeCsrXSwtLXk7KTtpZih4PTAsaDxiKXtmb3IoYi09eT1oO3pbcysrXT1sW3grK10sLS15Oyk7eD1zLWssUz16fX19ZWxzZSBpZih4Kz1oLXkseTxiKXtmb3IoYi09eTt6W3MrK109bFt4KytdLC0teTspO3g9cy1rLFM9en1mb3IoOzI8YjspeltzKytdPVNbeCsrXSx6W3MrK109U1t4KytdLHpbcysrXT1TW3grK10sYi09MztiJiYoeltzKytdPVNbeCsrXSwxPGImJih6W3MrK109U1t4KytdKSl9ZWxzZXtmb3IoeD1zLWs7eltzKytdPXpbeCsrXSx6W3MrK109elt4KytdLHpbcysrXT16W3grK10sMjwoYi09Myk7KTtiJiYoeltzKytdPXpbeCsrXSwxPGImJih6W3MrK109elt4KytdKSl9YnJlYWt9fWJyZWFrfX13aGlsZShuPGkmJnM8YSk7bi09Yj1wPj4zLGMmPSgxPDwocC09Yjw8MykpLTEsZS5uZXh0X2luPW4sZS5uZXh0X291dD1zLGUuYXZhaWxfaW49bjxpP2ktbis1OjUtKG4taSksZS5hdmFpbF9vdXQ9czxhP2EtcysyNTc6MjU3LShzLWEpLHIuaG9sZD1jLHIuYml0cz1wfX0se31dLDQ5OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIE89ZShcIi4uL3V0aWxzL2NvbW1vblwiKSxJPWUoXCIuL2FkbGVyMzJcIiksRD1lKFwiLi9jcmMzMlwiKSxCPWUoXCIuL2luZmZhc3RcIiksVD1lKFwiLi9pbmZ0cmVlc1wiKSxSPTEsRj0yLE49MCxVPS0yLEw9MSxuPTg1MixpPTU5MjtmdW5jdGlvbiBQKGUpe3JldHVybihlPj4+MjQmMjU1KSsoZT4+PjgmNjUyODApKygoNjUyODAmZSk8PDgpKygoMjU1JmUpPDwyNCl9ZnVuY3Rpb24gcygpe3RoaXMubW9kZT0wLHRoaXMubGFzdD0hMSx0aGlzLndyYXA9MCx0aGlzLmhhdmVkaWN0PSExLHRoaXMuZmxhZ3M9MCx0aGlzLmRtYXg9MCx0aGlzLmNoZWNrPTAsdGhpcy50b3RhbD0wLHRoaXMuaGVhZD1udWxsLHRoaXMud2JpdHM9MCx0aGlzLndzaXplPTAsdGhpcy53aGF2ZT0wLHRoaXMud25leHQ9MCx0aGlzLndpbmRvdz1udWxsLHRoaXMuaG9sZD0wLHRoaXMuYml0cz0wLHRoaXMubGVuZ3RoPTAsdGhpcy5vZmZzZXQ9MCx0aGlzLmV4dHJhPTAsdGhpcy5sZW5jb2RlPW51bGwsdGhpcy5kaXN0Y29kZT1udWxsLHRoaXMubGVuYml0cz0wLHRoaXMuZGlzdGJpdHM9MCx0aGlzLm5jb2RlPTAsdGhpcy5ubGVuPTAsdGhpcy5uZGlzdD0wLHRoaXMuaGF2ZT0wLHRoaXMubmV4dD1udWxsLHRoaXMubGVucz1uZXcgTy5CdWYxNigzMjApLHRoaXMud29yaz1uZXcgTy5CdWYxNigyODgpLHRoaXMubGVuZHluPW51bGwsdGhpcy5kaXN0ZHluPW51bGwsdGhpcy5zYW5lPTAsdGhpcy5iYWNrPTAsdGhpcy53YXM9MH1mdW5jdGlvbiBvKGUpe3ZhciB0O3JldHVybiBlJiZlLnN0YXRlPyh0PWUuc3RhdGUsZS50b3RhbF9pbj1lLnRvdGFsX291dD10LnRvdGFsPTAsZS5tc2c9XCJcIix0LndyYXAmJihlLmFkbGVyPTEmdC53cmFwKSx0Lm1vZGU9TCx0Lmxhc3Q9MCx0LmhhdmVkaWN0PTAsdC5kbWF4PTMyNzY4LHQuaGVhZD1udWxsLHQuaG9sZD0wLHQuYml0cz0wLHQubGVuY29kZT10LmxlbmR5bj1uZXcgTy5CdWYzMihuKSx0LmRpc3Rjb2RlPXQuZGlzdGR5bj1uZXcgTy5CdWYzMihpKSx0LnNhbmU9MSx0LmJhY2s9LTEsTik6VX1mdW5jdGlvbiBhKGUpe3ZhciB0O3JldHVybiBlJiZlLnN0YXRlPygodD1lLnN0YXRlKS53c2l6ZT0wLHQud2hhdmU9MCx0LnduZXh0PTAsbyhlKSk6VX1mdW5jdGlvbiBmKGUsdCl7dmFyIHIsbjtyZXR1cm4gZSYmZS5zdGF0ZT8obj1lLnN0YXRlLHQ8MD8ocj0wLHQ9LXQpOihyPTErKHQ+PjQpLHQ8NDgmJih0Jj0xNSkpLHQmJih0PDh8fDE1PHQpP1U6KG51bGwhPT1uLndpbmRvdyYmbi53Yml0cyE9PXQmJihuLndpbmRvdz1udWxsKSxuLndyYXA9cixuLndiaXRzPXQsYShlKSkpOlV9ZnVuY3Rpb24gdShlLHQpe3ZhciByLG47cmV0dXJuIGU/KG49bmV3IHMsKGUuc3RhdGU9bikud2luZG93PW51bGwsKHI9ZihlLHQpKSE9PU4mJihlLnN0YXRlPW51bGwpLHIpOlV9dmFyIGQsaCxsPSEwO2Z1bmN0aW9uIGooZSl7aWYobCl7dmFyIHQ7Zm9yKGQ9bmV3IE8uQnVmMzIoNTEyKSxoPW5ldyBPLkJ1ZjMyKDMyKSx0PTA7dDwxNDQ7KWUubGVuc1t0KytdPTg7Zm9yKDt0PDI1NjspZS5sZW5zW3QrK109OTtmb3IoO3Q8MjgwOyllLmxlbnNbdCsrXT03O2Zvcig7dDwyODg7KWUubGVuc1t0KytdPTg7Zm9yKFQoUixlLmxlbnMsMCwyODgsZCwwLGUud29yayx7Yml0czo5fSksdD0wO3Q8MzI7KWUubGVuc1t0KytdPTU7VChGLGUubGVucywwLDMyLGgsMCxlLndvcmsse2JpdHM6NX0pLGw9ITF9ZS5sZW5jb2RlPWQsZS5sZW5iaXRzPTksZS5kaXN0Y29kZT1oLGUuZGlzdGJpdHM9NX1mdW5jdGlvbiBaKGUsdCxyLG4pe3ZhciBpLHM9ZS5zdGF0ZTtyZXR1cm4gbnVsbD09PXMud2luZG93JiYocy53c2l6ZT0xPDxzLndiaXRzLHMud25leHQ9MCxzLndoYXZlPTAscy53aW5kb3c9bmV3IE8uQnVmOChzLndzaXplKSksbj49cy53c2l6ZT8oTy5hcnJheVNldChzLndpbmRvdyx0LHItcy53c2l6ZSxzLndzaXplLDApLHMud25leHQ9MCxzLndoYXZlPXMud3NpemUpOihuPChpPXMud3NpemUtcy53bmV4dCkmJihpPW4pLE8uYXJyYXlTZXQocy53aW5kb3csdCxyLW4saSxzLnduZXh0KSwobi09aSk/KE8uYXJyYXlTZXQocy53aW5kb3csdCxyLW4sbiwwKSxzLnduZXh0PW4scy53aGF2ZT1zLndzaXplKToocy53bmV4dCs9aSxzLnduZXh0PT09cy53c2l6ZSYmKHMud25leHQ9MCkscy53aGF2ZTxzLndzaXplJiYocy53aGF2ZSs9aSkpKSwwfXIuaW5mbGF0ZVJlc2V0PWEsci5pbmZsYXRlUmVzZXQyPWYsci5pbmZsYXRlUmVzZXRLZWVwPW8sci5pbmZsYXRlSW5pdD1mdW5jdGlvbihlKXtyZXR1cm4gdShlLDE1KX0sci5pbmZsYXRlSW5pdDI9dSxyLmluZmxhdGU9ZnVuY3Rpb24oZSx0KXt2YXIgcixuLGkscyxvLGEsZix1LGQsaCxsLGMscCxtLF8sdyx2LGcseSxiLGsseCxTLEUsej0wLEM9bmV3IE8uQnVmOCg0KSxBPVsxNiwxNywxOCwwLDgsNyw5LDYsMTAsNSwxMSw0LDEyLDMsMTMsMiwxNCwxLDE1XTtpZighZXx8IWUuc3RhdGV8fCFlLm91dHB1dHx8IWUuaW5wdXQmJjAhPT1lLmF2YWlsX2luKXJldHVybiBVOzEyPT09KHI9ZS5zdGF0ZSkubW9kZSYmKHIubW9kZT0xMyksbz1lLm5leHRfb3V0LGk9ZS5vdXRwdXQsZj1lLmF2YWlsX291dCxzPWUubmV4dF9pbixuPWUuaW5wdXQsYT1lLmF2YWlsX2luLHU9ci5ob2xkLGQ9ci5iaXRzLGg9YSxsPWYseD1OO2U6Zm9yKDs7KXN3aXRjaChyLm1vZGUpe2Nhc2UgTDppZigwPT09ci53cmFwKXtyLm1vZGU9MTM7YnJlYWt9Zm9yKDtkPDE2Oyl7aWYoMD09PWEpYnJlYWsgZTthLS0sdSs9bltzKytdPDxkLGQrPTh9aWYoMiZyLndyYXAmJjM1NjE1PT09dSl7Q1tyLmNoZWNrPTBdPTI1NSZ1LENbMV09dT4+PjgmMjU1LHIuY2hlY2s9RChyLmNoZWNrLEMsMiwwKSxkPXU9MCxyLm1vZGU9MjticmVha31pZihyLmZsYWdzPTAsci5oZWFkJiYoci5oZWFkLmRvbmU9ITEpLCEoMSZyLndyYXApfHwoKCgyNTUmdSk8PDgpKyh1Pj44KSklMzEpe2UubXNnPVwiaW5jb3JyZWN0IGhlYWRlciBjaGVja1wiLHIubW9kZT0zMDticmVha31pZig4IT0oMTUmdSkpe2UubXNnPVwidW5rbm93biBjb21wcmVzc2lvbiBtZXRob2RcIixyLm1vZGU9MzA7YnJlYWt9aWYoZC09NCxrPTgrKDE1Jih1Pj4+PTQpKSwwPT09ci53Yml0cylyLndiaXRzPWs7ZWxzZSBpZihrPnIud2JpdHMpe2UubXNnPVwiaW52YWxpZCB3aW5kb3cgc2l6ZVwiLHIubW9kZT0zMDticmVha31yLmRtYXg9MTw8ayxlLmFkbGVyPXIuY2hlY2s9MSxyLm1vZGU9NTEyJnU/MTA6MTIsZD11PTA7YnJlYWs7Y2FzZSAyOmZvcig7ZDwxNjspe2lmKDA9PT1hKWJyZWFrIGU7YS0tLHUrPW5bcysrXTw8ZCxkKz04fWlmKHIuZmxhZ3M9dSw4IT0oMjU1JnIuZmxhZ3MpKXtlLm1zZz1cInVua25vd24gY29tcHJlc3Npb24gbWV0aG9kXCIsci5tb2RlPTMwO2JyZWFrfWlmKDU3MzQ0JnIuZmxhZ3Mpe2UubXNnPVwidW5rbm93biBoZWFkZXIgZmxhZ3Mgc2V0XCIsci5tb2RlPTMwO2JyZWFrfXIuaGVhZCYmKHIuaGVhZC50ZXh0PXU+PjgmMSksNTEyJnIuZmxhZ3MmJihDWzBdPTI1NSZ1LENbMV09dT4+PjgmMjU1LHIuY2hlY2s9RChyLmNoZWNrLEMsMiwwKSksZD11PTAsci5tb2RlPTM7Y2FzZSAzOmZvcig7ZDwzMjspe2lmKDA9PT1hKWJyZWFrIGU7YS0tLHUrPW5bcysrXTw8ZCxkKz04fXIuaGVhZCYmKHIuaGVhZC50aW1lPXUpLDUxMiZyLmZsYWdzJiYoQ1swXT0yNTUmdSxDWzFdPXU+Pj44JjI1NSxDWzJdPXU+Pj4xNiYyNTUsQ1szXT11Pj4+MjQmMjU1LHIuY2hlY2s9RChyLmNoZWNrLEMsNCwwKSksZD11PTAsci5tb2RlPTQ7Y2FzZSA0OmZvcig7ZDwxNjspe2lmKDA9PT1hKWJyZWFrIGU7YS0tLHUrPW5bcysrXTw8ZCxkKz04fXIuaGVhZCYmKHIuaGVhZC54ZmxhZ3M9MjU1JnUsci5oZWFkLm9zPXU+PjgpLDUxMiZyLmZsYWdzJiYoQ1swXT0yNTUmdSxDWzFdPXU+Pj44JjI1NSxyLmNoZWNrPUQoci5jaGVjayxDLDIsMCkpLGQ9dT0wLHIubW9kZT01O2Nhc2UgNTppZigxMDI0JnIuZmxhZ3Mpe2Zvcig7ZDwxNjspe2lmKDA9PT1hKWJyZWFrIGU7YS0tLHUrPW5bcysrXTw8ZCxkKz04fXIubGVuZ3RoPXUsci5oZWFkJiYoci5oZWFkLmV4dHJhX2xlbj11KSw1MTImci5mbGFncyYmKENbMF09MjU1JnUsQ1sxXT11Pj4+OCYyNTUsci5jaGVjaz1EKHIuY2hlY2ssQywyLDApKSxkPXU9MH1lbHNlIHIuaGVhZCYmKHIuaGVhZC5leHRyYT1udWxsKTtyLm1vZGU9NjtjYXNlIDY6aWYoMTAyNCZyLmZsYWdzJiYoYTwoYz1yLmxlbmd0aCkmJihjPWEpLGMmJihyLmhlYWQmJihrPXIuaGVhZC5leHRyYV9sZW4tci5sZW5ndGgsci5oZWFkLmV4dHJhfHwoci5oZWFkLmV4dHJhPW5ldyBBcnJheShyLmhlYWQuZXh0cmFfbGVuKSksTy5hcnJheVNldChyLmhlYWQuZXh0cmEsbixzLGMsaykpLDUxMiZyLmZsYWdzJiYoci5jaGVjaz1EKHIuY2hlY2ssbixjLHMpKSxhLT1jLHMrPWMsci5sZW5ndGgtPWMpLHIubGVuZ3RoKSlicmVhayBlO3IubGVuZ3RoPTAsci5tb2RlPTc7Y2FzZSA3OmlmKDIwNDgmci5mbGFncyl7aWYoMD09PWEpYnJlYWsgZTtmb3IoYz0wO2s9bltzK2MrK10sci5oZWFkJiZrJiZyLmxlbmd0aDw2NTUzNiYmKHIuaGVhZC5uYW1lKz1TdHJpbmcuZnJvbUNoYXJDb2RlKGspKSxrJiZjPGE7KTtpZig1MTImci5mbGFncyYmKHIuY2hlY2s9RChyLmNoZWNrLG4sYyxzKSksYS09YyxzKz1jLGspYnJlYWsgZX1lbHNlIHIuaGVhZCYmKHIuaGVhZC5uYW1lPW51bGwpO3IubGVuZ3RoPTAsci5tb2RlPTg7Y2FzZSA4OmlmKDQwOTYmci5mbGFncyl7aWYoMD09PWEpYnJlYWsgZTtmb3IoYz0wO2s9bltzK2MrK10sci5oZWFkJiZrJiZyLmxlbmd0aDw2NTUzNiYmKHIuaGVhZC5jb21tZW50Kz1TdHJpbmcuZnJvbUNoYXJDb2RlKGspKSxrJiZjPGE7KTtpZig1MTImci5mbGFncyYmKHIuY2hlY2s9RChyLmNoZWNrLG4sYyxzKSksYS09YyxzKz1jLGspYnJlYWsgZX1lbHNlIHIuaGVhZCYmKHIuaGVhZC5jb21tZW50PW51bGwpO3IubW9kZT05O2Nhc2UgOTppZig1MTImci5mbGFncyl7Zm9yKDtkPDE2Oyl7aWYoMD09PWEpYnJlYWsgZTthLS0sdSs9bltzKytdPDxkLGQrPTh9aWYodSE9PSg2NTUzNSZyLmNoZWNrKSl7ZS5tc2c9XCJoZWFkZXIgY3JjIG1pc21hdGNoXCIsci5tb2RlPTMwO2JyZWFrfWQ9dT0wfXIuaGVhZCYmKHIuaGVhZC5oY3JjPXIuZmxhZ3M+PjkmMSxyLmhlYWQuZG9uZT0hMCksZS5hZGxlcj1yLmNoZWNrPTAsci5tb2RlPTEyO2JyZWFrO2Nhc2UgMTA6Zm9yKDtkPDMyOyl7aWYoMD09PWEpYnJlYWsgZTthLS0sdSs9bltzKytdPDxkLGQrPTh9ZS5hZGxlcj1yLmNoZWNrPVAodSksZD11PTAsci5tb2RlPTExO2Nhc2UgMTE6aWYoMD09PXIuaGF2ZWRpY3QpcmV0dXJuIGUubmV4dF9vdXQ9byxlLmF2YWlsX291dD1mLGUubmV4dF9pbj1zLGUuYXZhaWxfaW49YSxyLmhvbGQ9dSxyLmJpdHM9ZCwyO2UuYWRsZXI9ci5jaGVjaz0xLHIubW9kZT0xMjtjYXNlIDEyOmlmKDU9PT10fHw2PT09dClicmVhayBlO2Nhc2UgMTM6aWYoci5sYXN0KXt1Pj4+PTcmZCxkLT03JmQsci5tb2RlPTI3O2JyZWFrfWZvcig7ZDwzOyl7aWYoMD09PWEpYnJlYWsgZTthLS0sdSs9bltzKytdPDxkLGQrPTh9c3dpdGNoKHIubGFzdD0xJnUsZC09MSwzJih1Pj4+PTEpKXtjYXNlIDA6ci5tb2RlPTE0O2JyZWFrO2Nhc2UgMTppZihqKHIpLHIubW9kZT0yMCw2IT09dClicmVhazt1Pj4+PTIsZC09MjticmVhayBlO2Nhc2UgMjpyLm1vZGU9MTc7YnJlYWs7Y2FzZSAzOmUubXNnPVwiaW52YWxpZCBibG9jayB0eXBlXCIsci5tb2RlPTMwfXU+Pj49MixkLT0yO2JyZWFrO2Nhc2UgMTQ6Zm9yKHU+Pj49NyZkLGQtPTcmZDtkPDMyOyl7aWYoMD09PWEpYnJlYWsgZTthLS0sdSs9bltzKytdPDxkLGQrPTh9aWYoKDY1NTM1JnUpIT0odT4+PjE2XjY1NTM1KSl7ZS5tc2c9XCJpbnZhbGlkIHN0b3JlZCBibG9jayBsZW5ndGhzXCIsci5tb2RlPTMwO2JyZWFrfWlmKHIubGVuZ3RoPTY1NTM1JnUsZD11PTAsci5tb2RlPTE1LDY9PT10KWJyZWFrIGU7Y2FzZSAxNTpyLm1vZGU9MTY7Y2FzZSAxNjppZihjPXIubGVuZ3RoKXtpZihhPGMmJihjPWEpLGY8YyYmKGM9ZiksMD09PWMpYnJlYWsgZTtPLmFycmF5U2V0KGksbixzLGMsbyksYS09YyxzKz1jLGYtPWMsbys9YyxyLmxlbmd0aC09YzticmVha31yLm1vZGU9MTI7YnJlYWs7Y2FzZSAxNzpmb3IoO2Q8MTQ7KXtpZigwPT09YSlicmVhayBlO2EtLSx1Kz1uW3MrK108PGQsZCs9OH1pZihyLm5sZW49MjU3KygzMSZ1KSx1Pj4+PTUsZC09NSxyLm5kaXN0PTErKDMxJnUpLHU+Pj49NSxkLT01LHIubmNvZGU9NCsoMTUmdSksdT4+Pj00LGQtPTQsMjg2PHIubmxlbnx8MzA8ci5uZGlzdCl7ZS5tc2c9XCJ0b28gbWFueSBsZW5ndGggb3IgZGlzdGFuY2Ugc3ltYm9sc1wiLHIubW9kZT0zMDticmVha31yLmhhdmU9MCxyLm1vZGU9MTg7Y2FzZSAxODpmb3IoO3IuaGF2ZTxyLm5jb2RlOyl7Zm9yKDtkPDM7KXtpZigwPT09YSlicmVhayBlO2EtLSx1Kz1uW3MrK108PGQsZCs9OH1yLmxlbnNbQVtyLmhhdmUrK11dPTcmdSx1Pj4+PTMsZC09M31mb3IoO3IuaGF2ZTwxOTspci5sZW5zW0Fbci5oYXZlKytdXT0wO2lmKHIubGVuY29kZT1yLmxlbmR5bixyLmxlbmJpdHM9NyxTPXtiaXRzOnIubGVuYml0c30seD1UKDAsci5sZW5zLDAsMTksci5sZW5jb2RlLDAsci53b3JrLFMpLHIubGVuYml0cz1TLmJpdHMseCl7ZS5tc2c9XCJpbnZhbGlkIGNvZGUgbGVuZ3RocyBzZXRcIixyLm1vZGU9MzA7YnJlYWt9ci5oYXZlPTAsci5tb2RlPTE5O2Nhc2UgMTk6Zm9yKDtyLmhhdmU8ci5ubGVuK3IubmRpc3Q7KXtmb3IoO3c9KHo9ci5sZW5jb2RlW3UmKDE8PHIubGVuYml0cyktMV0pPj4+MTYmMjU1LHY9NjU1MzUmeiwhKChfPXo+Pj4yNCk8PWQpOyl7aWYoMD09PWEpYnJlYWsgZTthLS0sdSs9bltzKytdPDxkLGQrPTh9aWYodjwxNil1Pj4+PV8sZC09XyxyLmxlbnNbci5oYXZlKytdPXY7ZWxzZXtpZigxNj09PXYpe2ZvcihFPV8rMjtkPEU7KXtpZigwPT09YSlicmVhayBlO2EtLSx1Kz1uW3MrK108PGQsZCs9OH1pZih1Pj4+PV8sZC09XywwPT09ci5oYXZlKXtlLm1zZz1cImludmFsaWQgYml0IGxlbmd0aCByZXBlYXRcIixyLm1vZGU9MzA7YnJlYWt9az1yLmxlbnNbci5oYXZlLTFdLGM9MysoMyZ1KSx1Pj4+PTIsZC09Mn1lbHNlIGlmKDE3PT09dil7Zm9yKEU9XyszO2Q8RTspe2lmKDA9PT1hKWJyZWFrIGU7YS0tLHUrPW5bcysrXTw8ZCxkKz04fWQtPV8saz0wLGM9MysoNyYodT4+Pj1fKSksdT4+Pj0zLGQtPTN9ZWxzZXtmb3IoRT1fKzc7ZDxFOyl7aWYoMD09PWEpYnJlYWsgZTthLS0sdSs9bltzKytdPDxkLGQrPTh9ZC09XyxrPTAsYz0xMSsoMTI3Jih1Pj4+PV8pKSx1Pj4+PTcsZC09N31pZihyLmhhdmUrYz5yLm5sZW4rci5uZGlzdCl7ZS5tc2c9XCJpbnZhbGlkIGJpdCBsZW5ndGggcmVwZWF0XCIsci5tb2RlPTMwO2JyZWFrfWZvcig7Yy0tOylyLmxlbnNbci5oYXZlKytdPWt9fWlmKDMwPT09ci5tb2RlKWJyZWFrO2lmKDA9PT1yLmxlbnNbMjU2XSl7ZS5tc2c9XCJpbnZhbGlkIGNvZGUgLS0gbWlzc2luZyBlbmQtb2YtYmxvY2tcIixyLm1vZGU9MzA7YnJlYWt9aWYoci5sZW5iaXRzPTksUz17Yml0czpyLmxlbmJpdHN9LHg9VChSLHIubGVucywwLHIubmxlbixyLmxlbmNvZGUsMCxyLndvcmssUyksci5sZW5iaXRzPVMuYml0cyx4KXtlLm1zZz1cImludmFsaWQgbGl0ZXJhbC9sZW5ndGhzIHNldFwiLHIubW9kZT0zMDticmVha31pZihyLmRpc3RiaXRzPTYsci5kaXN0Y29kZT1yLmRpc3RkeW4sUz17Yml0czpyLmRpc3RiaXRzfSx4PVQoRixyLmxlbnMsci5ubGVuLHIubmRpc3Qsci5kaXN0Y29kZSwwLHIud29yayxTKSxyLmRpc3RiaXRzPVMuYml0cyx4KXtlLm1zZz1cImludmFsaWQgZGlzdGFuY2VzIHNldFwiLHIubW9kZT0zMDticmVha31pZihyLm1vZGU9MjAsNj09PXQpYnJlYWsgZTtjYXNlIDIwOnIubW9kZT0yMTtjYXNlIDIxOmlmKDY8PWEmJjI1ODw9Zil7ZS5uZXh0X291dD1vLGUuYXZhaWxfb3V0PWYsZS5uZXh0X2luPXMsZS5hdmFpbF9pbj1hLHIuaG9sZD11LHIuYml0cz1kLEIoZSxsKSxvPWUubmV4dF9vdXQsaT1lLm91dHB1dCxmPWUuYXZhaWxfb3V0LHM9ZS5uZXh0X2luLG49ZS5pbnB1dCxhPWUuYXZhaWxfaW4sdT1yLmhvbGQsZD1yLmJpdHMsMTI9PT1yLm1vZGUmJihyLmJhY2s9LTEpO2JyZWFrfWZvcihyLmJhY2s9MDt3PSh6PXIubGVuY29kZVt1JigxPDxyLmxlbmJpdHMpLTFdKT4+PjE2JjI1NSx2PTY1NTM1JnosISgoXz16Pj4+MjQpPD1kKTspe2lmKDA9PT1hKWJyZWFrIGU7YS0tLHUrPW5bcysrXTw8ZCxkKz04fWlmKHcmJjA9PSgyNDAmdykpe2ZvcihnPV8seT13LGI9djt3PSh6PXIubGVuY29kZVtiKygodSYoMTw8Zyt5KS0xKT4+ZyldKT4+PjE2JjI1NSx2PTY1NTM1JnosIShnKyhfPXo+Pj4yNCk8PWQpOyl7aWYoMD09PWEpYnJlYWsgZTthLS0sdSs9bltzKytdPDxkLGQrPTh9dT4+Pj1nLGQtPWcsci5iYWNrKz1nfWlmKHU+Pj49XyxkLT1fLHIuYmFjays9XyxyLmxlbmd0aD12LDA9PT13KXtyLm1vZGU9MjY7YnJlYWt9aWYoMzImdyl7ci5iYWNrPS0xLHIubW9kZT0xMjticmVha31pZig2NCZ3KXtlLm1zZz1cImludmFsaWQgbGl0ZXJhbC9sZW5ndGggY29kZVwiLHIubW9kZT0zMDticmVha31yLmV4dHJhPTE1Jncsci5tb2RlPTIyO2Nhc2UgMjI6aWYoci5leHRyYSl7Zm9yKEU9ci5leHRyYTtkPEU7KXtpZigwPT09YSlicmVhayBlO2EtLSx1Kz1uW3MrK108PGQsZCs9OH1yLmxlbmd0aCs9dSYoMTw8ci5leHRyYSktMSx1Pj4+PXIuZXh0cmEsZC09ci5leHRyYSxyLmJhY2srPXIuZXh0cmF9ci53YXM9ci5sZW5ndGgsci5tb2RlPTIzO2Nhc2UgMjM6Zm9yKDt3PSh6PXIuZGlzdGNvZGVbdSYoMTw8ci5kaXN0Yml0cyktMV0pPj4+MTYmMjU1LHY9NjU1MzUmeiwhKChfPXo+Pj4yNCk8PWQpOyl7aWYoMD09PWEpYnJlYWsgZTthLS0sdSs9bltzKytdPDxkLGQrPTh9aWYoMD09KDI0MCZ3KSl7Zm9yKGc9Xyx5PXcsYj12O3c9KHo9ci5kaXN0Y29kZVtiKygodSYoMTw8Zyt5KS0xKT4+ZyldKT4+PjE2JjI1NSx2PTY1NTM1JnosIShnKyhfPXo+Pj4yNCk8PWQpOyl7aWYoMD09PWEpYnJlYWsgZTthLS0sdSs9bltzKytdPDxkLGQrPTh9dT4+Pj1nLGQtPWcsci5iYWNrKz1nfWlmKHU+Pj49XyxkLT1fLHIuYmFjays9Xyw2NCZ3KXtlLm1zZz1cImludmFsaWQgZGlzdGFuY2UgY29kZVwiLHIubW9kZT0zMDticmVha31yLm9mZnNldD12LHIuZXh0cmE9MTUmdyxyLm1vZGU9MjQ7Y2FzZSAyNDppZihyLmV4dHJhKXtmb3IoRT1yLmV4dHJhO2Q8RTspe2lmKDA9PT1hKWJyZWFrIGU7YS0tLHUrPW5bcysrXTw8ZCxkKz04fXIub2Zmc2V0Kz11JigxPDxyLmV4dHJhKS0xLHU+Pj49ci5leHRyYSxkLT1yLmV4dHJhLHIuYmFjays9ci5leHRyYX1pZihyLm9mZnNldD5yLmRtYXgpe2UubXNnPVwiaW52YWxpZCBkaXN0YW5jZSB0b28gZmFyIGJhY2tcIixyLm1vZGU9MzA7YnJlYWt9ci5tb2RlPTI1O2Nhc2UgMjU6aWYoMD09PWYpYnJlYWsgZTtpZihjPWwtZixyLm9mZnNldD5jKXtpZigoYz1yLm9mZnNldC1jKT5yLndoYXZlJiZyLnNhbmUpe2UubXNnPVwiaW52YWxpZCBkaXN0YW5jZSB0b28gZmFyIGJhY2tcIixyLm1vZGU9MzA7YnJlYWt9cD1jPnIud25leHQ/KGMtPXIud25leHQsci53c2l6ZS1jKTpyLnduZXh0LWMsYz5yLmxlbmd0aCYmKGM9ci5sZW5ndGgpLG09ci53aW5kb3d9ZWxzZSBtPWkscD1vLXIub2Zmc2V0LGM9ci5sZW5ndGg7Zm9yKGY8YyYmKGM9ZiksZi09YyxyLmxlbmd0aC09YztpW28rK109bVtwKytdLC0tYzspOzA9PT1yLmxlbmd0aCYmKHIubW9kZT0yMSk7YnJlYWs7Y2FzZSAyNjppZigwPT09ZilicmVhayBlO2lbbysrXT1yLmxlbmd0aCxmLS0sci5tb2RlPTIxO2JyZWFrO2Nhc2UgMjc6aWYoci53cmFwKXtmb3IoO2Q8MzI7KXtpZigwPT09YSlicmVhayBlO2EtLSx1fD1uW3MrK108PGQsZCs9OH1pZihsLT1mLGUudG90YWxfb3V0Kz1sLHIudG90YWwrPWwsbCYmKGUuYWRsZXI9ci5jaGVjaz1yLmZsYWdzP0Qoci5jaGVjayxpLGwsby1sKTpJKHIuY2hlY2ssaSxsLG8tbCkpLGw9Ziwoci5mbGFncz91OlAodSkpIT09ci5jaGVjayl7ZS5tc2c9XCJpbmNvcnJlY3QgZGF0YSBjaGVja1wiLHIubW9kZT0zMDticmVha31kPXU9MH1yLm1vZGU9Mjg7Y2FzZSAyODppZihyLndyYXAmJnIuZmxhZ3Mpe2Zvcig7ZDwzMjspe2lmKDA9PT1hKWJyZWFrIGU7YS0tLHUrPW5bcysrXTw8ZCxkKz04fWlmKHUhPT0oNDI5NDk2NzI5NSZyLnRvdGFsKSl7ZS5tc2c9XCJpbmNvcnJlY3QgbGVuZ3RoIGNoZWNrXCIsci5tb2RlPTMwO2JyZWFrfWQ9dT0wfXIubW9kZT0yOTtjYXNlIDI5Ong9MTticmVhayBlO2Nhc2UgMzA6eD0tMzticmVhayBlO2Nhc2UgMzE6cmV0dXJuLTQ7Y2FzZSAzMjpkZWZhdWx0OnJldHVybiBVfXJldHVybiBlLm5leHRfb3V0PW8sZS5hdmFpbF9vdXQ9ZixlLm5leHRfaW49cyxlLmF2YWlsX2luPWEsci5ob2xkPXUsci5iaXRzPWQsKHIud3NpemV8fGwhPT1lLmF2YWlsX291dCYmci5tb2RlPDMwJiYoci5tb2RlPDI3fHw0IT09dCkpJiZaKGUsZS5vdXRwdXQsZS5uZXh0X291dCxsLWUuYXZhaWxfb3V0KT8oci5tb2RlPTMxLC00KTooaC09ZS5hdmFpbF9pbixsLT1lLmF2YWlsX291dCxlLnRvdGFsX2luKz1oLGUudG90YWxfb3V0Kz1sLHIudG90YWwrPWwsci53cmFwJiZsJiYoZS5hZGxlcj1yLmNoZWNrPXIuZmxhZ3M/RChyLmNoZWNrLGksbCxlLm5leHRfb3V0LWwpOkkoci5jaGVjayxpLGwsZS5uZXh0X291dC1sKSksZS5kYXRhX3R5cGU9ci5iaXRzKyhyLmxhc3Q/NjQ6MCkrKDEyPT09ci5tb2RlPzEyODowKSsoMjA9PT1yLm1vZGV8fDE1PT09ci5tb2RlPzI1NjowKSwoMD09aCYmMD09PWx8fDQ9PT10KSYmeD09PU4mJih4PS01KSx4KX0sci5pbmZsYXRlRW5kPWZ1bmN0aW9uKGUpe2lmKCFlfHwhZS5zdGF0ZSlyZXR1cm4gVTt2YXIgdD1lLnN0YXRlO3JldHVybiB0LndpbmRvdyYmKHQud2luZG93PW51bGwpLGUuc3RhdGU9bnVsbCxOfSxyLmluZmxhdGVHZXRIZWFkZXI9ZnVuY3Rpb24oZSx0KXt2YXIgcjtyZXR1cm4gZSYmZS5zdGF0ZT8wPT0oMiYocj1lLnN0YXRlKS53cmFwKT9VOigoci5oZWFkPXQpLmRvbmU9ITEsTik6VX0sci5pbmZsYXRlU2V0RGljdGlvbmFyeT1mdW5jdGlvbihlLHQpe3ZhciByLG49dC5sZW5ndGg7cmV0dXJuIGUmJmUuc3RhdGU/MCE9PShyPWUuc3RhdGUpLndyYXAmJjExIT09ci5tb2RlP1U6MTE9PT1yLm1vZGUmJkkoMSx0LG4sMCkhPT1yLmNoZWNrPy0zOlooZSx0LG4sbik/KHIubW9kZT0zMSwtNCk6KHIuaGF2ZWRpY3Q9MSxOKTpVfSxyLmluZmxhdGVJbmZvPVwicGFrbyBpbmZsYXRlIChmcm9tIE5vZGVjYSBwcm9qZWN0KVwifSx7XCIuLi91dGlscy9jb21tb25cIjo0MSxcIi4vYWRsZXIzMlwiOjQzLFwiLi9jcmMzMlwiOjQ1LFwiLi9pbmZmYXN0XCI6NDgsXCIuL2luZnRyZWVzXCI6NTB9XSw1MDpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBSPWUoXCIuLi91dGlscy9jb21tb25cIiksRj1bMyw0LDUsNiw3LDgsOSwxMCwxMSwxMywxNSwxNywxOSwyMywyNywzMSwzNSw0Myw1MSw1OSw2Nyw4Myw5OSwxMTUsMTMxLDE2MywxOTUsMjI3LDI1OCwwLDBdLE49WzE2LDE2LDE2LDE2LDE2LDE2LDE2LDE2LDE3LDE3LDE3LDE3LDE4LDE4LDE4LDE4LDE5LDE5LDE5LDE5LDIwLDIwLDIwLDIwLDIxLDIxLDIxLDIxLDE2LDcyLDc4XSxVPVsxLDIsMyw0LDUsNyw5LDEzLDE3LDI1LDMzLDQ5LDY1LDk3LDEyOSwxOTMsMjU3LDM4NSw1MTMsNzY5LDEwMjUsMTUzNywyMDQ5LDMwNzMsNDA5Nyw2MTQ1LDgxOTMsMTIyODksMTYzODUsMjQ1NzcsMCwwXSxMPVsxNiwxNiwxNiwxNiwxNywxNywxOCwxOCwxOSwxOSwyMCwyMCwyMSwyMSwyMiwyMiwyMywyMywyNCwyNCwyNSwyNSwyNiwyNiwyNywyNywyOCwyOCwyOSwyOSw2NCw2NF07dC5leHBvcnRzPWZ1bmN0aW9uKGUsdCxyLG4saSxzLG8sYSl7dmFyIGYsdSxkLGgsbCxjLHAsbSxfLHc9YS5iaXRzLHY9MCxnPTAseT0wLGI9MCxrPTAseD0wLFM9MCxFPTAsej0wLEM9MCxBPW51bGwsTz0wLEk9bmV3IFIuQnVmMTYoMTYpLEQ9bmV3IFIuQnVmMTYoMTYpLEI9bnVsbCxUPTA7Zm9yKHY9MDt2PD0xNTt2KyspSVt2XT0wO2ZvcihnPTA7ZzxuO2crKylJW3RbcitnXV0rKztmb3Ioaz13LGI9MTU7MTw9YiYmMD09PUlbYl07Yi0tKTtpZihiPGsmJihrPWIpLDA9PT1iKXJldHVybiBpW3MrK109MjA5NzE1MjAsaVtzKytdPTIwOTcxNTIwLGEuYml0cz0xLDA7Zm9yKHk9MTt5PGImJjA9PT1JW3ldO3krKyk7Zm9yKGs8eSYmKGs9eSksdj1FPTE7djw9MTU7disrKWlmKEU8PD0xLChFLT1JW3ZdKTwwKXJldHVybi0xO2lmKDA8RSYmKDA9PT1lfHwxIT09YikpcmV0dXJuLTE7Zm9yKERbMV09MCx2PTE7djwxNTt2KyspRFt2KzFdPURbdl0rSVt2XTtmb3IoZz0wO2c8bjtnKyspMCE9PXRbcitnXSYmKG9bRFt0W3IrZ11dKytdPWcpO2lmKGM9MD09PWU/KEE9Qj1vLDE5KToxPT09ZT8oQT1GLE8tPTI1NyxCPU4sVC09MjU3LDI1Nik6KEE9VSxCPUwsLTEpLHY9eSxsPXMsUz1nPUM9MCxkPS0xLGg9KHo9MTw8KHg9aykpLTEsMT09PWUmJjg1Mjx6fHwyPT09ZSYmNTkyPHopcmV0dXJuIDE7Zm9yKDs7KXtmb3IocD12LVMsXz1vW2ddPGM/KG09MCxvW2ddKTpvW2ddPmM/KG09QltUK29bZ11dLEFbTytvW2ddXSk6KG09OTYsMCksZj0xPDx2LVMseT11PTE8PHg7aVtsKyhDPj5TKSsodS09ZildPXA8PDI0fG08PDE2fF98MCwwIT09dTspO2ZvcihmPTE8PHYtMTtDJmY7KWY+Pj0xO2lmKDAhPT1mPyhDJj1mLTEsQys9Zik6Qz0wLGcrKywwPT0tLUlbdl0pe2lmKHY9PT1iKWJyZWFrO3Y9dFtyK29bZ11dfWlmKGs8diYmKEMmaCkhPT1kKXtmb3IoMD09PVMmJihTPWspLGwrPXksRT0xPDwoeD12LVMpO3grUzxiJiYhKChFLT1JW3grU10pPD0wKTspeCsrLEU8PD0xO2lmKHorPTE8PHgsMT09PWUmJjg1Mjx6fHwyPT09ZSYmNTkyPHopcmV0dXJuIDE7aVtkPUMmaF09azw8MjR8eDw8MTZ8bC1zfDB9fXJldHVybiAwIT09QyYmKGlbbCtDXT12LVM8PDI0fDY0PDwxNnwwKSxhLmJpdHM9aywwfX0se1wiLi4vdXRpbHMvY29tbW9uXCI6NDF9XSw1MTpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3QuZXhwb3J0cz17MjpcIm5lZWQgZGljdGlvbmFyeVwiLDE6XCJzdHJlYW0gZW5kXCIsMDpcIlwiLFwiLTFcIjpcImZpbGUgZXJyb3JcIixcIi0yXCI6XCJzdHJlYW0gZXJyb3JcIixcIi0zXCI6XCJkYXRhIGVycm9yXCIsXCItNFwiOlwiaW5zdWZmaWNpZW50IG1lbW9yeVwiLFwiLTVcIjpcImJ1ZmZlciBlcnJvclwiLFwiLTZcIjpcImluY29tcGF0aWJsZSB2ZXJzaW9uXCJ9fSx7fV0sNTI6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgYT1lKFwiLi4vdXRpbHMvY29tbW9uXCIpO2Z1bmN0aW9uIG4oZSl7Zm9yKHZhciB0PWUubGVuZ3RoOzA8PS0tdDspZVt0XT0wfXZhciBfPTE1LGk9MTYsZj1bMCwwLDAsMCwwLDAsMCwwLDEsMSwxLDEsMiwyLDIsMiwzLDMsMywzLDQsNCw0LDQsNSw1LDUsNSwwXSx1PVswLDAsMCwwLDEsMSwyLDIsMywzLDQsNCw1LDUsNiw2LDcsNyw4LDgsOSw5LDEwLDEwLDExLDExLDEyLDEyLDEzLDEzXSxvPVswLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDIsMyw3XSxkPVsxNiwxNywxOCwwLDgsNyw5LDYsMTAsNSwxMSw0LDEyLDMsMTMsMiwxNCwxLDE1XSxoPW5ldyBBcnJheSg1NzYpO24oaCk7dmFyIGw9bmV3IEFycmF5KDYwKTtuKGwpO3ZhciBjPW5ldyBBcnJheSg1MTIpO24oYyk7dmFyIHA9bmV3IEFycmF5KDI1Nik7bihwKTt2YXIgbT1uZXcgQXJyYXkoMjkpO24obSk7dmFyIHcsdixnLHk9bmV3IEFycmF5KDMwKTtmdW5jdGlvbiBiKGUsdCxyLG4saSl7dGhpcy5zdGF0aWNfdHJlZT1lLHRoaXMuZXh0cmFfYml0cz10LHRoaXMuZXh0cmFfYmFzZT1yLHRoaXMuZWxlbXM9bix0aGlzLm1heF9sZW5ndGg9aSx0aGlzLmhhc19zdHJlZT1lJiZlLmxlbmd0aH1mdW5jdGlvbiBzKGUsdCl7dGhpcy5keW5fdHJlZT1lLHRoaXMubWF4X2NvZGU9MCx0aGlzLnN0YXRfZGVzYz10fWZ1bmN0aW9uIGsoZSl7cmV0dXJuIGU8MjU2P2NbZV06Y1syNTYrKGU+Pj43KV19ZnVuY3Rpb24geChlLHQpe2UucGVuZGluZ19idWZbZS5wZW5kaW5nKytdPTI1NSZ0LGUucGVuZGluZ19idWZbZS5wZW5kaW5nKytdPXQ+Pj44JjI1NX1mdW5jdGlvbiBTKGUsdCxyKXtlLmJpX3ZhbGlkPmktcj8oZS5iaV9idWZ8PXQ8PGUuYmlfdmFsaWQmNjU1MzUseChlLGUuYmlfYnVmKSxlLmJpX2J1Zj10Pj5pLWUuYmlfdmFsaWQsZS5iaV92YWxpZCs9ci1pKTooZS5iaV9idWZ8PXQ8PGUuYmlfdmFsaWQmNjU1MzUsZS5iaV92YWxpZCs9cil9ZnVuY3Rpb24gRShlLHQscil7UyhlLHJbMip0XSxyWzIqdCsxXSl9ZnVuY3Rpb24geihlLHQpe2Zvcih2YXIgcj0wO3J8PTEmZSxlPj4+PTEscjw8PTEsMDwtLXQ7KTtyZXR1cm4gcj4+PjF9ZnVuY3Rpb24gQyhlLHQscil7dmFyIG4saSxzPW5ldyBBcnJheShfKzEpLG89MDtmb3Iobj0xO248PV87bisrKXNbbl09bz1vK3Jbbi0xXTw8MTtmb3IoaT0wO2k8PXQ7aSsrKXt2YXIgYT1lWzIqaSsxXTswIT09YSYmKGVbMippXT16KHNbYV0rKyxhKSl9fWZ1bmN0aW9uIEEoZSl7dmFyIHQ7Zm9yKHQ9MDt0PDI4Njt0KyspZS5keW5fbHRyZWVbMip0XT0wO2Zvcih0PTA7dDwzMDt0KyspZS5keW5fZHRyZWVbMip0XT0wO2Zvcih0PTA7dDwxOTt0KyspZS5ibF90cmVlWzIqdF09MDtlLmR5bl9sdHJlZVs1MTJdPTEsZS5vcHRfbGVuPWUuc3RhdGljX2xlbj0wLGUubGFzdF9saXQ9ZS5tYXRjaGVzPTB9ZnVuY3Rpb24gTyhlKXs4PGUuYmlfdmFsaWQ/eChlLGUuYmlfYnVmKTowPGUuYmlfdmFsaWQmJihlLnBlbmRpbmdfYnVmW2UucGVuZGluZysrXT1lLmJpX2J1ZiksZS5iaV9idWY9MCxlLmJpX3ZhbGlkPTB9ZnVuY3Rpb24gSShlLHQscixuKXt2YXIgaT0yKnQscz0yKnI7cmV0dXJuIGVbaV08ZVtzXXx8ZVtpXT09PWVbc10mJm5bdF08PW5bcl19ZnVuY3Rpb24gRChlLHQscil7Zm9yKHZhciBuPWUuaGVhcFtyXSxpPXI8PDE7aTw9ZS5oZWFwX2xlbiYmKGk8ZS5oZWFwX2xlbiYmSSh0LGUuaGVhcFtpKzFdLGUuaGVhcFtpXSxlLmRlcHRoKSYmaSsrLCFJKHQsbixlLmhlYXBbaV0sZS5kZXB0aCkpOyllLmhlYXBbcl09ZS5oZWFwW2ldLHI9aSxpPDw9MTtlLmhlYXBbcl09bn1mdW5jdGlvbiBCKGUsdCxyKXt2YXIgbixpLHMsbyxhPTA7aWYoMCE9PWUubGFzdF9saXQpZm9yKDtuPWUucGVuZGluZ19idWZbZS5kX2J1ZisyKmFdPDw4fGUucGVuZGluZ19idWZbZS5kX2J1ZisyKmErMV0saT1lLnBlbmRpbmdfYnVmW2UubF9idWYrYV0sYSsrLDA9PT1uP0UoZSxpLHQpOihFKGUsKHM9cFtpXSkrMjU2KzEsdCksMCE9PShvPWZbc10pJiZTKGUsaS09bVtzXSxvKSxFKGUscz1rKC0tbiksciksMCE9PShvPXVbc10pJiZTKGUsbi09eVtzXSxvKSksYTxlLmxhc3RfbGl0Oyk7RShlLDI1Nix0KX1mdW5jdGlvbiBUKGUsdCl7dmFyIHIsbixpLHM9dC5keW5fdHJlZSxvPXQuc3RhdF9kZXNjLnN0YXRpY190cmVlLGE9dC5zdGF0X2Rlc2MuaGFzX3N0cmVlLGY9dC5zdGF0X2Rlc2MuZWxlbXMsdT0tMTtmb3IoZS5oZWFwX2xlbj0wLGUuaGVhcF9tYXg9NTczLHI9MDtyPGY7cisrKTAhPT1zWzIqcl0/KGUuaGVhcFsrK2UuaGVhcF9sZW5dPXU9cixlLmRlcHRoW3JdPTApOnNbMipyKzFdPTA7Zm9yKDtlLmhlYXBfbGVuPDI7KXNbMiooaT1lLmhlYXBbKytlLmhlYXBfbGVuXT11PDI/Kyt1OjApXT0xLGUuZGVwdGhbaV09MCxlLm9wdF9sZW4tLSxhJiYoZS5zdGF0aWNfbGVuLT1vWzIqaSsxXSk7Zm9yKHQubWF4X2NvZGU9dSxyPWUuaGVhcF9sZW4+PjE7MTw9cjtyLS0pRChlLHMscik7Zm9yKGk9ZjtyPWUuaGVhcFsxXSxlLmhlYXBbMV09ZS5oZWFwW2UuaGVhcF9sZW4tLV0sRChlLHMsMSksbj1lLmhlYXBbMV0sZS5oZWFwWy0tZS5oZWFwX21heF09cixlLmhlYXBbLS1lLmhlYXBfbWF4XT1uLHNbMippXT1zWzIqcl0rc1syKm5dLGUuZGVwdGhbaV09KGUuZGVwdGhbcl0+PWUuZGVwdGhbbl0/ZS5kZXB0aFtyXTplLmRlcHRoW25dKSsxLHNbMipyKzFdPXNbMipuKzFdPWksZS5oZWFwWzFdPWkrKyxEKGUscywxKSwyPD1lLmhlYXBfbGVuOyk7ZS5oZWFwWy0tZS5oZWFwX21heF09ZS5oZWFwWzFdLGZ1bmN0aW9uKGUsdCl7dmFyIHIsbixpLHMsbyxhLGY9dC5keW5fdHJlZSx1PXQubWF4X2NvZGUsZD10LnN0YXRfZGVzYy5zdGF0aWNfdHJlZSxoPXQuc3RhdF9kZXNjLmhhc19zdHJlZSxsPXQuc3RhdF9kZXNjLmV4dHJhX2JpdHMsYz10LnN0YXRfZGVzYy5leHRyYV9iYXNlLHA9dC5zdGF0X2Rlc2MubWF4X2xlbmd0aCxtPTA7Zm9yKHM9MDtzPD1fO3MrKyllLmJsX2NvdW50W3NdPTA7Zm9yKGZbMiplLmhlYXBbZS5oZWFwX21heF0rMV09MCxyPWUuaGVhcF9tYXgrMTtyPDU3MztyKyspcDwocz1mWzIqZlsyKihuPWUuaGVhcFtyXSkrMV0rMV0rMSkmJihzPXAsbSsrKSxmWzIqbisxXT1zLHU8bnx8KGUuYmxfY291bnRbc10rKyxvPTAsYzw9biYmKG89bFtuLWNdKSxhPWZbMipuXSxlLm9wdF9sZW4rPWEqKHMrbyksaCYmKGUuc3RhdGljX2xlbis9YSooZFsyKm4rMV0rbykpKTtpZigwIT09bSl7ZG97Zm9yKHM9cC0xOzA9PT1lLmJsX2NvdW50W3NdOylzLS07ZS5ibF9jb3VudFtzXS0tLGUuYmxfY291bnRbcysxXSs9MixlLmJsX2NvdW50W3BdLS0sbS09Mn13aGlsZSgwPG0pO2ZvcihzPXA7MCE9PXM7cy0tKWZvcihuPWUuYmxfY291bnRbc107MCE9PW47KXU8KGk9ZS5oZWFwWy0tcl0pfHwoZlsyKmkrMV0hPT1zJiYoZS5vcHRfbGVuKz0ocy1mWzIqaSsxXSkqZlsyKmldLGZbMippKzFdPXMpLG4tLSl9fShlLHQpLEMocyx1LGUuYmxfY291bnQpfWZ1bmN0aW9uIFIoZSx0LHIpe3ZhciBuLGkscz0tMSxvPXRbMV0sYT0wLGY9Nyx1PTQ7Zm9yKDA9PT1vJiYoZj0xMzgsdT0zKSx0WzIqKHIrMSkrMV09NjU1MzUsbj0wO248PXI7bisrKWk9byxvPXRbMioobisxKSsxXSwrK2E8ZiYmaT09PW98fChhPHU/ZS5ibF90cmVlWzIqaV0rPWE6MCE9PWk/KGkhPT1zJiZlLmJsX3RyZWVbMippXSsrLGUuYmxfdHJlZVszMl0rKyk6YTw9MTA/ZS5ibF90cmVlWzM0XSsrOmUuYmxfdHJlZVszNl0rKyxzPWksdT0oYT0wKT09PW8/KGY9MTM4LDMpOmk9PT1vPyhmPTYsMyk6KGY9Nyw0KSl9ZnVuY3Rpb24gRihlLHQscil7dmFyIG4saSxzPS0xLG89dFsxXSxhPTAsZj03LHU9NDtmb3IoMD09PW8mJihmPTEzOCx1PTMpLG49MDtuPD1yO24rKylpZihpPW8sbz10WzIqKG4rMSkrMV0sISgrK2E8ZiYmaT09PW8pKXtpZihhPHUpZm9yKDtFKGUsaSxlLmJsX3RyZWUpLDAhPS0tYTspO2Vsc2UgMCE9PWk/KGkhPT1zJiYoRShlLGksZS5ibF90cmVlKSxhLS0pLEUoZSwxNixlLmJsX3RyZWUpLFMoZSxhLTMsMikpOmE8PTEwPyhFKGUsMTcsZS5ibF90cmVlKSxTKGUsYS0zLDMpKTooRShlLDE4LGUuYmxfdHJlZSksUyhlLGEtMTEsNykpO3M9aSx1PShhPTApPT09bz8oZj0xMzgsMyk6aT09PW8/KGY9NiwzKTooZj03LDQpfX1uKHkpO3ZhciBOPSExO2Z1bmN0aW9uIFUoZSx0LHIsbil7dmFyIGkscyxvO1MoZSwwKyhuPzE6MCksMykscz10LG89cixPKGk9ZSkseChpLG8pLHgoaSx+byksYS5hcnJheVNldChpLnBlbmRpbmdfYnVmLGkud2luZG93LHMsbyxpLnBlbmRpbmcpLGkucGVuZGluZys9b31yLl90cl9pbml0PWZ1bmN0aW9uKGUpe058fChmdW5jdGlvbigpe3ZhciBlLHQscixuLGkscz1uZXcgQXJyYXkoXysxKTtmb3Iobj1yPTA7bjwyODtuKyspZm9yKG1bbl09cixlPTA7ZTwxPDxmW25dO2UrKylwW3IrK109bjtmb3IocFtyLTFdPW4sbj1pPTA7bjwxNjtuKyspZm9yKHlbbl09aSxlPTA7ZTwxPDx1W25dO2UrKyljW2krK109bjtmb3IoaT4+PTc7bjwzMDtuKyspZm9yKHlbbl09aTw8NyxlPTA7ZTwxPDx1W25dLTc7ZSsrKWNbMjU2K2krK109bjtmb3IodD0wO3Q8PV87dCsrKXNbdF09MDtmb3IoZT0wO2U8PTE0MzspaFsyKmUrMV09OCxlKyssc1s4XSsrO2Zvcig7ZTw9MjU1OyloWzIqZSsxXT05LGUrKyxzWzldKys7Zm9yKDtlPD0yNzk7KWhbMiplKzFdPTcsZSsrLHNbN10rKztmb3IoO2U8PTI4NzspaFsyKmUrMV09OCxlKyssc1s4XSsrO2ZvcihDKGgsMjg3LHMpLGU9MDtlPDMwO2UrKylsWzIqZSsxXT01LGxbMiplXT16KGUsNSk7dz1uZXcgYihoLGYsMjU3LDI4NixfKSx2PW5ldyBiKGwsdSwwLDMwLF8pLGc9bmV3IGIobmV3IEFycmF5KDApLG8sMCwxOSw3KX0oKSxOPSEwKSxlLmxfZGVzYz1uZXcgcyhlLmR5bl9sdHJlZSx3KSxlLmRfZGVzYz1uZXcgcyhlLmR5bl9kdHJlZSx2KSxlLmJsX2Rlc2M9bmV3IHMoZS5ibF90cmVlLGcpLGUuYmlfYnVmPTAsZS5iaV92YWxpZD0wLEEoZSl9LHIuX3RyX3N0b3JlZF9ibG9jaz1VLHIuX3RyX2ZsdXNoX2Jsb2NrPWZ1bmN0aW9uKGUsdCxyLG4pe3ZhciBpLHMsbz0wOzA8ZS5sZXZlbD8oMj09PWUuc3RybS5kYXRhX3R5cGUmJihlLnN0cm0uZGF0YV90eXBlPWZ1bmN0aW9uKGUpe3ZhciB0LHI9NDA5MzYyNDQ0Nztmb3IodD0wO3Q8PTMxO3QrKyxyPj4+PTEpaWYoMSZyJiYwIT09ZS5keW5fbHRyZWVbMip0XSlyZXR1cm4gMDtpZigwIT09ZS5keW5fbHRyZWVbMThdfHwwIT09ZS5keW5fbHRyZWVbMjBdfHwwIT09ZS5keW5fbHRyZWVbMjZdKXJldHVybiAxO2Zvcih0PTMyO3Q8MjU2O3QrKylpZigwIT09ZS5keW5fbHRyZWVbMip0XSlyZXR1cm4gMTtyZXR1cm4gMH0oZSkpLFQoZSxlLmxfZGVzYyksVChlLGUuZF9kZXNjKSxvPWZ1bmN0aW9uKGUpe3ZhciB0O2ZvcihSKGUsZS5keW5fbHRyZWUsZS5sX2Rlc2MubWF4X2NvZGUpLFIoZSxlLmR5bl9kdHJlZSxlLmRfZGVzYy5tYXhfY29kZSksVChlLGUuYmxfZGVzYyksdD0xODszPD10JiYwPT09ZS5ibF90cmVlWzIqZFt0XSsxXTt0LS0pO3JldHVybiBlLm9wdF9sZW4rPTMqKHQrMSkrNSs1KzQsdH0oZSksaT1lLm9wdF9sZW4rMys3Pj4+Mywocz1lLnN0YXRpY19sZW4rMys3Pj4+Myk8PWkmJihpPXMpKTppPXM9cis1LHIrNDw9aSYmLTEhPT10P1UoZSx0LHIsbik6ND09PWUuc3RyYXRlZ3l8fHM9PT1pPyhTKGUsMisobj8xOjApLDMpLEIoZSxoLGwpKTooUyhlLDQrKG4/MTowKSwzKSxmdW5jdGlvbihlLHQscixuKXt2YXIgaTtmb3IoUyhlLHQtMjU3LDUpLFMoZSxyLTEsNSksUyhlLG4tNCw0KSxpPTA7aTxuO2krKylTKGUsZS5ibF90cmVlWzIqZFtpXSsxXSwzKTtGKGUsZS5keW5fbHRyZWUsdC0xKSxGKGUsZS5keW5fZHRyZWUsci0xKX0oZSxlLmxfZGVzYy5tYXhfY29kZSsxLGUuZF9kZXNjLm1heF9jb2RlKzEsbysxKSxCKGUsZS5keW5fbHRyZWUsZS5keW5fZHRyZWUpKSxBKGUpLG4mJk8oZSl9LHIuX3RyX3RhbGx5PWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gZS5wZW5kaW5nX2J1ZltlLmRfYnVmKzIqZS5sYXN0X2xpdF09dD4+PjgmMjU1LGUucGVuZGluZ19idWZbZS5kX2J1ZisyKmUubGFzdF9saXQrMV09MjU1JnQsZS5wZW5kaW5nX2J1ZltlLmxfYnVmK2UubGFzdF9saXRdPTI1NSZyLGUubGFzdF9saXQrKywwPT09dD9lLmR5bl9sdHJlZVsyKnJdKys6KGUubWF0Y2hlcysrLHQtLSxlLmR5bl9sdHJlZVsyKihwW3JdKzI1NisxKV0rKyxlLmR5bl9kdHJlZVsyKmsodCldKyspLGUubGFzdF9saXQ9PT1lLmxpdF9idWZzaXplLTF9LHIuX3RyX2FsaWduPWZ1bmN0aW9uKGUpe3ZhciB0O1MoZSwyLDMpLEUoZSwyNTYsaCksMTY9PT0odD1lKS5iaV92YWxpZD8oeCh0LHQuYmlfYnVmKSx0LmJpX2J1Zj0wLHQuYmlfdmFsaWQ9MCk6ODw9dC5iaV92YWxpZCYmKHQucGVuZGluZ19idWZbdC5wZW5kaW5nKytdPTI1NSZ0LmJpX2J1Zix0LmJpX2J1Zj4+PTgsdC5iaV92YWxpZC09OCl9fSx7XCIuLi91dGlscy9jb21tb25cIjo0MX1dLDUzOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dC5leHBvcnRzPWZ1bmN0aW9uKCl7dGhpcy5pbnB1dD1udWxsLHRoaXMubmV4dF9pbj0wLHRoaXMuYXZhaWxfaW49MCx0aGlzLnRvdGFsX2luPTAsdGhpcy5vdXRwdXQ9bnVsbCx0aGlzLm5leHRfb3V0PTAsdGhpcy5hdmFpbF9vdXQ9MCx0aGlzLnRvdGFsX291dD0wLHRoaXMubXNnPVwiXCIsdGhpcy5zdGF0ZT1udWxsLHRoaXMuZGF0YV90eXBlPTIsdGhpcy5hZGxlcj0wfX0se31dLDU0OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dC5leHBvcnRzPVwiZnVuY3Rpb25cIj09dHlwZW9mIHNldEltbWVkaWF0ZT9zZXRJbW1lZGlhdGU6ZnVuY3Rpb24oKXt2YXIgZT1bXS5zbGljZS5hcHBseShhcmd1bWVudHMpO2Uuc3BsaWNlKDEsMCwwKSxzZXRUaW1lb3V0LmFwcGx5KG51bGwsZSl9fSx7fV19LHt9LFsxMF0pKDEwKX0pfSkuY2FsbCh0aGlzLHZvaWQgMCE9PXI/cjpcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZj9zZWxmOlwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93Ont9KX0se31dfSx7fSxbMV0pKDEpfSl9KS5jYWxsKHRoaXMsdm9pZCAwIT09cj9yOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6e30pfSx7fV19LHt9LFsxXSkoMSl9KX0pLmNhbGwodGhpcyx2b2lkIDAhPT1yP3I6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGY/c2VsZjpcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzp7fSl9LHt9XX0se30sWzFdKSgxKX0pfSkuY2FsbCh0aGlzLHZvaWQgMCE9PXI/cjpcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZj9zZWxmOlwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93Ont9KX0se31dfSx7fSxbMV0pKDEpfSl9KS5jYWxsKHRoaXMsdm9pZCAwIT09cj9yOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6e30pfSx7fV19LHt9LFsxXSkoMSl9KX0pLmNhbGwodGhpcyx2b2lkIDAhPT1yP3I6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGY/c2VsZjpcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzp7fSl9LHt9XX0se30sWzFdKSgxKX0pfSkuY2FsbCh0aGlzLHZvaWQgMCE9PXI/cjpcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZj9zZWxmOlwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93Ont9KX0se31dfSx7fSxbMV0pKDEpfSl9KS5jYWxsKHRoaXMsdm9pZCAwIT09cj9yOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6e30pfSx7fV19LHt9LFsxXSkoMSl9KX0pLmNhbGwodGhpcyx2b2lkIDAhPT1yP3I6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGY/c2VsZjpcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzp7fSl9LHt9XX0se30sWzFdKSgxKX0pfSkuY2FsbCh0aGlzLHZvaWQgMCE9PXI/cjpcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZj9zZWxmOlwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93Ont9KX0se31dfSx7fSxbMV0pKDEpfSl9KS5jYWxsKHRoaXMsdm9pZCAwIT09cj9yOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6e30pfSx7fV19LHt9LFsxXSkoMSl9KX0pLmNhbGwodGhpcyx2b2lkIDAhPT1yP3I6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGY/c2VsZjpcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzp7fSl9LHt9XX0se30sWzFdKSgxKX0pfSkuY2FsbCh0aGlzLHZvaWQgMCE9PXI/cjpcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZj9zZWxmOlwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93Ont9KX0se31dfSx7fSxbMV0pKDEpfSl9KS5jYWxsKHRoaXMsdm9pZCAwIT09cj9yOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6e30pfSx7fV19LHt9LFsxXSkoMSl9KX0pLmNhbGwodGhpcyx2b2lkIDAhPT1yP3I6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGY/c2VsZjpcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzp7fSl9LHt9XX0se30sWzFdKSgxKX0pfSkuY2FsbCh0aGlzLHZvaWQgMCE9PXI/cjpcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZj9zZWxmOlwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93Ont9KX0se31dfSx7fSxbMV0pKDEpfSl9KS5jYWxsKHRoaXMsXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbD9nbG9iYWw6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGY/c2VsZjpcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzp7fSl9LHt9XX0se30sWzFdKSgxKX0pOyIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHJlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYWE9cmVxdWlyZShcInJlYWN0XCIpLGNhPXJlcXVpcmUoXCJzY2hlZHVsZXJcIik7ZnVuY3Rpb24gcChhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn12YXIgZGE9bmV3IFNldCxlYT17fTtmdW5jdGlvbiBmYShhLGIpe2hhKGEsYik7aGEoYStcIkNhcHR1cmVcIixiKX1cbmZ1bmN0aW9uIGhhKGEsYil7ZWFbYV09Yjtmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKWRhLmFkZChiW2FdKX1cbnZhciBpYT0hKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudHx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCksamE9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxrYT0vXls6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRF1bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRcXC0uMC05XFx1MDBCN1xcdTAzMDAtXFx1MDM2RlxcdTIwM0YtXFx1MjA0MF0qJC8sbGE9XG57fSxtYT17fTtmdW5jdGlvbiBvYShhKXtpZihqYS5jYWxsKG1hLGEpKXJldHVybiEwO2lmKGphLmNhbGwobGEsYSkpcmV0dXJuITE7aWYoa2EudGVzdChhKSlyZXR1cm4gbWFbYV09ITA7bGFbYV09ITA7cmV0dXJuITF9ZnVuY3Rpb24gcGEoYSxiLGMsZCl7aWYobnVsbCE9PWMmJjA9PT1jLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihkKXJldHVybiExO2lmKG51bGwhPT1jKXJldHVybiFjLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBxYShhLGIsYyxkKXtpZihudWxsPT09Ynx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBifHxwYShhLGIsYyxkKSlyZXR1cm4hMDtpZihkKXJldHVybiExO2lmKG51bGwhPT1jKXN3aXRjaChjLnR5cGUpe2Nhc2UgMzpyZXR1cm4hYjtjYXNlIDQ6cmV0dXJuITE9PT1iO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKXx8MT5ifXJldHVybiExfWZ1bmN0aW9uIHYoYSxiLGMsZCxlLGYsZyl7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yjt0aGlzLnNhbml0aXplVVJMPWY7dGhpcy5yZW1vdmVFbXB0eVN0cmluZz1nfXZhciB6PXt9O1xuXCJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMCwhMSxhLG51bGwsITEsITEpfSk7W1tcImFjY2VwdENoYXJzZXRcIixcImFjY2VwdC1jaGFyc2V0XCJdLFtcImNsYXNzTmFtZVwiLFwiY2xhc3NcIl0sW1wiaHRtbEZvclwiLFwiZm9yXCJdLFtcImh0dHBFcXVpdlwiLFwiaHR0cC1lcXVpdlwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hWzBdO3pbYl09bmV3IHYoYiwxLCExLGFbMV0sbnVsbCwhMSwhMSl9KTtbXCJjb250ZW50RWRpdGFibGVcIixcImRyYWdnYWJsZVwiLFwic3BlbGxDaGVja1wiLFwidmFsdWVcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbltcImF1dG9SZXZlcnNlXCIsXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsXCJmb2N1c2FibGVcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMiwhMSxhLG51bGwsITEsITEpfSk7XCJhbGxvd0Z1bGxTY3JlZW4gYXN5bmMgYXV0b0ZvY3VzIGF1dG9QbGF5IGNvbnRyb2xzIGRlZmF1bHQgZGVmZXIgZGlzYWJsZWQgZGlzYWJsZVBpY3R1cmVJblBpY3R1cmUgZGlzYWJsZVJlbW90ZVBsYXliYWNrIGZvcm1Ob1ZhbGlkYXRlIGhpZGRlbiBsb29wIG5vTW9kdWxlIG5vVmFsaWRhdGUgb3BlbiBwbGF5c0lubGluZSByZWFkT25seSByZXF1aXJlZCByZXZlcnNlZCBzY29wZWQgc2VhbWxlc3MgaXRlbVNjb3BlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDMsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5bXCJjaGVja2VkXCIsXCJtdWx0aXBsZVwiLFwibXV0ZWRcIixcInNlbGVjdGVkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDMsITAsYSxudWxsLCExLCExKX0pO1tcImNhcHR1cmVcIixcImRvd25sb2FkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDQsITEsYSxudWxsLCExLCExKX0pO1tcImNvbHNcIixcInJvd3NcIixcInNpemVcIixcInNwYW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsNiwhMSxhLG51bGwsITEsITEpfSk7W1wicm93U3BhblwiLFwic3RhcnRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsNSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTt2YXIgcmE9L1tcXC06XShbYS16XSkvZztmdW5jdGlvbiBzYShhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShyYSxcbnNhKTt6W2JdPW5ldyB2KGIsMSwhMSxhLG51bGwsITEsITEpfSk7XCJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6cm9sZSB4bGluazpzaG93IHhsaW5rOnRpdGxlIHhsaW5rOnR5cGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UocmEsc2EpO3pbYl09bmV3IHYoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITEsITEpfSk7W1wieG1sOmJhc2VcIixcInhtbDpsYW5nXCIsXCJ4bWw6c3BhY2VcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UocmEsc2EpO3pbYl09bmV3IHYoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIiwhMSwhMSl9KTtbXCJ0YWJJbmRleFwiLFwiY3Jvc3NPcmlnaW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbnoueGxpbmtIcmVmPW5ldyB2KFwieGxpbmtIcmVmXCIsMSwhMSxcInhsaW5rOmhyZWZcIixcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMCwhMSk7W1wic3JjXCIsXCJocmVmXCIsXCJhY3Rpb25cIixcImZvcm1BY3Rpb25cIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMCwhMCl9KTtcbmZ1bmN0aW9uIHRhKGEsYixjLGQpe3ZhciBlPXouaGFzT3duUHJvcGVydHkoYik/eltiXTpudWxsO2lmKG51bGwhPT1lPzAhPT1lLnR5cGU6ZHx8ISgyPGIubGVuZ3RoKXx8XCJvXCIhPT1iWzBdJiZcIk9cIiE9PWJbMF18fFwiblwiIT09YlsxXSYmXCJOXCIhPT1iWzFdKXFhKGIsYyxlLGQpJiYoYz1udWxsKSxkfHxudWxsPT09ZT9vYShiKSYmKG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSk6ZS5tdXN0VXNlUHJvcGVydHk/YVtlLnByb3BlcnR5TmFtZV09bnVsbD09PWM/Mz09PWUudHlwZT8hMTpcIlwiOmM6KGI9ZS5hdHRyaWJ1dGVOYW1lLGQ9ZS5hdHRyaWJ1dGVOYW1lc3BhY2UsbnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6KGU9ZS50eXBlLGM9Mz09PWV8fDQ9PT1lJiYhMD09PWM/XCJcIjpcIlwiK2MsZD9hLnNldEF0dHJpYnV0ZU5TKGQsYixjKTphLnNldEF0dHJpYnV0ZShiLGMpKSl9XG52YXIgdWE9YWEuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQsdmE9U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIiksd2E9U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKSx5YT1TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIiksemE9U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpLEFhPVN5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKSxCYT1TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIiksQ2E9U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIiksRGE9U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpLEVhPVN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKSxGYT1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKSxHYT1TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKSxIYT1TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTtTeW1ib2wuZm9yKFwicmVhY3Quc2NvcGVcIik7U3ltYm9sLmZvcihcInJlYWN0LmRlYnVnX3RyYWNlX21vZGVcIik7XG52YXIgSWE9U3ltYm9sLmZvcihcInJlYWN0Lm9mZnNjcmVlblwiKTtTeW1ib2wuZm9yKFwicmVhY3QubGVnYWN5X2hpZGRlblwiKTtTeW1ib2wuZm9yKFwicmVhY3QuY2FjaGVcIik7U3ltYm9sLmZvcihcInJlYWN0LnRyYWNpbmdfbWFya2VyXCIpO3ZhciBKYT1TeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gS2EoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPUphJiZhW0phXXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfXZhciBBPU9iamVjdC5hc3NpZ24sTGE7ZnVuY3Rpb24gTWEoYSl7aWYodm9pZCAwPT09TGEpdHJ5e3Rocm93IEVycm9yKCk7fWNhdGNoKGMpe3ZhciBiPWMuc3RhY2sudHJpbSgpLm1hdGNoKC9cXG4oICooYXQgKT8pLyk7TGE9YiYmYlsxXXx8XCJcIn1yZXR1cm5cIlxcblwiK0xhK2F9dmFyIE5hPSExO1xuZnVuY3Rpb24gT2EoYSxiKXtpZighYXx8TmEpcmV0dXJuXCJcIjtOYT0hMDt2YXIgYz1FcnJvci5wcmVwYXJlU3RhY2tUcmFjZTtFcnJvci5wcmVwYXJlU3RhY2tUcmFjZT12b2lkIDA7dHJ5e2lmKGIpaWYoYj1mdW5jdGlvbigpe3Rocm93IEVycm9yKCk7fSxPYmplY3QuZGVmaW5lUHJvcGVydHkoYi5wcm90b3R5cGUsXCJwcm9wc1wiLHtzZXQ6ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcigpO319KSxcIm9iamVjdFwiPT09dHlwZW9mIFJlZmxlY3QmJlJlZmxlY3QuY29uc3RydWN0KXt0cnl7UmVmbGVjdC5jb25zdHJ1Y3QoYixbXSl9Y2F0Y2gobCl7dmFyIGQ9bH1SZWZsZWN0LmNvbnN0cnVjdChhLFtdLGIpfWVsc2V7dHJ5e2IuY2FsbCgpfWNhdGNoKGwpe2Q9bH1hLmNhbGwoYi5wcm90b3R5cGUpfWVsc2V7dHJ5e3Rocm93IEVycm9yKCk7fWNhdGNoKGwpe2Q9bH1hKCl9fWNhdGNoKGwpe2lmKGwmJmQmJlwic3RyaW5nXCI9PT10eXBlb2YgbC5zdGFjayl7Zm9yKHZhciBlPWwuc3RhY2suc3BsaXQoXCJcXG5cIiksXG5mPWQuc3RhY2suc3BsaXQoXCJcXG5cIiksZz1lLmxlbmd0aC0xLGg9Zi5sZW5ndGgtMTsxPD1nJiYwPD1oJiZlW2ddIT09ZltoXTspaC0tO2Zvcig7MTw9ZyYmMDw9aDtnLS0saC0tKWlmKGVbZ10hPT1mW2hdKXtpZigxIT09Z3x8MSE9PWgpe2RvIGlmKGctLSxoLS0sMD5ofHxlW2ddIT09ZltoXSl7dmFyIGs9XCJcXG5cIitlW2ddLnJlcGxhY2UoXCIgYXQgbmV3IFwiLFwiIGF0IFwiKTthLmRpc3BsYXlOYW1lJiZrLmluY2x1ZGVzKFwiPGFub255bW91cz5cIikmJihrPWsucmVwbGFjZShcIjxhbm9ueW1vdXM+XCIsYS5kaXNwbGF5TmFtZSkpO3JldHVybiBrfXdoaWxlKDE8PWcmJjA8PWgpfWJyZWFrfX19ZmluYWxseXtOYT0hMSxFcnJvci5wcmVwYXJlU3RhY2tUcmFjZT1jfXJldHVybihhPWE/YS5kaXNwbGF5TmFtZXx8YS5uYW1lOlwiXCIpP01hKGEpOlwiXCJ9XG5mdW5jdGlvbiBQYShhKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTpyZXR1cm4gTWEoYS50eXBlKTtjYXNlIDE2OnJldHVybiBNYShcIkxhenlcIik7Y2FzZSAxMzpyZXR1cm4gTWEoXCJTdXNwZW5zZVwiKTtjYXNlIDE5OnJldHVybiBNYShcIlN1c3BlbnNlTGlzdFwiKTtjYXNlIDA6Y2FzZSAyOmNhc2UgMTU6cmV0dXJuIGE9T2EoYS50eXBlLCExKSxhO2Nhc2UgMTE6cmV0dXJuIGE9T2EoYS50eXBlLnJlbmRlciwhMSksYTtjYXNlIDE6cmV0dXJuIGE9T2EoYS50eXBlLCEwKSxhO2RlZmF1bHQ6cmV0dXJuXCJcIn19XG5mdW5jdGlvbiBRYShhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fG51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKXJldHVybiBhO3N3aXRjaChhKXtjYXNlIHlhOnJldHVyblwiRnJhZ21lbnRcIjtjYXNlIHdhOnJldHVyblwiUG9ydGFsXCI7Y2FzZSBBYTpyZXR1cm5cIlByb2ZpbGVyXCI7Y2FzZSB6YTpyZXR1cm5cIlN0cmljdE1vZGVcIjtjYXNlIEVhOnJldHVyblwiU3VzcGVuc2VcIjtjYXNlIEZhOnJldHVyblwiU3VzcGVuc2VMaXN0XCJ9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIENhOnJldHVybihhLmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuQ29uc3VtZXJcIjtjYXNlIEJhOnJldHVybihhLl9jb250ZXh0LmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuUHJvdmlkZXJcIjtjYXNlIERhOnZhciBiPWEucmVuZGVyO2E9YS5kaXNwbGF5TmFtZTthfHwoYT1iLmRpc3BsYXlOYW1lfHxcbmIubmFtZXx8XCJcIixhPVwiXCIhPT1hP1wiRm9yd2FyZFJlZihcIithK1wiKVwiOlwiRm9yd2FyZFJlZlwiKTtyZXR1cm4gYTtjYXNlIEdhOnJldHVybiBiPWEuZGlzcGxheU5hbWV8fG51bGwsbnVsbCE9PWI/YjpRYShhLnR5cGUpfHxcIk1lbW9cIjtjYXNlIEhhOmI9YS5fcGF5bG9hZDthPWEuX2luaXQ7dHJ5e3JldHVybiBRYShhKGIpKX1jYXRjaChjKXt9fXJldHVybiBudWxsfVxuZnVuY3Rpb24gUmEoYSl7dmFyIGI9YS50eXBlO3N3aXRjaChhLnRhZyl7Y2FzZSAyNDpyZXR1cm5cIkNhY2hlXCI7Y2FzZSA5OnJldHVybihiLmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuQ29uc3VtZXJcIjtjYXNlIDEwOnJldHVybihiLl9jb250ZXh0LmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuUHJvdmlkZXJcIjtjYXNlIDE4OnJldHVyblwiRGVoeWRyYXRlZEZyYWdtZW50XCI7Y2FzZSAxMTpyZXR1cm4gYT1iLnJlbmRlcixhPWEuZGlzcGxheU5hbWV8fGEubmFtZXx8XCJcIixiLmRpc3BsYXlOYW1lfHwoXCJcIiE9PWE/XCJGb3J3YXJkUmVmKFwiK2ErXCIpXCI6XCJGb3J3YXJkUmVmXCIpO2Nhc2UgNzpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSA1OnJldHVybiBiO2Nhc2UgNDpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgMzpyZXR1cm5cIlJvb3RcIjtjYXNlIDY6cmV0dXJuXCJUZXh0XCI7Y2FzZSAxNjpyZXR1cm4gUWEoYik7Y2FzZSA4OnJldHVybiBiPT09emE/XCJTdHJpY3RNb2RlXCI6XCJNb2RlXCI7Y2FzZSAyMjpyZXR1cm5cIk9mZnNjcmVlblwiO1xuY2FzZSAxMjpyZXR1cm5cIlByb2ZpbGVyXCI7Y2FzZSAyMTpyZXR1cm5cIlNjb3BlXCI7Y2FzZSAxMzpyZXR1cm5cIlN1c3BlbnNlXCI7Y2FzZSAxOTpyZXR1cm5cIlN1c3BlbnNlTGlzdFwiO2Nhc2UgMjU6cmV0dXJuXCJUcmFjaW5nTWFya2VyXCI7Y2FzZSAxOmNhc2UgMDpjYXNlIDE3OmNhc2UgMjpjYXNlIDE0OmNhc2UgMTU6aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpcmV0dXJuIGIuZGlzcGxheU5hbWV8fGIubmFtZXx8bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGIpcmV0dXJuIGJ9cmV0dXJuIG51bGx9ZnVuY3Rpb24gU2EoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwic3RyaW5nXCI6Y2FzZSBcInVuZGVmaW5lZFwiOnJldHVybiBhO2Nhc2UgXCJvYmplY3RcIjpyZXR1cm4gYTtkZWZhdWx0OnJldHVyblwiXCJ9fVxuZnVuY3Rpb24gVGEoYSl7dmFyIGI9YS50eXBlO3JldHVybihhPWEubm9kZU5hbWUpJiZcImlucHV0XCI9PT1hLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1ifHxcInJhZGlvXCI9PT1iKX1cbmZ1bmN0aW9uIFVhKGEpe3ZhciBiPVRhKGEpP1wiY2hlY2tlZFwiOlwidmFsdWVcIixjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsYiksZD1cIlwiK2FbYl07aWYoIWEuaGFzT3duUHJvcGVydHkoYikmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5zZXQpe3ZhciBlPWMuZ2V0LGY9Yy5zZXQ7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlLmNhbGwodGhpcyl9LHNldDpmdW5jdGlvbihhKXtkPVwiXCIrYTtmLmNhbGwodGhpcyxhKX19KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtlbnVtZXJhYmxlOmMuZW51bWVyYWJsZX0pO3JldHVybntnZXRWYWx1ZTpmdW5jdGlvbigpe3JldHVybiBkfSxzZXRWYWx1ZTpmdW5jdGlvbihhKXtkPVwiXCIrYX0sc3RvcFRyYWNraW5nOmZ1bmN0aW9uKCl7YS5fdmFsdWVUcmFja2VyPVxubnVsbDtkZWxldGUgYVtiXX19fX1mdW5jdGlvbiBWYShhKXthLl92YWx1ZVRyYWNrZXJ8fChhLl92YWx1ZVRyYWNrZXI9VWEoYSkpfWZ1bmN0aW9uIFdhKGEpe2lmKCFhKXJldHVybiExO3ZhciBiPWEuX3ZhbHVlVHJhY2tlcjtpZighYilyZXR1cm4hMDt2YXIgYz1iLmdldFZhbHVlKCk7dmFyIGQ9XCJcIjthJiYoZD1UYShhKT9hLmNoZWNrZWQ/XCJ0cnVlXCI6XCJmYWxzZVwiOmEudmFsdWUpO2E9ZDtyZXR1cm4gYSE9PWM/KGIuc2V0VmFsdWUoYSksITApOiExfWZ1bmN0aW9uIFhhKGEpe2E9YXx8KFwidW5kZWZpbmVkXCIhPT10eXBlb2YgZG9jdW1lbnQ/ZG9jdW1lbnQ6dm9pZCAwKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGEpcmV0dXJuIG51bGw7dHJ5e3JldHVybiBhLmFjdGl2ZUVsZW1lbnR8fGEuYm9keX1jYXRjaChiKXtyZXR1cm4gYS5ib2R5fX1cbmZ1bmN0aW9uIFlhKGEsYil7dmFyIGM9Yi5jaGVja2VkO3JldHVybiBBKHt9LGIse2RlZmF1bHRDaGVja2VkOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLHZhbHVlOnZvaWQgMCxjaGVja2VkOm51bGwhPWM/YzphLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWR9KX1mdW5jdGlvbiBaYShhLGIpe3ZhciBjPW51bGw9PWIuZGVmYXVsdFZhbHVlP1wiXCI6Yi5kZWZhdWx0VmFsdWUsZD1udWxsIT1iLmNoZWNrZWQ/Yi5jaGVja2VkOmIuZGVmYXVsdENoZWNrZWQ7Yz1TYShudWxsIT1iLnZhbHVlP2IudmFsdWU6Yyk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsQ2hlY2tlZDpkLGluaXRpYWxWYWx1ZTpjLGNvbnRyb2xsZWQ6XCJjaGVja2JveFwiPT09Yi50eXBlfHxcInJhZGlvXCI9PT1iLnR5cGU/bnVsbCE9Yi5jaGVja2VkOm51bGwhPWIudmFsdWV9fWZ1bmN0aW9uIGFiKGEsYil7Yj1iLmNoZWNrZWQ7bnVsbCE9YiYmdGEoYSxcImNoZWNrZWRcIixiLCExKX1cbmZ1bmN0aW9uIGJiKGEsYil7YWIoYSxiKTt2YXIgYz1TYShiLnZhbHVlKSxkPWIudHlwZTtpZihudWxsIT1jKWlmKFwibnVtYmVyXCI9PT1kKXtpZigwPT09YyYmXCJcIj09PWEudmFsdWV8fGEudmFsdWUhPWMpYS52YWx1ZT1cIlwiK2N9ZWxzZSBhLnZhbHVlIT09XCJcIitjJiYoYS52YWx1ZT1cIlwiK2MpO2Vsc2UgaWYoXCJzdWJtaXRcIj09PWR8fFwicmVzZXRcIj09PWQpe2EucmVtb3ZlQXR0cmlidXRlKFwidmFsdWVcIik7cmV0dXJufWIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKT9jYihhLGIudHlwZSxjKTpiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpJiZjYihhLGIudHlwZSxTYShiLmRlZmF1bHRWYWx1ZSkpO251bGw9PWIuY2hlY2tlZCYmbnVsbCE9Yi5kZWZhdWx0Q2hlY2tlZCYmKGEuZGVmYXVsdENoZWNrZWQ9ISFiLmRlZmF1bHRDaGVja2VkKX1cbmZ1bmN0aW9uIGRiKGEsYixjKXtpZihiLmhhc093blByb3BlcnR5KFwidmFsdWVcIil8fGIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikpe3ZhciBkPWIudHlwZTtpZighKFwic3VibWl0XCIhPT1kJiZcInJlc2V0XCIhPT1kfHx2b2lkIDAhPT1iLnZhbHVlJiZudWxsIT09Yi52YWx1ZSkpcmV0dXJuO2I9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlO2N8fGI9PT1hLnZhbHVlfHwoYS52YWx1ZT1iKTthLmRlZmF1bHRWYWx1ZT1ifWM9YS5uYW1lO1wiXCIhPT1jJiYoYS5uYW1lPVwiXCIpO2EuZGVmYXVsdENoZWNrZWQ9ISFhLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWQ7XCJcIiE9PWMmJihhLm5hbWU9Yyl9XG5mdW5jdGlvbiBjYihhLGIsYyl7aWYoXCJudW1iZXJcIiE9PWJ8fFhhKGEub3duZXJEb2N1bWVudCkhPT1hKW51bGw9PWM/YS5kZWZhdWx0VmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlOmEuZGVmYXVsdFZhbHVlIT09XCJcIitjJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitjKX12YXIgZWI9QXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIGZiKGEsYixjLGQpe2E9YS5vcHRpb25zO2lmKGIpe2I9e307Zm9yKHZhciBlPTA7ZTxjLmxlbmd0aDtlKyspYltcIiRcIitjW2VdXT0hMDtmb3IoYz0wO2M8YS5sZW5ndGg7YysrKWU9Yi5oYXNPd25Qcm9wZXJ0eShcIiRcIithW2NdLnZhbHVlKSxhW2NdLnNlbGVjdGVkIT09ZSYmKGFbY10uc2VsZWN0ZWQ9ZSksZSYmZCYmKGFbY10uZGVmYXVsdFNlbGVjdGVkPSEwKX1lbHNle2M9XCJcIitTYShjKTtiPW51bGw7Zm9yKGU9MDtlPGEubGVuZ3RoO2UrKyl7aWYoYVtlXS52YWx1ZT09PWMpe2FbZV0uc2VsZWN0ZWQ9ITA7ZCYmKGFbZV0uZGVmYXVsdFNlbGVjdGVkPSEwKTtyZXR1cm59bnVsbCE9PWJ8fGFbZV0uZGlzYWJsZWR8fChiPWFbZV0pfW51bGwhPT1iJiYoYi5zZWxlY3RlZD0hMCl9fVxuZnVuY3Rpb24gZ2IoYSxiKXtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXRocm93IEVycm9yKHAoOTEpKTtyZXR1cm4gQSh7fSxiLHt2YWx1ZTp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCxjaGlsZHJlbjpcIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWV9KX1mdW5jdGlvbiBoYihhLGIpe3ZhciBjPWIudmFsdWU7aWYobnVsbD09Yyl7Yz1iLmNoaWxkcmVuO2I9Yi5kZWZhdWx0VmFsdWU7aWYobnVsbCE9Yyl7aWYobnVsbCE9Yil0aHJvdyBFcnJvcihwKDkyKSk7aWYoZWIoYykpe2lmKDE8Yy5sZW5ndGgpdGhyb3cgRXJyb3IocCg5MykpO2M9Y1swXX1iPWN9bnVsbD09YiYmKGI9XCJcIik7Yz1ifWEuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOlNhKGMpfX1cbmZ1bmN0aW9uIGliKGEsYil7dmFyIGM9U2EoYi52YWx1ZSksZD1TYShiLmRlZmF1bHRWYWx1ZSk7bnVsbCE9YyYmKGM9XCJcIitjLGMhPT1hLnZhbHVlJiYoYS52YWx1ZT1jKSxudWxsPT1iLmRlZmF1bHRWYWx1ZSYmYS5kZWZhdWx0VmFsdWUhPT1jJiYoYS5kZWZhdWx0VmFsdWU9YykpO251bGwhPWQmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2QpfWZ1bmN0aW9uIGpiKGEpe3ZhciBiPWEudGV4dENvbnRlbnQ7Yj09PWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUmJlwiXCIhPT1iJiZudWxsIT09YiYmKGEudmFsdWU9Yil9ZnVuY3Rpb24ga2IoYSl7c3dpdGNoKGEpe2Nhc2UgXCJzdmdcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7Y2FzZSBcIm1hdGhcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIjtkZWZhdWx0OnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwifX1cbmZ1bmN0aW9uIGxiKGEsYil7cmV0dXJuIG51bGw9PWF8fFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9rYihiKTpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI9PT1hJiZcImZvcmVpZ25PYmplY3RcIj09PWI/XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI6YX1cbnZhciBtYixuYj1mdW5jdGlvbihhKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIE1TQXBwJiZNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbj9mdW5jdGlvbihiLGMsZCxlKXtNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbigpe3JldHVybiBhKGIsYyxkLGUpfSl9OmF9KGZ1bmN0aW9uKGEsYil7aWYoXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIT09YS5uYW1lc3BhY2VVUkl8fFwiaW5uZXJIVE1MXCJpbiBhKWEuaW5uZXJIVE1MPWI7ZWxzZXttYj1tYnx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTttYi5pbm5lckhUTUw9XCI8c3ZnPlwiK2IudmFsdWVPZigpLnRvU3RyaW5nKCkrXCI8L3N2Zz5cIjtmb3IoYj1tYi5maXJzdENoaWxkO2EuZmlyc3RDaGlsZDspYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Zvcig7Yi5maXJzdENoaWxkOylhLmFwcGVuZENoaWxkKGIuZmlyc3RDaGlsZCl9fSk7XG5mdW5jdGlvbiBvYihhLGIpe2lmKGIpe3ZhciBjPWEuZmlyc3RDaGlsZDtpZihjJiZjPT09YS5sYXN0Q2hpbGQmJjM9PT1jLm5vZGVUeXBlKXtjLm5vZGVWYWx1ZT1iO3JldHVybn19YS50ZXh0Q29udGVudD1ifVxudmFyIHBiPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxhc3BlY3RSYXRpbzohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRBcmVhOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsXG56b29tOiEwLGZpbGxPcGFjaXR5OiEwLGZsb29kT3BhY2l0eTohMCxzdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LHFiPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhwYikuZm9yRWFjaChmdW5jdGlvbihhKXtxYi5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO3BiW2JdPXBiW2FdfSl9KTtmdW5jdGlvbiByYihhLGIsYyl7cmV0dXJuIG51bGw9PWJ8fFwiYm9vbGVhblwiPT09dHlwZW9mIGJ8fFwiXCI9PT1iP1wiXCI6Y3x8XCJudW1iZXJcIiE9PXR5cGVvZiBifHwwPT09Ynx8cGIuaGFzT3duUHJvcGVydHkoYSkmJnBiW2FdPyhcIlwiK2IpLnRyaW0oKTpiK1wicHhcIn1cbmZ1bmN0aW9uIHNiKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKSxlPXJiKGMsYltjXSxkKTtcImZsb2F0XCI9PT1jJiYoYz1cImNzc0Zsb2F0XCIpO2Q/YS5zZXRQcm9wZXJ0eShjLGUpOmFbY109ZX19dmFyIHRiPUEoe21lbnVpdGVtOiEwfSx7YXJlYTohMCxiYXNlOiEwLGJyOiEwLGNvbDohMCxlbWJlZDohMCxocjohMCxpbWc6ITAsaW5wdXQ6ITAsa2V5Z2VuOiEwLGxpbms6ITAsbWV0YTohMCxwYXJhbTohMCxzb3VyY2U6ITAsdHJhY2s6ITAsd2JyOiEwfSk7XG5mdW5jdGlvbiB1YihhLGIpe2lmKGIpe2lmKHRiW2FdJiYobnVsbCE9Yi5jaGlsZHJlbnx8bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IocCgxMzcsYSkpO2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpe2lmKG51bGwhPWIuY2hpbGRyZW4pdGhyb3cgRXJyb3IocCg2MCkpO2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTHx8IShcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IocCg2MSkpO31pZihudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGUpdGhyb3cgRXJyb3IocCg2MikpO319XG5mdW5jdGlvbiB2YihhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19dmFyIHdiPW51bGw7ZnVuY3Rpb24geGIoYSl7YT1hLnRhcmdldHx8YS5zcmNFbGVtZW50fHx3aW5kb3c7YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCYmKGE9YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7cmV0dXJuIDM9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphfXZhciB5Yj1udWxsLHpiPW51bGwsQWI9bnVsbDtcbmZ1bmN0aW9uIEJiKGEpe2lmKGE9Q2IoYSkpe2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB5Yil0aHJvdyBFcnJvcihwKDI4MCkpO3ZhciBiPWEuc3RhdGVOb2RlO2ImJihiPURiKGIpLHliKGEuc3RhdGVOb2RlLGEudHlwZSxiKSl9fWZ1bmN0aW9uIEViKGEpe3piP0FiP0FiLnB1c2goYSk6QWI9W2FdOnpiPWF9ZnVuY3Rpb24gRmIoKXtpZih6Yil7dmFyIGE9emIsYj1BYjtBYj16Yj1udWxsO0JiKGEpO2lmKGIpZm9yKGE9MDthPGIubGVuZ3RoO2ErKylCYihiW2FdKX19ZnVuY3Rpb24gR2IoYSxiKXtyZXR1cm4gYShiKX1mdW5jdGlvbiBIYigpe312YXIgSWI9ITE7ZnVuY3Rpb24gSmIoYSxiLGMpe2lmKEliKXJldHVybiBhKGIsYyk7SWI9ITA7dHJ5e3JldHVybiBHYihhLGIsYyl9ZmluYWxseXtpZihJYj0hMSxudWxsIT09emJ8fG51bGwhPT1BYilIYigpLEZiKCl9fVxuZnVuY3Rpb24gS2IoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtpZihudWxsPT09YylyZXR1cm4gbnVsbDt2YXIgZD1EYihjKTtpZihudWxsPT09ZClyZXR1cm4gbnVsbDtjPWRbYl07YTpzd2l0Y2goYil7Y2FzZSBcIm9uQ2xpY2tcIjpjYXNlIFwib25DbGlja0NhcHR1cmVcIjpjYXNlIFwib25Eb3VibGVDbGlja1wiOmNhc2UgXCJvbkRvdWJsZUNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRG93blwiOmNhc2UgXCJvbk1vdXNlRG93bkNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZU1vdmVcIjpjYXNlIFwib25Nb3VzZU1vdmVDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VVcFwiOmNhc2UgXCJvbk1vdXNlVXBDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VFbnRlclwiOihkPSFkLmRpc2FibGVkKXx8KGE9YS50eXBlLGQ9IShcImJ1dHRvblwiPT09YXx8XCJpbnB1dFwiPT09YXx8XCJzZWxlY3RcIj09PWF8fFwidGV4dGFyZWFcIj09PWEpKTthPSFkO2JyZWFrIGE7ZGVmYXVsdDphPSExfWlmKGEpcmV0dXJuIG51bGw7aWYoYyYmXCJmdW5jdGlvblwiIT09XG50eXBlb2YgYyl0aHJvdyBFcnJvcihwKDIzMSxiLHR5cGVvZiBjKSk7cmV0dXJuIGN9dmFyIExiPSExO2lmKGlhKXRyeXt2YXIgTWI9e307T2JqZWN0LmRlZmluZVByb3BlcnR5KE1iLFwicGFzc2l2ZVwiLHtnZXQ6ZnVuY3Rpb24oKXtMYj0hMH19KTt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInRlc3RcIixNYixNYik7d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsTWIsTWIpfWNhdGNoKGEpe0xiPSExfWZ1bmN0aW9uIE5iKGEsYixjLGQsZSxmLGcsaCxrKXt2YXIgbD1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMyk7dHJ5e2IuYXBwbHkoYyxsKX1jYXRjaChtKXt0aGlzLm9uRXJyb3IobSl9fXZhciBPYj0hMSxQYj1udWxsLFFiPSExLFJiPW51bGwsU2I9e29uRXJyb3I6ZnVuY3Rpb24oYSl7T2I9ITA7UGI9YX19O2Z1bmN0aW9uIFRiKGEsYixjLGQsZSxmLGcsaCxrKXtPYj0hMTtQYj1udWxsO05iLmFwcGx5KFNiLGFyZ3VtZW50cyl9XG5mdW5jdGlvbiBVYihhLGIsYyxkLGUsZixnLGgsayl7VGIuYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKE9iKXtpZihPYil7dmFyIGw9UGI7T2I9ITE7UGI9bnVsbH1lbHNlIHRocm93IEVycm9yKHAoMTk4KSk7UWJ8fChRYj0hMCxSYj1sKX19ZnVuY3Rpb24gVmIoYSl7dmFyIGI9YSxjPWE7aWYoYS5hbHRlcm5hdGUpZm9yKDtiLnJldHVybjspYj1iLnJldHVybjtlbHNle2E9YjtkbyBiPWEsMCE9PShiLmZsYWdzJjQwOTgpJiYoYz1iLnJldHVybiksYT1iLnJldHVybjt3aGlsZShhKX1yZXR1cm4gMz09PWIudGFnP2M6bnVsbH1mdW5jdGlvbiBXYihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWImJihhPWEuYWx0ZXJuYXRlLG51bGwhPT1hJiYoYj1hLm1lbW9pemVkU3RhdGUpKTtpZihudWxsIT09YilyZXR1cm4gYi5kZWh5ZHJhdGVkfXJldHVybiBudWxsfWZ1bmN0aW9uIFhiKGEpe2lmKFZiKGEpIT09YSl0aHJvdyBFcnJvcihwKDE4OCkpO31cbmZ1bmN0aW9uIFliKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2lmKCFiKXtiPVZiKGEpO2lmKG51bGw9PT1iKXRocm93IEVycm9yKHAoMTg4KSk7cmV0dXJuIGIhPT1hP251bGw6YX1mb3IodmFyIGM9YSxkPWI7Oyl7dmFyIGU9Yy5yZXR1cm47aWYobnVsbD09PWUpYnJlYWs7dmFyIGY9ZS5hbHRlcm5hdGU7aWYobnVsbD09PWYpe2Q9ZS5yZXR1cm47aWYobnVsbCE9PWQpe2M9ZDtjb250aW51ZX1icmVha31pZihlLmNoaWxkPT09Zi5jaGlsZCl7Zm9yKGY9ZS5jaGlsZDtmOyl7aWYoZj09PWMpcmV0dXJuIFhiKGUpLGE7aWYoZj09PWQpcmV0dXJuIFhiKGUpLGI7Zj1mLnNpYmxpbmd9dGhyb3cgRXJyb3IocCgxODgpKTt9aWYoYy5yZXR1cm4hPT1kLnJldHVybiljPWUsZD1mO2Vsc2V7Zm9yKHZhciBnPSExLGg9ZS5jaGlsZDtoOyl7aWYoaD09PWMpe2c9ITA7Yz1lO2Q9ZjticmVha31pZihoPT09ZCl7Zz0hMDtkPWU7Yz1mO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXtmb3IoaD1mLmNoaWxkO2g7KXtpZihoPT09XG5jKXtnPSEwO2M9ZjtkPWU7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1mO2M9ZTticmVha31oPWguc2libGluZ31pZighZyl0aHJvdyBFcnJvcihwKDE4OSkpO319aWYoYy5hbHRlcm5hdGUhPT1kKXRocm93IEVycm9yKHAoMTkwKSk7fWlmKDMhPT1jLnRhZyl0aHJvdyBFcnJvcihwKDE4OCkpO3JldHVybiBjLnN0YXRlTm9kZS5jdXJyZW50PT09Yz9hOmJ9ZnVuY3Rpb24gWmIoYSl7YT1ZYihhKTtyZXR1cm4gbnVsbCE9PWE/JGIoYSk6bnVsbH1mdW5jdGlvbiAkYihhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYTtmb3IoYT1hLmNoaWxkO251bGwhPT1hOyl7dmFyIGI9JGIoYSk7aWYobnVsbCE9PWIpcmV0dXJuIGI7YT1hLnNpYmxpbmd9cmV0dXJuIG51bGx9XG52YXIgYWM9Y2EudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayxiYz1jYS51bnN0YWJsZV9jYW5jZWxDYWxsYmFjayxjYz1jYS51bnN0YWJsZV9zaG91bGRZaWVsZCxkYz1jYS51bnN0YWJsZV9yZXF1ZXN0UGFpbnQsQj1jYS51bnN0YWJsZV9ub3csZWM9Y2EudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwsZmM9Y2EudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHksZ2M9Y2EudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksaGM9Y2EudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksaWM9Y2EudW5zdGFibGVfTG93UHJpb3JpdHksamM9Y2EudW5zdGFibGVfSWRsZVByaW9yaXR5LGtjPW51bGwsbGM9bnVsbDtmdW5jdGlvbiBtYyhhKXtpZihsYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGxjLm9uQ29tbWl0RmliZXJSb290KXRyeXtsYy5vbkNvbW1pdEZpYmVyUm9vdChrYyxhLHZvaWQgMCwxMjg9PT0oYS5jdXJyZW50LmZsYWdzJjEyOCkpfWNhdGNoKGIpe319XG52YXIgb2M9TWF0aC5jbHozMj9NYXRoLmNsejMyOm5jLHBjPU1hdGgubG9nLHFjPU1hdGguTE4yO2Z1bmN0aW9uIG5jKGEpe2E+Pj49MDtyZXR1cm4gMD09PWE/MzI6MzEtKHBjKGEpL3FjfDApfDB9dmFyIHJjPTY0LHNjPTQxOTQzMDQ7XG5mdW5jdGlvbiB0YyhhKXtzd2l0Y2goYSYtYSl7Y2FzZSAxOnJldHVybiAxO2Nhc2UgMjpyZXR1cm4gMjtjYXNlIDQ6cmV0dXJuIDQ7Y2FzZSA4OnJldHVybiA4O2Nhc2UgMTY6cmV0dXJuIDE2O2Nhc2UgMzI6cmV0dXJuIDMyO2Nhc2UgNjQ6Y2FzZSAxMjg6Y2FzZSAyNTY6Y2FzZSA1MTI6Y2FzZSAxMDI0OmNhc2UgMjA0ODpjYXNlIDQwOTY6Y2FzZSA4MTkyOmNhc2UgMTYzODQ6Y2FzZSAzMjc2ODpjYXNlIDY1NTM2OmNhc2UgMTMxMDcyOmNhc2UgMjYyMTQ0OmNhc2UgNTI0Mjg4OmNhc2UgMTA0ODU3NjpjYXNlIDIwOTcxNTI6cmV0dXJuIGEmNDE5NDI0MDtjYXNlIDQxOTQzMDQ6Y2FzZSA4Mzg4NjA4OmNhc2UgMTY3NzcyMTY6Y2FzZSAzMzU1NDQzMjpjYXNlIDY3MTA4ODY0OnJldHVybiBhJjEzMDAyMzQyNDtjYXNlIDEzNDIxNzcyODpyZXR1cm4gMTM0MjE3NzI4O2Nhc2UgMjY4NDM1NDU2OnJldHVybiAyNjg0MzU0NTY7Y2FzZSA1MzY4NzA5MTI6cmV0dXJuIDUzNjg3MDkxMjtjYXNlIDEwNzM3NDE4MjQ6cmV0dXJuIDEwNzM3NDE4MjQ7XG5kZWZhdWx0OnJldHVybiBhfX1mdW5jdGlvbiB1YyhhLGIpe3ZhciBjPWEucGVuZGluZ0xhbmVzO2lmKDA9PT1jKXJldHVybiAwO3ZhciBkPTAsZT1hLnN1c3BlbmRlZExhbmVzLGY9YS5waW5nZWRMYW5lcyxnPWMmMjY4NDM1NDU1O2lmKDAhPT1nKXt2YXIgaD1nJn5lOzAhPT1oP2Q9dGMoaCk6KGYmPWcsMCE9PWYmJihkPXRjKGYpKSl9ZWxzZSBnPWMmfmUsMCE9PWc/ZD10YyhnKTowIT09ZiYmKGQ9dGMoZikpO2lmKDA9PT1kKXJldHVybiAwO2lmKDAhPT1iJiZiIT09ZCYmMD09PShiJmUpJiYoZT1kJi1kLGY9YiYtYixlPj1mfHwxNj09PWUmJjAhPT0oZiY0MTk0MjQwKSkpcmV0dXJuIGI7MCE9PShkJjQpJiYoZHw9YyYxNik7Yj1hLmVudGFuZ2xlZExhbmVzO2lmKDAhPT1iKWZvcihhPWEuZW50YW5nbGVtZW50cyxiJj1kOzA8YjspYz0zMS1vYyhiKSxlPTE8PGMsZHw9YVtjXSxiJj1+ZTtyZXR1cm4gZH1cbmZ1bmN0aW9uIHZjKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTpjYXNlIDI6Y2FzZSA0OnJldHVybiBiKzI1MDtjYXNlIDg6Y2FzZSAxNjpjYXNlIDMyOmNhc2UgNjQ6Y2FzZSAxMjg6Y2FzZSAyNTY6Y2FzZSA1MTI6Y2FzZSAxMDI0OmNhc2UgMjA0ODpjYXNlIDQwOTY6Y2FzZSA4MTkyOmNhc2UgMTYzODQ6Y2FzZSAzMjc2ODpjYXNlIDY1NTM2OmNhc2UgMTMxMDcyOmNhc2UgMjYyMTQ0OmNhc2UgNTI0Mjg4OmNhc2UgMTA0ODU3NjpjYXNlIDIwOTcxNTI6cmV0dXJuIGIrNUUzO2Nhc2UgNDE5NDMwNDpjYXNlIDgzODg2MDg6Y2FzZSAxNjc3NzIxNjpjYXNlIDMzNTU0NDMyOmNhc2UgNjcxMDg4NjQ6cmV0dXJuLTE7Y2FzZSAxMzQyMTc3Mjg6Y2FzZSAyNjg0MzU0NTY6Y2FzZSA1MzY4NzA5MTI6Y2FzZSAxMDczNzQxODI0OnJldHVybi0xO2RlZmF1bHQ6cmV0dXJuLTF9fVxuZnVuY3Rpb24gd2MoYSxiKXtmb3IodmFyIGM9YS5zdXNwZW5kZWRMYW5lcyxkPWEucGluZ2VkTGFuZXMsZT1hLmV4cGlyYXRpb25UaW1lcyxmPWEucGVuZGluZ0xhbmVzOzA8Zjspe3ZhciBnPTMxLW9jKGYpLGg9MTw8ZyxrPWVbZ107aWYoLTE9PT1rKXtpZigwPT09KGgmYyl8fDAhPT0oaCZkKSllW2ddPXZjKGgsYil9ZWxzZSBrPD1iJiYoYS5leHBpcmVkTGFuZXN8PWgpO2YmPX5ofX1mdW5jdGlvbiB4YyhhKXthPWEucGVuZGluZ0xhbmVzJi0xMDczNzQxODI1O3JldHVybiAwIT09YT9hOmEmMTA3Mzc0MTgyND8xMDczNzQxODI0OjB9ZnVuY3Rpb24geWMoKXt2YXIgYT1yYztyYzw8PTE7MD09PShyYyY0MTk0MjQwKSYmKHJjPTY0KTtyZXR1cm4gYX1mdW5jdGlvbiB6YyhhKXtmb3IodmFyIGI9W10sYz0wOzMxPmM7YysrKWIucHVzaChhKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIEFjKGEsYixjKXthLnBlbmRpbmdMYW5lc3w9Yjs1MzY4NzA5MTIhPT1iJiYoYS5zdXNwZW5kZWRMYW5lcz0wLGEucGluZ2VkTGFuZXM9MCk7YT1hLmV2ZW50VGltZXM7Yj0zMS1vYyhiKTthW2JdPWN9ZnVuY3Rpb24gQmMoYSxiKXt2YXIgYz1hLnBlbmRpbmdMYW5lcyZ+YjthLnBlbmRpbmdMYW5lcz1iO2Euc3VzcGVuZGVkTGFuZXM9MDthLnBpbmdlZExhbmVzPTA7YS5leHBpcmVkTGFuZXMmPWI7YS5tdXRhYmxlUmVhZExhbmVzJj1iO2EuZW50YW5nbGVkTGFuZXMmPWI7Yj1hLmVudGFuZ2xlbWVudHM7dmFyIGQ9YS5ldmVudFRpbWVzO2ZvcihhPWEuZXhwaXJhdGlvblRpbWVzOzA8Yzspe3ZhciBlPTMxLW9jKGMpLGY9MTw8ZTtiW2VdPTA7ZFtlXT0tMTthW2VdPS0xO2MmPX5mfX1cbmZ1bmN0aW9uIENjKGEsYil7dmFyIGM9YS5lbnRhbmdsZWRMYW5lc3w9Yjtmb3IoYT1hLmVudGFuZ2xlbWVudHM7Yzspe3ZhciBkPTMxLW9jKGMpLGU9MTw8ZDtlJmJ8YVtkXSZiJiYoYVtkXXw9Yik7YyY9fmV9fXZhciBDPTA7ZnVuY3Rpb24gRGMoYSl7YSY9LWE7cmV0dXJuIDE8YT80PGE/MCE9PShhJjI2ODQzNTQ1NSk/MTY6NTM2ODcwOTEyOjQ6MX12YXIgRWMsRmMsR2MsSGMsSWMsSmM9ITEsS2M9W10sTGM9bnVsbCxNYz1udWxsLE5jPW51bGwsT2M9bmV3IE1hcCxQYz1uZXcgTWFwLFFjPVtdLFJjPVwibW91c2Vkb3duIG1vdXNldXAgdG91Y2hjYW5jZWwgdG91Y2hlbmQgdG91Y2hzdGFydCBhdXhjbGljayBkYmxjbGljayBwb2ludGVyY2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJ1cCBkcmFnZW5kIGRyYWdzdGFydCBkcm9wIGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBpbnB1dCB0ZXh0SW5wdXQgY29weSBjdXQgcGFzdGUgY2xpY2sgY2hhbmdlIGNvbnRleHRtZW51IHJlc2V0IHN1Ym1pdFwiLnNwbGl0KFwiIFwiKTtcbmZ1bmN0aW9uIFNjKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c2luXCI6Y2FzZSBcImZvY3Vzb3V0XCI6TGM9bnVsbDticmVhaztjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdsZWF2ZVwiOk1jPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJtb3VzZW91dFwiOk5jPW51bGw7YnJlYWs7Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpPYy5kZWxldGUoYi5wb2ludGVySWQpO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpQYy5kZWxldGUoYi5wb2ludGVySWQpfX1cbmZ1bmN0aW9uIFRjKGEsYixjLGQsZSxmKXtpZihudWxsPT09YXx8YS5uYXRpdmVFdmVudCE9PWYpcmV0dXJuIGE9e2Jsb2NrZWRPbjpiLGRvbUV2ZW50TmFtZTpjLGV2ZW50U3lzdGVtRmxhZ3M6ZCxuYXRpdmVFdmVudDpmLHRhcmdldENvbnRhaW5lcnM6W2VdfSxudWxsIT09YiYmKGI9Q2IoYiksbnVsbCE9PWImJkZjKGIpKSxhO2EuZXZlbnRTeXN0ZW1GbGFnc3w9ZDtiPWEudGFyZ2V0Q29udGFpbmVycztudWxsIT09ZSYmLTE9PT1iLmluZGV4T2YoZSkmJmIucHVzaChlKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIFVjKGEsYixjLGQsZSl7c3dpdGNoKGIpe2Nhc2UgXCJmb2N1c2luXCI6cmV0dXJuIExjPVRjKExjLGEsYixjLGQsZSksITA7Y2FzZSBcImRyYWdlbnRlclwiOnJldHVybiBNYz1UYyhNYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJtb3VzZW92ZXJcIjpyZXR1cm4gTmM9VGMoTmMsYSxiLGMsZCxlKSwhMDtjYXNlIFwicG9pbnRlcm92ZXJcIjp2YXIgZj1lLnBvaW50ZXJJZDtPYy5zZXQoZixUYyhPYy5nZXQoZil8fG51bGwsYSxiLGMsZCxlKSk7cmV0dXJuITA7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6cmV0dXJuIGY9ZS5wb2ludGVySWQsUGMuc2V0KGYsVGMoUGMuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpLCEwfXJldHVybiExfVxuZnVuY3Rpb24gVmMoYSl7dmFyIGI9V2MoYS50YXJnZXQpO2lmKG51bGwhPT1iKXt2YXIgYz1WYihiKTtpZihudWxsIT09YylpZihiPWMudGFnLDEzPT09Yil7aWYoYj1XYihjKSxudWxsIT09Yil7YS5ibG9ja2VkT249YjtJYyhhLnByaW9yaXR5LGZ1bmN0aW9uKCl7R2MoYyl9KTtyZXR1cm59fWVsc2UgaWYoMz09PWImJmMuc3RhdGVOb2RlLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQpe2EuYmxvY2tlZE9uPTM9PT1jLnRhZz9jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7cmV0dXJufX1hLmJsb2NrZWRPbj1udWxsfVxuZnVuY3Rpb24gWGMoYSl7aWYobnVsbCE9PWEuYmxvY2tlZE9uKXJldHVybiExO2Zvcih2YXIgYj1hLnRhcmdldENvbnRhaW5lcnM7MDxiLmxlbmd0aDspe3ZhciBjPVljKGEuZG9tRXZlbnROYW1lLGEuZXZlbnRTeXN0ZW1GbGFncyxiWzBdLGEubmF0aXZlRXZlbnQpO2lmKG51bGw9PT1jKXtjPWEubmF0aXZlRXZlbnQ7dmFyIGQ9bmV3IGMuY29uc3RydWN0b3IoYy50eXBlLGMpO3diPWQ7Yy50YXJnZXQuZGlzcGF0Y2hFdmVudChkKTt3Yj1udWxsfWVsc2UgcmV0dXJuIGI9Q2IoYyksbnVsbCE9PWImJkZjKGIpLGEuYmxvY2tlZE9uPWMsITE7Yi5zaGlmdCgpfXJldHVybiEwfWZ1bmN0aW9uIFpjKGEsYixjKXtYYyhhKSYmYy5kZWxldGUoYil9ZnVuY3Rpb24gJGMoKXtKYz0hMTtudWxsIT09TGMmJlhjKExjKSYmKExjPW51bGwpO251bGwhPT1NYyYmWGMoTWMpJiYoTWM9bnVsbCk7bnVsbCE9PU5jJiZYYyhOYykmJihOYz1udWxsKTtPYy5mb3JFYWNoKFpjKTtQYy5mb3JFYWNoKFpjKX1cbmZ1bmN0aW9uIGFkKGEsYil7YS5ibG9ja2VkT249PT1iJiYoYS5ibG9ja2VkT249bnVsbCxKY3x8KEpjPSEwLGNhLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2soY2EudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksJGMpKSl9XG5mdW5jdGlvbiBiZChhKXtmdW5jdGlvbiBiKGIpe3JldHVybiBhZChiLGEpfWlmKDA8S2MubGVuZ3RoKXthZChLY1swXSxhKTtmb3IodmFyIGM9MTtjPEtjLmxlbmd0aDtjKyspe3ZhciBkPUtjW2NdO2QuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpfX1udWxsIT09TGMmJmFkKExjLGEpO251bGwhPT1NYyYmYWQoTWMsYSk7bnVsbCE9PU5jJiZhZChOYyxhKTtPYy5mb3JFYWNoKGIpO1BjLmZvckVhY2goYik7Zm9yKGM9MDtjPFFjLmxlbmd0aDtjKyspZD1RY1tjXSxkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKTtmb3IoOzA8UWMubGVuZ3RoJiYoYz1RY1swXSxudWxsPT09Yy5ibG9ja2VkT24pOylWYyhjKSxudWxsPT09Yy5ibG9ja2VkT24mJlFjLnNoaWZ0KCl9dmFyIGNkPXVhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLGRkPSEwO1xuZnVuY3Rpb24gZWQoYSxiLGMsZCl7dmFyIGU9QyxmPWNkLnRyYW5zaXRpb247Y2QudHJhbnNpdGlvbj1udWxsO3RyeXtDPTEsZmQoYSxiLGMsZCl9ZmluYWxseXtDPWUsY2QudHJhbnNpdGlvbj1mfX1mdW5jdGlvbiBnZChhLGIsYyxkKXt2YXIgZT1DLGY9Y2QudHJhbnNpdGlvbjtjZC50cmFuc2l0aW9uPW51bGw7dHJ5e0M9NCxmZChhLGIsYyxkKX1maW5hbGx5e0M9ZSxjZC50cmFuc2l0aW9uPWZ9fVxuZnVuY3Rpb24gZmQoYSxiLGMsZCl7aWYoZGQpe3ZhciBlPVljKGEsYixjLGQpO2lmKG51bGw9PT1lKWhkKGEsYixkLGlkLGMpLFNjKGEsZCk7ZWxzZSBpZihVYyhlLGEsYixjLGQpKWQuc3RvcFByb3BhZ2F0aW9uKCk7ZWxzZSBpZihTYyhhLGQpLGImNCYmLTE8UmMuaW5kZXhPZihhKSl7Zm9yKDtudWxsIT09ZTspe3ZhciBmPUNiKGUpO251bGwhPT1mJiZFYyhmKTtmPVljKGEsYixjLGQpO251bGw9PT1mJiZoZChhLGIsZCxpZCxjKTtpZihmPT09ZSlicmVhaztlPWZ9bnVsbCE9PWUmJmQuc3RvcFByb3BhZ2F0aW9uKCl9ZWxzZSBoZChhLGIsZCxudWxsLGMpfX12YXIgaWQ9bnVsbDtcbmZ1bmN0aW9uIFljKGEsYixjLGQpe2lkPW51bGw7YT14YihkKTthPVdjKGEpO2lmKG51bGwhPT1hKWlmKGI9VmIoYSksbnVsbD09PWIpYT1udWxsO2Vsc2UgaWYoYz1iLnRhZywxMz09PWMpe2E9V2IoYik7aWYobnVsbCE9PWEpcmV0dXJuIGE7YT1udWxsfWVsc2UgaWYoMz09PWMpe2lmKGIuc3RhdGVOb2RlLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQpcmV0dXJuIDM9PT1iLnRhZz9iLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7YT1udWxsfWVsc2UgYiE9PWEmJihhPW51bGwpO2lkPWE7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBqZChhKXtzd2l0Y2goYSl7Y2FzZSBcImNhbmNlbFwiOmNhc2UgXCJjbGlja1wiOmNhc2UgXCJjbG9zZVwiOmNhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJjb3B5XCI6Y2FzZSBcImN1dFwiOmNhc2UgXCJhdXhjbGlja1wiOmNhc2UgXCJkYmxjbGlja1wiOmNhc2UgXCJkcmFnZW5kXCI6Y2FzZSBcImRyYWdzdGFydFwiOmNhc2UgXCJkcm9wXCI6Y2FzZSBcImZvY3VzaW5cIjpjYXNlIFwiZm9jdXNvdXRcIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwiaW52YWxpZFwiOmNhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcImtleXVwXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcInBhc3RlXCI6Y2FzZSBcInBhdXNlXCI6Y2FzZSBcInBsYXlcIjpjYXNlIFwicG9pbnRlcmNhbmNlbFwiOmNhc2UgXCJwb2ludGVyZG93blwiOmNhc2UgXCJwb2ludGVydXBcIjpjYXNlIFwicmF0ZWNoYW5nZVwiOmNhc2UgXCJyZXNldFwiOmNhc2UgXCJyZXNpemVcIjpjYXNlIFwic2Vla2VkXCI6Y2FzZSBcInN1Ym1pdFwiOmNhc2UgXCJ0b3VjaGNhbmNlbFwiOmNhc2UgXCJ0b3VjaGVuZFwiOmNhc2UgXCJ0b3VjaHN0YXJ0XCI6Y2FzZSBcInZvbHVtZWNoYW5nZVwiOmNhc2UgXCJjaGFuZ2VcIjpjYXNlIFwic2VsZWN0aW9uY2hhbmdlXCI6Y2FzZSBcInRleHRJbnB1dFwiOmNhc2UgXCJjb21wb3NpdGlvbnN0YXJ0XCI6Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6Y2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6Y2FzZSBcImJlZm9yZWJsdXJcIjpjYXNlIFwiYWZ0ZXJibHVyXCI6Y2FzZSBcImJlZm9yZWlucHV0XCI6Y2FzZSBcImJsdXJcIjpjYXNlIFwiZnVsbHNjcmVlbmNoYW5nZVwiOmNhc2UgXCJmb2N1c1wiOmNhc2UgXCJoYXNoY2hhbmdlXCI6Y2FzZSBcInBvcHN0YXRlXCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJzZWxlY3RzdGFydFwiOnJldHVybiAxO2Nhc2UgXCJkcmFnXCI6Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnZXhpdFwiOmNhc2UgXCJkcmFnbGVhdmVcIjpjYXNlIFwiZHJhZ292ZXJcIjpjYXNlIFwibW91c2Vtb3ZlXCI6Y2FzZSBcIm1vdXNlb3V0XCI6Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJwb2ludGVybW92ZVwiOmNhc2UgXCJwb2ludGVyb3V0XCI6Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInNjcm9sbFwiOmNhc2UgXCJ0b2dnbGVcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcIndoZWVsXCI6Y2FzZSBcIm1vdXNlZW50ZXJcIjpjYXNlIFwibW91c2VsZWF2ZVwiOmNhc2UgXCJwb2ludGVyZW50ZXJcIjpjYXNlIFwicG9pbnRlcmxlYXZlXCI6cmV0dXJuIDQ7XG5jYXNlIFwibWVzc2FnZVwiOnN3aXRjaChlYygpKXtjYXNlIGZjOnJldHVybiAxO2Nhc2UgZ2M6cmV0dXJuIDQ7Y2FzZSBoYzpjYXNlIGljOnJldHVybiAxNjtjYXNlIGpjOnJldHVybiA1MzY4NzA5MTI7ZGVmYXVsdDpyZXR1cm4gMTZ9ZGVmYXVsdDpyZXR1cm4gMTZ9fXZhciBrZD1udWxsLGxkPW51bGwsbWQ9bnVsbDtmdW5jdGlvbiBuZCgpe2lmKG1kKXJldHVybiBtZDt2YXIgYSxiPWxkLGM9Yi5sZW5ndGgsZCxlPVwidmFsdWVcImluIGtkP2tkLnZhbHVlOmtkLnRleHRDb250ZW50LGY9ZS5sZW5ndGg7Zm9yKGE9MDthPGMmJmJbYV09PT1lW2FdO2ErKyk7dmFyIGc9Yy1hO2ZvcihkPTE7ZDw9ZyYmYltjLWRdPT09ZVtmLWRdO2QrKyk7cmV0dXJuIG1kPWUuc2xpY2UoYSwxPGQ/MS1kOnZvaWQgMCl9XG5mdW5jdGlvbiBvZChhKXt2YXIgYj1hLmtleUNvZGU7XCJjaGFyQ29kZVwiaW4gYT8oYT1hLmNoYXJDb2RlLDA9PT1hJiYxMz09PWImJihhPTEzKSk6YT1iOzEwPT09YSYmKGE9MTMpO3JldHVybiAzMjw9YXx8MTM9PT1hP2E6MH1mdW5jdGlvbiBwZCgpe3JldHVybiEwfWZ1bmN0aW9uIHFkKCl7cmV0dXJuITF9XG5mdW5jdGlvbiByZChhKXtmdW5jdGlvbiBiKGIsZCxlLGYsZyl7dGhpcy5fcmVhY3ROYW1lPWI7dGhpcy5fdGFyZ2V0SW5zdD1lO3RoaXMudHlwZT1kO3RoaXMubmF0aXZlRXZlbnQ9Zjt0aGlzLnRhcmdldD1nO3RoaXMuY3VycmVudFRhcmdldD1udWxsO2Zvcih2YXIgYyBpbiBhKWEuaGFzT3duUHJvcGVydHkoYykmJihiPWFbY10sdGhpc1tjXT1iP2IoZik6ZltjXSk7dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9KG51bGwhPWYuZGVmYXVsdFByZXZlbnRlZD9mLmRlZmF1bHRQcmV2ZW50ZWQ6ITE9PT1mLnJldHVyblZhbHVlKT9wZDpxZDt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXFkO3JldHVybiB0aGlzfUEoYi5wcm90b3R5cGUse3ByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwO3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOlwidW5rbm93blwiIT09dHlwZW9mIGEucmV0dXJuVmFsdWUmJlxuKGEucmV0dXJuVmFsdWU9ITEpLHRoaXMuaXNEZWZhdWx0UHJldmVudGVkPXBkKX0sc3RvcFByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5zdG9wUHJvcGFnYXRpb24/YS5zdG9wUHJvcGFnYXRpb24oKTpcInVua25vd25cIiE9PXR5cGVvZiBhLmNhbmNlbEJ1YmJsZSYmKGEuY2FuY2VsQnViYmxlPSEwKSx0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXBkKX0scGVyc2lzdDpmdW5jdGlvbigpe30saXNQZXJzaXN0ZW50OnBkfSk7cmV0dXJuIGJ9XG52YXIgc2Q9e2V2ZW50UGhhc2U6MCxidWJibGVzOjAsY2FuY2VsYWJsZTowLHRpbWVTdGFtcDpmdW5jdGlvbihhKXtyZXR1cm4gYS50aW1lU3RhbXB8fERhdGUubm93KCl9LGRlZmF1bHRQcmV2ZW50ZWQ6MCxpc1RydXN0ZWQ6MH0sdGQ9cmQoc2QpLHVkPUEoe30sc2Qse3ZpZXc6MCxkZXRhaWw6MH0pLHZkPXJkKHVkKSx3ZCx4ZCx5ZCxBZD1BKHt9LHVkLHtzY3JlZW5YOjAsc2NyZWVuWTowLGNsaWVudFg6MCxjbGllbnRZOjAscGFnZVg6MCxwYWdlWTowLGN0cmxLZXk6MCxzaGlmdEtleTowLGFsdEtleTowLG1ldGFLZXk6MCxnZXRNb2RpZmllclN0YXRlOnpkLGJ1dHRvbjowLGJ1dHRvbnM6MCxyZWxhdGVkVGFyZ2V0OmZ1bmN0aW9uKGEpe3JldHVybiB2b2lkIDA9PT1hLnJlbGF0ZWRUYXJnZXQ/YS5mcm9tRWxlbWVudD09PWEuc3JjRWxlbWVudD9hLnRvRWxlbWVudDphLmZyb21FbGVtZW50OmEucmVsYXRlZFRhcmdldH0sbW92ZW1lbnRYOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRYXCJpblxuYSlyZXR1cm4gYS5tb3ZlbWVudFg7YSE9PXlkJiYoeWQmJlwibW91c2Vtb3ZlXCI9PT1hLnR5cGU/KHdkPWEuc2NyZWVuWC15ZC5zY3JlZW5YLHhkPWEuc2NyZWVuWS15ZC5zY3JlZW5ZKTp4ZD13ZD0wLHlkPWEpO3JldHVybiB3ZH0sbW92ZW1lbnRZOmZ1bmN0aW9uKGEpe3JldHVyblwibW92ZW1lbnRZXCJpbiBhP2EubW92ZW1lbnRZOnhkfX0pLEJkPXJkKEFkKSxDZD1BKHt9LEFkLHtkYXRhVHJhbnNmZXI6MH0pLERkPXJkKENkKSxFZD1BKHt9LHVkLHtyZWxhdGVkVGFyZ2V0OjB9KSxGZD1yZChFZCksR2Q9QSh7fSxzZCx7YW5pbWF0aW9uTmFtZTowLGVsYXBzZWRUaW1lOjAscHNldWRvRWxlbWVudDowfSksSGQ9cmQoR2QpLElkPUEoe30sc2Qse2NsaXBib2FyZERhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuXCJjbGlwYm9hcmREYXRhXCJpbiBhP2EuY2xpcGJvYXJkRGF0YTp3aW5kb3cuY2xpcGJvYXJkRGF0YX19KSxKZD1yZChJZCksS2Q9QSh7fSxzZCx7ZGF0YTowfSksTGQ9cmQoS2QpLE1kPXtFc2M6XCJFc2NhcGVcIixcblNwYWNlYmFyOlwiIFwiLExlZnQ6XCJBcnJvd0xlZnRcIixVcDpcIkFycm93VXBcIixSaWdodDpcIkFycm93UmlnaHRcIixEb3duOlwiQXJyb3dEb3duXCIsRGVsOlwiRGVsZXRlXCIsV2luOlwiT1NcIixNZW51OlwiQ29udGV4dE1lbnVcIixBcHBzOlwiQ29udGV4dE1lbnVcIixTY3JvbGw6XCJTY3JvbGxMb2NrXCIsTW96UHJpbnRhYmxlS2V5OlwiVW5pZGVudGlmaWVkXCJ9LE5kPXs4OlwiQmFja3NwYWNlXCIsOTpcIlRhYlwiLDEyOlwiQ2xlYXJcIiwxMzpcIkVudGVyXCIsMTY6XCJTaGlmdFwiLDE3OlwiQ29udHJvbFwiLDE4OlwiQWx0XCIsMTk6XCJQYXVzZVwiLDIwOlwiQ2Fwc0xvY2tcIiwyNzpcIkVzY2FwZVwiLDMyOlwiIFwiLDMzOlwiUGFnZVVwXCIsMzQ6XCJQYWdlRG93blwiLDM1OlwiRW5kXCIsMzY6XCJIb21lXCIsMzc6XCJBcnJvd0xlZnRcIiwzODpcIkFycm93VXBcIiwzOTpcIkFycm93UmlnaHRcIiw0MDpcIkFycm93RG93blwiLDQ1OlwiSW5zZXJ0XCIsNDY6XCJEZWxldGVcIiwxMTI6XCJGMVwiLDExMzpcIkYyXCIsMTE0OlwiRjNcIiwxMTU6XCJGNFwiLDExNjpcIkY1XCIsMTE3OlwiRjZcIiwxMTg6XCJGN1wiLFxuMTE5OlwiRjhcIiwxMjA6XCJGOVwiLDEyMTpcIkYxMFwiLDEyMjpcIkYxMVwiLDEyMzpcIkYxMlwiLDE0NDpcIk51bUxvY2tcIiwxNDU6XCJTY3JvbGxMb2NrXCIsMjI0OlwiTWV0YVwifSxPZD17QWx0OlwiYWx0S2V5XCIsQ29udHJvbDpcImN0cmxLZXlcIixNZXRhOlwibWV0YUtleVwiLFNoaWZ0Olwic2hpZnRLZXlcIn07ZnVuY3Rpb24gUGQoYSl7dmFyIGI9dGhpcy5uYXRpdmVFdmVudDtyZXR1cm4gYi5nZXRNb2RpZmllclN0YXRlP2IuZ2V0TW9kaWZpZXJTdGF0ZShhKTooYT1PZFthXSk/ISFiW2FdOiExfWZ1bmN0aW9uIHpkKCl7cmV0dXJuIFBkfVxudmFyIFFkPUEoe30sdWQse2tleTpmdW5jdGlvbihhKXtpZihhLmtleSl7dmFyIGI9TWRbYS5rZXldfHxhLmtleTtpZihcIlVuaWRlbnRpZmllZFwiIT09YilyZXR1cm4gYn1yZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/KGE9b2QoYSksMTM9PT1hP1wiRW50ZXJcIjpTdHJpbmcuZnJvbUNoYXJDb2RlKGEpKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP05kW2Eua2V5Q29kZV18fFwiVW5pZGVudGlmaWVkXCI6XCJcIn0sY29kZTowLGxvY2F0aW9uOjAsY3RybEtleTowLHNoaWZ0S2V5OjAsYWx0S2V5OjAsbWV0YUtleTowLHJlcGVhdDowLGxvY2FsZTowLGdldE1vZGlmaWVyU3RhdGU6emQsY2hhckNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlP29kKGEpOjB9LGtleUNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH0sd2hpY2g6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09XG5hLnR5cGU/b2QoYSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH19KSxSZD1yZChRZCksU2Q9QSh7fSxBZCx7cG9pbnRlcklkOjAsd2lkdGg6MCxoZWlnaHQ6MCxwcmVzc3VyZTowLHRhbmdlbnRpYWxQcmVzc3VyZTowLHRpbHRYOjAsdGlsdFk6MCx0d2lzdDowLHBvaW50ZXJUeXBlOjAsaXNQcmltYXJ5OjB9KSxUZD1yZChTZCksVWQ9QSh7fSx1ZCx7dG91Y2hlczowLHRhcmdldFRvdWNoZXM6MCxjaGFuZ2VkVG91Y2hlczowLGFsdEtleTowLG1ldGFLZXk6MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxnZXRNb2RpZmllclN0YXRlOnpkfSksVmQ9cmQoVWQpLFdkPUEoe30sc2Qse3Byb3BlcnR5TmFtZTowLGVsYXBzZWRUaW1lOjAscHNldWRvRWxlbWVudDowfSksWGQ9cmQoV2QpLFlkPUEoe30sQWQse2RlbHRhWDpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWFwiaW4gYT9hLmRlbHRhWDpcIndoZWVsRGVsdGFYXCJpbiBhPy1hLndoZWVsRGVsdGFYOjB9LFxuZGVsdGFZOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFZXCJpbiBhP2EuZGVsdGFZOlwid2hlZWxEZWx0YVlcImluIGE/LWEud2hlZWxEZWx0YVk6XCJ3aGVlbERlbHRhXCJpbiBhPy1hLndoZWVsRGVsdGE6MH0sZGVsdGFaOjAsZGVsdGFNb2RlOjB9KSxaZD1yZChZZCksJGQ9WzksMTMsMjcsMzJdLGFlPWlhJiZcIkNvbXBvc2l0aW9uRXZlbnRcImluIHdpbmRvdyxiZT1udWxsO2lhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJihiZT1kb2N1bWVudC5kb2N1bWVudE1vZGUpO3ZhciBjZT1pYSYmXCJUZXh0RXZlbnRcImluIHdpbmRvdyYmIWJlLGRlPWlhJiYoIWFlfHxiZSYmODxiZSYmMTE+PWJlKSxlZT1TdHJpbmcuZnJvbUNoYXJDb2RlKDMyKSxmZT0hMTtcbmZ1bmN0aW9uIGdlKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJrZXl1cFwiOnJldHVybi0xIT09JGQuaW5kZXhPZihiLmtleUNvZGUpO2Nhc2UgXCJrZXlkb3duXCI6cmV0dXJuIDIyOSE9PWIua2V5Q29kZTtjYXNlIFwia2V5cHJlc3NcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcImZvY3Vzb3V0XCI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gaGUoYSl7YT1hLmRldGFpbDtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJlwiZGF0YVwiaW4gYT9hLmRhdGE6bnVsbH12YXIgaWU9ITE7ZnVuY3Rpb24gamUoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIGhlKGIpO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDMyIT09Yi53aGljaClyZXR1cm4gbnVsbDtmZT0hMDtyZXR1cm4gZWU7Y2FzZSBcInRleHRJbnB1dFwiOnJldHVybiBhPWIuZGF0YSxhPT09ZWUmJmZlP251bGw6YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIGtlKGEsYil7aWYoaWUpcmV0dXJuXCJjb21wb3NpdGlvbmVuZFwiPT09YXx8IWFlJiZnZShhLGIpPyhhPW5kKCksbWQ9bGQ9a2Q9bnVsbCxpZT0hMSxhKTpudWxsO3N3aXRjaChhKXtjYXNlIFwicGFzdGVcIjpyZXR1cm4gbnVsbDtjYXNlIFwia2V5cHJlc3NcIjppZighKGIuY3RybEtleXx8Yi5hbHRLZXl8fGIubWV0YUtleSl8fGIuY3RybEtleSYmYi5hbHRLZXkpe2lmKGIuY2hhciYmMTxiLmNoYXIubGVuZ3RoKXJldHVybiBiLmNoYXI7aWYoYi53aGljaClyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShiLndoaWNoKX1yZXR1cm4gbnVsbDtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gZGUmJlwia29cIiE9PWIubG9jYWxlP251bGw6Yi5kYXRhO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxudmFyIGxlPXtjb2xvcjohMCxkYXRlOiEwLGRhdGV0aW1lOiEwLFwiZGF0ZXRpbWUtbG9jYWxcIjohMCxlbWFpbDohMCxtb250aDohMCxudW1iZXI6ITAscGFzc3dvcmQ6ITAscmFuZ2U6ITAsc2VhcmNoOiEwLHRlbDohMCx0ZXh0OiEwLHRpbWU6ITAsdXJsOiEwLHdlZWs6ITB9O2Z1bmN0aW9uIG1lKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT1iPyEhbGVbYS50eXBlXTpcInRleHRhcmVhXCI9PT1iPyEwOiExfWZ1bmN0aW9uIG5lKGEsYixjLGQpe0ViKGQpO2I9b2UoYixcIm9uQ2hhbmdlXCIpOzA8Yi5sZW5ndGgmJihjPW5ldyB0ZChcIm9uQ2hhbmdlXCIsXCJjaGFuZ2VcIixudWxsLGMsZCksYS5wdXNoKHtldmVudDpjLGxpc3RlbmVyczpifSkpfXZhciBwZT1udWxsLHFlPW51bGw7ZnVuY3Rpb24gcmUoYSl7c2UoYSwwKX1mdW5jdGlvbiB0ZShhKXt2YXIgYj11ZShhKTtpZihXYShiKSlyZXR1cm4gYX1cbmZ1bmN0aW9uIHZlKGEsYil7aWYoXCJjaGFuZ2VcIj09PWEpcmV0dXJuIGJ9dmFyIHdlPSExO2lmKGlhKXt2YXIgeGU7aWYoaWEpe3ZhciB5ZT1cIm9uaW5wdXRcImluIGRvY3VtZW50O2lmKCF5ZSl7dmFyIHplPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7emUuc2V0QXR0cmlidXRlKFwib25pbnB1dFwiLFwicmV0dXJuO1wiKTt5ZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgemUub25pbnB1dH14ZT15ZX1lbHNlIHhlPSExO3dlPXhlJiYoIWRvY3VtZW50LmRvY3VtZW50TW9kZXx8OTxkb2N1bWVudC5kb2N1bWVudE1vZGUpfWZ1bmN0aW9uIEFlKCl7cGUmJihwZS5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixCZSkscWU9cGU9bnVsbCl9ZnVuY3Rpb24gQmUoYSl7aWYoXCJ2YWx1ZVwiPT09YS5wcm9wZXJ0eU5hbWUmJnRlKHFlKSl7dmFyIGI9W107bmUoYixxZSxhLHhiKGEpKTtKYihyZSxiKX19XG5mdW5jdGlvbiBDZShhLGIsYyl7XCJmb2N1c2luXCI9PT1hPyhBZSgpLHBlPWIscWU9YyxwZS5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixCZSkpOlwiZm9jdXNvdXRcIj09PWEmJkFlKCl9ZnVuY3Rpb24gRGUoYSl7aWYoXCJzZWxlY3Rpb25jaGFuZ2VcIj09PWF8fFwia2V5dXBcIj09PWF8fFwia2V5ZG93blwiPT09YSlyZXR1cm4gdGUocWUpfWZ1bmN0aW9uIEVlKGEsYil7aWYoXCJjbGlja1wiPT09YSlyZXR1cm4gdGUoYil9ZnVuY3Rpb24gRmUoYSxiKXtpZihcImlucHV0XCI9PT1hfHxcImNoYW5nZVwiPT09YSlyZXR1cm4gdGUoYil9ZnVuY3Rpb24gR2UoYSxiKXtyZXR1cm4gYT09PWImJigwIT09YXx8MS9hPT09MS9iKXx8YSE9PWEmJmIhPT1ifXZhciBIZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgT2JqZWN0LmlzP09iamVjdC5pczpHZTtcbmZ1bmN0aW9uIEllKGEsYil7aWYoSGUoYSxiKSlyZXR1cm4hMDtpZihcIm9iamVjdFwiIT09dHlwZW9mIGF8fG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGJ8fG51bGw9PT1iKXJldHVybiExO3ZhciBjPU9iamVjdC5rZXlzKGEpLGQ9T2JqZWN0LmtleXMoYik7aWYoYy5sZW5ndGghPT1kLmxlbmd0aClyZXR1cm4hMTtmb3IoZD0wO2Q8Yy5sZW5ndGg7ZCsrKXt2YXIgZT1jW2RdO2lmKCFqYS5jYWxsKGIsZSl8fCFIZShhW2VdLGJbZV0pKXJldHVybiExfXJldHVybiEwfWZ1bmN0aW9uIEplKGEpe2Zvcig7YSYmYS5maXJzdENoaWxkOylhPWEuZmlyc3RDaGlsZDtyZXR1cm4gYX1cbmZ1bmN0aW9uIEtlKGEsYil7dmFyIGM9SmUoYSk7YT0wO2Zvcih2YXIgZDtjOyl7aWYoMz09PWMubm9kZVR5cGUpe2Q9YStjLnRleHRDb250ZW50Lmxlbmd0aDtpZihhPD1iJiZkPj1iKXJldHVybntub2RlOmMsb2Zmc2V0OmItYX07YT1kfWE6e2Zvcig7Yzspe2lmKGMubmV4dFNpYmxpbmcpe2M9Yy5uZXh0U2libGluZzticmVhayBhfWM9Yy5wYXJlbnROb2RlfWM9dm9pZCAwfWM9SmUoYyl9fWZ1bmN0aW9uIExlKGEsYil7cmV0dXJuIGEmJmI/YT09PWI/ITA6YSYmMz09PWEubm9kZVR5cGU/ITE6YiYmMz09PWIubm9kZVR5cGU/TGUoYSxiLnBhcmVudE5vZGUpOlwiY29udGFpbnNcImluIGE/YS5jb250YWlucyhiKTphLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uPyEhKGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYikmMTYpOiExOiExfVxuZnVuY3Rpb24gTWUoKXtmb3IodmFyIGE9d2luZG93LGI9WGEoKTtiIGluc3RhbmNlb2YgYS5IVE1MSUZyYW1lRWxlbWVudDspe3RyeXt2YXIgYz1cInN0cmluZ1wiPT09dHlwZW9mIGIuY29udGVudFdpbmRvdy5sb2NhdGlvbi5ocmVmfWNhdGNoKGQpe2M9ITF9aWYoYylhPWIuY29udGVudFdpbmRvdztlbHNlIGJyZWFrO2I9WGEoYS5kb2N1bWVudCl9cmV0dXJuIGJ9ZnVuY3Rpb24gTmUoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBiJiYoXCJpbnB1dFwiPT09YiYmKFwidGV4dFwiPT09YS50eXBlfHxcInNlYXJjaFwiPT09YS50eXBlfHxcInRlbFwiPT09YS50eXBlfHxcInVybFwiPT09YS50eXBlfHxcInBhc3N3b3JkXCI9PT1hLnR5cGUpfHxcInRleHRhcmVhXCI9PT1ifHxcInRydWVcIj09PWEuY29udGVudEVkaXRhYmxlKX1cbmZ1bmN0aW9uIE9lKGEpe3ZhciBiPU1lKCksYz1hLmZvY3VzZWRFbGVtLGQ9YS5zZWxlY3Rpb25SYW5nZTtpZihiIT09YyYmYyYmYy5vd25lckRvY3VtZW50JiZMZShjLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LGMpKXtpZihudWxsIT09ZCYmTmUoYykpaWYoYj1kLnN0YXJ0LGE9ZC5lbmQsdm9pZCAwPT09YSYmKGE9YiksXCJzZWxlY3Rpb25TdGFydFwiaW4gYyljLnNlbGVjdGlvblN0YXJ0PWIsYy5zZWxlY3Rpb25FbmQ9TWF0aC5taW4oYSxjLnZhbHVlLmxlbmd0aCk7ZWxzZSBpZihhPShiPWMub3duZXJEb2N1bWVudHx8ZG9jdW1lbnQpJiZiLmRlZmF1bHRWaWV3fHx3aW5kb3csYS5nZXRTZWxlY3Rpb24pe2E9YS5nZXRTZWxlY3Rpb24oKTt2YXIgZT1jLnRleHRDb250ZW50Lmxlbmd0aCxmPU1hdGgubWluKGQuc3RhcnQsZSk7ZD12b2lkIDA9PT1kLmVuZD9mOk1hdGgubWluKGQuZW5kLGUpOyFhLmV4dGVuZCYmZj5kJiYoZT1kLGQ9ZixmPWUpO2U9S2UoYyxmKTt2YXIgZz1LZShjLFxuZCk7ZSYmZyYmKDEhPT1hLnJhbmdlQ291bnR8fGEuYW5jaG9yTm9kZSE9PWUubm9kZXx8YS5hbmNob3JPZmZzZXQhPT1lLm9mZnNldHx8YS5mb2N1c05vZGUhPT1nLm5vZGV8fGEuZm9jdXNPZmZzZXQhPT1nLm9mZnNldCkmJihiPWIuY3JlYXRlUmFuZ2UoKSxiLnNldFN0YXJ0KGUubm9kZSxlLm9mZnNldCksYS5yZW1vdmVBbGxSYW5nZXMoKSxmPmQ/KGEuYWRkUmFuZ2UoYiksYS5leHRlbmQoZy5ub2RlLGcub2Zmc2V0KSk6KGIuc2V0RW5kKGcubm9kZSxnLm9mZnNldCksYS5hZGRSYW5nZShiKSkpfWI9W107Zm9yKGE9YzthPWEucGFyZW50Tm9kZTspMT09PWEubm9kZVR5cGUmJmIucHVzaCh7ZWxlbWVudDphLGxlZnQ6YS5zY3JvbGxMZWZ0LHRvcDphLnNjcm9sbFRvcH0pO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmZvY3VzJiZjLmZvY3VzKCk7Zm9yKGM9MDtjPGIubGVuZ3RoO2MrKylhPWJbY10sYS5lbGVtZW50LnNjcm9sbExlZnQ9YS5sZWZ0LGEuZWxlbWVudC5zY3JvbGxUb3A9YS50b3B9fVxudmFyIFBlPWlhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJjExPj1kb2N1bWVudC5kb2N1bWVudE1vZGUsUWU9bnVsbCxSZT1udWxsLFNlPW51bGwsVGU9ITE7XG5mdW5jdGlvbiBVZShhLGIsYyl7dmFyIGQ9Yy53aW5kb3c9PT1jP2MuZG9jdW1lbnQ6OT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQ7VGV8fG51bGw9PVFlfHxRZSE9PVhhKGQpfHwoZD1RZSxcInNlbGVjdGlvblN0YXJ0XCJpbiBkJiZOZShkKT9kPXtzdGFydDpkLnNlbGVjdGlvblN0YXJ0LGVuZDpkLnNlbGVjdGlvbkVuZH06KGQ9KGQub3duZXJEb2N1bWVudCYmZC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3fHx3aW5kb3cpLmdldFNlbGVjdGlvbigpLGQ9e2FuY2hvck5vZGU6ZC5hbmNob3JOb2RlLGFuY2hvck9mZnNldDpkLmFuY2hvck9mZnNldCxmb2N1c05vZGU6ZC5mb2N1c05vZGUsZm9jdXNPZmZzZXQ6ZC5mb2N1c09mZnNldH0pLFNlJiZJZShTZSxkKXx8KFNlPWQsZD1vZShSZSxcIm9uU2VsZWN0XCIpLDA8ZC5sZW5ndGgmJihiPW5ldyB0ZChcIm9uU2VsZWN0XCIsXCJzZWxlY3RcIixudWxsLGIsYyksYS5wdXNoKHtldmVudDpiLGxpc3RlbmVyczpkfSksYi50YXJnZXQ9UWUpKSl9XG5mdW5jdGlvbiBWZShhLGIpe3ZhciBjPXt9O2NbYS50b0xvd2VyQ2FzZSgpXT1iLnRvTG93ZXJDYXNlKCk7Y1tcIldlYmtpdFwiK2FdPVwid2Via2l0XCIrYjtjW1wiTW96XCIrYV09XCJtb3pcIitiO3JldHVybiBjfXZhciBXZT17YW5pbWF0aW9uZW5kOlZlKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25FbmRcIiksYW5pbWF0aW9uaXRlcmF0aW9uOlZlKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25JdGVyYXRpb25cIiksYW5pbWF0aW9uc3RhcnQ6VmUoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvblN0YXJ0XCIpLHRyYW5zaXRpb25lbmQ6VmUoXCJUcmFuc2l0aW9uXCIsXCJUcmFuc2l0aW9uRW5kXCIpfSxYZT17fSxZZT17fTtcbmlhJiYoWWU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZSxcIkFuaW1hdGlvbkV2ZW50XCJpbiB3aW5kb3d8fChkZWxldGUgV2UuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbixkZWxldGUgV2UuYW5pbWF0aW9uaXRlcmF0aW9uLmFuaW1hdGlvbixkZWxldGUgV2UuYW5pbWF0aW9uc3RhcnQuYW5pbWF0aW9uKSxcIlRyYW5zaXRpb25FdmVudFwiaW4gd2luZG93fHxkZWxldGUgV2UudHJhbnNpdGlvbmVuZC50cmFuc2l0aW9uKTtmdW5jdGlvbiBaZShhKXtpZihYZVthXSlyZXR1cm4gWGVbYV07aWYoIVdlW2FdKXJldHVybiBhO3ZhciBiPVdlW2FdLGM7Zm9yKGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpJiZjIGluIFllKXJldHVybiBYZVthXT1iW2NdO3JldHVybiBhfXZhciAkZT1aZShcImFuaW1hdGlvbmVuZFwiKSxhZj1aZShcImFuaW1hdGlvbml0ZXJhdGlvblwiKSxiZj1aZShcImFuaW1hdGlvbnN0YXJ0XCIpLGNmPVplKFwidHJhbnNpdGlvbmVuZFwiKSxkZj1uZXcgTWFwLGVmPVwiYWJvcnQgYXV4Q2xpY2sgY2FuY2VsIGNhblBsYXkgY2FuUGxheVRocm91Z2ggY2xpY2sgY2xvc2UgY29udGV4dE1lbnUgY29weSBjdXQgZHJhZyBkcmFnRW5kIGRyYWdFbnRlciBkcmFnRXhpdCBkcmFnTGVhdmUgZHJhZ092ZXIgZHJhZ1N0YXJ0IGRyb3AgZHVyYXRpb25DaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgZ290UG9pbnRlckNhcHR1cmUgaW5wdXQgaW52YWxpZCBrZXlEb3duIGtleVByZXNzIGtleVVwIGxvYWQgbG9hZGVkRGF0YSBsb2FkZWRNZXRhZGF0YSBsb2FkU3RhcnQgbG9zdFBvaW50ZXJDYXB0dXJlIG1vdXNlRG93biBtb3VzZU1vdmUgbW91c2VPdXQgbW91c2VPdmVyIG1vdXNlVXAgcGFzdGUgcGF1c2UgcGxheSBwbGF5aW5nIHBvaW50ZXJDYW5jZWwgcG9pbnRlckRvd24gcG9pbnRlck1vdmUgcG9pbnRlck91dCBwb2ludGVyT3ZlciBwb2ludGVyVXAgcHJvZ3Jlc3MgcmF0ZUNoYW5nZSByZXNldCByZXNpemUgc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdWJtaXQgc3VzcGVuZCB0aW1lVXBkYXRlIHRvdWNoQ2FuY2VsIHRvdWNoRW5kIHRvdWNoU3RhcnQgdm9sdW1lQ2hhbmdlIHNjcm9sbCB0b2dnbGUgdG91Y2hNb3ZlIHdhaXRpbmcgd2hlZWxcIi5zcGxpdChcIiBcIik7XG5mdW5jdGlvbiBmZihhLGIpe2RmLnNldChhLGIpO2ZhKGIsW2FdKX1mb3IodmFyIGdmPTA7Z2Y8ZWYubGVuZ3RoO2dmKyspe3ZhciBoZj1lZltnZl0samY9aGYudG9Mb3dlckNhc2UoKSxrZj1oZlswXS50b1VwcGVyQ2FzZSgpK2hmLnNsaWNlKDEpO2ZmKGpmLFwib25cIitrZil9ZmYoJGUsXCJvbkFuaW1hdGlvbkVuZFwiKTtmZihhZixcIm9uQW5pbWF0aW9uSXRlcmF0aW9uXCIpO2ZmKGJmLFwib25BbmltYXRpb25TdGFydFwiKTtmZihcImRibGNsaWNrXCIsXCJvbkRvdWJsZUNsaWNrXCIpO2ZmKFwiZm9jdXNpblwiLFwib25Gb2N1c1wiKTtmZihcImZvY3Vzb3V0XCIsXCJvbkJsdXJcIik7ZmYoY2YsXCJvblRyYW5zaXRpb25FbmRcIik7aGEoXCJvbk1vdXNlRW50ZXJcIixbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdKTtoYShcIm9uTW91c2VMZWF2ZVwiLFtcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl0pO2hhKFwib25Qb2ludGVyRW50ZXJcIixbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXSk7XG5oYShcIm9uUG9pbnRlckxlYXZlXCIsW1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl0pO2ZhKFwib25DaGFuZ2VcIixcImNoYW5nZSBjbGljayBmb2N1c2luIGZvY3Vzb3V0IGlucHV0IGtleWRvd24ga2V5dXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpKTtmYShcIm9uU2VsZWN0XCIsXCJmb2N1c291dCBjb250ZXh0bWVudSBkcmFnZW5kIGZvY3VzaW4ga2V5ZG93biBrZXl1cCBtb3VzZWRvd24gbW91c2V1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIikpO2ZhKFwib25CZWZvcmVJbnB1dFwiLFtcImNvbXBvc2l0aW9uZW5kXCIsXCJrZXlwcmVzc1wiLFwidGV4dElucHV0XCIsXCJwYXN0ZVwiXSk7ZmEoXCJvbkNvbXBvc2l0aW9uRW5kXCIsXCJjb21wb3NpdGlvbmVuZCBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7ZmEoXCJvbkNvbXBvc2l0aW9uU3RhcnRcIixcImNvbXBvc2l0aW9uc3RhcnQgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO1xuZmEoXCJvbkNvbXBvc2l0aW9uVXBkYXRlXCIsXCJjb21wb3NpdGlvbnVwZGF0ZSBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7dmFyIGxmPVwiYWJvcnQgY2FucGxheSBjYW5wbGF5dGhyb3VnaCBkdXJhdGlvbmNoYW5nZSBlbXB0aWVkIGVuY3J5cHRlZCBlbmRlZCBlcnJvciBsb2FkZWRkYXRhIGxvYWRlZG1ldGFkYXRhIGxvYWRzdGFydCBwYXVzZSBwbGF5IHBsYXlpbmcgcHJvZ3Jlc3MgcmF0ZWNoYW5nZSByZXNpemUgc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdXNwZW5kIHRpbWV1cGRhdGUgdm9sdW1lY2hhbmdlIHdhaXRpbmdcIi5zcGxpdChcIiBcIiksbWY9bmV3IFNldChcImNhbmNlbCBjbG9zZSBpbnZhbGlkIGxvYWQgc2Nyb2xsIHRvZ2dsZVwiLnNwbGl0KFwiIFwiKS5jb25jYXQobGYpKTtcbmZ1bmN0aW9uIG5mKGEsYixjKXt2YXIgZD1hLnR5cGV8fFwidW5rbm93bi1ldmVudFwiO2EuY3VycmVudFRhcmdldD1jO1ViKGQsYix2b2lkIDAsYSk7YS5jdXJyZW50VGFyZ2V0PW51bGx9XG5mdW5jdGlvbiBzZShhLGIpe2I9MCE9PShiJjQpO2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7YysrKXt2YXIgZD1hW2NdLGU9ZC5ldmVudDtkPWQubGlzdGVuZXJzO2E6e3ZhciBmPXZvaWQgMDtpZihiKWZvcih2YXIgZz1kLmxlbmd0aC0xOzA8PWc7Zy0tKXt2YXIgaD1kW2ddLGs9aC5pbnN0YW5jZSxsPWguY3VycmVudFRhcmdldDtoPWgubGlzdGVuZXI7aWYoayE9PWYmJmUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlicmVhayBhO25mKGUsaCxsKTtmPWt9ZWxzZSBmb3IoZz0wO2c8ZC5sZW5ndGg7ZysrKXtoPWRbZ107az1oLmluc3RhbmNlO2w9aC5jdXJyZW50VGFyZ2V0O2g9aC5saXN0ZW5lcjtpZihrIT09ZiYmZS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKWJyZWFrIGE7bmYoZSxoLGwpO2Y9a319fWlmKFFiKXRocm93IGE9UmIsUWI9ITEsUmI9bnVsbCxhO31cbmZ1bmN0aW9uIEQoYSxiKXt2YXIgYz1iW29mXTt2b2lkIDA9PT1jJiYoYz1iW29mXT1uZXcgU2V0KTt2YXIgZD1hK1wiX19idWJibGVcIjtjLmhhcyhkKXx8KHBmKGIsYSwyLCExKSxjLmFkZChkKSl9ZnVuY3Rpb24gcWYoYSxiLGMpe3ZhciBkPTA7YiYmKGR8PTQpO3BmKGMsYSxkLGIpfXZhciByZj1cIl9yZWFjdExpc3RlbmluZ1wiK01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpO2Z1bmN0aW9uIHNmKGEpe2lmKCFhW3JmXSl7YVtyZl09ITA7ZGEuZm9yRWFjaChmdW5jdGlvbihiKXtcInNlbGVjdGlvbmNoYW5nZVwiIT09YiYmKG1mLmhhcyhiKXx8cWYoYiwhMSxhKSxxZihiLCEwLGEpKX0pO3ZhciBiPTk9PT1hLm5vZGVUeXBlP2E6YS5vd25lckRvY3VtZW50O251bGw9PT1ifHxiW3JmXXx8KGJbcmZdPSEwLHFmKFwic2VsZWN0aW9uY2hhbmdlXCIsITEsYikpfX1cbmZ1bmN0aW9uIHBmKGEsYixjLGQpe3N3aXRjaChqZChiKSl7Y2FzZSAxOnZhciBlPWVkO2JyZWFrO2Nhc2UgNDplPWdkO2JyZWFrO2RlZmF1bHQ6ZT1mZH1jPWUuYmluZChudWxsLGIsYyxhKTtlPXZvaWQgMDshTGJ8fFwidG91Y2hzdGFydFwiIT09YiYmXCJ0b3VjaG1vdmVcIiE9PWImJlwid2hlZWxcIiE9PWJ8fChlPSEwKTtkP3ZvaWQgMCE9PWU/YS5hZGRFdmVudExpc3RlbmVyKGIsYyx7Y2FwdHVyZTohMCxwYXNzaXZlOmV9KTphLmFkZEV2ZW50TGlzdGVuZXIoYixjLCEwKTp2b2lkIDAhPT1lP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGMse3Bhc3NpdmU6ZX0pOmEuYWRkRXZlbnRMaXN0ZW5lcihiLGMsITEpfVxuZnVuY3Rpb24gaGQoYSxiLGMsZCxlKXt2YXIgZj1kO2lmKDA9PT0oYiYxKSYmMD09PShiJjIpJiZudWxsIT09ZClhOmZvcig7Oyl7aWYobnVsbD09PWQpcmV0dXJuO3ZhciBnPWQudGFnO2lmKDM9PT1nfHw0PT09Zyl7dmFyIGg9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztpZihoPT09ZXx8OD09PWgubm9kZVR5cGUmJmgucGFyZW50Tm9kZT09PWUpYnJlYWs7aWYoND09PWcpZm9yKGc9ZC5yZXR1cm47bnVsbCE9PWc7KXt2YXIgaz1nLnRhZztpZigzPT09a3x8ND09PWspaWYoaz1nLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLGs9PT1lfHw4PT09ay5ub2RlVHlwZSYmay5wYXJlbnROb2RlPT09ZSlyZXR1cm47Zz1nLnJldHVybn1mb3IoO251bGwhPT1oOyl7Zz1XYyhoKTtpZihudWxsPT09ZylyZXR1cm47az1nLnRhZztpZig1PT09a3x8Nj09PWspe2Q9Zj1nO2NvbnRpbnVlIGF9aD1oLnBhcmVudE5vZGV9fWQ9ZC5yZXR1cm59SmIoZnVuY3Rpb24oKXt2YXIgZD1mLGU9eGIoYyksZz1bXTtcbmE6e3ZhciBoPWRmLmdldChhKTtpZih2b2lkIDAhPT1oKXt2YXIgaz10ZCxuPWE7c3dpdGNoKGEpe2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDA9PT1vZChjKSlicmVhayBhO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6az1SZDticmVhaztjYXNlIFwiZm9jdXNpblwiOm49XCJmb2N1c1wiO2s9RmQ7YnJlYWs7Y2FzZSBcImZvY3Vzb3V0XCI6bj1cImJsdXJcIjtrPUZkO2JyZWFrO2Nhc2UgXCJiZWZvcmVibHVyXCI6Y2FzZSBcImFmdGVyYmx1clwiOms9RmQ7YnJlYWs7Y2FzZSBcImNsaWNrXCI6aWYoMj09PWMuYnV0dG9uKWJyZWFrIGE7Y2FzZSBcImF1eGNsaWNrXCI6Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwiY29udGV4dG1lbnVcIjprPUJkO2JyZWFrO2Nhc2UgXCJkcmFnXCI6Y2FzZSBcImRyYWdlbmRcIjpjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdleGl0XCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmNhc2UgXCJkcmFnb3ZlclwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOms9XG5EZDticmVhaztjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjprPVZkO2JyZWFrO2Nhc2UgJGU6Y2FzZSBhZjpjYXNlIGJmOms9SGQ7YnJlYWs7Y2FzZSBjZjprPVhkO2JyZWFrO2Nhc2UgXCJzY3JvbGxcIjprPXZkO2JyZWFrO2Nhc2UgXCJ3aGVlbFwiOms9WmQ7YnJlYWs7Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcInBhc3RlXCI6az1KZDticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVydXBcIjprPVRkfXZhciB0PTAhPT0oYiY0KSxKPSF0JiZcInNjcm9sbFwiPT09YSx4PXQ/bnVsbCE9PWg/aCtcIkNhcHR1cmVcIjpudWxsOmg7dD1bXTtmb3IodmFyIHc9ZCx1O251bGwhPT1cbnc7KXt1PXc7dmFyIEY9dS5zdGF0ZU5vZGU7NT09PXUudGFnJiZudWxsIT09RiYmKHU9RixudWxsIT09eCYmKEY9S2Iodyx4KSxudWxsIT1GJiZ0LnB1c2godGYodyxGLHUpKSkpO2lmKEopYnJlYWs7dz13LnJldHVybn0wPHQubGVuZ3RoJiYoaD1uZXcgayhoLG4sbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6aCxsaXN0ZW5lcnM6dH0pKX19aWYoMD09PShiJjcpKXthOntoPVwibW91c2VvdmVyXCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hO2s9XCJtb3VzZW91dFwiPT09YXx8XCJwb2ludGVyb3V0XCI9PT1hO2lmKGgmJmMhPT13YiYmKG49Yy5yZWxhdGVkVGFyZ2V0fHxjLmZyb21FbGVtZW50KSYmKFdjKG4pfHxuW3VmXSkpYnJlYWsgYTtpZihrfHxoKXtoPWUud2luZG93PT09ZT9lOihoPWUub3duZXJEb2N1bWVudCk/aC5kZWZhdWx0Vmlld3x8aC5wYXJlbnRXaW5kb3c6d2luZG93O2lmKGspe2lmKG49Yy5yZWxhdGVkVGFyZ2V0fHxjLnRvRWxlbWVudCxrPWQsbj1uP1djKG4pOm51bGwsbnVsbCE9PVxubiYmKEo9VmIobiksbiE9PUp8fDUhPT1uLnRhZyYmNiE9PW4udGFnKSluPW51bGx9ZWxzZSBrPW51bGwsbj1kO2lmKGshPT1uKXt0PUJkO0Y9XCJvbk1vdXNlTGVhdmVcIjt4PVwib25Nb3VzZUVudGVyXCI7dz1cIm1vdXNlXCI7aWYoXCJwb2ludGVyb3V0XCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hKXQ9VGQsRj1cIm9uUG9pbnRlckxlYXZlXCIseD1cIm9uUG9pbnRlckVudGVyXCIsdz1cInBvaW50ZXJcIjtKPW51bGw9PWs/aDp1ZShrKTt1PW51bGw9PW4/aDp1ZShuKTtoPW5ldyB0KEYsdytcImxlYXZlXCIsayxjLGUpO2gudGFyZ2V0PUo7aC5yZWxhdGVkVGFyZ2V0PXU7Rj1udWxsO1djKGUpPT09ZCYmKHQ9bmV3IHQoeCx3K1wiZW50ZXJcIixuLGMsZSksdC50YXJnZXQ9dSx0LnJlbGF0ZWRUYXJnZXQ9SixGPXQpO0o9RjtpZihrJiZuKWI6e3Q9azt4PW47dz0wO2Zvcih1PXQ7dTt1PXZmKHUpKXcrKzt1PTA7Zm9yKEY9eDtGO0Y9dmYoRikpdSsrO2Zvcig7MDx3LXU7KXQ9dmYodCksdy0tO2Zvcig7MDx1LXc7KXg9XG52Zih4KSx1LS07Zm9yKDt3LS07KXtpZih0PT09eHx8bnVsbCE9PXgmJnQ9PT14LmFsdGVybmF0ZSlicmVhayBiO3Q9dmYodCk7eD12Zih4KX10PW51bGx9ZWxzZSB0PW51bGw7bnVsbCE9PWsmJndmKGcsaCxrLHQsITEpO251bGwhPT1uJiZudWxsIT09SiYmd2YoZyxKLG4sdCwhMCl9fX1hOntoPWQ/dWUoZCk6d2luZG93O2s9aC5ub2RlTmFtZSYmaC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO2lmKFwic2VsZWN0XCI9PT1rfHxcImlucHV0XCI9PT1rJiZcImZpbGVcIj09PWgudHlwZSl2YXIgbmE9dmU7ZWxzZSBpZihtZShoKSlpZih3ZSluYT1GZTtlbHNle25hPURlO3ZhciB4YT1DZX1lbHNlKGs9aC5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWsudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWgudHlwZXx8XCJyYWRpb1wiPT09aC50eXBlKSYmKG5hPUVlKTtpZihuYSYmKG5hPW5hKGEsZCkpKXtuZShnLG5hLGMsZSk7YnJlYWsgYX14YSYmeGEoYSxoLGQpO1wiZm9jdXNvdXRcIj09PWEmJih4YT1oLl93cmFwcGVyU3RhdGUpJiZcbnhhLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1oLnR5cGUmJmNiKGgsXCJudW1iZXJcIixoLnZhbHVlKX14YT1kP3VlKGQpOndpbmRvdztzd2l0Y2goYSl7Y2FzZSBcImZvY3VzaW5cIjppZihtZSh4YSl8fFwidHJ1ZVwiPT09eGEuY29udGVudEVkaXRhYmxlKVFlPXhhLFJlPWQsU2U9bnVsbDticmVhaztjYXNlIFwiZm9jdXNvdXRcIjpTZT1SZT1RZT1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZWRvd25cIjpUZT0hMDticmVhaztjYXNlIFwiY29udGV4dG1lbnVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJkcmFnZW5kXCI6VGU9ITE7VWUoZyxjLGUpO2JyZWFrO2Nhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjppZihQZSlicmVhaztjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOlVlKGcsYyxlKX12YXIgJGE7aWYoYWUpYjp7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbnN0YXJ0XCI6dmFyIGJhPVwib25Db21wb3NpdGlvblN0YXJ0XCI7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpiYT1cIm9uQ29tcG9zaXRpb25FbmRcIjtcbmJyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6YmE9XCJvbkNvbXBvc2l0aW9uVXBkYXRlXCI7YnJlYWsgYn1iYT12b2lkIDB9ZWxzZSBpZT9nZShhLGMpJiYoYmE9XCJvbkNvbXBvc2l0aW9uRW5kXCIpOlwia2V5ZG93blwiPT09YSYmMjI5PT09Yy5rZXlDb2RlJiYoYmE9XCJvbkNvbXBvc2l0aW9uU3RhcnRcIik7YmEmJihkZSYmXCJrb1wiIT09Yy5sb2NhbGUmJihpZXx8XCJvbkNvbXBvc2l0aW9uU3RhcnRcIiE9PWJhP1wib25Db21wb3NpdGlvbkVuZFwiPT09YmEmJmllJiYoJGE9bmQoKSk6KGtkPWUsbGQ9XCJ2YWx1ZVwiaW4ga2Q/a2QudmFsdWU6a2QudGV4dENvbnRlbnQsaWU9ITApKSx4YT1vZShkLGJhKSwwPHhhLmxlbmd0aCYmKGJhPW5ldyBMZChiYSxhLG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OmJhLGxpc3RlbmVyczp4YX0pLCRhP2JhLmRhdGE9JGE6KCRhPWhlKGMpLG51bGwhPT0kYSYmKGJhLmRhdGE9JGEpKSkpO2lmKCRhPWNlP2plKGEsYyk6a2UoYSxjKSlkPW9lKGQsXCJvbkJlZm9yZUlucHV0XCIpLFxuMDxkLmxlbmd0aCYmKGU9bmV3IExkKFwib25CZWZvcmVJbnB1dFwiLFwiYmVmb3JlaW5wdXRcIixudWxsLGMsZSksZy5wdXNoKHtldmVudDplLGxpc3RlbmVyczpkfSksZS5kYXRhPSRhKX1zZShnLGIpfSl9ZnVuY3Rpb24gdGYoYSxiLGMpe3JldHVybntpbnN0YW5jZTphLGxpc3RlbmVyOmIsY3VycmVudFRhcmdldDpjfX1mdW5jdGlvbiBvZShhLGIpe2Zvcih2YXIgYz1iK1wiQ2FwdHVyZVwiLGQ9W107bnVsbCE9PWE7KXt2YXIgZT1hLGY9ZS5zdGF0ZU5vZGU7NT09PWUudGFnJiZudWxsIT09ZiYmKGU9ZixmPUtiKGEsYyksbnVsbCE9ZiYmZC51bnNoaWZ0KHRmKGEsZixlKSksZj1LYihhLGIpLG51bGwhPWYmJmQucHVzaCh0ZihhLGYsZSkpKTthPWEucmV0dXJufXJldHVybiBkfWZ1bmN0aW9uIHZmKGEpe2lmKG51bGw9PT1hKXJldHVybiBudWxsO2RvIGE9YS5yZXR1cm47d2hpbGUoYSYmNSE9PWEudGFnKTtyZXR1cm4gYT9hOm51bGx9XG5mdW5jdGlvbiB3ZihhLGIsYyxkLGUpe2Zvcih2YXIgZj1iLl9yZWFjdE5hbWUsZz1bXTtudWxsIT09YyYmYyE9PWQ7KXt2YXIgaD1jLGs9aC5hbHRlcm5hdGUsbD1oLnN0YXRlTm9kZTtpZihudWxsIT09ayYmaz09PWQpYnJlYWs7NT09PWgudGFnJiZudWxsIT09bCYmKGg9bCxlPyhrPUtiKGMsZiksbnVsbCE9ayYmZy51bnNoaWZ0KHRmKGMsayxoKSkpOmV8fChrPUtiKGMsZiksbnVsbCE9ayYmZy5wdXNoKHRmKGMsayxoKSkpKTtjPWMucmV0dXJufTAhPT1nLmxlbmd0aCYmYS5wdXNoKHtldmVudDpiLGxpc3RlbmVyczpnfSl9dmFyIHhmPS9cXHJcXG4/L2cseWY9L1xcdTAwMDB8XFx1RkZGRC9nO2Z1bmN0aW9uIHpmKGEpe3JldHVybihcInN0cmluZ1wiPT09dHlwZW9mIGE/YTpcIlwiK2EpLnJlcGxhY2UoeGYsXCJcXG5cIikucmVwbGFjZSh5ZixcIlwiKX1mdW5jdGlvbiBBZihhLGIsYyl7Yj16ZihiKTtpZih6ZihhKSE9PWImJmMpdGhyb3cgRXJyb3IocCg0MjUpKTt9ZnVuY3Rpb24gQmYoKXt9XG52YXIgQ2Y9bnVsbCxEZj1udWxsO2Z1bmN0aW9uIEVmKGEsYil7cmV0dXJuXCJ0ZXh0YXJlYVwiPT09YXx8XCJub3NjcmlwdFwiPT09YXx8XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm51bWJlclwiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9PWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sfVxudmFyIEZmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6dm9pZCAwLEdmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0OnZvaWQgMCxIZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgUHJvbWlzZT9Qcm9taXNlOnZvaWQgMCxKZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgcXVldWVNaWNyb3Rhc2s/cXVldWVNaWNyb3Rhc2s6XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBIZj9mdW5jdGlvbihhKXtyZXR1cm4gSGYucmVzb2x2ZShudWxsKS50aGVuKGEpLmNhdGNoKElmKX06RmY7ZnVuY3Rpb24gSWYoYSl7c2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGE7fSl9XG5mdW5jdGlvbiBLZihhLGIpe3ZhciBjPWIsZD0wO2Rve3ZhciBlPWMubmV4dFNpYmxpbmc7YS5yZW1vdmVDaGlsZChjKTtpZihlJiY4PT09ZS5ub2RlVHlwZSlpZihjPWUuZGF0YSxcIi8kXCI9PT1jKXtpZigwPT09ZCl7YS5yZW1vdmVDaGlsZChlKTtiZChiKTtyZXR1cm59ZC0tfWVsc2VcIiRcIiE9PWMmJlwiJD9cIiE9PWMmJlwiJCFcIiE9PWN8fGQrKztjPWV9d2hpbGUoYyk7YmQoYil9ZnVuY3Rpb24gTGYoYSl7Zm9yKDtudWxsIT1hO2E9YS5uZXh0U2libGluZyl7dmFyIGI9YS5ub2RlVHlwZTtpZigxPT09Ynx8Mz09PWIpYnJlYWs7aWYoOD09PWIpe2I9YS5kYXRhO2lmKFwiJFwiPT09Ynx8XCIkIVwiPT09Ynx8XCIkP1wiPT09YilicmVhaztpZihcIi8kXCI9PT1iKXJldHVybiBudWxsfX1yZXR1cm4gYX1cbmZ1bmN0aW9uIE1mKGEpe2E9YS5wcmV2aW91c1NpYmxpbmc7Zm9yKHZhciBiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoXCIkXCI9PT1jfHxcIiQhXCI9PT1jfHxcIiQ/XCI9PT1jKXtpZigwPT09YilyZXR1cm4gYTtiLS19ZWxzZVwiLyRcIj09PWMmJmIrK31hPWEucHJldmlvdXNTaWJsaW5nfXJldHVybiBudWxsfXZhciBOZj1NYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKSxPZj1cIl9fcmVhY3RGaWJlciRcIitOZixQZj1cIl9fcmVhY3RQcm9wcyRcIitOZix1Zj1cIl9fcmVhY3RDb250YWluZXIkXCIrTmYsb2Y9XCJfX3JlYWN0RXZlbnRzJFwiK05mLFFmPVwiX19yZWFjdExpc3RlbmVycyRcIitOZixSZj1cIl9fcmVhY3RIYW5kbGVzJFwiK05mO1xuZnVuY3Rpb24gV2MoYSl7dmFyIGI9YVtPZl07aWYoYilyZXR1cm4gYjtmb3IodmFyIGM9YS5wYXJlbnROb2RlO2M7KXtpZihiPWNbdWZdfHxjW09mXSl7Yz1iLmFsdGVybmF0ZTtpZihudWxsIT09Yi5jaGlsZHx8bnVsbCE9PWMmJm51bGwhPT1jLmNoaWxkKWZvcihhPU1mKGEpO251bGwhPT1hOyl7aWYoYz1hW09mXSlyZXR1cm4gYzthPU1mKGEpfXJldHVybiBifWE9YztjPWEucGFyZW50Tm9kZX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBDYihhKXthPWFbT2ZdfHxhW3VmXTtyZXR1cm4hYXx8NSE9PWEudGFnJiY2IT09YS50YWcmJjEzIT09YS50YWcmJjMhPT1hLnRhZz9udWxsOmF9ZnVuY3Rpb24gdWUoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGEuc3RhdGVOb2RlO3Rocm93IEVycm9yKHAoMzMpKTt9ZnVuY3Rpb24gRGIoYSl7cmV0dXJuIGFbUGZdfHxudWxsfXZhciBTZj1bXSxUZj0tMTtmdW5jdGlvbiBVZihhKXtyZXR1cm57Y3VycmVudDphfX1cbmZ1bmN0aW9uIEUoYSl7MD5UZnx8KGEuY3VycmVudD1TZltUZl0sU2ZbVGZdPW51bGwsVGYtLSl9ZnVuY3Rpb24gRyhhLGIpe1RmKys7U2ZbVGZdPWEuY3VycmVudDthLmN1cnJlbnQ9Yn12YXIgVmY9e30sSD1VZihWZiksV2Y9VWYoITEpLFhmPVZmO2Z1bmN0aW9uIFlmKGEsYil7dmFyIGM9YS50eXBlLmNvbnRleHRUeXBlcztpZighYylyZXR1cm4gVmY7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoZCYmZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PT09YilyZXR1cm4gZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDt2YXIgZT17fSxmO2ZvcihmIGluIGMpZVtmXT1iW2ZdO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1iLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9ZSk7cmV0dXJuIGV9XG5mdW5jdGlvbiBaZihhKXthPWEuY2hpbGRDb250ZXh0VHlwZXM7cmV0dXJuIG51bGwhPT1hJiZ2b2lkIDAhPT1hfWZ1bmN0aW9uICRmKCl7RShXZik7RShIKX1mdW5jdGlvbiBhZyhhLGIsYyl7aWYoSC5jdXJyZW50IT09VmYpdGhyb3cgRXJyb3IocCgxNjgpKTtHKEgsYik7RyhXZixjKX1mdW5jdGlvbiBiZyhhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7Yj1iLmNoaWxkQ29udGV4dFR5cGVzO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmdldENoaWxkQ29udGV4dClyZXR1cm4gYztkPWQuZ2V0Q2hpbGRDb250ZXh0KCk7Zm9yKHZhciBlIGluIGQpaWYoIShlIGluIGIpKXRocm93IEVycm9yKHAoMTA4LFJhKGEpfHxcIlVua25vd25cIixlKSk7cmV0dXJuIEEoe30sYyxkKX1cbmZ1bmN0aW9uIGNnKGEpe2E9KGE9YS5zdGF0ZU5vZGUpJiZhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0fHxWZjtYZj1ILmN1cnJlbnQ7RyhILGEpO0coV2YsV2YuY3VycmVudCk7cmV0dXJuITB9ZnVuY3Rpb24gZGcoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2lmKCFkKXRocm93IEVycm9yKHAoMTY5KSk7Yz8oYT1iZyhhLGIsWGYpLGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9YSxFKFdmKSxFKEgpLEcoSCxhKSk6RShXZik7RyhXZixjKX12YXIgZWc9bnVsbCxmZz0hMSxnZz0hMTtmdW5jdGlvbiBoZyhhKXtudWxsPT09ZWc/ZWc9W2FdOmVnLnB1c2goYSl9ZnVuY3Rpb24gaWcoYSl7Zmc9ITA7aGcoYSl9XG5mdW5jdGlvbiBqZygpe2lmKCFnZyYmbnVsbCE9PWVnKXtnZz0hMDt2YXIgYT0wLGI9Qzt0cnl7dmFyIGM9ZWc7Zm9yKEM9MTthPGMubGVuZ3RoO2ErKyl7dmFyIGQ9Y1thXTtkbyBkPWQoITApO3doaWxlKG51bGwhPT1kKX1lZz1udWxsO2ZnPSExfWNhdGNoKGUpe3Rocm93IG51bGwhPT1lZyYmKGVnPWVnLnNsaWNlKGErMSkpLGFjKGZjLGpnKSxlO31maW5hbGx5e0M9YixnZz0hMX19cmV0dXJuIG51bGx9dmFyIGtnPVtdLGxnPTAsbWc9bnVsbCxuZz0wLG9nPVtdLHBnPTAscWc9bnVsbCxyZz0xLHNnPVwiXCI7ZnVuY3Rpb24gdGcoYSxiKXtrZ1tsZysrXT1uZztrZ1tsZysrXT1tZzttZz1hO25nPWJ9XG5mdW5jdGlvbiB1ZyhhLGIsYyl7b2dbcGcrK109cmc7b2dbcGcrK109c2c7b2dbcGcrK109cWc7cWc9YTt2YXIgZD1yZzthPXNnO3ZhciBlPTMyLW9jKGQpLTE7ZCY9figxPDxlKTtjKz0xO3ZhciBmPTMyLW9jKGIpK2U7aWYoMzA8Zil7dmFyIGc9ZS1lJTU7Zj0oZCYoMTw8ZyktMSkudG9TdHJpbmcoMzIpO2Q+Pj1nO2UtPWc7cmc9MTw8MzItb2MoYikrZXxjPDxlfGQ7c2c9ZithfWVsc2Ugcmc9MTw8ZnxjPDxlfGQsc2c9YX1mdW5jdGlvbiB2ZyhhKXtudWxsIT09YS5yZXR1cm4mJih0ZyhhLDEpLHVnKGEsMSwwKSl9ZnVuY3Rpb24gd2coYSl7Zm9yKDthPT09bWc7KW1nPWtnWy0tbGddLGtnW2xnXT1udWxsLG5nPWtnWy0tbGddLGtnW2xnXT1udWxsO2Zvcig7YT09PXFnOylxZz1vZ1stLXBnXSxvZ1twZ109bnVsbCxzZz1vZ1stLXBnXSxvZ1twZ109bnVsbCxyZz1vZ1stLXBnXSxvZ1twZ109bnVsbH12YXIgeGc9bnVsbCx5Zz1udWxsLEk9ITEsemc9bnVsbDtcbmZ1bmN0aW9uIEFnKGEsYil7dmFyIGM9QmcoNSxudWxsLG51bGwsMCk7Yy5lbGVtZW50VHlwZT1cIkRFTEVURURcIjtjLnN0YXRlTm9kZT1iO2MucmV0dXJuPWE7Yj1hLmRlbGV0aW9ucztudWxsPT09Yj8oYS5kZWxldGlvbnM9W2NdLGEuZmxhZ3N8PTE2KTpiLnB1c2goYyl9XG5mdW5jdGlvbiBDZyhhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnZhciBjPWEudHlwZTtiPTEhPT1iLm5vZGVUeXBlfHxjLnRvTG93ZXJDYXNlKCkhPT1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/bnVsbDpiO3JldHVybiBudWxsIT09Yj8oYS5zdGF0ZU5vZGU9Yix4Zz1hLHlnPUxmKGIuZmlyc3RDaGlsZCksITApOiExO2Nhc2UgNjpyZXR1cm4gYj1cIlwiPT09YS5wZW5kaW5nUHJvcHN8fDMhPT1iLm5vZGVUeXBlP251bGw6YixudWxsIT09Yj8oYS5zdGF0ZU5vZGU9Yix4Zz1hLHlnPW51bGwsITApOiExO2Nhc2UgMTM6cmV0dXJuIGI9OCE9PWIubm9kZVR5cGU/bnVsbDpiLG51bGwhPT1iPyhjPW51bGwhPT1xZz97aWQ6cmcsb3ZlcmZsb3c6c2d9Om51bGwsYS5tZW1vaXplZFN0YXRlPXtkZWh5ZHJhdGVkOmIsdHJlZUNvbnRleHQ6YyxyZXRyeUxhbmU6MTA3Mzc0MTgyNH0sYz1CZygxOCxudWxsLG51bGwsMCksYy5zdGF0ZU5vZGU9YixjLnJldHVybj1hLGEuY2hpbGQ9Yyx4Zz1hLHlnPVxubnVsbCwhMCk6ITE7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gRGcoYSl7cmV0dXJuIDAhPT0oYS5tb2RlJjEpJiYwPT09KGEuZmxhZ3MmMTI4KX1mdW5jdGlvbiBFZyhhKXtpZihJKXt2YXIgYj15ZztpZihiKXt2YXIgYz1iO2lmKCFDZyhhLGIpKXtpZihEZyhhKSl0aHJvdyBFcnJvcihwKDQxOCkpO2I9TGYoYy5uZXh0U2libGluZyk7dmFyIGQ9eGc7YiYmQ2coYSxiKT9BZyhkLGMpOihhLmZsYWdzPWEuZmxhZ3MmLTQwOTd8MixJPSExLHhnPWEpfX1lbHNle2lmKERnKGEpKXRocm93IEVycm9yKHAoNDE4KSk7YS5mbGFncz1hLmZsYWdzJi00MDk3fDI7ST0hMTt4Zz1hfX19ZnVuY3Rpb24gRmcoYSl7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWEmJjUhPT1hLnRhZyYmMyE9PWEudGFnJiYxMyE9PWEudGFnOylhPWEucmV0dXJuO3hnPWF9XG5mdW5jdGlvbiBHZyhhKXtpZihhIT09eGcpcmV0dXJuITE7aWYoIUkpcmV0dXJuIEZnKGEpLEk9ITAsITE7dmFyIGI7KGI9MyE9PWEudGFnKSYmIShiPTUhPT1hLnRhZykmJihiPWEudHlwZSxiPVwiaGVhZFwiIT09YiYmXCJib2R5XCIhPT1iJiYhRWYoYS50eXBlLGEubWVtb2l6ZWRQcm9wcykpO2lmKGImJihiPXlnKSl7aWYoRGcoYSkpdGhyb3cgSGcoKSxFcnJvcihwKDQxOCkpO2Zvcig7YjspQWcoYSxiKSxiPUxmKGIubmV4dFNpYmxpbmcpfUZnKGEpO2lmKDEzPT09YS50YWcpe2E9YS5tZW1vaXplZFN0YXRlO2E9bnVsbCE9PWE/YS5kZWh5ZHJhdGVkOm51bGw7aWYoIWEpdGhyb3cgRXJyb3IocCgzMTcpKTthOnthPWEubmV4dFNpYmxpbmc7Zm9yKGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihcIi8kXCI9PT1jKXtpZigwPT09Yil7eWc9TGYoYS5uZXh0U2libGluZyk7YnJlYWsgYX1iLS19ZWxzZVwiJFwiIT09YyYmXCIkIVwiIT09YyYmXCIkP1wiIT09Y3x8YisrfWE9YS5uZXh0U2libGluZ315Zz1cbm51bGx9fWVsc2UgeWc9eGc/TGYoYS5zdGF0ZU5vZGUubmV4dFNpYmxpbmcpOm51bGw7cmV0dXJuITB9ZnVuY3Rpb24gSGcoKXtmb3IodmFyIGE9eWc7YTspYT1MZihhLm5leHRTaWJsaW5nKX1mdW5jdGlvbiBJZygpe3lnPXhnPW51bGw7ST0hMX1mdW5jdGlvbiBKZyhhKXtudWxsPT09emc/emc9W2FdOnpnLnB1c2goYSl9dmFyIEtnPXVhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnO2Z1bmN0aW9uIExnKGEsYil7aWYoYSYmYS5kZWZhdWx0UHJvcHMpe2I9QSh7fSxiKTthPWEuZGVmYXVsdFByb3BzO2Zvcih2YXIgYyBpbiBhKXZvaWQgMD09PWJbY10mJihiW2NdPWFbY10pO3JldHVybiBifXJldHVybiBifXZhciBNZz1VZihudWxsKSxOZz1udWxsLE9nPW51bGwsUGc9bnVsbDtmdW5jdGlvbiBRZygpe1BnPU9nPU5nPW51bGx9ZnVuY3Rpb24gUmcoYSl7dmFyIGI9TWcuY3VycmVudDtFKE1nKTthLl9jdXJyZW50VmFsdWU9Yn1cbmZ1bmN0aW9uIFNnKGEsYixjKXtmb3IoO251bGwhPT1hOyl7dmFyIGQ9YS5hbHRlcm5hdGU7KGEuY2hpbGRMYW5lcyZiKSE9PWI/KGEuY2hpbGRMYW5lc3w9YixudWxsIT09ZCYmKGQuY2hpbGRMYW5lc3w9YikpOm51bGwhPT1kJiYoZC5jaGlsZExhbmVzJmIpIT09YiYmKGQuY2hpbGRMYW5lc3w9Yik7aWYoYT09PWMpYnJlYWs7YT1hLnJldHVybn19ZnVuY3Rpb24gVGcoYSxiKXtOZz1hO1BnPU9nPW51bGw7YT1hLmRlcGVuZGVuY2llcztudWxsIT09YSYmbnVsbCE9PWEuZmlyc3RDb250ZXh0JiYoMCE9PShhLmxhbmVzJmIpJiYoVWc9ITApLGEuZmlyc3RDb250ZXh0PW51bGwpfVxuZnVuY3Rpb24gVmcoYSl7dmFyIGI9YS5fY3VycmVudFZhbHVlO2lmKFBnIT09YSlpZihhPXtjb250ZXh0OmEsbWVtb2l6ZWRWYWx1ZTpiLG5leHQ6bnVsbH0sbnVsbD09PU9nKXtpZihudWxsPT09TmcpdGhyb3cgRXJyb3IocCgzMDgpKTtPZz1hO05nLmRlcGVuZGVuY2llcz17bGFuZXM6MCxmaXJzdENvbnRleHQ6YX19ZWxzZSBPZz1PZy5uZXh0PWE7cmV0dXJuIGJ9dmFyIFdnPW51bGw7ZnVuY3Rpb24gWGcoYSl7bnVsbD09PVdnP1dnPVthXTpXZy5wdXNoKGEpfWZ1bmN0aW9uIFlnKGEsYixjLGQpe3ZhciBlPWIuaW50ZXJsZWF2ZWQ7bnVsbD09PWU/KGMubmV4dD1jLFhnKGIpKTooYy5uZXh0PWUubmV4dCxlLm5leHQ9Yyk7Yi5pbnRlcmxlYXZlZD1jO3JldHVybiBaZyhhLGQpfVxuZnVuY3Rpb24gWmcoYSxiKXthLmxhbmVzfD1iO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiYoYy5sYW5lc3w9Yik7Yz1hO2ZvcihhPWEucmV0dXJuO251bGwhPT1hOylhLmNoaWxkTGFuZXN8PWIsYz1hLmFsdGVybmF0ZSxudWxsIT09YyYmKGMuY2hpbGRMYW5lc3w9YiksYz1hLGE9YS5yZXR1cm47cmV0dXJuIDM9PT1jLnRhZz9jLnN0YXRlTm9kZTpudWxsfXZhciAkZz0hMTtmdW5jdGlvbiBhaChhKXthLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5tZW1vaXplZFN0YXRlLGZpcnN0QmFzZVVwZGF0ZTpudWxsLGxhc3RCYXNlVXBkYXRlOm51bGwsc2hhcmVkOntwZW5kaW5nOm51bGwsaW50ZXJsZWF2ZWQ6bnVsbCxsYW5lczowfSxlZmZlY3RzOm51bGx9fVxuZnVuY3Rpb24gYmgoYSxiKXthPWEudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT09PWEmJihiLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5iYXNlU3RhdGUsZmlyc3RCYXNlVXBkYXRlOmEuZmlyc3RCYXNlVXBkYXRlLGxhc3RCYXNlVXBkYXRlOmEubGFzdEJhc2VVcGRhdGUsc2hhcmVkOmEuc2hhcmVkLGVmZmVjdHM6YS5lZmZlY3RzfSl9ZnVuY3Rpb24gY2goYSxiKXtyZXR1cm57ZXZlbnRUaW1lOmEsbGFuZTpiLHRhZzowLHBheWxvYWQ6bnVsbCxjYWxsYmFjazpudWxsLG5leHQ6bnVsbH19XG5mdW5jdGlvbiBkaChhLGIsYyl7dmFyIGQ9YS51cGRhdGVRdWV1ZTtpZihudWxsPT09ZClyZXR1cm4gbnVsbDtkPWQuc2hhcmVkO2lmKDAhPT0oSyYyKSl7dmFyIGU9ZC5wZW5kaW5nO251bGw9PT1lP2IubmV4dD1iOihiLm5leHQ9ZS5uZXh0LGUubmV4dD1iKTtkLnBlbmRpbmc9YjtyZXR1cm4gWmcoYSxjKX1lPWQuaW50ZXJsZWF2ZWQ7bnVsbD09PWU/KGIubmV4dD1iLFhnKGQpKTooYi5uZXh0PWUubmV4dCxlLm5leHQ9Yik7ZC5pbnRlcmxlYXZlZD1iO3JldHVybiBaZyhhLGMpfWZ1bmN0aW9uIGVoKGEsYixjKXtiPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWImJihiPWIuc2hhcmVkLDAhPT0oYyY0MTk0MjQwKSkpe3ZhciBkPWIubGFuZXM7ZCY9YS5wZW5kaW5nTGFuZXM7Y3w9ZDtiLmxhbmVzPWM7Q2MoYSxjKX19XG5mdW5jdGlvbiBmaChhLGIpe3ZhciBjPWEudXBkYXRlUXVldWUsZD1hLmFsdGVybmF0ZTtpZihudWxsIT09ZCYmKGQ9ZC51cGRhdGVRdWV1ZSxjPT09ZCkpe3ZhciBlPW51bGwsZj1udWxsO2M9Yy5maXJzdEJhc2VVcGRhdGU7aWYobnVsbCE9PWMpe2Rve3ZhciBnPXtldmVudFRpbWU6Yy5ldmVudFRpbWUsbGFuZTpjLmxhbmUsdGFnOmMudGFnLHBheWxvYWQ6Yy5wYXlsb2FkLGNhbGxiYWNrOmMuY2FsbGJhY2ssbmV4dDpudWxsfTtudWxsPT09Zj9lPWY9ZzpmPWYubmV4dD1nO2M9Yy5uZXh0fXdoaWxlKG51bGwhPT1jKTtudWxsPT09Zj9lPWY9YjpmPWYubmV4dD1ifWVsc2UgZT1mPWI7Yz17YmFzZVN0YXRlOmQuYmFzZVN0YXRlLGZpcnN0QmFzZVVwZGF0ZTplLGxhc3RCYXNlVXBkYXRlOmYsc2hhcmVkOmQuc2hhcmVkLGVmZmVjdHM6ZC5lZmZlY3RzfTthLnVwZGF0ZVF1ZXVlPWM7cmV0dXJufWE9Yy5sYXN0QmFzZVVwZGF0ZTtudWxsPT09YT9jLmZpcnN0QmFzZVVwZGF0ZT1iOmEubmV4dD1cbmI7Yy5sYXN0QmFzZVVwZGF0ZT1ifVxuZnVuY3Rpb24gZ2goYSxiLGMsZCl7dmFyIGU9YS51cGRhdGVRdWV1ZTskZz0hMTt2YXIgZj1lLmZpcnN0QmFzZVVwZGF0ZSxnPWUubGFzdEJhc2VVcGRhdGUsaD1lLnNoYXJlZC5wZW5kaW5nO2lmKG51bGwhPT1oKXtlLnNoYXJlZC5wZW5kaW5nPW51bGw7dmFyIGs9aCxsPWsubmV4dDtrLm5leHQ9bnVsbDtudWxsPT09Zz9mPWw6Zy5uZXh0PWw7Zz1rO3ZhciBtPWEuYWx0ZXJuYXRlO251bGwhPT1tJiYobT1tLnVwZGF0ZVF1ZXVlLGg9bS5sYXN0QmFzZVVwZGF0ZSxoIT09ZyYmKG51bGw9PT1oP20uZmlyc3RCYXNlVXBkYXRlPWw6aC5uZXh0PWwsbS5sYXN0QmFzZVVwZGF0ZT1rKSl9aWYobnVsbCE9PWYpe3ZhciBxPWUuYmFzZVN0YXRlO2c9MDttPWw9az1udWxsO2g9Zjtkb3t2YXIgcj1oLmxhbmUseT1oLmV2ZW50VGltZTtpZigoZCZyKT09PXIpe251bGwhPT1tJiYobT1tLm5leHQ9e2V2ZW50VGltZTp5LGxhbmU6MCx0YWc6aC50YWcscGF5bG9hZDpoLnBheWxvYWQsY2FsbGJhY2s6aC5jYWxsYmFjayxcbm5leHQ6bnVsbH0pO2E6e3ZhciBuPWEsdD1oO3I9Yjt5PWM7c3dpdGNoKHQudGFnKXtjYXNlIDE6bj10LnBheWxvYWQ7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIG4pe3E9bi5jYWxsKHkscSxyKTticmVhayBhfXE9bjticmVhayBhO2Nhc2UgMzpuLmZsYWdzPW4uZmxhZ3MmLTY1NTM3fDEyODtjYXNlIDA6bj10LnBheWxvYWQ7cj1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygbj9uLmNhbGwoeSxxLHIpOm47aWYobnVsbD09PXJ8fHZvaWQgMD09PXIpYnJlYWsgYTtxPUEoe30scSxyKTticmVhayBhO2Nhc2UgMjokZz0hMH19bnVsbCE9PWguY2FsbGJhY2smJjAhPT1oLmxhbmUmJihhLmZsYWdzfD02NCxyPWUuZWZmZWN0cyxudWxsPT09cj9lLmVmZmVjdHM9W2hdOnIucHVzaChoKSl9ZWxzZSB5PXtldmVudFRpbWU6eSxsYW5lOnIsdGFnOmgudGFnLHBheWxvYWQ6aC5wYXlsb2FkLGNhbGxiYWNrOmguY2FsbGJhY2ssbmV4dDpudWxsfSxudWxsPT09bT8obD1tPXksaz1xKTptPW0ubmV4dD15LGd8PXI7XG5oPWgubmV4dDtpZihudWxsPT09aClpZihoPWUuc2hhcmVkLnBlbmRpbmcsbnVsbD09PWgpYnJlYWs7ZWxzZSByPWgsaD1yLm5leHQsci5uZXh0PW51bGwsZS5sYXN0QmFzZVVwZGF0ZT1yLGUuc2hhcmVkLnBlbmRpbmc9bnVsbH13aGlsZSgxKTtudWxsPT09bSYmKGs9cSk7ZS5iYXNlU3RhdGU9aztlLmZpcnN0QmFzZVVwZGF0ZT1sO2UubGFzdEJhc2VVcGRhdGU9bTtiPWUuc2hhcmVkLmludGVybGVhdmVkO2lmKG51bGwhPT1iKXtlPWI7ZG8gZ3w9ZS5sYW5lLGU9ZS5uZXh0O3doaWxlKGUhPT1iKX1lbHNlIG51bGw9PT1mJiYoZS5zaGFyZWQubGFuZXM9MCk7aGh8PWc7YS5sYW5lcz1nO2EubWVtb2l6ZWRTdGF0ZT1xfX1cbmZ1bmN0aW9uIGloKGEsYixjKXthPWIuZWZmZWN0cztiLmVmZmVjdHM9bnVsbDtpZihudWxsIT09YSlmb3IoYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgZD1hW2JdLGU9ZC5jYWxsYmFjaztpZihudWxsIT09ZSl7ZC5jYWxsYmFjaz1udWxsO2Q9YztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZSl0aHJvdyBFcnJvcihwKDE5MSxlKSk7ZS5jYWxsKGQpfX19dmFyIGpoPShuZXcgYWEuQ29tcG9uZW50KS5yZWZzO2Z1bmN0aW9uIGtoKGEsYixjLGQpe2I9YS5tZW1vaXplZFN0YXRlO2M9YyhkLGIpO2M9bnVsbD09PWN8fHZvaWQgMD09PWM/YjpBKHt9LGIsYyk7YS5tZW1vaXplZFN0YXRlPWM7MD09PWEubGFuZXMmJihhLnVwZGF0ZVF1ZXVlLmJhc2VTdGF0ZT1jKX1cbnZhciBuaD17aXNNb3VudGVkOmZ1bmN0aW9uKGEpe3JldHVybihhPWEuX3JlYWN0SW50ZXJuYWxzKT9WYihhKT09PWE6ITF9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsczt2YXIgZD1MKCksZT1saChhKSxmPWNoKGQsZSk7Zi5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihmLmNhbGxiYWNrPWMpO2I9ZGgoYSxmLGUpO251bGwhPT1iJiYobWgoYixhLGUsZCksZWgoYixhLGUpKX0sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsczt2YXIgZD1MKCksZT1saChhKSxmPWNoKGQsZSk7Zi50YWc9MTtmLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGYuY2FsbGJhY2s9Yyk7Yj1kaChhLGYsZSk7bnVsbCE9PWImJihtaChiLGEsZSxkKSxlaChiLGEsZSkpfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oYSxiKXthPWEuX3JlYWN0SW50ZXJuYWxzO3ZhciBjPUwoKSxkPVxubGgoYSksZT1jaChjLGQpO2UudGFnPTI7dm9pZCAwIT09YiYmbnVsbCE9PWImJihlLmNhbGxiYWNrPWIpO2I9ZGgoYSxlLGQpO251bGwhPT1iJiYobWgoYixhLGQsYyksZWgoYixhLGQpKX19O2Z1bmN0aW9uIG9oKGEsYixjLGQsZSxmLGcpe2E9YS5zdGF0ZU5vZGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuc2hvdWxkQ29tcG9uZW50VXBkYXRlP2Euc2hvdWxkQ29tcG9uZW50VXBkYXRlKGQsZixnKTpiLnByb3RvdHlwZSYmYi5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQ/IUllKGMsZCl8fCFJZShlLGYpOiEwfVxuZnVuY3Rpb24gcGgoYSxiLGMpe3ZhciBkPSExLGU9VmY7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2Y9VmcoZik6KGU9WmYoYik/WGY6SC5jdXJyZW50LGQ9Yi5jb250ZXh0VHlwZXMsZj0oZD1udWxsIT09ZCYmdm9pZCAwIT09ZCk/WWYoYSxlKTpWZik7Yj1uZXcgYihjLGYpO2EubWVtb2l6ZWRTdGF0ZT1udWxsIT09Yi5zdGF0ZSYmdm9pZCAwIT09Yi5zdGF0ZT9iLnN0YXRlOm51bGw7Yi51cGRhdGVyPW5oO2Euc3RhdGVOb2RlPWI7Yi5fcmVhY3RJbnRlcm5hbHM9YTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9ZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWYpO3JldHVybiBifVxuZnVuY3Rpb24gcWgoYSxiLGMsZCl7YT1iLnN0YXRlO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7Yi5zdGF0ZSE9PWEmJm5oLmVucXVldWVSZXBsYWNlU3RhdGUoYixiLnN0YXRlLG51bGwpfVxuZnVuY3Rpb24gcmgoYSxiLGMsZCl7dmFyIGU9YS5zdGF0ZU5vZGU7ZS5wcm9wcz1jO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2UucmVmcz1qaDthaChhKTt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/ZS5jb250ZXh0PVZnKGYpOihmPVpmKGIpP1hmOkguY3VycmVudCxlLmNvbnRleHQ9WWYoYSxmKSk7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7Zj1iLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmKGtoKGEsYixmLGMpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnR8fChiPWUuc3RhdGUsXG5cImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnQmJmUuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCksYiE9PWUuc3RhdGUmJm5oLmVucXVldWVSZXBsYWNlU3RhdGUoZSxlLnN0YXRlLG51bGwpLGdoKGEsYyxlLGQpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnREaWRNb3VudCYmKGEuZmxhZ3N8PTQxOTQzMDgpfVxuZnVuY3Rpb24gc2goYSxiLGMpe2E9Yy5yZWY7aWYobnVsbCE9PWEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZcIm9iamVjdFwiIT09dHlwZW9mIGEpe2lmKGMuX293bmVyKXtjPWMuX293bmVyO2lmKGMpe2lmKDEhPT1jLnRhZyl0aHJvdyBFcnJvcihwKDMwOSkpO3ZhciBkPWMuc3RhdGVOb2RlfWlmKCFkKXRocm93IEVycm9yKHAoMTQ3LGEpKTt2YXIgZT1kLGY9XCJcIithO2lmKG51bGwhPT1iJiZudWxsIT09Yi5yZWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnJlZiYmYi5yZWYuX3N0cmluZ1JlZj09PWYpcmV0dXJuIGIucmVmO2I9ZnVuY3Rpb24oYSl7dmFyIGI9ZS5yZWZzO2I9PT1qaCYmKGI9ZS5yZWZzPXt9KTtudWxsPT09YT9kZWxldGUgYltmXTpiW2ZdPWF9O2IuX3N0cmluZ1JlZj1mO3JldHVybiBifWlmKFwic3RyaW5nXCIhPT10eXBlb2YgYSl0aHJvdyBFcnJvcihwKDI4NCkpO2lmKCFjLl9vd25lcil0aHJvdyBFcnJvcihwKDI5MCxhKSk7fXJldHVybiBhfVxuZnVuY3Rpb24gdGgoYSxiKXthPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKTt0aHJvdyBFcnJvcihwKDMxLFwiW29iamVjdCBPYmplY3RdXCI9PT1hP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmEpKTt9ZnVuY3Rpb24gdWgoYSl7dmFyIGI9YS5faW5pdDtyZXR1cm4gYihhLl9wYXlsb2FkKX1cbmZ1bmN0aW9uIHZoKGEpe2Z1bmN0aW9uIGIoYixjKXtpZihhKXt2YXIgZD1iLmRlbGV0aW9ucztudWxsPT09ZD8oYi5kZWxldGlvbnM9W2NdLGIuZmxhZ3N8PTE2KTpkLnB1c2goYyl9fWZ1bmN0aW9uIGMoYyxkKXtpZighYSlyZXR1cm4gbnVsbDtmb3IoO251bGwhPT1kOyliKGMsZCksZD1kLnNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhLGIpe2ZvcihhPW5ldyBNYXA7bnVsbCE9PWI7KW51bGwhPT1iLmtleT9hLnNldChiLmtleSxiKTphLnNldChiLmluZGV4LGIpLGI9Yi5zaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGUoYSxiKXthPXdoKGEsYik7YS5pbmRleD0wO2Euc2libGluZz1udWxsO3JldHVybiBhfWZ1bmN0aW9uIGYoYixjLGQpe2IuaW5kZXg9ZDtpZighYSlyZXR1cm4gYi5mbGFnc3w9MTA0ODU3NixjO2Q9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWQpcmV0dXJuIGQ9ZC5pbmRleCxkPGM/KGIuZmxhZ3N8PTIsYyk6ZDtiLmZsYWdzfD0yO3JldHVybiBjfWZ1bmN0aW9uIGcoYil7YSYmXG5udWxsPT09Yi5hbHRlcm5hdGUmJihiLmZsYWdzfD0yKTtyZXR1cm4gYn1mdW5jdGlvbiBoKGEsYixjLGQpe2lmKG51bGw9PT1ifHw2IT09Yi50YWcpcmV0dXJuIGI9eGgoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gayhhLGIsYyxkKXt2YXIgZj1jLnR5cGU7aWYoZj09PXlhKXJldHVybiBtKGEsYixjLnByb3BzLmNoaWxkcmVuLGQsYy5rZXkpO2lmKG51bGwhPT1iJiYoYi5lbGVtZW50VHlwZT09PWZ8fFwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYuJCR0eXBlb2Y9PT1IYSYmdWgoZik9PT1iLnR5cGUpKXJldHVybiBkPWUoYixjLnByb3BzKSxkLnJlZj1zaChhLGIsYyksZC5yZXR1cm49YSxkO2Q9eWgoYy50eXBlLGMua2V5LGMucHJvcHMsbnVsbCxhLm1vZGUsZCk7ZC5yZWY9c2goYSxiLGMpO2QucmV0dXJuPWE7cmV0dXJuIGR9ZnVuY3Rpb24gbChhLGIsYyxkKXtpZihudWxsPT09Ynx8NCE9PWIudGFnfHxcbmIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8hPT1jLmNvbnRhaW5lckluZm98fGIuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uIT09Yy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj16aChjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYy5jaGlsZHJlbnx8W10pO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gbShhLGIsYyxkLGYpe2lmKG51bGw9PT1ifHw3IT09Yi50YWcpcmV0dXJuIGI9QWgoYyxhLm1vZGUsZCxmKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBxKGEsYixjKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGImJlwiXCIhPT1ifHxcIm51bWJlclwiPT09dHlwZW9mIGIpcmV0dXJuIGI9eGgoXCJcIitiLGEubW9kZSxjKSxiLnJldHVybj1hLGI7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09Yil7c3dpdGNoKGIuJCR0eXBlb2Ype2Nhc2UgdmE6cmV0dXJuIGM9eWgoYi50eXBlLGIua2V5LGIucHJvcHMsbnVsbCxhLm1vZGUsYyksXG5jLnJlZj1zaChhLG51bGwsYiksYy5yZXR1cm49YSxjO2Nhc2Ugd2E6cmV0dXJuIGI9emgoYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2Nhc2UgSGE6dmFyIGQ9Yi5faW5pdDtyZXR1cm4gcShhLGQoYi5fcGF5bG9hZCksYyl9aWYoZWIoYil8fEthKGIpKXJldHVybiBiPUFoKGIsYS5tb2RlLGMsbnVsbCksYi5yZXR1cm49YSxiO3RoKGEsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24gcihhLGIsYyxkKXt2YXIgZT1udWxsIT09Yj9iLmtleTpudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYyYmXCJcIiE9PWN8fFwibnVtYmVyXCI9PT10eXBlb2YgYylyZXR1cm4gbnVsbCE9PWU/bnVsbDpoKGEsYixcIlwiK2MsZCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7c3dpdGNoKGMuJCR0eXBlb2Ype2Nhc2UgdmE6cmV0dXJuIGMua2V5PT09ZT9rKGEsYixjLGQpOm51bGw7Y2FzZSB3YTpyZXR1cm4gYy5rZXk9PT1lP2woYSxiLGMsZCk6bnVsbDtjYXNlIEhhOnJldHVybiBlPWMuX2luaXQscihhLFxuYixlKGMuX3BheWxvYWQpLGQpfWlmKGViKGMpfHxLYShjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDptKGEsYixjLGQsbnVsbCk7dGgoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB5KGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkJiZcIlwiIT09ZHx8XCJudW1iZXJcIj09PXR5cGVvZiBkKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLGgoYixhLFwiXCIrZCxlKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXtzd2l0Y2goZC4kJHR5cGVvZil7Y2FzZSB2YTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsayhiLGEsZCxlKTtjYXNlIHdhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxsKGIsYSxkLGUpO2Nhc2UgSGE6dmFyIGY9ZC5faW5pdDtyZXR1cm4geShhLGIsYyxmKGQuX3BheWxvYWQpLGUpfWlmKGViKGQpfHxLYShkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxtKGIsYSxkLGUsbnVsbCk7dGgoYixkKX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIG4oZSxnLGgsayl7Zm9yKHZhciBsPW51bGwsbT1udWxsLHU9Zyx3PWc9MCx4PW51bGw7bnVsbCE9PXUmJnc8aC5sZW5ndGg7dysrKXt1LmluZGV4Pnc/KHg9dSx1PW51bGwpOng9dS5zaWJsaW5nO3ZhciBuPXIoZSx1LGhbd10sayk7aWYobnVsbD09PW4pe251bGw9PT11JiYodT14KTticmVha31hJiZ1JiZudWxsPT09bi5hbHRlcm5hdGUmJmIoZSx1KTtnPWYobixnLHcpO251bGw9PT1tP2w9bjptLnNpYmxpbmc9bjttPW47dT14fWlmKHc9PT1oLmxlbmd0aClyZXR1cm4gYyhlLHUpLEkmJnRnKGUsdyksbDtpZihudWxsPT09dSl7Zm9yKDt3PGgubGVuZ3RoO3crKyl1PXEoZSxoW3ddLGspLG51bGwhPT11JiYoZz1mKHUsZyx3KSxudWxsPT09bT9sPXU6bS5zaWJsaW5nPXUsbT11KTtJJiZ0ZyhlLHcpO3JldHVybiBsfWZvcih1PWQoZSx1KTt3PGgubGVuZ3RoO3crKyl4PXkodSxlLHcsaFt3XSxrKSxudWxsIT09eCYmKGEmJm51bGwhPT14LmFsdGVybmF0ZSYmdS5kZWxldGUobnVsbD09PVxueC5rZXk/dzp4LmtleSksZz1mKHgsZyx3KSxudWxsPT09bT9sPXg6bS5zaWJsaW5nPXgsbT14KTthJiZ1LmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO0kmJnRnKGUsdyk7cmV0dXJuIGx9ZnVuY3Rpb24gdChlLGcsaCxrKXt2YXIgbD1LYShoKTtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgbCl0aHJvdyBFcnJvcihwKDE1MCkpO2g9bC5jYWxsKGgpO2lmKG51bGw9PWgpdGhyb3cgRXJyb3IocCgxNTEpKTtmb3IodmFyIHU9bD1udWxsLG09Zyx3PWc9MCx4PW51bGwsbj1oLm5leHQoKTtudWxsIT09bSYmIW4uZG9uZTt3Kyssbj1oLm5leHQoKSl7bS5pbmRleD53Pyh4PW0sbT1udWxsKTp4PW0uc2libGluZzt2YXIgdD1yKGUsbSxuLnZhbHVlLGspO2lmKG51bGw9PT10KXtudWxsPT09bSYmKG09eCk7YnJlYWt9YSYmbSYmbnVsbD09PXQuYWx0ZXJuYXRlJiZiKGUsbSk7Zz1mKHQsZyx3KTtudWxsPT09dT9sPXQ6dS5zaWJsaW5nPXQ7dT10O209eH1pZihuLmRvbmUpcmV0dXJuIGMoZSxcbm0pLEkmJnRnKGUsdyksbDtpZihudWxsPT09bSl7Zm9yKDshbi5kb25lO3crKyxuPWgubmV4dCgpKW49cShlLG4udmFsdWUsayksbnVsbCE9PW4mJihnPWYobixnLHcpLG51bGw9PT11P2w9bjp1LnNpYmxpbmc9bix1PW4pO0kmJnRnKGUsdyk7cmV0dXJuIGx9Zm9yKG09ZChlLG0pOyFuLmRvbmU7dysrLG49aC5uZXh0KCkpbj15KG0sZSx3LG4udmFsdWUsayksbnVsbCE9PW4mJihhJiZudWxsIT09bi5hbHRlcm5hdGUmJm0uZGVsZXRlKG51bGw9PT1uLmtleT93Om4ua2V5KSxnPWYobixnLHcpLG51bGw9PT11P2w9bjp1LnNpYmxpbmc9bix1PW4pO2EmJm0uZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7SSYmdGcoZSx3KTtyZXR1cm4gbH1mdW5jdGlvbiBKKGEsZCxmLGgpe1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYudHlwZT09PXlhJiZudWxsPT09Zi5rZXkmJihmPWYucHJvcHMuY2hpbGRyZW4pO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYpe3N3aXRjaChmLiQkdHlwZW9mKXtjYXNlIHZhOmE6e2Zvcih2YXIgaz1cbmYua2V5LGw9ZDtudWxsIT09bDspe2lmKGwua2V5PT09ayl7az1mLnR5cGU7aWYoaz09PXlhKXtpZig3PT09bC50YWcpe2MoYSxsLnNpYmxpbmcpO2Q9ZShsLGYucHJvcHMuY2hpbGRyZW4pO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9fWVsc2UgaWYobC5lbGVtZW50VHlwZT09PWt8fFwib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWsmJmsuJCR0eXBlb2Y9PT1IYSYmdWgoayk9PT1sLnR5cGUpe2MoYSxsLnNpYmxpbmcpO2Q9ZShsLGYucHJvcHMpO2QucmVmPXNoKGEsbCxmKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWMoYSxsKTticmVha31lbHNlIGIoYSxsKTtsPWwuc2libGluZ31mLnR5cGU9PT15YT8oZD1BaChmLnByb3BzLmNoaWxkcmVuLGEubW9kZSxoLGYua2V5KSxkLnJldHVybj1hLGE9ZCk6KGg9eWgoZi50eXBlLGYua2V5LGYucHJvcHMsbnVsbCxhLm1vZGUsaCksaC5yZWY9c2goYSxkLGYpLGgucmV0dXJuPWEsYT1oKX1yZXR1cm4gZyhhKTtjYXNlIHdhOmE6e2ZvcihsPWYua2V5O251bGwhPT1cbmQ7KXtpZihkLmtleT09PWwpaWYoND09PWQudGFnJiZkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvPT09Zi5jb250YWluZXJJbmZvJiZkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbj09PWYuaW1wbGVtZW50YXRpb24pe2MoYSxkLnNpYmxpbmcpO2Q9ZShkLGYuY2hpbGRyZW58fFtdKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGQpO2JyZWFrfWVsc2UgYihhLGQpO2Q9ZC5zaWJsaW5nfWQ9emgoZixhLm1vZGUsaCk7ZC5yZXR1cm49YTthPWR9cmV0dXJuIGcoYSk7Y2FzZSBIYTpyZXR1cm4gbD1mLl9pbml0LEooYSxkLGwoZi5fcGF5bG9hZCksaCl9aWYoZWIoZikpcmV0dXJuIG4oYSxkLGYsaCk7aWYoS2EoZikpcmV0dXJuIHQoYSxkLGYsaCk7dGgoYSxmKX1yZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGYmJlwiXCIhPT1mfHxcIm51bWJlclwiPT09dHlwZW9mIGY/KGY9XCJcIitmLG51bGwhPT1kJiY2PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYpLGQucmV0dXJuPWEsYT1kKTpcbihjKGEsZCksZD14aChmLGEubW9kZSxoKSxkLnJldHVybj1hLGE9ZCksZyhhKSk6YyhhLGQpfXJldHVybiBKfXZhciBCaD12aCghMCksQ2g9dmgoITEpLERoPXt9LEVoPVVmKERoKSxGaD1VZihEaCksR2g9VWYoRGgpO2Z1bmN0aW9uIEhoKGEpe2lmKGE9PT1EaCl0aHJvdyBFcnJvcihwKDE3NCkpO3JldHVybiBhfWZ1bmN0aW9uIEloKGEsYil7RyhHaCxiKTtHKEZoLGEpO0coRWgsRGgpO2E9Yi5ub2RlVHlwZTtzd2l0Y2goYSl7Y2FzZSA5OmNhc2UgMTE6Yj0oYj1iLmRvY3VtZW50RWxlbWVudCk/Yi5uYW1lc3BhY2VVUkk6bGIobnVsbCxcIlwiKTticmVhaztkZWZhdWx0OmE9OD09PWE/Yi5wYXJlbnROb2RlOmIsYj1hLm5hbWVzcGFjZVVSSXx8bnVsbCxhPWEudGFnTmFtZSxiPWxiKGIsYSl9RShFaCk7RyhFaCxiKX1mdW5jdGlvbiBKaCgpe0UoRWgpO0UoRmgpO0UoR2gpfVxuZnVuY3Rpb24gS2goYSl7SGgoR2guY3VycmVudCk7dmFyIGI9SGgoRWguY3VycmVudCk7dmFyIGM9bGIoYixhLnR5cGUpO2IhPT1jJiYoRyhGaCxhKSxHKEVoLGMpKX1mdW5jdGlvbiBMaChhKXtGaC5jdXJyZW50PT09YSYmKEUoRWgpLEUoRmgpKX12YXIgTT1VZigwKTtcbmZ1bmN0aW9uIE1oKGEpe2Zvcih2YXIgYj1hO251bGwhPT1iOyl7aWYoMTM9PT1iLnRhZyl7dmFyIGM9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1jJiYoYz1jLmRlaHlkcmF0ZWQsbnVsbD09PWN8fFwiJD9cIj09PWMuZGF0YXx8XCIkIVwiPT09Yy5kYXRhKSlyZXR1cm4gYn1lbHNlIGlmKDE5PT09Yi50YWcmJnZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5yZXZlYWxPcmRlcil7aWYoMCE9PShiLmZsYWdzJjEyOCkpcmV0dXJuIGJ9ZWxzZSBpZihudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZC5yZXR1cm49YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfXJldHVybiBudWxsfXZhciBOaD1bXTtcbmZ1bmN0aW9uIE9oKCl7Zm9yKHZhciBhPTA7YTxOaC5sZW5ndGg7YSsrKU5oW2FdLl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5PW51bGw7TmgubGVuZ3RoPTB9dmFyIFBoPXVhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsUWg9dWEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcsUmg9MCxOPW51bGwsTz1udWxsLFA9bnVsbCxTaD0hMSxUaD0hMSxVaD0wLFZoPTA7ZnVuY3Rpb24gUSgpe3Rocm93IEVycm9yKHAoMzIxKSk7fWZ1bmN0aW9uIFdoKGEsYil7aWYobnVsbD09PWIpcmV0dXJuITE7Zm9yKHZhciBjPTA7YzxiLmxlbmd0aCYmYzxhLmxlbmd0aDtjKyspaWYoIUhlKGFbY10sYltjXSkpcmV0dXJuITE7cmV0dXJuITB9XG5mdW5jdGlvbiBYaChhLGIsYyxkLGUsZil7Umg9ZjtOPWI7Yi5tZW1vaXplZFN0YXRlPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO2IubGFuZXM9MDtQaC5jdXJyZW50PW51bGw9PT1hfHxudWxsPT09YS5tZW1vaXplZFN0YXRlP1loOlpoO2E9YyhkLGUpO2lmKFRoKXtmPTA7ZG97VGg9ITE7VWg9MDtpZigyNTw9Zil0aHJvdyBFcnJvcihwKDMwMSkpO2YrPTE7UD1PPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO1BoLmN1cnJlbnQ9JGg7YT1jKGQsZSl9d2hpbGUoVGgpfVBoLmN1cnJlbnQ9YWk7Yj1udWxsIT09TyYmbnVsbCE9PU8ubmV4dDtSaD0wO1A9Tz1OPW51bGw7U2g9ITE7aWYoYil0aHJvdyBFcnJvcihwKDMwMCkpO3JldHVybiBhfWZ1bmN0aW9uIGJpKCl7dmFyIGE9MCE9PVVoO1VoPTA7cmV0dXJuIGF9XG5mdW5jdGlvbiBjaSgpe3ZhciBhPXttZW1vaXplZFN0YXRlOm51bGwsYmFzZVN0YXRlOm51bGwsYmFzZVF1ZXVlOm51bGwscXVldWU6bnVsbCxuZXh0Om51bGx9O251bGw9PT1QP04ubWVtb2l6ZWRTdGF0ZT1QPWE6UD1QLm5leHQ9YTtyZXR1cm4gUH1mdW5jdGlvbiBkaSgpe2lmKG51bGw9PT1PKXt2YXIgYT1OLmFsdGVybmF0ZTthPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsfWVsc2UgYT1PLm5leHQ7dmFyIGI9bnVsbD09PVA/Ti5tZW1vaXplZFN0YXRlOlAubmV4dDtpZihudWxsIT09YilQPWIsTz1hO2Vsc2V7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IocCgzMTApKTtPPWE7YT17bWVtb2l6ZWRTdGF0ZTpPLm1lbW9pemVkU3RhdGUsYmFzZVN0YXRlOk8uYmFzZVN0YXRlLGJhc2VRdWV1ZTpPLmJhc2VRdWV1ZSxxdWV1ZTpPLnF1ZXVlLG5leHQ6bnVsbH07bnVsbD09PVA/Ti5tZW1vaXplZFN0YXRlPVA9YTpQPVAubmV4dD1hfXJldHVybiBQfVxuZnVuY3Rpb24gZWkoYSxiKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmJ9XG5mdW5jdGlvbiBmaShhKXt2YXIgYj1kaSgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcihwKDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPU8sZT1kLmJhc2VRdWV1ZSxmPWMucGVuZGluZztpZihudWxsIT09Zil7aWYobnVsbCE9PWUpe3ZhciBnPWUubmV4dDtlLm5leHQ9Zi5uZXh0O2YubmV4dD1nfWQuYmFzZVF1ZXVlPWU9ZjtjLnBlbmRpbmc9bnVsbH1pZihudWxsIT09ZSl7Zj1lLm5leHQ7ZD1kLmJhc2VTdGF0ZTt2YXIgaD1nPW51bGwsaz1udWxsLGw9Zjtkb3t2YXIgbT1sLmxhbmU7aWYoKFJoJm0pPT09bSludWxsIT09ayYmKGs9ay5uZXh0PXtsYW5lOjAsYWN0aW9uOmwuYWN0aW9uLGhhc0VhZ2VyU3RhdGU6bC5oYXNFYWdlclN0YXRlLGVhZ2VyU3RhdGU6bC5lYWdlclN0YXRlLG5leHQ6bnVsbH0pLGQ9bC5oYXNFYWdlclN0YXRlP2wuZWFnZXJTdGF0ZTphKGQsbC5hY3Rpb24pO2Vsc2V7dmFyIHE9e2xhbmU6bSxhY3Rpb246bC5hY3Rpb24saGFzRWFnZXJTdGF0ZTpsLmhhc0VhZ2VyU3RhdGUsXG5lYWdlclN0YXRlOmwuZWFnZXJTdGF0ZSxuZXh0Om51bGx9O251bGw9PT1rPyhoPWs9cSxnPWQpOms9ay5uZXh0PXE7Ti5sYW5lc3w9bTtoaHw9bX1sPWwubmV4dH13aGlsZShudWxsIT09bCYmbCE9PWYpO251bGw9PT1rP2c9ZDprLm5leHQ9aDtIZShkLGIubWVtb2l6ZWRTdGF0ZSl8fChVZz0hMCk7Yi5tZW1vaXplZFN0YXRlPWQ7Yi5iYXNlU3RhdGU9ZztiLmJhc2VRdWV1ZT1rO2MubGFzdFJlbmRlcmVkU3RhdGU9ZH1hPWMuaW50ZXJsZWF2ZWQ7aWYobnVsbCE9PWEpe2U9YTtkbyBmPWUubGFuZSxOLmxhbmVzfD1mLGhofD1mLGU9ZS5uZXh0O3doaWxlKGUhPT1hKX1lbHNlIG51bGw9PT1lJiYoYy5sYW5lcz0wKTtyZXR1cm5bYi5tZW1vaXplZFN0YXRlLGMuZGlzcGF0Y2hdfVxuZnVuY3Rpb24gZ2koYSl7dmFyIGI9ZGkoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IocCgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1jLmRpc3BhdGNoLGU9Yy5wZW5kaW5nLGY9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1lKXtjLnBlbmRpbmc9bnVsbDt2YXIgZz1lPWUubmV4dDtkbyBmPWEoZixnLmFjdGlvbiksZz1nLm5leHQ7d2hpbGUoZyE9PWUpO0hlKGYsYi5tZW1vaXplZFN0YXRlKXx8KFVnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZjtudWxsPT09Yi5iYXNlUXVldWUmJihiLmJhc2VTdGF0ZT1mKTtjLmxhc3RSZW5kZXJlZFN0YXRlPWZ9cmV0dXJuW2YsZF19ZnVuY3Rpb24gaGkoKXt9XG5mdW5jdGlvbiBpaShhLGIpe3ZhciBjPU4sZD1kaSgpLGU9YigpLGY9IUhlKGQubWVtb2l6ZWRTdGF0ZSxlKTtmJiYoZC5tZW1vaXplZFN0YXRlPWUsVWc9ITApO2Q9ZC5xdWV1ZTtqaShraS5iaW5kKG51bGwsYyxkLGEpLFthXSk7aWYoZC5nZXRTbmFwc2hvdCE9PWJ8fGZ8fG51bGwhPT1QJiZQLm1lbW9pemVkU3RhdGUudGFnJjEpe2MuZmxhZ3N8PTIwNDg7bGkoOSxtaS5iaW5kKG51bGwsYyxkLGUsYiksdm9pZCAwLG51bGwpO2lmKG51bGw9PT1SKXRocm93IEVycm9yKHAoMzQ5KSk7MCE9PShSaCYzMCl8fG5pKGMsYixlKX1yZXR1cm4gZX1mdW5jdGlvbiBuaShhLGIsYyl7YS5mbGFnc3w9MTYzODQ7YT17Z2V0U25hcHNob3Q6Yix2YWx1ZTpjfTtiPU4udXBkYXRlUXVldWU7bnVsbD09PWI/KGI9e2xhc3RFZmZlY3Q6bnVsbCxzdG9yZXM6bnVsbH0sTi51cGRhdGVRdWV1ZT1iLGIuc3RvcmVzPVthXSk6KGM9Yi5zdG9yZXMsbnVsbD09PWM/Yi5zdG9yZXM9W2FdOmMucHVzaChhKSl9XG5mdW5jdGlvbiBtaShhLGIsYyxkKXtiLnZhbHVlPWM7Yi5nZXRTbmFwc2hvdD1kO29pKGIpJiZwaShhKX1mdW5jdGlvbiBraShhLGIsYyl7cmV0dXJuIGMoZnVuY3Rpb24oKXtvaShiKSYmcGkoYSl9KX1mdW5jdGlvbiBvaShhKXt2YXIgYj1hLmdldFNuYXBzaG90O2E9YS52YWx1ZTt0cnl7dmFyIGM9YigpO3JldHVybiFIZShhLGMpfWNhdGNoKGQpe3JldHVybiEwfX1mdW5jdGlvbiBwaShhKXt2YXIgYj1aZyhhLDEpO251bGwhPT1iJiZtaChiLGEsMSwtMSl9XG5mdW5jdGlvbiBxaShhKXt2YXIgYj1jaSgpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBhJiYoYT1hKCkpO2IubWVtb2l6ZWRTdGF0ZT1iLmJhc2VTdGF0ZT1hO2E9e3BlbmRpbmc6bnVsbCxpbnRlcmxlYXZlZDpudWxsLGxhbmVzOjAsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOmVpLGxhc3RSZW5kZXJlZFN0YXRlOmF9O2IucXVldWU9YTthPWEuZGlzcGF0Y2g9cmkuYmluZChudWxsLE4sYSk7cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxhXX1cbmZ1bmN0aW9uIGxpKGEsYixjLGQpe2E9e3RhZzphLGNyZWF0ZTpiLGRlc3Ryb3k6YyxkZXBzOmQsbmV4dDpudWxsfTtiPU4udXBkYXRlUXVldWU7bnVsbD09PWI/KGI9e2xhc3RFZmZlY3Q6bnVsbCxzdG9yZXM6bnVsbH0sTi51cGRhdGVRdWV1ZT1iLGIubGFzdEVmZmVjdD1hLm5leHQ9YSk6KGM9Yi5sYXN0RWZmZWN0LG51bGw9PT1jP2IubGFzdEVmZmVjdD1hLm5leHQ9YTooZD1jLm5leHQsYy5uZXh0PWEsYS5uZXh0PWQsYi5sYXN0RWZmZWN0PWEpKTtyZXR1cm4gYX1mdW5jdGlvbiBzaSgpe3JldHVybiBkaSgpLm1lbW9pemVkU3RhdGV9ZnVuY3Rpb24gdGkoYSxiLGMsZCl7dmFyIGU9Y2koKTtOLmZsYWdzfD1hO2UubWVtb2l6ZWRTdGF0ZT1saSgxfGIsYyx2b2lkIDAsdm9pZCAwPT09ZD9udWxsOmQpfVxuZnVuY3Rpb24gdWkoYSxiLGMsZCl7dmFyIGU9ZGkoKTtkPXZvaWQgMD09PWQ/bnVsbDpkO3ZhciBmPXZvaWQgMDtpZihudWxsIT09Tyl7dmFyIGc9Ty5tZW1vaXplZFN0YXRlO2Y9Zy5kZXN0cm95O2lmKG51bGwhPT1kJiZXaChkLGcuZGVwcykpe2UubWVtb2l6ZWRTdGF0ZT1saShiLGMsZixkKTtyZXR1cm59fU4uZmxhZ3N8PWE7ZS5tZW1vaXplZFN0YXRlPWxpKDF8YixjLGYsZCl9ZnVuY3Rpb24gdmkoYSxiKXtyZXR1cm4gdGkoODM5MDY1Niw4LGEsYil9ZnVuY3Rpb24gamkoYSxiKXtyZXR1cm4gdWkoMjA0OCw4LGEsYil9ZnVuY3Rpb24gd2koYSxiKXtyZXR1cm4gdWkoNCwyLGEsYil9ZnVuY3Rpb24geGkoYSxiKXtyZXR1cm4gdWkoNCw0LGEsYil9XG5mdW5jdGlvbiB5aShhLGIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXJldHVybiBhPWEoKSxiKGEpLGZ1bmN0aW9uKCl7YihudWxsKX07aWYobnVsbCE9PWImJnZvaWQgMCE9PWIpcmV0dXJuIGE9YSgpLGIuY3VycmVudD1hLGZ1bmN0aW9uKCl7Yi5jdXJyZW50PW51bGx9fWZ1bmN0aW9uIHppKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gdWkoNCw0LHlpLmJpbmQobnVsbCxiLGEpLGMpfWZ1bmN0aW9uIEFpKCl7fWZ1bmN0aW9uIEJpKGEsYil7dmFyIGM9ZGkoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJldoKGIsZFsxXSkpcmV0dXJuIGRbMF07Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfVxuZnVuY3Rpb24gQ2koYSxiKXt2YXIgYz1kaSgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmV2goYixkWzFdKSlyZXR1cm4gZFswXTthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9ZnVuY3Rpb24gRGkoYSxiLGMpe2lmKDA9PT0oUmgmMjEpKXJldHVybiBhLmJhc2VTdGF0ZSYmKGEuYmFzZVN0YXRlPSExLFVnPSEwKSxhLm1lbW9pemVkU3RhdGU9YztIZShjLGIpfHwoYz15YygpLE4ubGFuZXN8PWMsaGh8PWMsYS5iYXNlU3RhdGU9ITApO3JldHVybiBifWZ1bmN0aW9uIEVpKGEsYil7dmFyIGM9QztDPTAhPT1jJiY0PmM/Yzo0O2EoITApO3ZhciBkPVFoLnRyYW5zaXRpb247UWgudHJhbnNpdGlvbj17fTt0cnl7YSghMSksYigpfWZpbmFsbHl7Qz1jLFFoLnRyYW5zaXRpb249ZH19ZnVuY3Rpb24gRmkoKXtyZXR1cm4gZGkoKS5tZW1vaXplZFN0YXRlfVxuZnVuY3Rpb24gR2koYSxiLGMpe3ZhciBkPWxoKGEpO2M9e2xhbmU6ZCxhY3Rpb246YyxoYXNFYWdlclN0YXRlOiExLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9O2lmKEhpKGEpKUlpKGIsYyk7ZWxzZSBpZihjPVlnKGEsYixjLGQpLG51bGwhPT1jKXt2YXIgZT1MKCk7bWgoYyxhLGQsZSk7SmkoYyxiLGQpfX1cbmZ1bmN0aW9uIHJpKGEsYixjKXt2YXIgZD1saChhKSxlPXtsYW5lOmQsYWN0aW9uOmMsaGFzRWFnZXJTdGF0ZTohMSxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfTtpZihIaShhKSlJaShiLGUpO2Vsc2V7dmFyIGY9YS5hbHRlcm5hdGU7aWYoMD09PWEubGFuZXMmJihudWxsPT09Znx8MD09PWYubGFuZXMpJiYoZj1iLmxhc3RSZW5kZXJlZFJlZHVjZXIsbnVsbCE9PWYpKXRyeXt2YXIgZz1iLmxhc3RSZW5kZXJlZFN0YXRlLGg9ZihnLGMpO2UuaGFzRWFnZXJTdGF0ZT0hMDtlLmVhZ2VyU3RhdGU9aDtpZihIZShoLGcpKXt2YXIgaz1iLmludGVybGVhdmVkO251bGw9PT1rPyhlLm5leHQ9ZSxYZyhiKSk6KGUubmV4dD1rLm5leHQsay5uZXh0PWUpO2IuaW50ZXJsZWF2ZWQ9ZTtyZXR1cm59fWNhdGNoKGwpe31maW5hbGx5e31jPVlnKGEsYixlLGQpO251bGwhPT1jJiYoZT1MKCksbWgoYyxhLGQsZSksSmkoYyxiLGQpKX19XG5mdW5jdGlvbiBIaShhKXt2YXIgYj1hLmFsdGVybmF0ZTtyZXR1cm4gYT09PU58fG51bGwhPT1iJiZiPT09Tn1mdW5jdGlvbiBJaShhLGIpe1RoPVNoPSEwO3ZhciBjPWEucGVuZGluZztudWxsPT09Yz9iLm5leHQ9YjooYi5uZXh0PWMubmV4dCxjLm5leHQ9Yik7YS5wZW5kaW5nPWJ9ZnVuY3Rpb24gSmkoYSxiLGMpe2lmKDAhPT0oYyY0MTk0MjQwKSl7dmFyIGQ9Yi5sYW5lcztkJj1hLnBlbmRpbmdMYW5lcztjfD1kO2IubGFuZXM9YztDYyhhLGMpfX1cbnZhciBhaT17cmVhZENvbnRleHQ6VmcsdXNlQ2FsbGJhY2s6USx1c2VDb250ZXh0OlEsdXNlRWZmZWN0OlEsdXNlSW1wZXJhdGl2ZUhhbmRsZTpRLHVzZUluc2VydGlvbkVmZmVjdDpRLHVzZUxheW91dEVmZmVjdDpRLHVzZU1lbW86USx1c2VSZWR1Y2VyOlEsdXNlUmVmOlEsdXNlU3RhdGU6USx1c2VEZWJ1Z1ZhbHVlOlEsdXNlRGVmZXJyZWRWYWx1ZTpRLHVzZVRyYW5zaXRpb246USx1c2VNdXRhYmxlU291cmNlOlEsdXNlU3luY0V4dGVybmFsU3RvcmU6USx1c2VJZDpRLHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sWWg9e3JlYWRDb250ZXh0OlZnLHVzZUNhbGxiYWNrOmZ1bmN0aW9uKGEsYil7Y2koKS5tZW1vaXplZFN0YXRlPVthLHZvaWQgMD09PWI/bnVsbDpiXTtyZXR1cm4gYX0sdXNlQ29udGV4dDpWZyx1c2VFZmZlY3Q6dmksdXNlSW1wZXJhdGl2ZUhhbmRsZTpmdW5jdGlvbihhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIHRpKDQxOTQzMDgsXG40LHlpLmJpbmQobnVsbCxiLGEpLGMpfSx1c2VMYXlvdXRFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGkoNDE5NDMwOCw0LGEsYil9LHVzZUluc2VydGlvbkVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiB0aSg0LDIsYSxiKX0sdXNlTWVtbzpmdW5jdGlvbihhLGIpe3ZhciBjPWNpKCk7Yj12b2lkIDA9PT1iP251bGw6YjthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWNpKCk7Yj12b2lkIDAhPT1jP2MoYik6YjtkLm1lbW9pemVkU3RhdGU9ZC5iYXNlU3RhdGU9YjthPXtwZW5kaW5nOm51bGwsaW50ZXJsZWF2ZWQ6bnVsbCxsYW5lczowLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjphLGxhc3RSZW5kZXJlZFN0YXRlOmJ9O2QucXVldWU9YTthPWEuZGlzcGF0Y2g9R2kuYmluZChudWxsLE4sYSk7cmV0dXJuW2QubWVtb2l6ZWRTdGF0ZSxhXX0sdXNlUmVmOmZ1bmN0aW9uKGEpe3ZhciBiPVxuY2koKTthPXtjdXJyZW50OmF9O3JldHVybiBiLm1lbW9pemVkU3RhdGU9YX0sdXNlU3RhdGU6cWksdXNlRGVidWdWYWx1ZTpBaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3JldHVybiBjaSgpLm1lbW9pemVkU3RhdGU9YX0sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPXFpKCExKSxiPWFbMF07YT1FaS5iaW5kKG51bGwsYVsxXSk7Y2koKS5tZW1vaXplZFN0YXRlPWE7cmV0dXJuW2IsYV19LHVzZU11dGFibGVTb3VyY2U6ZnVuY3Rpb24oKXt9LHVzZVN5bmNFeHRlcm5hbFN0b3JlOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1OLGU9Y2koKTtpZihJKXtpZih2b2lkIDA9PT1jKXRocm93IEVycm9yKHAoNDA3KSk7Yz1jKCl9ZWxzZXtjPWIoKTtpZihudWxsPT09Uil0aHJvdyBFcnJvcihwKDM0OSkpOzAhPT0oUmgmMzApfHxuaShkLGIsYyl9ZS5tZW1vaXplZFN0YXRlPWM7dmFyIGY9e3ZhbHVlOmMsZ2V0U25hcHNob3Q6Yn07ZS5xdWV1ZT1mO3ZpKGtpLmJpbmQobnVsbCxkLFxuZixhKSxbYV0pO2QuZmxhZ3N8PTIwNDg7bGkoOSxtaS5iaW5kKG51bGwsZCxmLGMsYiksdm9pZCAwLG51bGwpO3JldHVybiBjfSx1c2VJZDpmdW5jdGlvbigpe3ZhciBhPWNpKCksYj1SLmlkZW50aWZpZXJQcmVmaXg7aWYoSSl7dmFyIGM9c2c7dmFyIGQ9cmc7Yz0oZCZ+KDE8PDMyLW9jKGQpLTEpKS50b1N0cmluZygzMikrYztiPVwiOlwiK2IrXCJSXCIrYztjPVVoKys7MDxjJiYoYis9XCJIXCIrYy50b1N0cmluZygzMikpO2IrPVwiOlwifWVsc2UgYz1WaCsrLGI9XCI6XCIrYitcInJcIitjLnRvU3RyaW5nKDMyKStcIjpcIjtyZXR1cm4gYS5tZW1vaXplZFN0YXRlPWJ9LHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sWmg9e3JlYWRDb250ZXh0OlZnLHVzZUNhbGxiYWNrOkJpLHVzZUNvbnRleHQ6VmcsdXNlRWZmZWN0OmppLHVzZUltcGVyYXRpdmVIYW5kbGU6emksdXNlSW5zZXJ0aW9uRWZmZWN0OndpLHVzZUxheW91dEVmZmVjdDp4aSx1c2VNZW1vOkNpLHVzZVJlZHVjZXI6ZmksdXNlUmVmOnNpLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIGZpKGVpKX0sXG51c2VEZWJ1Z1ZhbHVlOkFpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9ZGkoKTtyZXR1cm4gRGkoYixPLm1lbW9pemVkU3RhdGUsYSl9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1maShlaSlbMF0sYj1kaSgpLm1lbW9pemVkU3RhdGU7cmV0dXJuW2EsYl19LHVzZU11dGFibGVTb3VyY2U6aGksdXNlU3luY0V4dGVybmFsU3RvcmU6aWksdXNlSWQ6RmksdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSwkaD17cmVhZENvbnRleHQ6VmcsdXNlQ2FsbGJhY2s6QmksdXNlQ29udGV4dDpWZyx1c2VFZmZlY3Q6amksdXNlSW1wZXJhdGl2ZUhhbmRsZTp6aSx1c2VJbnNlcnRpb25FZmZlY3Q6d2ksdXNlTGF5b3V0RWZmZWN0OnhpLHVzZU1lbW86Q2ksdXNlUmVkdWNlcjpnaSx1c2VSZWY6c2ksdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gZ2koZWkpfSx1c2VEZWJ1Z1ZhbHVlOkFpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9ZGkoKTtyZXR1cm4gbnVsbD09PVxuTz9iLm1lbW9pemVkU3RhdGU9YTpEaShiLE8ubWVtb2l6ZWRTdGF0ZSxhKX0sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPWdpKGVpKVswXSxiPWRpKCkubWVtb2l6ZWRTdGF0ZTtyZXR1cm5bYSxiXX0sdXNlTXV0YWJsZVNvdXJjZTpoaSx1c2VTeW5jRXh0ZXJuYWxTdG9yZTppaSx1c2VJZDpGaSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9O2Z1bmN0aW9uIEtpKGEsYil7dHJ5e3ZhciBjPVwiXCIsZD1iO2RvIGMrPVBhKGQpLGQ9ZC5yZXR1cm47d2hpbGUoZCk7dmFyIGU9Y31jYXRjaChmKXtlPVwiXFxuRXJyb3IgZ2VuZXJhdGluZyBzdGFjazogXCIrZi5tZXNzYWdlK1wiXFxuXCIrZi5zdGFja31yZXR1cm57dmFsdWU6YSxzb3VyY2U6YixzdGFjazplLGRpZ2VzdDpudWxsfX1mdW5jdGlvbiBMaShhLGIsYyl7cmV0dXJue3ZhbHVlOmEsc291cmNlOm51bGwsc3RhY2s6bnVsbCE9Yz9jOm51bGwsZGlnZXN0Om51bGwhPWI/YjpudWxsfX1cbmZ1bmN0aW9uIE1pKGEsYil7dHJ5e2NvbnNvbGUuZXJyb3IoYi52YWx1ZSl9Y2F0Y2goYyl7c2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGM7fSl9fXZhciBOaT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha01hcD9XZWFrTWFwOk1hcDtmdW5jdGlvbiBPaShhLGIsYyl7Yz1jaCgtMSxjKTtjLnRhZz0zO2MucGF5bG9hZD17ZWxlbWVudDpudWxsfTt2YXIgZD1iLnZhbHVlO2MuY2FsbGJhY2s9ZnVuY3Rpb24oKXtQaXx8KFBpPSEwLFFpPWQpO01pKGEsYil9O3JldHVybiBjfVxuZnVuY3Rpb24gUmkoYSxiLGMpe2M9Y2goLTEsYyk7Yy50YWc9Mzt2YXIgZD1hLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgZT1iLnZhbHVlO2MucGF5bG9hZD1mdW5jdGlvbigpe3JldHVybiBkKGUpfTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7TWkoYSxiKX19dmFyIGY9YS5zdGF0ZU5vZGU7bnVsbCE9PWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLmNvbXBvbmVudERpZENhdGNoJiYoYy5jYWxsYmFjaz1mdW5jdGlvbigpe01pKGEsYik7XCJmdW5jdGlvblwiIT09dHlwZW9mIGQmJihudWxsPT09U2k/U2k9bmV3IFNldChbdGhpc10pOlNpLmFkZCh0aGlzKSk7dmFyIGM9Yi5zdGFjazt0aGlzLmNvbXBvbmVudERpZENhdGNoKGIudmFsdWUse2NvbXBvbmVudFN0YWNrOm51bGwhPT1jP2M6XCJcIn0pfSk7cmV0dXJuIGN9XG5mdW5jdGlvbiBUaShhLGIsYyl7dmFyIGQ9YS5waW5nQ2FjaGU7aWYobnVsbD09PWQpe2Q9YS5waW5nQ2FjaGU9bmV3IE5pO3ZhciBlPW5ldyBTZXQ7ZC5zZXQoYixlKX1lbHNlIGU9ZC5nZXQoYiksdm9pZCAwPT09ZSYmKGU9bmV3IFNldCxkLnNldChiLGUpKTtlLmhhcyhjKXx8KGUuYWRkKGMpLGE9VWkuYmluZChudWxsLGEsYixjKSxiLnRoZW4oYSxhKSl9ZnVuY3Rpb24gVmkoYSl7ZG97dmFyIGI7aWYoYj0xMz09PWEudGFnKWI9YS5tZW1vaXplZFN0YXRlLGI9bnVsbCE9PWI/bnVsbCE9PWIuZGVoeWRyYXRlZD8hMDohMTohMDtpZihiKXJldHVybiBhO2E9YS5yZXR1cm59d2hpbGUobnVsbCE9PWEpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gV2koYSxiLGMsZCxlKXtpZigwPT09KGEubW9kZSYxKSlyZXR1cm4gYT09PWI/YS5mbGFnc3w9NjU1MzY6KGEuZmxhZ3N8PTEyOCxjLmZsYWdzfD0xMzEwNzIsYy5mbGFncyY9LTUyODA1LDE9PT1jLnRhZyYmKG51bGw9PT1jLmFsdGVybmF0ZT9jLnRhZz0xNzooYj1jaCgtMSwxKSxiLnRhZz0yLGRoKGMsYiwxKSkpLGMubGFuZXN8PTEpLGE7YS5mbGFnc3w9NjU1MzY7YS5sYW5lcz1lO3JldHVybiBhfXZhciBYaT11YS5SZWFjdEN1cnJlbnRPd25lcixVZz0hMTtmdW5jdGlvbiBZaShhLGIsYyxkKXtiLmNoaWxkPW51bGw9PT1hP0NoKGIsbnVsbCxjLGQpOkJoKGIsYS5jaGlsZCxjLGQpfVxuZnVuY3Rpb24gWmkoYSxiLGMsZCxlKXtjPWMucmVuZGVyO3ZhciBmPWIucmVmO1RnKGIsZSk7ZD1YaChhLGIsYyxkLGYsZSk7Yz1iaSgpO2lmKG51bGwhPT1hJiYhVWcpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmZsYWdzJj0tMjA1MyxhLmxhbmVzJj1+ZSwkaShhLGIsZSk7SSYmYyYmdmcoYik7Yi5mbGFnc3w9MTtZaShhLGIsZCxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGFqKGEsYixjLGQsZSl7aWYobnVsbD09PWEpe3ZhciBmPWMudHlwZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmIWJqKGYpJiZ2b2lkIDA9PT1mLmRlZmF1bHRQcm9wcyYmbnVsbD09PWMuY29tcGFyZSYmdm9pZCAwPT09Yy5kZWZhdWx0UHJvcHMpcmV0dXJuIGIudGFnPTE1LGIudHlwZT1mLGNqKGEsYixmLGQsZSk7YT15aChjLnR5cGUsbnVsbCxkLGIsYi5tb2RlLGUpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1mPWEuY2hpbGQ7aWYoMD09PShhLmxhbmVzJmUpKXt2YXIgZz1mLm1lbW9pemVkUHJvcHM7Yz1jLmNvbXBhcmU7Yz1udWxsIT09Yz9jOkllO2lmKGMoZyxkKSYmYS5yZWY9PT1iLnJlZilyZXR1cm4gJGkoYSxiLGUpfWIuZmxhZ3N8PTE7YT13aChmLGQpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1cbmZ1bmN0aW9uIGNqKGEsYixjLGQsZSl7aWYobnVsbCE9PWEpe3ZhciBmPWEubWVtb2l6ZWRQcm9wcztpZihJZShmLGQpJiZhLnJlZj09PWIucmVmKWlmKFVnPSExLGIucGVuZGluZ1Byb3BzPWQ9ZiwwIT09KGEubGFuZXMmZSkpMCE9PShhLmZsYWdzJjEzMTA3MikmJihVZz0hMCk7ZWxzZSByZXR1cm4gYi5sYW5lcz1hLmxhbmVzLCRpKGEsYixlKX1yZXR1cm4gZGooYSxiLGMsZCxlKX1cbmZ1bmN0aW9uIGVqKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPWQuY2hpbGRyZW4sZj1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbDtpZihcImhpZGRlblwiPT09ZC5tb2RlKWlmKDA9PT0oYi5tb2RlJjEpKWIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOjAsY2FjaGVQb29sOm51bGwsdHJhbnNpdGlvbnM6bnVsbH0sRyhmaixnaiksZ2p8PWM7ZWxzZXtpZigwPT09KGMmMTA3Mzc0MTgyNCkpcmV0dXJuIGE9bnVsbCE9PWY/Zi5iYXNlTGFuZXN8YzpjLGIubGFuZXM9Yi5jaGlsZExhbmVzPTEwNzM3NDE4MjQsYi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6YSxjYWNoZVBvb2w6bnVsbCx0cmFuc2l0aW9uczpudWxsfSxiLnVwZGF0ZVF1ZXVlPW51bGwsRyhmaixnaiksZ2p8PWEsbnVsbDtiLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczowLGNhY2hlUG9vbDpudWxsLHRyYW5zaXRpb25zOm51bGx9O2Q9bnVsbCE9PWY/Zi5iYXNlTGFuZXM6YztHKGZqLGdqKTtnanw9ZH1lbHNlIG51bGwhPT1cbmY/KGQ9Zi5iYXNlTGFuZXN8YyxiLm1lbW9pemVkU3RhdGU9bnVsbCk6ZD1jLEcoZmosZ2opLGdqfD1kO1lpKGEsYixlLGMpO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIGhqKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZmxhZ3N8PTUxMixiLmZsYWdzfD0yMDk3MTUyfWZ1bmN0aW9uIGRqKGEsYixjLGQsZSl7dmFyIGY9WmYoYyk/WGY6SC5jdXJyZW50O2Y9WWYoYixmKTtUZyhiLGUpO2M9WGgoYSxiLGMsZCxmLGUpO2Q9YmkoKTtpZihudWxsIT09YSYmIVVnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5mbGFncyY9LTIwNTMsYS5sYW5lcyY9fmUsJGkoYSxiLGUpO0kmJmQmJnZnKGIpO2IuZmxhZ3N8PTE7WWkoYSxiLGMsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBpaihhLGIsYyxkLGUpe2lmKFpmKGMpKXt2YXIgZj0hMDtjZyhiKX1lbHNlIGY9ITE7VGcoYixlKTtpZihudWxsPT09Yi5zdGF0ZU5vZGUpamooYSxiKSxwaChiLGMsZCkscmgoYixjLGQsZSksZD0hMDtlbHNlIGlmKG51bGw9PT1hKXt2YXIgZz1iLnN0YXRlTm9kZSxoPWIubWVtb2l6ZWRQcm9wcztnLnByb3BzPWg7dmFyIGs9Zy5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9VmcobCk6KGw9WmYoYyk/WGY6SC5jdXJyZW50LGw9WWYoYixsKSk7dmFyIG09Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMscT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgbXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGU7cXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fFxuKGghPT1kfHxrIT09bCkmJnFoKGIsZyxkLGwpOyRnPSExO3ZhciByPWIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlPXI7Z2goYixkLGcsZSk7az1iLm1lbW9pemVkU3RhdGU7aCE9PWR8fHIhPT1rfHxXZi5jdXJyZW50fHwkZz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG0mJihraChiLGMsbSxkKSxrPWIubWVtb2l6ZWRTdGF0ZSksKGg9JGd8fG9oKGIsYyxoLGQscixrLGwpKT8ocXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50fHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50JiZnLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQxOTQzMDgpKTpcbihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQxOTQzMDgpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1rKSxnLnByb3BzPWQsZy5zdGF0ZT1rLGcuY29udGV4dD1sLGQ9aCk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NDE5NDMwOCksZD0hMSl9ZWxzZXtnPWIuc3RhdGVOb2RlO2JoKGEsYik7aD1iLm1lbW9pemVkUHJvcHM7bD1iLnR5cGU9PT1iLmVsZW1lbnRUeXBlP2g6TGcoYi50eXBlLGgpO2cucHJvcHM9bDtxPWIucGVuZGluZ1Byb3BzO3I9Zy5jb250ZXh0O2s9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGsmJm51bGwhPT1rP2s9Vmcoayk6KGs9WmYoYyk/WGY6SC5jdXJyZW50LGs9WWYoYixrKSk7dmFyIHk9Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7KG09XCJmdW5jdGlvblwiPT09dHlwZW9mIHl8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XG5cImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1xfHxyIT09aykmJnFoKGIsZyxkLGspOyRnPSExO3I9Yi5tZW1vaXplZFN0YXRlO2cuc3RhdGU9cjtnaChiLGQsZyxlKTt2YXIgbj1iLm1lbW9pemVkU3RhdGU7aCE9PXF8fHIhPT1ufHxXZi5jdXJyZW50fHwkZz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIHkmJihraChiLGMseSxkKSxuPWIubWVtb2l6ZWRTdGF0ZSksKGw9JGd8fG9oKGIsYyxsLGQscixuLGspfHwhMSk/KG18fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlfHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5jb21wb25lbnRXaWxsVXBkYXRlKGQsbixrKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXG5nLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlKGQsbixrKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlJiYoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUmJihiLmZsYWdzfD0xMDI0KSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcj09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZyPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9MTAyNCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPW4pLGcucHJvcHM9ZCxnLnN0YXRlPW4sZy5jb250ZXh0PWssZD1sKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZyPT09XG5hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcj09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTEwMjQpLGQ9ITEpfXJldHVybiBraihhLGIsYyxkLGYsZSl9XG5mdW5jdGlvbiBraihhLGIsYyxkLGUsZil7aGooYSxiKTt2YXIgZz0wIT09KGIuZmxhZ3MmMTI4KTtpZighZCYmIWcpcmV0dXJuIGUmJmRnKGIsYywhMSksJGkoYSxiLGYpO2Q9Yi5zdGF0ZU5vZGU7WGkuY3VycmVudD1iO3ZhciBoPWcmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcj9udWxsOmQucmVuZGVyKCk7Yi5mbGFnc3w9MTtudWxsIT09YSYmZz8oYi5jaGlsZD1CaChiLGEuY2hpbGQsbnVsbCxmKSxiLmNoaWxkPUJoKGIsbnVsbCxoLGYpKTpZaShhLGIsaCxmKTtiLm1lbW9pemVkU3RhdGU9ZC5zdGF0ZTtlJiZkZyhiLGMsITApO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIGxqKGEpe3ZhciBiPWEuc3RhdGVOb2RlO2IucGVuZGluZ0NvbnRleHQ/YWcoYSxiLnBlbmRpbmdDb250ZXh0LGIucGVuZGluZ0NvbnRleHQhPT1iLmNvbnRleHQpOmIuY29udGV4dCYmYWcoYSxiLmNvbnRleHQsITEpO0loKGEsYi5jb250YWluZXJJbmZvKX1cbmZ1bmN0aW9uIG1qKGEsYixjLGQsZSl7SWcoKTtKZyhlKTtiLmZsYWdzfD0yNTY7WWkoYSxiLGMsZCk7cmV0dXJuIGIuY2hpbGR9dmFyIG5qPXtkZWh5ZHJhdGVkOm51bGwsdHJlZUNvbnRleHQ6bnVsbCxyZXRyeUxhbmU6MH07ZnVuY3Rpb24gb2ooYSl7cmV0dXJue2Jhc2VMYW5lczphLGNhY2hlUG9vbDpudWxsLHRyYW5zaXRpb25zOm51bGx9fVxuZnVuY3Rpb24gcGooYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9TS5jdXJyZW50LGY9ITEsZz0wIT09KGIuZmxhZ3MmMTI4KSxoOyhoPWcpfHwoaD1udWxsIT09YSYmbnVsbD09PWEubWVtb2l6ZWRTdGF0ZT8hMTowIT09KGUmMikpO2lmKGgpZj0hMCxiLmZsYWdzJj0tMTI5O2Vsc2UgaWYobnVsbD09PWF8fG51bGwhPT1hLm1lbW9pemVkU3RhdGUpZXw9MTtHKE0sZSYxKTtpZihudWxsPT09YSl7RWcoYik7YT1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWEmJihhPWEuZGVoeWRyYXRlZCxudWxsIT09YSkpcmV0dXJuIDA9PT0oYi5tb2RlJjEpP2IubGFuZXM9MTpcIiQhXCI9PT1hLmRhdGE/Yi5sYW5lcz04OmIubGFuZXM9MTA3Mzc0MTgyNCxudWxsO2c9ZC5jaGlsZHJlbjthPWQuZmFsbGJhY2s7cmV0dXJuIGY/KGQ9Yi5tb2RlLGY9Yi5jaGlsZCxnPXttb2RlOlwiaGlkZGVuXCIsY2hpbGRyZW46Z30sMD09PShkJjEpJiZudWxsIT09Zj8oZi5jaGlsZExhbmVzPTAsZi5wZW5kaW5nUHJvcHM9XG5nKTpmPXFqKGcsZCwwLG51bGwpLGE9QWgoYSxkLGMsbnVsbCksZi5yZXR1cm49YixhLnJldHVybj1iLGYuc2libGluZz1hLGIuY2hpbGQ9ZixiLmNoaWxkLm1lbW9pemVkU3RhdGU9b2ooYyksYi5tZW1vaXplZFN0YXRlPW5qLGEpOnJqKGIsZyl9ZT1hLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWUmJihoPWUuZGVoeWRyYXRlZCxudWxsIT09aCkpcmV0dXJuIHNqKGEsYixnLGQsaCxlLGMpO2lmKGYpe2Y9ZC5mYWxsYmFjaztnPWIubW9kZTtlPWEuY2hpbGQ7aD1lLnNpYmxpbmc7dmFyIGs9e21vZGU6XCJoaWRkZW5cIixjaGlsZHJlbjpkLmNoaWxkcmVufTswPT09KGcmMSkmJmIuY2hpbGQhPT1lPyhkPWIuY2hpbGQsZC5jaGlsZExhbmVzPTAsZC5wZW5kaW5nUHJvcHM9ayxiLmRlbGV0aW9ucz1udWxsKTooZD13aChlLGspLGQuc3VidHJlZUZsYWdzPWUuc3VidHJlZUZsYWdzJjE0NjgwMDY0KTtudWxsIT09aD9mPXdoKGgsZik6KGY9QWgoZixnLGMsbnVsbCksZi5mbGFnc3w9Mik7Zi5yZXR1cm49XG5iO2QucmV0dXJuPWI7ZC5zaWJsaW5nPWY7Yi5jaGlsZD1kO2Q9ZjtmPWIuY2hpbGQ7Zz1hLmNoaWxkLm1lbW9pemVkU3RhdGU7Zz1udWxsPT09Zz9vaihjKTp7YmFzZUxhbmVzOmcuYmFzZUxhbmVzfGMsY2FjaGVQb29sOm51bGwsdHJhbnNpdGlvbnM6Zy50cmFuc2l0aW9uc307Zi5tZW1vaXplZFN0YXRlPWc7Zi5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcyZ+YztiLm1lbW9pemVkU3RhdGU9bmo7cmV0dXJuIGR9Zj1hLmNoaWxkO2E9Zi5zaWJsaW5nO2Q9d2goZix7bW9kZTpcInZpc2libGVcIixjaGlsZHJlbjpkLmNoaWxkcmVufSk7MD09PShiLm1vZGUmMSkmJihkLmxhbmVzPWMpO2QucmV0dXJuPWI7ZC5zaWJsaW5nPW51bGw7bnVsbCE9PWEmJihjPWIuZGVsZXRpb25zLG51bGw9PT1jPyhiLmRlbGV0aW9ucz1bYV0sYi5mbGFnc3w9MTYpOmMucHVzaChhKSk7Yi5jaGlsZD1kO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBkfVxuZnVuY3Rpb24gcmooYSxiKXtiPXFqKHttb2RlOlwidmlzaWJsZVwiLGNoaWxkcmVuOmJ9LGEubW9kZSwwLG51bGwpO2IucmV0dXJuPWE7cmV0dXJuIGEuY2hpbGQ9Yn1mdW5jdGlvbiB0aihhLGIsYyxkKXtudWxsIT09ZCYmSmcoZCk7QmgoYixhLmNoaWxkLG51bGwsYyk7YT1yaihiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuKTthLmZsYWdzfD0yO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBhfVxuZnVuY3Rpb24gc2ooYSxiLGMsZCxlLGYsZyl7aWYoYyl7aWYoYi5mbGFncyYyNTYpcmV0dXJuIGIuZmxhZ3MmPS0yNTcsZD1MaShFcnJvcihwKDQyMikpKSx0aihhLGIsZyxkKTtpZihudWxsIT09Yi5tZW1vaXplZFN0YXRlKXJldHVybiBiLmNoaWxkPWEuY2hpbGQsYi5mbGFnc3w9MTI4LG51bGw7Zj1kLmZhbGxiYWNrO2U9Yi5tb2RlO2Q9cWooe21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46ZC5jaGlsZHJlbn0sZSwwLG51bGwpO2Y9QWgoZixlLGcsbnVsbCk7Zi5mbGFnc3w9MjtkLnJldHVybj1iO2YucmV0dXJuPWI7ZC5zaWJsaW5nPWY7Yi5jaGlsZD1kOzAhPT0oYi5tb2RlJjEpJiZCaChiLGEuY2hpbGQsbnVsbCxnKTtiLmNoaWxkLm1lbW9pemVkU3RhdGU9b2ooZyk7Yi5tZW1vaXplZFN0YXRlPW5qO3JldHVybiBmfWlmKDA9PT0oYi5tb2RlJjEpKXJldHVybiB0aihhLGIsZyxudWxsKTtpZihcIiQhXCI9PT1lLmRhdGEpe2Q9ZS5uZXh0U2libGluZyYmZS5uZXh0U2libGluZy5kYXRhc2V0O1xuaWYoZCl2YXIgaD1kLmRnc3Q7ZD1oO2Y9RXJyb3IocCg0MTkpKTtkPUxpKGYsZCx2b2lkIDApO3JldHVybiB0aihhLGIsZyxkKX1oPTAhPT0oZyZhLmNoaWxkTGFuZXMpO2lmKFVnfHxoKXtkPVI7aWYobnVsbCE9PWQpe3N3aXRjaChnJi1nKXtjYXNlIDQ6ZT0yO2JyZWFrO2Nhc2UgMTY6ZT04O2JyZWFrO2Nhc2UgNjQ6Y2FzZSAxMjg6Y2FzZSAyNTY6Y2FzZSA1MTI6Y2FzZSAxMDI0OmNhc2UgMjA0ODpjYXNlIDQwOTY6Y2FzZSA4MTkyOmNhc2UgMTYzODQ6Y2FzZSAzMjc2ODpjYXNlIDY1NTM2OmNhc2UgMTMxMDcyOmNhc2UgMjYyMTQ0OmNhc2UgNTI0Mjg4OmNhc2UgMTA0ODU3NjpjYXNlIDIwOTcxNTI6Y2FzZSA0MTk0MzA0OmNhc2UgODM4ODYwODpjYXNlIDE2Nzc3MjE2OmNhc2UgMzM1NTQ0MzI6Y2FzZSA2NzEwODg2NDplPTMyO2JyZWFrO2Nhc2UgNTM2ODcwOTEyOmU9MjY4NDM1NDU2O2JyZWFrO2RlZmF1bHQ6ZT0wfWU9MCE9PShlJihkLnN1c3BlbmRlZExhbmVzfGcpKT8wOmU7XG4wIT09ZSYmZSE9PWYucmV0cnlMYW5lJiYoZi5yZXRyeUxhbmU9ZSxaZyhhLGUpLG1oKGQsYSxlLC0xKSl9dWooKTtkPUxpKEVycm9yKHAoNDIxKSkpO3JldHVybiB0aihhLGIsZyxkKX1pZihcIiQ/XCI9PT1lLmRhdGEpcmV0dXJuIGIuZmxhZ3N8PTEyOCxiLmNoaWxkPWEuY2hpbGQsYj12ai5iaW5kKG51bGwsYSksZS5fcmVhY3RSZXRyeT1iLG51bGw7YT1mLnRyZWVDb250ZXh0O3lnPUxmKGUubmV4dFNpYmxpbmcpO3hnPWI7ST0hMDt6Zz1udWxsO251bGwhPT1hJiYob2dbcGcrK109cmcsb2dbcGcrK109c2csb2dbcGcrK109cWcscmc9YS5pZCxzZz1hLm92ZXJmbG93LHFnPWIpO2I9cmooYixkLmNoaWxkcmVuKTtiLmZsYWdzfD00MDk2O3JldHVybiBifWZ1bmN0aW9uIHdqKGEsYixjKXthLmxhbmVzfD1iO3ZhciBkPWEuYWx0ZXJuYXRlO251bGwhPT1kJiYoZC5sYW5lc3w9Yik7U2coYS5yZXR1cm4sYixjKX1cbmZ1bmN0aW9uIHhqKGEsYixjLGQsZSl7dmFyIGY9YS5tZW1vaXplZFN0YXRlO251bGw9PT1mP2EubWVtb2l6ZWRTdGF0ZT17aXNCYWNrd2FyZHM6YixyZW5kZXJpbmc6bnVsbCxyZW5kZXJpbmdTdGFydFRpbWU6MCxsYXN0OmQsdGFpbDpjLHRhaWxNb2RlOmV9OihmLmlzQmFja3dhcmRzPWIsZi5yZW5kZXJpbmc9bnVsbCxmLnJlbmRlcmluZ1N0YXJ0VGltZT0wLGYubGFzdD1kLGYudGFpbD1jLGYudGFpbE1vZGU9ZSl9XG5mdW5jdGlvbiB5aihhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1kLnJldmVhbE9yZGVyLGY9ZC50YWlsO1lpKGEsYixkLmNoaWxkcmVuLGMpO2Q9TS5jdXJyZW50O2lmKDAhPT0oZCYyKSlkPWQmMXwyLGIuZmxhZ3N8PTEyODtlbHNle2lmKG51bGwhPT1hJiYwIT09KGEuZmxhZ3MmMTI4KSlhOmZvcihhPWIuY2hpbGQ7bnVsbCE9PWE7KXtpZigxMz09PWEudGFnKW51bGwhPT1hLm1lbW9pemVkU3RhdGUmJndqKGEsYyxiKTtlbHNlIGlmKDE5PT09YS50YWcpd2ooYSxjLGIpO2Vsc2UgaWYobnVsbCE9PWEuY2hpbGQpe2EuY2hpbGQucmV0dXJuPWE7YT1hLmNoaWxkO2NvbnRpbnVlfWlmKGE9PT1iKWJyZWFrIGE7Zm9yKDtudWxsPT09YS5zaWJsaW5nOyl7aWYobnVsbD09PWEucmV0dXJufHxhLnJldHVybj09PWIpYnJlYWsgYTthPWEucmV0dXJufWEuc2libGluZy5yZXR1cm49YS5yZXR1cm47YT1hLnNpYmxpbmd9ZCY9MX1HKE0sZCk7aWYoMD09PShiLm1vZGUmMSkpYi5tZW1vaXplZFN0YXRlPVxubnVsbDtlbHNlIHN3aXRjaChlKXtjYXNlIFwiZm9yd2FyZHNcIjpjPWIuY2hpbGQ7Zm9yKGU9bnVsbDtudWxsIT09YzspYT1jLmFsdGVybmF0ZSxudWxsIT09YSYmbnVsbD09PU1oKGEpJiYoZT1jKSxjPWMuc2libGluZztjPWU7bnVsbD09PWM/KGU9Yi5jaGlsZCxiLmNoaWxkPW51bGwpOihlPWMuc2libGluZyxjLnNpYmxpbmc9bnVsbCk7eGooYiwhMSxlLGMsZik7YnJlYWs7Y2FzZSBcImJhY2t3YXJkc1wiOmM9bnVsbDtlPWIuY2hpbGQ7Zm9yKGIuY2hpbGQ9bnVsbDtudWxsIT09ZTspe2E9ZS5hbHRlcm5hdGU7aWYobnVsbCE9PWEmJm51bGw9PT1NaChhKSl7Yi5jaGlsZD1lO2JyZWFrfWE9ZS5zaWJsaW5nO2Uuc2libGluZz1jO2M9ZTtlPWF9eGooYiwhMCxjLG51bGwsZik7YnJlYWs7Y2FzZSBcInRvZ2V0aGVyXCI6eGooYiwhMSxudWxsLG51bGwsdm9pZCAwKTticmVhaztkZWZhdWx0OmIubWVtb2l6ZWRTdGF0ZT1udWxsfXJldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gamooYSxiKXswPT09KGIubW9kZSYxKSYmbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9Mil9ZnVuY3Rpb24gJGkoYSxiLGMpe251bGwhPT1hJiYoYi5kZXBlbmRlbmNpZXM9YS5kZXBlbmRlbmNpZXMpO2hofD1iLmxhbmVzO2lmKDA9PT0oYyZiLmNoaWxkTGFuZXMpKXJldHVybiBudWxsO2lmKG51bGwhPT1hJiZiLmNoaWxkIT09YS5jaGlsZCl0aHJvdyBFcnJvcihwKDE1MykpO2lmKG51bGwhPT1iLmNoaWxkKXthPWIuY2hpbGQ7Yz13aChhLGEucGVuZGluZ1Byb3BzKTtiLmNoaWxkPWM7Zm9yKGMucmV0dXJuPWI7bnVsbCE9PWEuc2libGluZzspYT1hLnNpYmxpbmcsYz1jLnNpYmxpbmc9d2goYSxhLnBlbmRpbmdQcm9wcyksYy5yZXR1cm49YjtjLnNpYmxpbmc9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIHpqKGEsYixjKXtzd2l0Y2goYi50YWcpe2Nhc2UgMzpsaihiKTtJZygpO2JyZWFrO2Nhc2UgNTpLaChiKTticmVhaztjYXNlIDE6WmYoYi50eXBlKSYmY2coYik7YnJlYWs7Y2FzZSA0OkloKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMDp2YXIgZD1iLnR5cGUuX2NvbnRleHQsZT1iLm1lbW9pemVkUHJvcHMudmFsdWU7RyhNZyxkLl9jdXJyZW50VmFsdWUpO2QuX2N1cnJlbnRWYWx1ZT1lO2JyZWFrO2Nhc2UgMTM6ZD1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQpe2lmKG51bGwhPT1kLmRlaHlkcmF0ZWQpcmV0dXJuIEcoTSxNLmN1cnJlbnQmMSksYi5mbGFnc3w9MTI4LG51bGw7aWYoMCE9PShjJmIuY2hpbGQuY2hpbGRMYW5lcykpcmV0dXJuIHBqKGEsYixjKTtHKE0sTS5jdXJyZW50JjEpO2E9JGkoYSxiLGMpO3JldHVybiBudWxsIT09YT9hLnNpYmxpbmc6bnVsbH1HKE0sTS5jdXJyZW50JjEpO2JyZWFrO2Nhc2UgMTk6ZD0wIT09KGMmXG5iLmNoaWxkTGFuZXMpO2lmKDAhPT0oYS5mbGFncyYxMjgpKXtpZihkKXJldHVybiB5aihhLGIsYyk7Yi5mbGFnc3w9MTI4fWU9Yi5tZW1vaXplZFN0YXRlO251bGwhPT1lJiYoZS5yZW5kZXJpbmc9bnVsbCxlLnRhaWw9bnVsbCxlLmxhc3RFZmZlY3Q9bnVsbCk7RyhNLE0uY3VycmVudCk7aWYoZClicmVhaztlbHNlIHJldHVybiBudWxsO2Nhc2UgMjI6Y2FzZSAyMzpyZXR1cm4gYi5sYW5lcz0wLGVqKGEsYixjKX1yZXR1cm4gJGkoYSxiLGMpfXZhciBBaixCaixDaixEajtcbkFqPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPWIuY2hpbGQ7bnVsbCE9PWM7KXtpZig1PT09Yy50YWd8fDY9PT1jLnRhZylhLmFwcGVuZENoaWxkKGMuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1jLnRhZyYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1iKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fTtCaj1mdW5jdGlvbigpe307XG5Daj1mdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1hLm1lbW9pemVkUHJvcHM7aWYoZSE9PWQpe2E9Yi5zdGF0ZU5vZGU7SGgoRWguY3VycmVudCk7dmFyIGY9bnVsbDtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6ZT1ZYShhLGUpO2Q9WWEoYSxkKTtmPVtdO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjplPUEoe30sZSx7dmFsdWU6dm9pZCAwfSk7ZD1BKHt9LGQse3ZhbHVlOnZvaWQgMH0pO2Y9W107YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6ZT1nYihhLGUpO2Q9Z2IoYSxkKTtmPVtdO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiIT09dHlwZW9mIGUub25DbGljayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQub25DbGljayYmKGEub25jbGljaz1CZil9dWIoYyxkKTt2YXIgZztjPW51bGw7Zm9yKGwgaW4gZSlpZighZC5oYXNPd25Qcm9wZXJ0eShsKSYmZS5oYXNPd25Qcm9wZXJ0eShsKSYmbnVsbCE9ZVtsXSlpZihcInN0eWxlXCI9PT1sKXt2YXIgaD1lW2xdO2ZvcihnIGluIGgpaC5oYXNPd25Qcm9wZXJ0eShnKSYmXG4oY3x8KGM9e30pLGNbZ109XCJcIil9ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWwmJlwiY2hpbGRyZW5cIiE9PWwmJlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1sJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09bCYmXCJhdXRvRm9jdXNcIiE9PWwmJihlYS5oYXNPd25Qcm9wZXJ0eShsKT9mfHwoZj1bXSk6KGY9Znx8W10pLnB1c2gobCxudWxsKSk7Zm9yKGwgaW4gZCl7dmFyIGs9ZFtsXTtoPW51bGwhPWU/ZVtsXTp2b2lkIDA7aWYoZC5oYXNPd25Qcm9wZXJ0eShsKSYmayE9PWgmJihudWxsIT1rfHxudWxsIT1oKSlpZihcInN0eWxlXCI9PT1sKWlmKGgpe2ZvcihnIGluIGgpIWguaGFzT3duUHJvcGVydHkoZyl8fGsmJmsuaGFzT3duUHJvcGVydHkoZyl8fChjfHwoYz17fSksY1tnXT1cIlwiKTtmb3IoZyBpbiBrKWsuaGFzT3duUHJvcGVydHkoZykmJmhbZ10hPT1rW2ddJiYoY3x8KGM9e30pLGNbZ109a1tnXSl9ZWxzZSBjfHwoZnx8KGY9W10pLGYucHVzaChsLFxuYykpLGM9aztlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09bD8oaz1rP2suX19odG1sOnZvaWQgMCxoPWg/aC5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJmghPT1rJiYoZj1mfHxbXSkucHVzaChsLGspKTpcImNoaWxkcmVuXCI9PT1sP1wic3RyaW5nXCIhPT10eXBlb2YgayYmXCJudW1iZXJcIiE9PXR5cGVvZiBrfHwoZj1mfHxbXSkucHVzaChsLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWwmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1sJiYoZWEuaGFzT3duUHJvcGVydHkobCk/KG51bGwhPWsmJlwib25TY3JvbGxcIj09PWwmJkQoXCJzY3JvbGxcIixhKSxmfHxoPT09a3x8KGY9W10pKTooZj1mfHxbXSkucHVzaChsLGspKX1jJiYoZj1mfHxbXSkucHVzaChcInN0eWxlXCIsYyk7dmFyIGw9ZjtpZihiLnVwZGF0ZVF1ZXVlPWwpYi5mbGFnc3w9NH19O0RqPWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiYoYi5mbGFnc3w9NCl9O1xuZnVuY3Rpb24gRWooYSxiKXtpZighSSlzd2l0Y2goYS50YWlsTW9kZSl7Y2FzZSBcImhpZGRlblwiOmI9YS50YWlsO2Zvcih2YXIgYz1udWxsO251bGwhPT1iOyludWxsIT09Yi5hbHRlcm5hdGUmJihjPWIpLGI9Yi5zaWJsaW5nO251bGw9PT1jP2EudGFpbD1udWxsOmMuc2libGluZz1udWxsO2JyZWFrO2Nhc2UgXCJjb2xsYXBzZWRcIjpjPWEudGFpbDtmb3IodmFyIGQ9bnVsbDtudWxsIT09YzspbnVsbCE9PWMuYWx0ZXJuYXRlJiYoZD1jKSxjPWMuc2libGluZztudWxsPT09ZD9ifHxudWxsPT09YS50YWlsP2EudGFpbD1udWxsOmEudGFpbC5zaWJsaW5nPW51bGw6ZC5zaWJsaW5nPW51bGx9fVxuZnVuY3Rpb24gUyhhKXt2YXIgYj1udWxsIT09YS5hbHRlcm5hdGUmJmEuYWx0ZXJuYXRlLmNoaWxkPT09YS5jaGlsZCxjPTAsZD0wO2lmKGIpZm9yKHZhciBlPWEuY2hpbGQ7bnVsbCE9PWU7KWN8PWUubGFuZXN8ZS5jaGlsZExhbmVzLGR8PWUuc3VidHJlZUZsYWdzJjE0NjgwMDY0LGR8PWUuZmxhZ3MmMTQ2ODAwNjQsZS5yZXR1cm49YSxlPWUuc2libGluZztlbHNlIGZvcihlPWEuY2hpbGQ7bnVsbCE9PWU7KWN8PWUubGFuZXN8ZS5jaGlsZExhbmVzLGR8PWUuc3VidHJlZUZsYWdzLGR8PWUuZmxhZ3MsZS5yZXR1cm49YSxlPWUuc2libGluZzthLnN1YnRyZWVGbGFnc3w9ZDthLmNoaWxkTGFuZXM9YztyZXR1cm4gYn1cbmZ1bmN0aW9uIEZqKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wczt3ZyhiKTtzd2l0Y2goYi50YWcpe2Nhc2UgMjpjYXNlIDE2OmNhc2UgMTU6Y2FzZSAwOmNhc2UgMTE6Y2FzZSA3OmNhc2UgODpjYXNlIDEyOmNhc2UgOTpjYXNlIDE0OnJldHVybiBTKGIpLG51bGw7Y2FzZSAxOnJldHVybiBaZihiLnR5cGUpJiYkZigpLFMoYiksbnVsbDtjYXNlIDM6ZD1iLnN0YXRlTm9kZTtKaCgpO0UoV2YpO0UoSCk7T2goKTtkLnBlbmRpbmdDb250ZXh0JiYoZC5jb250ZXh0PWQucGVuZGluZ0NvbnRleHQsZC5wZW5kaW5nQ29udGV4dD1udWxsKTtpZihudWxsPT09YXx8bnVsbD09PWEuY2hpbGQpR2coYik/Yi5mbGFnc3w9NDpudWxsPT09YXx8YS5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCYmMD09PShiLmZsYWdzJjI1Nil8fChiLmZsYWdzfD0xMDI0LG51bGwhPT16ZyYmKEdqKHpnKSx6Zz1udWxsKSk7QmooYSxiKTtTKGIpO3JldHVybiBudWxsO2Nhc2UgNTpMaChiKTt2YXIgZT1IaChHaC5jdXJyZW50KTtcbmM9Yi50eXBlO2lmKG51bGwhPT1hJiZudWxsIT1iLnN0YXRlTm9kZSlDaihhLGIsYyxkLGUpLGEucmVmIT09Yi5yZWYmJihiLmZsYWdzfD01MTIsYi5mbGFnc3w9MjA5NzE1Mik7ZWxzZXtpZighZCl7aWYobnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHAoMTY2KSk7UyhiKTtyZXR1cm4gbnVsbH1hPUhoKEVoLmN1cnJlbnQpO2lmKEdnKGIpKXtkPWIuc3RhdGVOb2RlO2M9Yi50eXBlO3ZhciBmPWIubWVtb2l6ZWRQcm9wcztkW09mXT1iO2RbUGZdPWY7YT0wIT09KGIubW9kZSYxKTtzd2l0Y2goYyl7Y2FzZSBcImRpYWxvZ1wiOkQoXCJjYW5jZWxcIixkKTtEKFwiY2xvc2VcIixkKTticmVhaztjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkQoXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGU9MDtlPGxmLmxlbmd0aDtlKyspRChsZltlXSxkKTticmVhaztjYXNlIFwic291cmNlXCI6RChcImVycm9yXCIsZCk7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RChcImVycm9yXCIsXG5kKTtEKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RChcInRvZ2dsZVwiLGQpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOlphKGQsZik7RChcImludmFsaWRcIixkKTticmVhaztjYXNlIFwic2VsZWN0XCI6ZC5fd3JhcHBlclN0YXRlPXt3YXNNdWx0aXBsZTohIWYubXVsdGlwbGV9O0QoXCJpbnZhbGlkXCIsZCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aGIoZCxmKSxEKFwiaW52YWxpZFwiLGQpfXViKGMsZik7ZT1udWxsO2Zvcih2YXIgZyBpbiBmKWlmKGYuaGFzT3duUHJvcGVydHkoZykpe3ZhciBoPWZbZ107XCJjaGlsZHJlblwiPT09Zz9cInN0cmluZ1wiPT09dHlwZW9mIGg/ZC50ZXh0Q29udGVudCE9PWgmJighMCE9PWYuc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nJiZBZihkLnRleHRDb250ZW50LGgsYSksZT1bXCJjaGlsZHJlblwiLGhdKTpcIm51bWJlclwiPT09dHlwZW9mIGgmJmQudGV4dENvbnRlbnQhPT1cIlwiK2gmJighMCE9PWYuc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nJiZBZihkLnRleHRDb250ZW50LFxuaCxhKSxlPVtcImNoaWxkcmVuXCIsXCJcIitoXSk6ZWEuaGFzT3duUHJvcGVydHkoZykmJm51bGwhPWgmJlwib25TY3JvbGxcIj09PWcmJkQoXCJzY3JvbGxcIixkKX1zd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6VmEoZCk7ZGIoZCxmLCEwKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpWYShkKTtqYihkKTticmVhaztjYXNlIFwic2VsZWN0XCI6Y2FzZSBcIm9wdGlvblwiOmJyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGYub25DbGljayYmKGQub25jbGljaz1CZil9ZD1lO2IudXBkYXRlUXVldWU9ZDtudWxsIT09ZCYmKGIuZmxhZ3N8PTQpfWVsc2V7Zz05PT09ZS5ub2RlVHlwZT9lOmUub3duZXJEb2N1bWVudDtcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWEmJihhPWtiKGMpKTtcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/XCJzY3JpcHRcIj09PWM/KGE9Zy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGEuaW5uZXJIVE1MPVwiPHNjcmlwdD5cXHgzYy9zY3JpcHQ+XCIsYT1hLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCkpOlxuXCJzdHJpbmdcIj09PXR5cGVvZiBkLmlzP2E9Zy5jcmVhdGVFbGVtZW50KGMse2lzOmQuaXN9KTooYT1nLmNyZWF0ZUVsZW1lbnQoYyksXCJzZWxlY3RcIj09PWMmJihnPWEsZC5tdWx0aXBsZT9nLm11bHRpcGxlPSEwOmQuc2l6ZSYmKGcuc2l6ZT1kLnNpemUpKSk6YT1nLmNyZWF0ZUVsZW1lbnROUyhhLGMpO2FbT2ZdPWI7YVtQZl09ZDtBaihhLGIsITEsITEpO2Iuc3RhdGVOb2RlPWE7YTp7Zz12YihjLGQpO3N3aXRjaChjKXtjYXNlIFwiZGlhbG9nXCI6RChcImNhbmNlbFwiLGEpO0QoXCJjbG9zZVwiLGEpO2U9ZDticmVhaztjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkQoXCJsb2FkXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihlPTA7ZTxsZi5sZW5ndGg7ZSsrKUQobGZbZV0sYSk7ZT1kO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpEKFwiZXJyb3JcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RChcImVycm9yXCIsXG5hKTtEKFwibG9hZFwiLGEpO2U9ZDticmVhaztjYXNlIFwiZGV0YWlsc1wiOkQoXCJ0b2dnbGVcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImlucHV0XCI6WmEoYSxkKTtlPVlhKGEsZCk7RChcImludmFsaWRcIixhKTticmVhaztjYXNlIFwib3B0aW9uXCI6ZT1kO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhZC5tdWx0aXBsZX07ZT1BKHt9LGQse3ZhbHVlOnZvaWQgMH0pO0QoXCJpbnZhbGlkXCIsYSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aGIoYSxkKTtlPWdiKGEsZCk7RChcImludmFsaWRcIixhKTticmVhaztkZWZhdWx0OmU9ZH11YihjLGUpO2g9ZTtmb3IoZiBpbiBoKWlmKGguaGFzT3duUHJvcGVydHkoZikpe3ZhciBrPWhbZl07XCJzdHlsZVwiPT09Zj9zYihhLGspOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWY/KGs9az9rLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmbmIoYSxrKSk6XCJjaGlsZHJlblwiPT09Zj9cInN0cmluZ1wiPT09dHlwZW9mIGs/KFwidGV4dGFyZWFcIiE9PVxuY3x8XCJcIiE9PWspJiZvYihhLGspOlwibnVtYmVyXCI9PT10eXBlb2YgayYmb2IoYSxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1mJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09ZiYmXCJhdXRvRm9jdXNcIiE9PWYmJihlYS5oYXNPd25Qcm9wZXJ0eShmKT9udWxsIT1rJiZcIm9uU2Nyb2xsXCI9PT1mJiZEKFwic2Nyb2xsXCIsYSk6bnVsbCE9ayYmdGEoYSxmLGssZykpfXN3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpWYShhKTtkYihhLGQsITEpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZhKGEpO2piKGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1kLnZhbHVlJiZhLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIitTYShkLnZhbHVlKSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEubXVsdGlwbGU9ISFkLm11bHRpcGxlO2Y9ZC52YWx1ZTtudWxsIT1mP2ZiKGEsISFkLm11bHRpcGxlLGYsITEpOm51bGwhPWQuZGVmYXVsdFZhbHVlJiZmYihhLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSxcbiEwKTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLm9uQ2xpY2smJihhLm9uY2xpY2s9QmYpfXN3aXRjaChjKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOmQ9ISFkLmF1dG9Gb2N1czticmVhayBhO2Nhc2UgXCJpbWdcIjpkPSEwO2JyZWFrIGE7ZGVmYXVsdDpkPSExfX1kJiYoYi5mbGFnc3w9NCl9bnVsbCE9PWIucmVmJiYoYi5mbGFnc3w9NTEyLGIuZmxhZ3N8PTIwOTcxNTIpfVMoYik7cmV0dXJuIG51bGw7Y2FzZSA2OmlmKGEmJm51bGwhPWIuc3RhdGVOb2RlKURqKGEsYixhLm1lbW9pemVkUHJvcHMsZCk7ZWxzZXtpZihcInN0cmluZ1wiIT09dHlwZW9mIGQmJm51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcihwKDE2NikpO2M9SGgoR2guY3VycmVudCk7SGgoRWguY3VycmVudCk7aWYoR2coYikpe2Q9Yi5zdGF0ZU5vZGU7Yz1iLm1lbW9pemVkUHJvcHM7ZFtPZl09YjtpZihmPWQubm9kZVZhbHVlIT09YylpZihhPVxueGcsbnVsbCE9PWEpc3dpdGNoKGEudGFnKXtjYXNlIDM6QWYoZC5ub2RlVmFsdWUsYywwIT09KGEubW9kZSYxKSk7YnJlYWs7Y2FzZSA1OiEwIT09YS5tZW1vaXplZFByb3BzLnN1cHByZXNzSHlkcmF0aW9uV2FybmluZyYmQWYoZC5ub2RlVmFsdWUsYywwIT09KGEubW9kZSYxKSl9ZiYmKGIuZmxhZ3N8PTQpfWVsc2UgZD0oOT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQpLmNyZWF0ZVRleHROb2RlKGQpLGRbT2ZdPWIsYi5zdGF0ZU5vZGU9ZH1TKGIpO3JldHVybiBudWxsO2Nhc2UgMTM6RShNKTtkPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsPT09YXx8bnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYmbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZS5kZWh5ZHJhdGVkKXtpZihJJiZudWxsIT09eWcmJjAhPT0oYi5tb2RlJjEpJiYwPT09KGIuZmxhZ3MmMTI4KSlIZygpLElnKCksYi5mbGFnc3w9OTg1NjAsZj0hMTtlbHNlIGlmKGY9R2coYiksbnVsbCE9PWQmJm51bGwhPT1kLmRlaHlkcmF0ZWQpe2lmKG51bGw9PT1cbmEpe2lmKCFmKXRocm93IEVycm9yKHAoMzE4KSk7Zj1iLm1lbW9pemVkU3RhdGU7Zj1udWxsIT09Zj9mLmRlaHlkcmF0ZWQ6bnVsbDtpZighZil0aHJvdyBFcnJvcihwKDMxNykpO2ZbT2ZdPWJ9ZWxzZSBJZygpLDA9PT0oYi5mbGFncyYxMjgpJiYoYi5tZW1vaXplZFN0YXRlPW51bGwpLGIuZmxhZ3N8PTQ7UyhiKTtmPSExfWVsc2UgbnVsbCE9PXpnJiYoR2ooemcpLHpnPW51bGwpLGY9ITA7aWYoIWYpcmV0dXJuIGIuZmxhZ3MmNjU1MzY/YjpudWxsfWlmKDAhPT0oYi5mbGFncyYxMjgpKXJldHVybiBiLmxhbmVzPWMsYjtkPW51bGwhPT1kO2QhPT0obnVsbCE9PWEmJm51bGwhPT1hLm1lbW9pemVkU3RhdGUpJiZkJiYoYi5jaGlsZC5mbGFnc3w9ODE5MiwwIT09KGIubW9kZSYxKSYmKG51bGw9PT1hfHwwIT09KE0uY3VycmVudCYxKT8wPT09VCYmKFQ9Myk6dWooKSkpO251bGwhPT1iLnVwZGF0ZVF1ZXVlJiYoYi5mbGFnc3w9NCk7UyhiKTtyZXR1cm4gbnVsbDtjYXNlIDQ6cmV0dXJuIEpoKCksXG5CaihhLGIpLG51bGw9PT1hJiZzZihiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxTKGIpLG51bGw7Y2FzZSAxMDpyZXR1cm4gUmcoYi50eXBlLl9jb250ZXh0KSxTKGIpLG51bGw7Y2FzZSAxNzpyZXR1cm4gWmYoYi50eXBlKSYmJGYoKSxTKGIpLG51bGw7Y2FzZSAxOTpFKE0pO2Y9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGw9PT1mKXJldHVybiBTKGIpLG51bGw7ZD0wIT09KGIuZmxhZ3MmMTI4KTtnPWYucmVuZGVyaW5nO2lmKG51bGw9PT1nKWlmKGQpRWooZiwhMSk7ZWxzZXtpZigwIT09VHx8bnVsbCE9PWEmJjAhPT0oYS5mbGFncyYxMjgpKWZvcihhPWIuY2hpbGQ7bnVsbCE9PWE7KXtnPU1oKGEpO2lmKG51bGwhPT1nKXtiLmZsYWdzfD0xMjg7RWooZiwhMSk7ZD1nLnVwZGF0ZVF1ZXVlO251bGwhPT1kJiYoYi51cGRhdGVRdWV1ZT1kLGIuZmxhZ3N8PTQpO2Iuc3VidHJlZUZsYWdzPTA7ZD1jO2ZvcihjPWIuY2hpbGQ7bnVsbCE9PWM7KWY9YyxhPWQsZi5mbGFncyY9MTQ2ODAwNjYsXG5nPWYuYWx0ZXJuYXRlLG51bGw9PT1nPyhmLmNoaWxkTGFuZXM9MCxmLmxhbmVzPWEsZi5jaGlsZD1udWxsLGYuc3VidHJlZUZsYWdzPTAsZi5tZW1vaXplZFByb3BzPW51bGwsZi5tZW1vaXplZFN0YXRlPW51bGwsZi51cGRhdGVRdWV1ZT1udWxsLGYuZGVwZW5kZW5jaWVzPW51bGwsZi5zdGF0ZU5vZGU9bnVsbCk6KGYuY2hpbGRMYW5lcz1nLmNoaWxkTGFuZXMsZi5sYW5lcz1nLmxhbmVzLGYuY2hpbGQ9Zy5jaGlsZCxmLnN1YnRyZWVGbGFncz0wLGYuZGVsZXRpb25zPW51bGwsZi5tZW1vaXplZFByb3BzPWcubWVtb2l6ZWRQcm9wcyxmLm1lbW9pemVkU3RhdGU9Zy5tZW1vaXplZFN0YXRlLGYudXBkYXRlUXVldWU9Zy51cGRhdGVRdWV1ZSxmLnR5cGU9Zy50eXBlLGE9Zy5kZXBlbmRlbmNpZXMsZi5kZXBlbmRlbmNpZXM9bnVsbD09PWE/bnVsbDp7bGFuZXM6YS5sYW5lcyxmaXJzdENvbnRleHQ6YS5maXJzdENvbnRleHR9KSxjPWMuc2libGluZztHKE0sTS5jdXJyZW50JjF8Mik7cmV0dXJuIGIuY2hpbGR9YT1cbmEuc2libGluZ31udWxsIT09Zi50YWlsJiZCKCk+SGomJihiLmZsYWdzfD0xMjgsZD0hMCxFaihmLCExKSxiLmxhbmVzPTQxOTQzMDQpfWVsc2V7aWYoIWQpaWYoYT1NaChnKSxudWxsIT09YSl7aWYoYi5mbGFnc3w9MTI4LGQ9ITAsYz1hLnVwZGF0ZVF1ZXVlLG51bGwhPT1jJiYoYi51cGRhdGVRdWV1ZT1jLGIuZmxhZ3N8PTQpLEVqKGYsITApLG51bGw9PT1mLnRhaWwmJlwiaGlkZGVuXCI9PT1mLnRhaWxNb2RlJiYhZy5hbHRlcm5hdGUmJiFJKXJldHVybiBTKGIpLG51bGx9ZWxzZSAyKkIoKS1mLnJlbmRlcmluZ1N0YXJ0VGltZT5IaiYmMTA3Mzc0MTgyNCE9PWMmJihiLmZsYWdzfD0xMjgsZD0hMCxFaihmLCExKSxiLmxhbmVzPTQxOTQzMDQpO2YuaXNCYWNrd2FyZHM/KGcuc2libGluZz1iLmNoaWxkLGIuY2hpbGQ9Zyk6KGM9Zi5sYXN0LG51bGwhPT1jP2Muc2libGluZz1nOmIuY2hpbGQ9ZyxmLmxhc3Q9Zyl9aWYobnVsbCE9PWYudGFpbClyZXR1cm4gYj1mLnRhaWwsZi5yZW5kZXJpbmc9XG5iLGYudGFpbD1iLnNpYmxpbmcsZi5yZW5kZXJpbmdTdGFydFRpbWU9QigpLGIuc2libGluZz1udWxsLGM9TS5jdXJyZW50LEcoTSxkP2MmMXwyOmMmMSksYjtTKGIpO3JldHVybiBudWxsO2Nhc2UgMjI6Y2FzZSAyMzpyZXR1cm4gSWooKSxkPW51bGwhPT1iLm1lbW9pemVkU3RhdGUsbnVsbCE9PWEmJm51bGwhPT1hLm1lbW9pemVkU3RhdGUhPT1kJiYoYi5mbGFnc3w9ODE5MiksZCYmMCE9PShiLm1vZGUmMSk/MCE9PShnaiYxMDczNzQxODI0KSYmKFMoYiksYi5zdWJ0cmVlRmxhZ3MmNiYmKGIuZmxhZ3N8PTgxOTIpKTpTKGIpLG51bGw7Y2FzZSAyNDpyZXR1cm4gbnVsbDtjYXNlIDI1OnJldHVybiBudWxsfXRocm93IEVycm9yKHAoMTU2LGIudGFnKSk7fVxuZnVuY3Rpb24gSmooYSxiKXt3ZyhiKTtzd2l0Y2goYi50YWcpe2Nhc2UgMTpyZXR1cm4gWmYoYi50eXBlKSYmJGYoKSxhPWIuZmxhZ3MsYSY2NTUzNj8oYi5mbGFncz1hJi02NTUzN3wxMjgsYik6bnVsbDtjYXNlIDM6cmV0dXJuIEpoKCksRShXZiksRShIKSxPaCgpLGE9Yi5mbGFncywwIT09KGEmNjU1MzYpJiYwPT09KGEmMTI4KT8oYi5mbGFncz1hJi02NTUzN3wxMjgsYik6bnVsbDtjYXNlIDU6cmV0dXJuIExoKGIpLG51bGw7Y2FzZSAxMzpFKE0pO2E9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1hJiZudWxsIT09YS5kZWh5ZHJhdGVkKXtpZihudWxsPT09Yi5hbHRlcm5hdGUpdGhyb3cgRXJyb3IocCgzNDApKTtJZygpfWE9Yi5mbGFncztyZXR1cm4gYSY2NTUzNj8oYi5mbGFncz1hJi02NTUzN3wxMjgsYik6bnVsbDtjYXNlIDE5OnJldHVybiBFKE0pLG51bGw7Y2FzZSA0OnJldHVybiBKaCgpLG51bGw7Y2FzZSAxMDpyZXR1cm4gUmcoYi50eXBlLl9jb250ZXh0KSxudWxsO2Nhc2UgMjI6Y2FzZSAyMzpyZXR1cm4gSWooKSxcbm51bGw7Y2FzZSAyNDpyZXR1cm4gbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX12YXIgS2o9ITEsVT0hMSxMaj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha1NldD9XZWFrU2V0OlNldCxWPW51bGw7ZnVuY3Rpb24gTWooYSxiKXt2YXIgYz1hLnJlZjtpZihudWxsIT09YylpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYyl0cnl7YyhudWxsKX1jYXRjaChkKXtXKGEsYixkKX1lbHNlIGMuY3VycmVudD1udWxsfWZ1bmN0aW9uIE5qKGEsYixjKXt0cnl7YygpfWNhdGNoKGQpe1coYSxiLGQpfX12YXIgT2o9ITE7XG5mdW5jdGlvbiBQaihhLGIpe0NmPWRkO2E9TWUoKTtpZihOZShhKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW4gYSl2YXIgYz17c3RhcnQ6YS5zZWxlY3Rpb25TdGFydCxlbmQ6YS5zZWxlY3Rpb25FbmR9O2Vsc2UgYTp7Yz0oYz1hLm93bmVyRG9jdW1lbnQpJiZjLmRlZmF1bHRWaWV3fHx3aW5kb3c7dmFyIGQ9Yy5nZXRTZWxlY3Rpb24mJmMuZ2V0U2VsZWN0aW9uKCk7aWYoZCYmMCE9PWQucmFuZ2VDb3VudCl7Yz1kLmFuY2hvck5vZGU7dmFyIGU9ZC5hbmNob3JPZmZzZXQsZj1kLmZvY3VzTm9kZTtkPWQuZm9jdXNPZmZzZXQ7dHJ5e2Mubm9kZVR5cGUsZi5ub2RlVHlwZX1jYXRjaChGKXtjPW51bGw7YnJlYWsgYX12YXIgZz0wLGg9LTEsaz0tMSxsPTAsbT0wLHE9YSxyPW51bGw7Yjpmb3IoOzspe2Zvcih2YXIgeTs7KXtxIT09Y3x8MCE9PWUmJjMhPT1xLm5vZGVUeXBlfHwoaD1nK2UpO3EhPT1mfHwwIT09ZCYmMyE9PXEubm9kZVR5cGV8fChrPWcrZCk7Mz09PXEubm9kZVR5cGUmJihnKz1cbnEubm9kZVZhbHVlLmxlbmd0aCk7aWYobnVsbD09PSh5PXEuZmlyc3RDaGlsZCkpYnJlYWs7cj1xO3E9eX1mb3IoOzspe2lmKHE9PT1hKWJyZWFrIGI7cj09PWMmJisrbD09PWUmJihoPWcpO3I9PT1mJiYrK209PT1kJiYoaz1nKTtpZihudWxsIT09KHk9cS5uZXh0U2libGluZykpYnJlYWs7cT1yO3I9cS5wYXJlbnROb2RlfXE9eX1jPS0xPT09aHx8LTE9PT1rP251bGw6e3N0YXJ0OmgsZW5kOmt9fWVsc2UgYz1udWxsfWM9Y3x8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgYz1udWxsO0RmPXtmb2N1c2VkRWxlbTphLHNlbGVjdGlvblJhbmdlOmN9O2RkPSExO2ZvcihWPWI7bnVsbCE9PVY7KWlmKGI9VixhPWIuY2hpbGQsMCE9PShiLnN1YnRyZWVGbGFncyYxMDI4KSYmbnVsbCE9PWEpYS5yZXR1cm49YixWPWE7ZWxzZSBmb3IoO251bGwhPT1WOyl7Yj1WO3RyeXt2YXIgbj1iLmFsdGVybmF0ZTtpZigwIT09KGIuZmxhZ3MmMTAyNCkpc3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmJyZWFrO1xuY2FzZSAxOmlmKG51bGwhPT1uKXt2YXIgdD1uLm1lbW9pemVkUHJvcHMsSj1uLm1lbW9pemVkU3RhdGUseD1iLnN0YXRlTm9kZSx3PXguZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoYi5lbGVtZW50VHlwZT09PWIudHlwZT90OkxnKGIudHlwZSx0KSxKKTt4Ll9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlPXd9YnJlYWs7Y2FzZSAzOnZhciB1PWIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87MT09PXUubm9kZVR5cGU/dS50ZXh0Q29udGVudD1cIlwiOjk9PT11Lm5vZGVUeXBlJiZ1LmRvY3VtZW50RWxlbWVudCYmdS5yZW1vdmVDaGlsZCh1LmRvY3VtZW50RWxlbWVudCk7YnJlYWs7Y2FzZSA1OmNhc2UgNjpjYXNlIDQ6Y2FzZSAxNzpicmVhaztkZWZhdWx0OnRocm93IEVycm9yKHAoMTYzKSk7fX1jYXRjaChGKXtXKGIsYi5yZXR1cm4sRil9YT1iLnNpYmxpbmc7aWYobnVsbCE9PWEpe2EucmV0dXJuPWIucmV0dXJuO1Y9YTticmVha31WPWIucmV0dXJufW49T2o7T2o9ITE7cmV0dXJuIG59XG5mdW5jdGlvbiBRaihhLGIsYyl7dmFyIGQ9Yi51cGRhdGVRdWV1ZTtkPW51bGwhPT1kP2QubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1kKXt2YXIgZT1kPWQubmV4dDtkb3tpZigoZS50YWcmYSk9PT1hKXt2YXIgZj1lLmRlc3Ryb3k7ZS5kZXN0cm95PXZvaWQgMDt2b2lkIDAhPT1mJiZOaihiLGMsZil9ZT1lLm5leHR9d2hpbGUoZSE9PWQpfX1mdW5jdGlvbiBSaihhLGIpe2I9Yi51cGRhdGVRdWV1ZTtiPW51bGwhPT1iP2IubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1iKXt2YXIgYz1iPWIubmV4dDtkb3tpZigoYy50YWcmYSk9PT1hKXt2YXIgZD1jLmNyZWF0ZTtjLmRlc3Ryb3k9ZCgpfWM9Yy5uZXh0fXdoaWxlKGMhPT1iKX19ZnVuY3Rpb24gU2ooYSl7dmFyIGI9YS5yZWY7aWYobnVsbCE9PWIpe3ZhciBjPWEuc3RhdGVOb2RlO3N3aXRjaChhLnRhZyl7Y2FzZSA1OmE9YzticmVhaztkZWZhdWx0OmE9Y31cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmIuY3VycmVudD1hfX1cbmZ1bmN0aW9uIFRqKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO251bGwhPT1iJiYoYS5hbHRlcm5hdGU9bnVsbCxUaihiKSk7YS5jaGlsZD1udWxsO2EuZGVsZXRpb25zPW51bGw7YS5zaWJsaW5nPW51bGw7NT09PWEudGFnJiYoYj1hLnN0YXRlTm9kZSxudWxsIT09YiYmKGRlbGV0ZSBiW09mXSxkZWxldGUgYltQZl0sZGVsZXRlIGJbb2ZdLGRlbGV0ZSBiW1FmXSxkZWxldGUgYltSZl0pKTthLnN0YXRlTm9kZT1udWxsO2EucmV0dXJuPW51bGw7YS5kZXBlbmRlbmNpZXM9bnVsbDthLm1lbW9pemVkUHJvcHM9bnVsbDthLm1lbW9pemVkU3RhdGU9bnVsbDthLnBlbmRpbmdQcm9wcz1udWxsO2Euc3RhdGVOb2RlPW51bGw7YS51cGRhdGVRdWV1ZT1udWxsfWZ1bmN0aW9uIFVqKGEpe3JldHVybiA1PT09YS50YWd8fDM9PT1hLnRhZ3x8ND09PWEudGFnfVxuZnVuY3Rpb24gVmooYSl7YTpmb3IoOzspe2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8VWooYS5yZXR1cm4pKXJldHVybiBudWxsO2E9YS5yZXR1cm59YS5zaWJsaW5nLnJldHVybj1hLnJldHVybjtmb3IoYT1hLnNpYmxpbmc7NSE9PWEudGFnJiY2IT09YS50YWcmJjE4IT09YS50YWc7KXtpZihhLmZsYWdzJjIpY29udGludWUgYTtpZihudWxsPT09YS5jaGlsZHx8ND09PWEudGFnKWNvbnRpbnVlIGE7ZWxzZSBhLmNoaWxkLnJldHVybj1hLGE9YS5jaGlsZH1pZighKGEuZmxhZ3MmMikpcmV0dXJuIGEuc3RhdGVOb2RlfX1cbmZ1bmN0aW9uIFdqKGEsYixjKXt2YXIgZD1hLnRhZztpZig1PT09ZHx8Nj09PWQpYT1hLnN0YXRlTm9kZSxiPzg9PT1jLm5vZGVUeXBlP2MucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYSxiKTpjLmluc2VydEJlZm9yZShhLGIpOig4PT09Yy5ub2RlVHlwZT8oYj1jLnBhcmVudE5vZGUsYi5pbnNlcnRCZWZvcmUoYSxjKSk6KGI9YyxiLmFwcGVuZENoaWxkKGEpKSxjPWMuX3JlYWN0Um9vdENvbnRhaW5lcixudWxsIT09YyYmdm9pZCAwIT09Y3x8bnVsbCE9PWIub25jbGlja3x8KGIub25jbGljaz1CZikpO2Vsc2UgaWYoNCE9PWQmJihhPWEuY2hpbGQsbnVsbCE9PWEpKWZvcihXaihhLGIsYyksYT1hLnNpYmxpbmc7bnVsbCE9PWE7KVdqKGEsYixjKSxhPWEuc2libGluZ31cbmZ1bmN0aW9uIFhqKGEsYixjKXt2YXIgZD1hLnRhZztpZig1PT09ZHx8Nj09PWQpYT1hLnN0YXRlTm9kZSxiP2MuaW5zZXJ0QmVmb3JlKGEsYik6Yy5hcHBlbmRDaGlsZChhKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoWGooYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylYaihhLGIsYyksYT1hLnNpYmxpbmd9dmFyIFg9bnVsbCxZaj0hMTtmdW5jdGlvbiBaaihhLGIsYyl7Zm9yKGM9Yy5jaGlsZDtudWxsIT09YzspYWsoYSxiLGMpLGM9Yy5zaWJsaW5nfVxuZnVuY3Rpb24gYWsoYSxiLGMpe2lmKGxjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgbGMub25Db21taXRGaWJlclVubW91bnQpdHJ5e2xjLm9uQ29tbWl0RmliZXJVbm1vdW50KGtjLGMpfWNhdGNoKGgpe31zd2l0Y2goYy50YWcpe2Nhc2UgNTpVfHxNaihjLGIpO2Nhc2UgNjp2YXIgZD1YLGU9WWo7WD1udWxsO1pqKGEsYixjKTtYPWQ7WWo9ZTtudWxsIT09WCYmKFlqPyhhPVgsYz1jLnN0YXRlTm9kZSw4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYyk6YS5yZW1vdmVDaGlsZChjKSk6WC5yZW1vdmVDaGlsZChjLnN0YXRlTm9kZSkpO2JyZWFrO2Nhc2UgMTg6bnVsbCE9PVgmJihZaj8oYT1YLGM9Yy5zdGF0ZU5vZGUsOD09PWEubm9kZVR5cGU/S2YoYS5wYXJlbnROb2RlLGMpOjE9PT1hLm5vZGVUeXBlJiZLZihhLGMpLGJkKGEpKTpLZihYLGMuc3RhdGVOb2RlKSk7YnJlYWs7Y2FzZSA0OmQ9WDtlPVlqO1g9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztZaj0hMDtcblpqKGEsYixjKTtYPWQ7WWo9ZTticmVhaztjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6aWYoIVUmJihkPWMudXBkYXRlUXVldWUsbnVsbCE9PWQmJihkPWQubGFzdEVmZmVjdCxudWxsIT09ZCkpKXtlPWQ9ZC5uZXh0O2Rve3ZhciBmPWUsZz1mLmRlc3Ryb3k7Zj1mLnRhZzt2b2lkIDAhPT1nJiYoMCE9PShmJjIpP05qKGMsYixnKTowIT09KGYmNCkmJk5qKGMsYixnKSk7ZT1lLm5leHR9d2hpbGUoZSE9PWQpfVpqKGEsYixjKTticmVhaztjYXNlIDE6aWYoIVUmJihNaihjLGIpLGQ9Yy5zdGF0ZU5vZGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50V2lsbFVubW91bnQpKXRyeXtkLnByb3BzPWMubWVtb2l6ZWRQcm9wcyxkLnN0YXRlPWMubWVtb2l6ZWRTdGF0ZSxkLmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2goaCl7VyhjLGIsaCl9WmooYSxiLGMpO2JyZWFrO2Nhc2UgMjE6WmooYSxiLGMpO2JyZWFrO2Nhc2UgMjI6Yy5tb2RlJjE/KFU9KGQ9VSl8fG51bGwhPT1cbmMubWVtb2l6ZWRTdGF0ZSxaaihhLGIsYyksVT1kKTpaaihhLGIsYyk7YnJlYWs7ZGVmYXVsdDpaaihhLGIsYyl9fWZ1bmN0aW9uIGJrKGEpe3ZhciBiPWEudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2EudXBkYXRlUXVldWU9bnVsbDt2YXIgYz1hLnN0YXRlTm9kZTtudWxsPT09YyYmKGM9YS5zdGF0ZU5vZGU9bmV3IExqKTtiLmZvckVhY2goZnVuY3Rpb24oYil7dmFyIGQ9Y2suYmluZChudWxsLGEsYik7Yy5oYXMoYil8fChjLmFkZChiKSxiLnRoZW4oZCxkKSl9KX19XG5mdW5jdGlvbiBkayhhLGIpe3ZhciBjPWIuZGVsZXRpb25zO2lmKG51bGwhPT1jKWZvcih2YXIgZD0wO2Q8Yy5sZW5ndGg7ZCsrKXt2YXIgZT1jW2RdO3RyeXt2YXIgZj1hLGc9YixoPWc7YTpmb3IoO251bGwhPT1oOyl7c3dpdGNoKGgudGFnKXtjYXNlIDU6WD1oLnN0YXRlTm9kZTtZaj0hMTticmVhayBhO2Nhc2UgMzpYPWguc3RhdGVOb2RlLmNvbnRhaW5lckluZm87WWo9ITA7YnJlYWsgYTtjYXNlIDQ6WD1oLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO1lqPSEwO2JyZWFrIGF9aD1oLnJldHVybn1pZihudWxsPT09WCl0aHJvdyBFcnJvcihwKDE2MCkpO2FrKGYsZyxlKTtYPW51bGw7WWo9ITE7dmFyIGs9ZS5hbHRlcm5hdGU7bnVsbCE9PWsmJihrLnJldHVybj1udWxsKTtlLnJldHVybj1udWxsfWNhdGNoKGwpe1coZSxiLGwpfX1pZihiLnN1YnRyZWVGbGFncyYxMjg1NClmb3IoYj1iLmNoaWxkO251bGwhPT1iOyllayhiLGEpLGI9Yi5zaWJsaW5nfVxuZnVuY3Rpb24gZWsoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZSxkPWEuZmxhZ3M7c3dpdGNoKGEudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6ZGsoYixhKTtmayhhKTtpZihkJjQpe3RyeXtRaigzLGEsYS5yZXR1cm4pLFJqKDMsYSl9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfXRyeXtRaig1LGEsYS5yZXR1cm4pfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19YnJlYWs7Y2FzZSAxOmRrKGIsYSk7ZmsoYSk7ZCY1MTImJm51bGwhPT1jJiZNaihjLGMucmV0dXJuKTticmVhaztjYXNlIDU6ZGsoYixhKTtmayhhKTtkJjUxMiYmbnVsbCE9PWMmJk1qKGMsYy5yZXR1cm4pO2lmKGEuZmxhZ3MmMzIpe3ZhciBlPWEuc3RhdGVOb2RlO3RyeXtvYihlLFwiXCIpfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19aWYoZCY0JiYoZT1hLnN0YXRlTm9kZSxudWxsIT1lKSl7dmFyIGY9YS5tZW1vaXplZFByb3BzLGc9bnVsbCE9PWM/Yy5tZW1vaXplZFByb3BzOmYsaD1hLnR5cGUsaz1hLnVwZGF0ZVF1ZXVlO1xuYS51cGRhdGVRdWV1ZT1udWxsO2lmKG51bGwhPT1rKXRyeXtcImlucHV0XCI9PT1oJiZcInJhZGlvXCI9PT1mLnR5cGUmJm51bGwhPWYubmFtZSYmYWIoZSxmKTt2YihoLGcpO3ZhciBsPXZiKGgsZik7Zm9yKGc9MDtnPGsubGVuZ3RoO2crPTIpe3ZhciBtPWtbZ10scT1rW2crMV07XCJzdHlsZVwiPT09bT9zYihlLHEpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PW0/bmIoZSxxKTpcImNoaWxkcmVuXCI9PT1tP29iKGUscSk6dGEoZSxtLHEsbCl9c3dpdGNoKGgpe2Nhc2UgXCJpbnB1dFwiOmJiKGUsZik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aWIoZSxmKTticmVhaztjYXNlIFwic2VsZWN0XCI6dmFyIHI9ZS5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlO2UuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWYubXVsdGlwbGU7dmFyIHk9Zi52YWx1ZTtudWxsIT15P2ZiKGUsISFmLm11bHRpcGxlLHksITEpOnIhPT0hIWYubXVsdGlwbGUmJihudWxsIT1mLmRlZmF1bHRWYWx1ZT9mYihlLCEhZi5tdWx0aXBsZSxcbmYuZGVmYXVsdFZhbHVlLCEwKTpmYihlLCEhZi5tdWx0aXBsZSxmLm11bHRpcGxlP1tdOlwiXCIsITEpKX1lW1BmXT1mfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19YnJlYWs7Y2FzZSA2OmRrKGIsYSk7ZmsoYSk7aWYoZCY0KXtpZihudWxsPT09YS5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IocCgxNjIpKTtlPWEuc3RhdGVOb2RlO2Y9YS5tZW1vaXplZFByb3BzO3RyeXtlLm5vZGVWYWx1ZT1mfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19YnJlYWs7Y2FzZSAzOmRrKGIsYSk7ZmsoYSk7aWYoZCY0JiZudWxsIT09YyYmYy5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCl0cnl7YmQoYi5jb250YWluZXJJbmZvKX1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9YnJlYWs7Y2FzZSA0OmRrKGIsYSk7ZmsoYSk7YnJlYWs7Y2FzZSAxMzpkayhiLGEpO2ZrKGEpO2U9YS5jaGlsZDtlLmZsYWdzJjgxOTImJihmPW51bGwhPT1lLm1lbW9pemVkU3RhdGUsZS5zdGF0ZU5vZGUuaXNIaWRkZW49ZiwhZnx8XG5udWxsIT09ZS5hbHRlcm5hdGUmJm51bGwhPT1lLmFsdGVybmF0ZS5tZW1vaXplZFN0YXRlfHwoZ2s9QigpKSk7ZCY0JiZiayhhKTticmVhaztjYXNlIDIyOm09bnVsbCE9PWMmJm51bGwhPT1jLm1lbW9pemVkU3RhdGU7YS5tb2RlJjE/KFU9KGw9VSl8fG0sZGsoYixhKSxVPWwpOmRrKGIsYSk7ZmsoYSk7aWYoZCY4MTkyKXtsPW51bGwhPT1hLm1lbW9pemVkU3RhdGU7aWYoKGEuc3RhdGVOb2RlLmlzSGlkZGVuPWwpJiYhbSYmMCE9PShhLm1vZGUmMSkpZm9yKFY9YSxtPWEuY2hpbGQ7bnVsbCE9PW07KXtmb3IocT1WPW07bnVsbCE9PVY7KXtyPVY7eT1yLmNoaWxkO3N3aXRjaChyLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OlFqKDQscixyLnJldHVybik7YnJlYWs7Y2FzZSAxOk1qKHIsci5yZXR1cm4pO3ZhciBuPXIuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuLmNvbXBvbmVudFdpbGxVbm1vdW50KXtkPXI7Yz1yLnJldHVybjt0cnl7Yj1kLG4ucHJvcHM9XG5iLm1lbW9pemVkUHJvcHMsbi5zdGF0ZT1iLm1lbW9pemVkU3RhdGUsbi5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKHQpe1coZCxjLHQpfX1icmVhaztjYXNlIDU6TWoocixyLnJldHVybik7YnJlYWs7Y2FzZSAyMjppZihudWxsIT09ci5tZW1vaXplZFN0YXRlKXtoayhxKTtjb250aW51ZX19bnVsbCE9PXk/KHkucmV0dXJuPXIsVj15KTpoayhxKX1tPW0uc2libGluZ31hOmZvcihtPW51bGwscT1hOzspe2lmKDU9PT1xLnRhZyl7aWYobnVsbD09PW0pe209cTt0cnl7ZT1xLnN0YXRlTm9kZSxsPyhmPWUuc3R5bGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuc2V0UHJvcGVydHk/Zi5zZXRQcm9wZXJ0eShcImRpc3BsYXlcIixcIm5vbmVcIixcImltcG9ydGFudFwiKTpmLmRpc3BsYXk9XCJub25lXCIpOihoPXEuc3RhdGVOb2RlLGs9cS5tZW1vaXplZFByb3BzLnN0eWxlLGc9dm9pZCAwIT09ayYmbnVsbCE9PWsmJmsuaGFzT3duUHJvcGVydHkoXCJkaXNwbGF5XCIpP2suZGlzcGxheTpudWxsLGguc3R5bGUuZGlzcGxheT1cbnJiKFwiZGlzcGxheVwiLGcpKX1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fX1lbHNlIGlmKDY9PT1xLnRhZyl7aWYobnVsbD09PW0pdHJ5e3Euc3RhdGVOb2RlLm5vZGVWYWx1ZT1sP1wiXCI6cS5tZW1vaXplZFByb3BzfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19ZWxzZSBpZigoMjIhPT1xLnRhZyYmMjMhPT1xLnRhZ3x8bnVsbD09PXEubWVtb2l6ZWRTdGF0ZXx8cT09PWEpJiZudWxsIT09cS5jaGlsZCl7cS5jaGlsZC5yZXR1cm49cTtxPXEuY2hpbGQ7Y29udGludWV9aWYocT09PWEpYnJlYWsgYTtmb3IoO251bGw9PT1xLnNpYmxpbmc7KXtpZihudWxsPT09cS5yZXR1cm58fHEucmV0dXJuPT09YSlicmVhayBhO209PT1xJiYobT1udWxsKTtxPXEucmV0dXJufW09PT1xJiYobT1udWxsKTtxLnNpYmxpbmcucmV0dXJuPXEucmV0dXJuO3E9cS5zaWJsaW5nfX1icmVhaztjYXNlIDE5OmRrKGIsYSk7ZmsoYSk7ZCY0JiZiayhhKTticmVhaztjYXNlIDIxOmJyZWFrO2RlZmF1bHQ6ZGsoYixcbmEpLGZrKGEpfX1mdW5jdGlvbiBmayhhKXt2YXIgYj1hLmZsYWdzO2lmKGImMil7dHJ5e2E6e2Zvcih2YXIgYz1hLnJldHVybjtudWxsIT09Yzspe2lmKFVqKGMpKXt2YXIgZD1jO2JyZWFrIGF9Yz1jLnJldHVybn10aHJvdyBFcnJvcihwKDE2MCkpO31zd2l0Y2goZC50YWcpe2Nhc2UgNTp2YXIgZT1kLnN0YXRlTm9kZTtkLmZsYWdzJjMyJiYob2IoZSxcIlwiKSxkLmZsYWdzJj0tMzMpO3ZhciBmPVZqKGEpO1hqKGEsZixlKTticmVhaztjYXNlIDM6Y2FzZSA0OnZhciBnPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8saD1WaihhKTtXaihhLGgsZyk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihwKDE2MSkpO319Y2F0Y2goayl7VyhhLGEucmV0dXJuLGspfWEuZmxhZ3MmPS0zfWImNDA5NiYmKGEuZmxhZ3MmPS00MDk3KX1mdW5jdGlvbiBpayhhLGIsYyl7Vj1hO2prKGEsYixjKX1cbmZ1bmN0aW9uIGprKGEsYixjKXtmb3IodmFyIGQ9MCE9PShhLm1vZGUmMSk7bnVsbCE9PVY7KXt2YXIgZT1WLGY9ZS5jaGlsZDtpZigyMj09PWUudGFnJiZkKXt2YXIgZz1udWxsIT09ZS5tZW1vaXplZFN0YXRlfHxLajtpZighZyl7dmFyIGg9ZS5hbHRlcm5hdGUsaz1udWxsIT09aCYmbnVsbCE9PWgubWVtb2l6ZWRTdGF0ZXx8VTtoPUtqO3ZhciBsPVU7S2o9ZztpZigoVT1rKSYmIWwpZm9yKFY9ZTtudWxsIT09VjspZz1WLGs9Zy5jaGlsZCwyMj09PWcudGFnJiZudWxsIT09Zy5tZW1vaXplZFN0YXRlP2trKGUpOm51bGwhPT1rPyhrLnJldHVybj1nLFY9ayk6a2soZSk7Zm9yKDtudWxsIT09ZjspVj1mLGprKGYsYixjKSxmPWYuc2libGluZztWPWU7S2o9aDtVPWx9bGsoYSxiLGMpfWVsc2UgMCE9PShlLnN1YnRyZWVGbGFncyY4NzcyKSYmbnVsbCE9PWY/KGYucmV0dXJuPWUsVj1mKTpsayhhLGIsYyl9fVxuZnVuY3Rpb24gbGsoYSl7Zm9yKDtudWxsIT09Vjspe3ZhciBiPVY7aWYoMCE9PShiLmZsYWdzJjg3NzIpKXt2YXIgYz1iLmFsdGVybmF0ZTt0cnl7aWYoMCE9PShiLmZsYWdzJjg3NzIpKXN3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpVfHxSaig1LGIpO2JyZWFrO2Nhc2UgMTp2YXIgZD1iLnN0YXRlTm9kZTtpZihiLmZsYWdzJjQmJiFVKWlmKG51bGw9PT1jKWQuY29tcG9uZW50RGlkTW91bnQoKTtlbHNle3ZhciBlPWIuZWxlbWVudFR5cGU9PT1iLnR5cGU/Yy5tZW1vaXplZFByb3BzOkxnKGIudHlwZSxjLm1lbW9pemVkUHJvcHMpO2QuY29tcG9uZW50RGlkVXBkYXRlKGUsYy5tZW1vaXplZFN0YXRlLGQuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpfXZhciBmPWIudXBkYXRlUXVldWU7bnVsbCE9PWYmJmloKGIsZixkKTticmVhaztjYXNlIDM6dmFyIGc9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09Zyl7Yz1udWxsO2lmKG51bGwhPT1iLmNoaWxkKXN3aXRjaChiLmNoaWxkLnRhZyl7Y2FzZSA1OmM9XG5iLmNoaWxkLnN0YXRlTm9kZTticmVhaztjYXNlIDE6Yz1iLmNoaWxkLnN0YXRlTm9kZX1paChiLGcsYyl9YnJlYWs7Y2FzZSA1OnZhciBoPWIuc3RhdGVOb2RlO2lmKG51bGw9PT1jJiZiLmZsYWdzJjQpe2M9aDt2YXIgaz1iLm1lbW9pemVkUHJvcHM7c3dpdGNoKGIudHlwZSl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjprLmF1dG9Gb2N1cyYmYy5mb2N1cygpO2JyZWFrO2Nhc2UgXCJpbWdcIjprLnNyYyYmKGMuc3JjPWsuc3JjKX19YnJlYWs7Y2FzZSA2OmJyZWFrO2Nhc2UgNDpicmVhaztjYXNlIDEyOmJyZWFrO2Nhc2UgMTM6aWYobnVsbD09PWIubWVtb2l6ZWRTdGF0ZSl7dmFyIGw9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWwpe3ZhciBtPWwubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09bSl7dmFyIHE9bS5kZWh5ZHJhdGVkO251bGwhPT1xJiZiZChxKX19fWJyZWFrO2Nhc2UgMTk6Y2FzZSAxNzpjYXNlIDIxOmNhc2UgMjI6Y2FzZSAyMzpjYXNlIDI1OmJyZWFrO1xuZGVmYXVsdDp0aHJvdyBFcnJvcihwKDE2MykpO31VfHxiLmZsYWdzJjUxMiYmU2ooYil9Y2F0Y2gocil7VyhiLGIucmV0dXJuLHIpfX1pZihiPT09YSl7Vj1udWxsO2JyZWFrfWM9Yi5zaWJsaW5nO2lmKG51bGwhPT1jKXtjLnJldHVybj1iLnJldHVybjtWPWM7YnJlYWt9Vj1iLnJldHVybn19ZnVuY3Rpb24gaGsoYSl7Zm9yKDtudWxsIT09Vjspe3ZhciBiPVY7aWYoYj09PWEpe1Y9bnVsbDticmVha312YXIgYz1iLnNpYmxpbmc7aWYobnVsbCE9PWMpe2MucmV0dXJuPWIucmV0dXJuO1Y9YzticmVha31WPWIucmV0dXJufX1cbmZ1bmN0aW9uIGtrKGEpe2Zvcig7bnVsbCE9PVY7KXt2YXIgYj1WO3RyeXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6dmFyIGM9Yi5yZXR1cm47dHJ5e1JqKDQsYil9Y2F0Y2goayl7VyhiLGMsayl9YnJlYWs7Y2FzZSAxOnZhciBkPWIuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZE1vdW50KXt2YXIgZT1iLnJldHVybjt0cnl7ZC5jb21wb25lbnREaWRNb3VudCgpfWNhdGNoKGspe1coYixlLGspfX12YXIgZj1iLnJldHVybjt0cnl7U2ooYil9Y2F0Y2goayl7VyhiLGYsayl9YnJlYWs7Y2FzZSA1OnZhciBnPWIucmV0dXJuO3RyeXtTaihiKX1jYXRjaChrKXtXKGIsZyxrKX19fWNhdGNoKGspe1coYixiLnJldHVybixrKX1pZihiPT09YSl7Vj1udWxsO2JyZWFrfXZhciBoPWIuc2libGluZztpZihudWxsIT09aCl7aC5yZXR1cm49Yi5yZXR1cm47Vj1oO2JyZWFrfVY9Yi5yZXR1cm59fVxudmFyIG1rPU1hdGguY2VpbCxuaz11YS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLG9rPXVhLlJlYWN0Q3VycmVudE93bmVyLHBrPXVhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLEs9MCxSPW51bGwsWT1udWxsLFo9MCxnaj0wLGZqPVVmKDApLFQ9MCxxaz1udWxsLGhoPTAscms9MCxzaz0wLHRrPW51bGwsdWs9bnVsbCxnaz0wLEhqPUluZmluaXR5LHZrPW51bGwsUGk9ITEsUWk9bnVsbCxTaT1udWxsLHdrPSExLHhrPW51bGwseWs9MCx6az0wLEFrPW51bGwsQms9LTEsQ2s9MDtmdW5jdGlvbiBMKCl7cmV0dXJuIDAhPT0oSyY2KT9CKCk6LTEhPT1Caz9CazpCaz1CKCl9XG5mdW5jdGlvbiBsaChhKXtpZigwPT09KGEubW9kZSYxKSlyZXR1cm4gMTtpZigwIT09KEsmMikmJjAhPT1aKXJldHVybiBaJi1aO2lmKG51bGwhPT1LZy50cmFuc2l0aW9uKXJldHVybiAwPT09Q2smJihDaz15YygpKSxDazthPUM7aWYoMCE9PWEpcmV0dXJuIGE7YT13aW5kb3cuZXZlbnQ7YT12b2lkIDA9PT1hPzE2OmpkKGEudHlwZSk7cmV0dXJuIGF9ZnVuY3Rpb24gbWgoYSxiLGMsZCl7aWYoNTA8emspdGhyb3cgems9MCxBaz1udWxsLEVycm9yKHAoMTg1KSk7QWMoYSxjLGQpO2lmKDA9PT0oSyYyKXx8YSE9PVIpYT09PVImJigwPT09KEsmMikmJihya3w9YyksND09PVQmJkRrKGEsWikpLEVrKGEsZCksMT09PWMmJjA9PT1LJiYwPT09KGIubW9kZSYxKSYmKEhqPUIoKSs1MDAsZmcmJmpnKCkpfVxuZnVuY3Rpb24gRWsoYSxiKXt2YXIgYz1hLmNhbGxiYWNrTm9kZTt3YyhhLGIpO3ZhciBkPXVjKGEsYT09PVI/WjowKTtpZigwPT09ZCludWxsIT09YyYmYmMoYyksYS5jYWxsYmFja05vZGU9bnVsbCxhLmNhbGxiYWNrUHJpb3JpdHk9MDtlbHNlIGlmKGI9ZCYtZCxhLmNhbGxiYWNrUHJpb3JpdHkhPT1iKXtudWxsIT1jJiZiYyhjKTtpZigxPT09YikwPT09YS50YWc/aWcoRmsuYmluZChudWxsLGEpKTpoZyhGay5iaW5kKG51bGwsYSkpLEpmKGZ1bmN0aW9uKCl7MD09PShLJjYpJiZqZygpfSksYz1udWxsO2Vsc2V7c3dpdGNoKERjKGQpKXtjYXNlIDE6Yz1mYzticmVhaztjYXNlIDQ6Yz1nYzticmVhaztjYXNlIDE2OmM9aGM7YnJlYWs7Y2FzZSA1MzY4NzA5MTI6Yz1qYzticmVhaztkZWZhdWx0OmM9aGN9Yz1HayhjLEhrLmJpbmQobnVsbCxhKSl9YS5jYWxsYmFja1ByaW9yaXR5PWI7YS5jYWxsYmFja05vZGU9Y319XG5mdW5jdGlvbiBIayhhLGIpe0JrPS0xO0NrPTA7aWYoMCE9PShLJjYpKXRocm93IEVycm9yKHAoMzI3KSk7dmFyIGM9YS5jYWxsYmFja05vZGU7aWYoSWsoKSYmYS5jYWxsYmFja05vZGUhPT1jKXJldHVybiBudWxsO3ZhciBkPXVjKGEsYT09PVI/WjowKTtpZigwPT09ZClyZXR1cm4gbnVsbDtpZigwIT09KGQmMzApfHwwIT09KGQmYS5leHBpcmVkTGFuZXMpfHxiKWI9SmsoYSxkKTtlbHNle2I9ZDt2YXIgZT1LO0t8PTI7dmFyIGY9S2soKTtpZihSIT09YXx8WiE9PWIpdms9bnVsbCxIaj1CKCkrNTAwLExrKGEsYik7ZG8gdHJ5e01rKCk7YnJlYWt9Y2F0Y2goaCl7TmsoYSxoKX13aGlsZSgxKTtRZygpO25rLmN1cnJlbnQ9ZjtLPWU7bnVsbCE9PVk/Yj0wOihSPW51bGwsWj0wLGI9VCl9aWYoMCE9PWIpezI9PT1iJiYoZT14YyhhKSwwIT09ZSYmKGQ9ZSxiPU9rKGEsZSkpKTtpZigxPT09Yil0aHJvdyBjPXFrLExrKGEsMCksRGsoYSxkKSxFayhhLEIoKSksYztpZig2PT09YilEayhhLGQpO1xuZWxzZXtlPWEuY3VycmVudC5hbHRlcm5hdGU7aWYoMD09PShkJjMwKSYmIVBrKGUpJiYoYj1KayhhLGQpLDI9PT1iJiYoZj14YyhhKSwwIT09ZiYmKGQ9ZixiPU9rKGEsZikpKSwxPT09YikpdGhyb3cgYz1xayxMayhhLDApLERrKGEsZCksRWsoYSxCKCkpLGM7YS5maW5pc2hlZFdvcms9ZTthLmZpbmlzaGVkTGFuZXM9ZDtzd2l0Y2goYil7Y2FzZSAwOmNhc2UgMTp0aHJvdyBFcnJvcihwKDM0NSkpO2Nhc2UgMjpRayhhLHVrLHZrKTticmVhaztjYXNlIDM6RGsoYSxkKTtpZigoZCYxMzAwMjM0MjQpPT09ZCYmKGI9Z2srNTAwLUIoKSwxMDxiKSl7aWYoMCE9PXVjKGEsMCkpYnJlYWs7ZT1hLnN1c3BlbmRlZExhbmVzO2lmKChlJmQpIT09ZCl7TCgpO2EucGluZ2VkTGFuZXN8PWEuc3VzcGVuZGVkTGFuZXMmZTticmVha31hLnRpbWVvdXRIYW5kbGU9RmYoUWsuYmluZChudWxsLGEsdWssdmspLGIpO2JyZWFrfVFrKGEsdWssdmspO2JyZWFrO2Nhc2UgNDpEayhhLGQpO2lmKChkJjQxOTQyNDApPT09XG5kKWJyZWFrO2I9YS5ldmVudFRpbWVzO2ZvcihlPS0xOzA8ZDspe3ZhciBnPTMxLW9jKGQpO2Y9MTw8ZztnPWJbZ107Zz5lJiYoZT1nKTtkJj1+Zn1kPWU7ZD1CKCktZDtkPSgxMjA+ZD8xMjA6NDgwPmQ/NDgwOjEwODA+ZD8xMDgwOjE5MjA+ZD8xOTIwOjNFMz5kPzNFMzo0MzIwPmQ/NDMyMDoxOTYwKm1rKGQvMTk2MCkpLWQ7aWYoMTA8ZCl7YS50aW1lb3V0SGFuZGxlPUZmKFFrLmJpbmQobnVsbCxhLHVrLHZrKSxkKTticmVha31RayhhLHVrLHZrKTticmVhaztjYXNlIDU6UWsoYSx1ayx2ayk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihwKDMyOSkpO319fUVrKGEsQigpKTtyZXR1cm4gYS5jYWxsYmFja05vZGU9PT1jP0hrLmJpbmQobnVsbCxhKTpudWxsfVxuZnVuY3Rpb24gT2soYSxiKXt2YXIgYz10azthLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQmJihMayhhLGIpLmZsYWdzfD0yNTYpO2E9SmsoYSxiKTsyIT09YSYmKGI9dWssdWs9YyxudWxsIT09YiYmR2ooYikpO3JldHVybiBhfWZ1bmN0aW9uIEdqKGEpe251bGw9PT11az91az1hOnVrLnB1c2guYXBwbHkodWssYSl9XG5mdW5jdGlvbiBQayhhKXtmb3IodmFyIGI9YTs7KXtpZihiLmZsYWdzJjE2Mzg0KXt2YXIgYz1iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1jJiYoYz1jLnN0b3JlcyxudWxsIT09YykpZm9yKHZhciBkPTA7ZDxjLmxlbmd0aDtkKyspe3ZhciBlPWNbZF0sZj1lLmdldFNuYXBzaG90O2U9ZS52YWx1ZTt0cnl7aWYoIUhlKGYoKSxlKSlyZXR1cm4hMX1jYXRjaChnKXtyZXR1cm4hMX19fWM9Yi5jaGlsZDtpZihiLnN1YnRyZWVGbGFncyYxNjM4NCYmbnVsbCE9PWMpYy5yZXR1cm49YixiPWM7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4hMDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fXJldHVybiEwfVxuZnVuY3Rpb24gRGsoYSxiKXtiJj1+c2s7YiY9fnJrO2Euc3VzcGVuZGVkTGFuZXN8PWI7YS5waW5nZWRMYW5lcyY9fmI7Zm9yKGE9YS5leHBpcmF0aW9uVGltZXM7MDxiOyl7dmFyIGM9MzEtb2MoYiksZD0xPDxjO2FbY109LTE7YiY9fmR9fWZ1bmN0aW9uIEZrKGEpe2lmKDAhPT0oSyY2KSl0aHJvdyBFcnJvcihwKDMyNykpO0lrKCk7dmFyIGI9dWMoYSwwKTtpZigwPT09KGImMSkpcmV0dXJuIEVrKGEsQigpKSxudWxsO3ZhciBjPUprKGEsYik7aWYoMCE9PWEudGFnJiYyPT09Yyl7dmFyIGQ9eGMoYSk7MCE9PWQmJihiPWQsYz1PayhhLGQpKX1pZigxPT09Yyl0aHJvdyBjPXFrLExrKGEsMCksRGsoYSxiKSxFayhhLEIoKSksYztpZig2PT09Yyl0aHJvdyBFcnJvcihwKDM0NSkpO2EuZmluaXNoZWRXb3JrPWEuY3VycmVudC5hbHRlcm5hdGU7YS5maW5pc2hlZExhbmVzPWI7UWsoYSx1ayx2ayk7RWsoYSxCKCkpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gUmsoYSxiKXt2YXIgYz1LO0t8PTE7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7Sz1jLDA9PT1LJiYoSGo9QigpKzUwMCxmZyYmamcoKSl9fWZ1bmN0aW9uIFNrKGEpe251bGwhPT14ayYmMD09PXhrLnRhZyYmMD09PShLJjYpJiZJaygpO3ZhciBiPUs7S3w9MTt2YXIgYz1way50cmFuc2l0aW9uLGQ9Qzt0cnl7aWYocGsudHJhbnNpdGlvbj1udWxsLEM9MSxhKXJldHVybiBhKCl9ZmluYWxseXtDPWQscGsudHJhbnNpdGlvbj1jLEs9YiwwPT09KEsmNikmJmpnKCl9fWZ1bmN0aW9uIElqKCl7Z2o9ZmouY3VycmVudDtFKGZqKX1cbmZ1bmN0aW9uIExrKGEsYil7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkTGFuZXM9MDt2YXIgYz1hLnRpbWVvdXRIYW5kbGU7LTEhPT1jJiYoYS50aW1lb3V0SGFuZGxlPS0xLEdmKGMpKTtpZihudWxsIT09WSlmb3IoYz1ZLnJldHVybjtudWxsIT09Yzspe3ZhciBkPWM7d2coZCk7c3dpdGNoKGQudGFnKXtjYXNlIDE6ZD1kLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7bnVsbCE9PWQmJnZvaWQgMCE9PWQmJiRmKCk7YnJlYWs7Y2FzZSAzOkpoKCk7RShXZik7RShIKTtPaCgpO2JyZWFrO2Nhc2UgNTpMaChkKTticmVhaztjYXNlIDQ6SmgoKTticmVhaztjYXNlIDEzOkUoTSk7YnJlYWs7Y2FzZSAxOTpFKE0pO2JyZWFrO2Nhc2UgMTA6UmcoZC50eXBlLl9jb250ZXh0KTticmVhaztjYXNlIDIyOmNhc2UgMjM6SWooKX1jPWMucmV0dXJufVI9YTtZPWE9d2goYS5jdXJyZW50LG51bGwpO1o9Z2o9YjtUPTA7cWs9bnVsbDtzaz1yaz1oaD0wO3VrPXRrPW51bGw7aWYobnVsbCE9PVdnKXtmb3IoYj1cbjA7YjxXZy5sZW5ndGg7YisrKWlmKGM9V2dbYl0sZD1jLmludGVybGVhdmVkLG51bGwhPT1kKXtjLmludGVybGVhdmVkPW51bGw7dmFyIGU9ZC5uZXh0LGY9Yy5wZW5kaW5nO2lmKG51bGwhPT1mKXt2YXIgZz1mLm5leHQ7Zi5uZXh0PWU7ZC5uZXh0PWd9Yy5wZW5kaW5nPWR9V2c9bnVsbH1yZXR1cm4gYX1cbmZ1bmN0aW9uIE5rKGEsYil7ZG97dmFyIGM9WTt0cnl7UWcoKTtQaC5jdXJyZW50PWFpO2lmKFNoKXtmb3IodmFyIGQ9Ti5tZW1vaXplZFN0YXRlO251bGwhPT1kOyl7dmFyIGU9ZC5xdWV1ZTtudWxsIT09ZSYmKGUucGVuZGluZz1udWxsKTtkPWQubmV4dH1TaD0hMX1SaD0wO1A9Tz1OPW51bGw7VGg9ITE7VWg9MDtvay5jdXJyZW50PW51bGw7aWYobnVsbD09PWN8fG51bGw9PT1jLnJldHVybil7VD0xO3FrPWI7WT1udWxsO2JyZWFrfWE6e3ZhciBmPWEsZz1jLnJldHVybixoPWMsaz1iO2I9WjtoLmZsYWdzfD0zMjc2ODtpZihudWxsIT09ayYmXCJvYmplY3RcIj09PXR5cGVvZiBrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2Ygay50aGVuKXt2YXIgbD1rLG09aCxxPW0udGFnO2lmKDA9PT0obS5tb2RlJjEpJiYoMD09PXF8fDExPT09cXx8MTU9PT1xKSl7dmFyIHI9bS5hbHRlcm5hdGU7cj8obS51cGRhdGVRdWV1ZT1yLnVwZGF0ZVF1ZXVlLG0ubWVtb2l6ZWRTdGF0ZT1yLm1lbW9pemVkU3RhdGUsXG5tLmxhbmVzPXIubGFuZXMpOihtLnVwZGF0ZVF1ZXVlPW51bGwsbS5tZW1vaXplZFN0YXRlPW51bGwpfXZhciB5PVZpKGcpO2lmKG51bGwhPT15KXt5LmZsYWdzJj0tMjU3O1dpKHksZyxoLGYsYik7eS5tb2RlJjEmJlRpKGYsbCxiKTtiPXk7az1sO3ZhciBuPWIudXBkYXRlUXVldWU7aWYobnVsbD09PW4pe3ZhciB0PW5ldyBTZXQ7dC5hZGQoayk7Yi51cGRhdGVRdWV1ZT10fWVsc2Ugbi5hZGQoayk7YnJlYWsgYX1lbHNle2lmKDA9PT0oYiYxKSl7VGkoZixsLGIpO3VqKCk7YnJlYWsgYX1rPUVycm9yKHAoNDI2KSl9fWVsc2UgaWYoSSYmaC5tb2RlJjEpe3ZhciBKPVZpKGcpO2lmKG51bGwhPT1KKXswPT09KEouZmxhZ3MmNjU1MzYpJiYoSi5mbGFnc3w9MjU2KTtXaShKLGcsaCxmLGIpO0pnKEtpKGssaCkpO2JyZWFrIGF9fWY9az1LaShrLGgpOzQhPT1UJiYoVD0yKTtudWxsPT09dGs/dGs9W2ZdOnRrLnB1c2goZik7Zj1nO2Rve3N3aXRjaChmLnRhZyl7Y2FzZSAzOmYuZmxhZ3N8PTY1NTM2O1xuYiY9LWI7Zi5sYW5lc3w9Yjt2YXIgeD1PaShmLGssYik7ZmgoZix4KTticmVhayBhO2Nhc2UgMTpoPWs7dmFyIHc9Zi50eXBlLHU9Zi5zdGF0ZU5vZGU7aWYoMD09PShmLmZsYWdzJjEyOCkmJihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygdy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fG51bGwhPT11JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgdS5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1TaXx8IVNpLmhhcyh1KSkpKXtmLmZsYWdzfD02NTUzNjtiJj0tYjtmLmxhbmVzfD1iO3ZhciBGPVJpKGYsaCxiKTtmaChmLEYpO2JyZWFrIGF9fWY9Zi5yZXR1cm59d2hpbGUobnVsbCE9PWYpfVRrKGMpfWNhdGNoKG5hKXtiPW5hO1k9PT1jJiZudWxsIT09YyYmKFk9Yz1jLnJldHVybik7Y29udGludWV9YnJlYWt9d2hpbGUoMSl9ZnVuY3Rpb24gS2soKXt2YXIgYT1uay5jdXJyZW50O25rLmN1cnJlbnQ9YWk7cmV0dXJuIG51bGw9PT1hP2FpOmF9XG5mdW5jdGlvbiB1aigpe2lmKDA9PT1UfHwzPT09VHx8Mj09PVQpVD00O251bGw9PT1SfHwwPT09KGhoJjI2ODQzNTQ1NSkmJjA9PT0ocmsmMjY4NDM1NDU1KXx8RGsoUixaKX1mdW5jdGlvbiBKayhhLGIpe3ZhciBjPUs7S3w9Mjt2YXIgZD1LaygpO2lmKFIhPT1hfHxaIT09Yil2az1udWxsLExrKGEsYik7ZG8gdHJ5e1VrKCk7YnJlYWt9Y2F0Y2goZSl7TmsoYSxlKX13aGlsZSgxKTtRZygpO0s9Yztuay5jdXJyZW50PWQ7aWYobnVsbCE9PVkpdGhyb3cgRXJyb3IocCgyNjEpKTtSPW51bGw7Wj0wO3JldHVybiBUfWZ1bmN0aW9uIFVrKCl7Zm9yKDtudWxsIT09WTspVmsoWSl9ZnVuY3Rpb24gTWsoKXtmb3IoO251bGwhPT1ZJiYhY2MoKTspVmsoWSl9ZnVuY3Rpb24gVmsoYSl7dmFyIGI9V2soYS5hbHRlcm5hdGUsYSxnaik7YS5tZW1vaXplZFByb3BzPWEucGVuZGluZ1Byb3BzO251bGw9PT1iP1RrKGEpOlk9Yjtvay5jdXJyZW50PW51bGx9XG5mdW5jdGlvbiBUayhhKXt2YXIgYj1hO2Rve3ZhciBjPWIuYWx0ZXJuYXRlO2E9Yi5yZXR1cm47aWYoMD09PShiLmZsYWdzJjMyNzY4KSl7aWYoYz1GaihjLGIsZ2opLG51bGwhPT1jKXtZPWM7cmV0dXJufX1lbHNle2M9SmooYyxiKTtpZihudWxsIT09Yyl7Yy5mbGFncyY9MzI3Njc7WT1jO3JldHVybn1pZihudWxsIT09YSlhLmZsYWdzfD0zMjc2OCxhLnN1YnRyZWVGbGFncz0wLGEuZGVsZXRpb25zPW51bGw7ZWxzZXtUPTY7WT1udWxsO3JldHVybn19Yj1iLnNpYmxpbmc7aWYobnVsbCE9PWIpe1k9YjtyZXR1cm59WT1iPWF9d2hpbGUobnVsbCE9PWIpOzA9PT1UJiYoVD01KX1mdW5jdGlvbiBRayhhLGIsYyl7dmFyIGQ9QyxlPXBrLnRyYW5zaXRpb247dHJ5e3BrLnRyYW5zaXRpb249bnVsbCxDPTEsWGsoYSxiLGMsZCl9ZmluYWxseXtway50cmFuc2l0aW9uPWUsQz1kfXJldHVybiBudWxsfVxuZnVuY3Rpb24gWGsoYSxiLGMsZCl7ZG8gSWsoKTt3aGlsZShudWxsIT09eGspO2lmKDAhPT0oSyY2KSl0aHJvdyBFcnJvcihwKDMyNykpO2M9YS5maW5pc2hlZFdvcms7dmFyIGU9YS5maW5pc2hlZExhbmVzO2lmKG51bGw9PT1jKXJldHVybiBudWxsO2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZExhbmVzPTA7aWYoYz09PWEuY3VycmVudCl0aHJvdyBFcnJvcihwKDE3NykpO2EuY2FsbGJhY2tOb2RlPW51bGw7YS5jYWxsYmFja1ByaW9yaXR5PTA7dmFyIGY9Yy5sYW5lc3xjLmNoaWxkTGFuZXM7QmMoYSxmKTthPT09UiYmKFk9Uj1udWxsLFo9MCk7MD09PShjLnN1YnRyZWVGbGFncyYyMDY0KSYmMD09PShjLmZsYWdzJjIwNjQpfHx3a3x8KHdrPSEwLEdrKGhjLGZ1bmN0aW9uKCl7SWsoKTtyZXR1cm4gbnVsbH0pKTtmPTAhPT0oYy5mbGFncyYxNTk5MCk7aWYoMCE9PShjLnN1YnRyZWVGbGFncyYxNTk5MCl8fGYpe2Y9cGsudHJhbnNpdGlvbjtway50cmFuc2l0aW9uPW51bGw7XG52YXIgZz1DO0M9MTt2YXIgaD1LO0t8PTQ7b2suY3VycmVudD1udWxsO1BqKGEsYyk7ZWsoYyxhKTtPZShEZik7ZGQ9ISFDZjtEZj1DZj1udWxsO2EuY3VycmVudD1jO2lrKGMsYSxlKTtkYygpO0s9aDtDPWc7cGsudHJhbnNpdGlvbj1mfWVsc2UgYS5jdXJyZW50PWM7d2smJih3az0hMSx4az1hLHlrPWUpO2Y9YS5wZW5kaW5nTGFuZXM7MD09PWYmJihTaT1udWxsKTttYyhjLnN0YXRlTm9kZSxkKTtFayhhLEIoKSk7aWYobnVsbCE9PWIpZm9yKGQ9YS5vblJlY292ZXJhYmxlRXJyb3IsYz0wO2M8Yi5sZW5ndGg7YysrKWU9YltjXSxkKGUudmFsdWUse2NvbXBvbmVudFN0YWNrOmUuc3RhY2ssZGlnZXN0OmUuZGlnZXN0fSk7aWYoUGkpdGhyb3cgUGk9ITEsYT1RaSxRaT1udWxsLGE7MCE9PSh5ayYxKSYmMCE9PWEudGFnJiZJaygpO2Y9YS5wZW5kaW5nTGFuZXM7MCE9PShmJjEpP2E9PT1Baz96aysrOih6az0wLEFrPWEpOnprPTA7amcoKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIElrKCl7aWYobnVsbCE9PXhrKXt2YXIgYT1EYyh5ayksYj1way50cmFuc2l0aW9uLGM9Qzt0cnl7cGsudHJhbnNpdGlvbj1udWxsO0M9MTY+YT8xNjphO2lmKG51bGw9PT14ayl2YXIgZD0hMTtlbHNle2E9eGs7eGs9bnVsbDt5az0wO2lmKDAhPT0oSyY2KSl0aHJvdyBFcnJvcihwKDMzMSkpO3ZhciBlPUs7S3w9NDtmb3IoVj1hLmN1cnJlbnQ7bnVsbCE9PVY7KXt2YXIgZj1WLGc9Zi5jaGlsZDtpZigwIT09KFYuZmxhZ3MmMTYpKXt2YXIgaD1mLmRlbGV0aW9ucztpZihudWxsIT09aCl7Zm9yKHZhciBrPTA7azxoLmxlbmd0aDtrKyspe3ZhciBsPWhba107Zm9yKFY9bDtudWxsIT09Vjspe3ZhciBtPVY7c3dpdGNoKG0udGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OlFqKDgsbSxmKX12YXIgcT1tLmNoaWxkO2lmKG51bGwhPT1xKXEucmV0dXJuPW0sVj1xO2Vsc2UgZm9yKDtudWxsIT09Vjspe209Vjt2YXIgcj1tLnNpYmxpbmcseT1tLnJldHVybjtUaihtKTtpZihtPT09XG5sKXtWPW51bGw7YnJlYWt9aWYobnVsbCE9PXIpe3IucmV0dXJuPXk7Vj1yO2JyZWFrfVY9eX19fXZhciBuPWYuYWx0ZXJuYXRlO2lmKG51bGwhPT1uKXt2YXIgdD1uLmNoaWxkO2lmKG51bGwhPT10KXtuLmNoaWxkPW51bGw7ZG97dmFyIEo9dC5zaWJsaW5nO3Quc2libGluZz1udWxsO3Q9Sn13aGlsZShudWxsIT09dCl9fVY9Zn19aWYoMCE9PShmLnN1YnRyZWVGbGFncyYyMDY0KSYmbnVsbCE9PWcpZy5yZXR1cm49ZixWPWc7ZWxzZSBiOmZvcig7bnVsbCE9PVY7KXtmPVY7aWYoMCE9PShmLmZsYWdzJjIwNDgpKXN3aXRjaChmLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpRaig5LGYsZi5yZXR1cm4pfXZhciB4PWYuc2libGluZztpZihudWxsIT09eCl7eC5yZXR1cm49Zi5yZXR1cm47Vj14O2JyZWFrIGJ9Vj1mLnJldHVybn19dmFyIHc9YS5jdXJyZW50O2ZvcihWPXc7bnVsbCE9PVY7KXtnPVY7dmFyIHU9Zy5jaGlsZDtpZigwIT09KGcuc3VidHJlZUZsYWdzJjIwNjQpJiZudWxsIT09XG51KXUucmV0dXJuPWcsVj11O2Vsc2UgYjpmb3IoZz13O251bGwhPT1WOyl7aD1WO2lmKDAhPT0oaC5mbGFncyYyMDQ4KSl0cnl7c3dpdGNoKGgudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OlJqKDksaCl9fWNhdGNoKG5hKXtXKGgsaC5yZXR1cm4sbmEpfWlmKGg9PT1nKXtWPW51bGw7YnJlYWsgYn12YXIgRj1oLnNpYmxpbmc7aWYobnVsbCE9PUYpe0YucmV0dXJuPWgucmV0dXJuO1Y9RjticmVhayBifVY9aC5yZXR1cm59fUs9ZTtqZygpO2lmKGxjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgbGMub25Qb3N0Q29tbWl0RmliZXJSb290KXRyeXtsYy5vblBvc3RDb21taXRGaWJlclJvb3Qoa2MsYSl9Y2F0Y2gobmEpe31kPSEwfXJldHVybiBkfWZpbmFsbHl7Qz1jLHBrLnRyYW5zaXRpb249Yn19cmV0dXJuITF9ZnVuY3Rpb24gWWsoYSxiLGMpe2I9S2koYyxiKTtiPU9pKGEsYiwxKTthPWRoKGEsYiwxKTtiPUwoKTtudWxsIT09YSYmKEFjKGEsMSxiKSxFayhhLGIpKX1cbmZ1bmN0aW9uIFcoYSxiLGMpe2lmKDM9PT1hLnRhZylZayhhLGEsYyk7ZWxzZSBmb3IoO251bGwhPT1iOyl7aWYoMz09PWIudGFnKXtZayhiLGEsYyk7YnJlYWt9ZWxzZSBpZigxPT09Yi50YWcpe3ZhciBkPWIuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1TaXx8IVNpLmhhcyhkKSkpe2E9S2koYyxhKTthPVJpKGIsYSwxKTtiPWRoKGIsYSwxKTthPUwoKTtudWxsIT09YiYmKEFjKGIsMSxhKSxFayhiLGEpKTticmVha319Yj1iLnJldHVybn19XG5mdW5jdGlvbiBVaShhLGIsYyl7dmFyIGQ9YS5waW5nQ2FjaGU7bnVsbCE9PWQmJmQuZGVsZXRlKGIpO2I9TCgpO2EucGluZ2VkTGFuZXN8PWEuc3VzcGVuZGVkTGFuZXMmYztSPT09YSYmKFomYyk9PT1jJiYoND09PVR8fDM9PT1UJiYoWiYxMzAwMjM0MjQpPT09WiYmNTAwPkIoKS1naz9MayhhLDApOnNrfD1jKTtFayhhLGIpfWZ1bmN0aW9uIFprKGEsYil7MD09PWImJigwPT09KGEubW9kZSYxKT9iPTE6KGI9c2Msc2M8PD0xLDA9PT0oc2MmMTMwMDIzNDI0KSYmKHNjPTQxOTQzMDQpKSk7dmFyIGM9TCgpO2E9WmcoYSxiKTtudWxsIT09YSYmKEFjKGEsYixjKSxFayhhLGMpKX1mdW5jdGlvbiB2aihhKXt2YXIgYj1hLm1lbW9pemVkU3RhdGUsYz0wO251bGwhPT1iJiYoYz1iLnJldHJ5TGFuZSk7WmsoYSxjKX1cbmZ1bmN0aW9uIGNrKGEsYil7dmFyIGM9MDtzd2l0Y2goYS50YWcpe2Nhc2UgMTM6dmFyIGQ9YS5zdGF0ZU5vZGU7dmFyIGU9YS5tZW1vaXplZFN0YXRlO251bGwhPT1lJiYoYz1lLnJldHJ5TGFuZSk7YnJlYWs7Y2FzZSAxOTpkPWEuc3RhdGVOb2RlO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IocCgzMTQpKTt9bnVsbCE9PWQmJmQuZGVsZXRlKGIpO1prKGEsYyl9dmFyIFdrO1xuV2s9ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGwhPT1hKWlmKGEubWVtb2l6ZWRQcm9wcyE9PWIucGVuZGluZ1Byb3BzfHxXZi5jdXJyZW50KVVnPSEwO2Vsc2V7aWYoMD09PShhLmxhbmVzJmMpJiYwPT09KGIuZmxhZ3MmMTI4KSlyZXR1cm4gVWc9ITEsemooYSxiLGMpO1VnPTAhPT0oYS5mbGFncyYxMzEwNzIpPyEwOiExfWVsc2UgVWc9ITEsSSYmMCE9PShiLmZsYWdzJjEwNDg1NzYpJiZ1ZyhiLG5nLGIuaW5kZXgpO2IubGFuZXM9MDtzd2l0Y2goYi50YWcpe2Nhc2UgMjp2YXIgZD1iLnR5cGU7amooYSxiKTthPWIucGVuZGluZ1Byb3BzO3ZhciBlPVlmKGIsSC5jdXJyZW50KTtUZyhiLGMpO2U9WGgobnVsbCxiLGQsYSxlLGMpO3ZhciBmPWJpKCk7Yi5mbGFnc3w9MTtcIm9iamVjdFwiPT09dHlwZW9mIGUmJm51bGwhPT1lJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5yZW5kZXImJnZvaWQgMD09PWUuJCR0eXBlb2Y/KGIudGFnPTEsYi5tZW1vaXplZFN0YXRlPW51bGwsYi51cGRhdGVRdWV1ZT1cbm51bGwsWmYoZCk/KGY9ITAsY2coYikpOmY9ITEsYi5tZW1vaXplZFN0YXRlPW51bGwhPT1lLnN0YXRlJiZ2b2lkIDAhPT1lLnN0YXRlP2Uuc3RhdGU6bnVsbCxhaChiKSxlLnVwZGF0ZXI9bmgsYi5zdGF0ZU5vZGU9ZSxlLl9yZWFjdEludGVybmFscz1iLHJoKGIsZCxhLGMpLGI9a2oobnVsbCxiLGQsITAsZixjKSk6KGIudGFnPTAsSSYmZiYmdmcoYiksWWkobnVsbCxiLGUsYyksYj1iLmNoaWxkKTtyZXR1cm4gYjtjYXNlIDE2OmQ9Yi5lbGVtZW50VHlwZTthOntqaihhLGIpO2E9Yi5wZW5kaW5nUHJvcHM7ZT1kLl9pbml0O2Q9ZShkLl9wYXlsb2FkKTtiLnR5cGU9ZDtlPWIudGFnPSRrKGQpO2E9TGcoZCxhKTtzd2l0Y2goZSl7Y2FzZSAwOmI9ZGoobnVsbCxiLGQsYSxjKTticmVhayBhO2Nhc2UgMTpiPWlqKG51bGwsYixkLGEsYyk7YnJlYWsgYTtjYXNlIDExOmI9WmkobnVsbCxiLGQsYSxjKTticmVhayBhO2Nhc2UgMTQ6Yj1haihudWxsLGIsZCxMZyhkLnR5cGUsYSksYyk7YnJlYWsgYX10aHJvdyBFcnJvcihwKDMwNixcbmQsXCJcIikpO31yZXR1cm4gYjtjYXNlIDA6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkxnKGQsZSksZGooYSxiLGQsZSxjKTtjYXNlIDE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkxnKGQsZSksaWooYSxiLGQsZSxjKTtjYXNlIDM6YTp7bGooYik7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IocCgzODcpKTtkPWIucGVuZGluZ1Byb3BzO2Y9Yi5tZW1vaXplZFN0YXRlO2U9Zi5lbGVtZW50O2JoKGEsYik7Z2goYixkLG51bGwsYyk7dmFyIGc9Yi5tZW1vaXplZFN0YXRlO2Q9Zy5lbGVtZW50O2lmKGYuaXNEZWh5ZHJhdGVkKWlmKGY9e2VsZW1lbnQ6ZCxpc0RlaHlkcmF0ZWQ6ITEsY2FjaGU6Zy5jYWNoZSxwZW5kaW5nU3VzcGVuc2VCb3VuZGFyaWVzOmcucGVuZGluZ1N1c3BlbnNlQm91bmRhcmllcyx0cmFuc2l0aW9uczpnLnRyYW5zaXRpb25zfSxiLnVwZGF0ZVF1ZXVlLmJhc2VTdGF0ZT1cbmYsYi5tZW1vaXplZFN0YXRlPWYsYi5mbGFncyYyNTYpe2U9S2koRXJyb3IocCg0MjMpKSxiKTtiPW1qKGEsYixkLGMsZSk7YnJlYWsgYX1lbHNlIGlmKGQhPT1lKXtlPUtpKEVycm9yKHAoNDI0KSksYik7Yj1taihhLGIsZCxjLGUpO2JyZWFrIGF9ZWxzZSBmb3IoeWc9TGYoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mby5maXJzdENoaWxkKSx4Zz1iLEk9ITAsemc9bnVsbCxjPUNoKGIsbnVsbCxkLGMpLGIuY2hpbGQ9YztjOyljLmZsYWdzPWMuZmxhZ3MmLTN8NDA5NixjPWMuc2libGluZztlbHNle0lnKCk7aWYoZD09PWUpe2I9JGkoYSxiLGMpO2JyZWFrIGF9WWkoYSxiLGQsYyl9Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgNTpyZXR1cm4gS2goYiksbnVsbD09PWEmJkVnKGIpLGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZj1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6bnVsbCxnPWUuY2hpbGRyZW4sRWYoZCxlKT9nPW51bGw6bnVsbCE9PWYmJkVmKGQsZikmJihiLmZsYWdzfD0zMiksXG5oaihhLGIpLFlpKGEsYixnLGMpLGIuY2hpbGQ7Y2FzZSA2OnJldHVybiBudWxsPT09YSYmRWcoYiksbnVsbDtjYXNlIDEzOnJldHVybiBwaihhLGIsYyk7Y2FzZSA0OnJldHVybiBJaChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLGQ9Yi5wZW5kaW5nUHJvcHMsbnVsbD09PWE/Yi5jaGlsZD1CaChiLG51bGwsZCxjKTpZaShhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkxnKGQsZSksWmkoYSxiLGQsZSxjKTtjYXNlIDc6cmV0dXJuIFlpKGEsYixiLnBlbmRpbmdQcm9wcyxjKSxiLmNoaWxkO2Nhc2UgODpyZXR1cm4gWWkoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMjpyZXR1cm4gWWkoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMDphOntkPWIudHlwZS5fY29udGV4dDtlPWIucGVuZGluZ1Byb3BzO2Y9Yi5tZW1vaXplZFByb3BzO1xuZz1lLnZhbHVlO0coTWcsZC5fY3VycmVudFZhbHVlKTtkLl9jdXJyZW50VmFsdWU9ZztpZihudWxsIT09ZilpZihIZShmLnZhbHVlLGcpKXtpZihmLmNoaWxkcmVuPT09ZS5jaGlsZHJlbiYmIVdmLmN1cnJlbnQpe2I9JGkoYSxiLGMpO2JyZWFrIGF9fWVsc2UgZm9yKGY9Yi5jaGlsZCxudWxsIT09ZiYmKGYucmV0dXJuPWIpO251bGwhPT1mOyl7dmFyIGg9Zi5kZXBlbmRlbmNpZXM7aWYobnVsbCE9PWgpe2c9Zi5jaGlsZDtmb3IodmFyIGs9aC5maXJzdENvbnRleHQ7bnVsbCE9PWs7KXtpZihrLmNvbnRleHQ9PT1kKXtpZigxPT09Zi50YWcpe2s9Y2goLTEsYyYtYyk7ay50YWc9Mjt2YXIgbD1mLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1sKXtsPWwuc2hhcmVkO3ZhciBtPWwucGVuZGluZztudWxsPT09bT9rLm5leHQ9azooay5uZXh0PW0ubmV4dCxtLm5leHQ9ayk7bC5wZW5kaW5nPWt9fWYubGFuZXN8PWM7az1mLmFsdGVybmF0ZTtudWxsIT09ayYmKGsubGFuZXN8PWMpO1NnKGYucmV0dXJuLFxuYyxiKTtoLmxhbmVzfD1jO2JyZWFrfWs9ay5uZXh0fX1lbHNlIGlmKDEwPT09Zi50YWcpZz1mLnR5cGU9PT1iLnR5cGU/bnVsbDpmLmNoaWxkO2Vsc2UgaWYoMTg9PT1mLnRhZyl7Zz1mLnJldHVybjtpZihudWxsPT09Zyl0aHJvdyBFcnJvcihwKDM0MSkpO2cubGFuZXN8PWM7aD1nLmFsdGVybmF0ZTtudWxsIT09aCYmKGgubGFuZXN8PWMpO1NnKGcsYyxiKTtnPWYuc2libGluZ31lbHNlIGc9Zi5jaGlsZDtpZihudWxsIT09ZylnLnJldHVybj1mO2Vsc2UgZm9yKGc9ZjtudWxsIT09Zzspe2lmKGc9PT1iKXtnPW51bGw7YnJlYWt9Zj1nLnNpYmxpbmc7aWYobnVsbCE9PWYpe2YucmV0dXJuPWcucmV0dXJuO2c9ZjticmVha31nPWcucmV0dXJufWY9Z31ZaShhLGIsZS5jaGlsZHJlbixjKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA5OnJldHVybiBlPWIudHlwZSxkPWIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLFRnKGIsYyksZT1WZyhlKSxkPWQoZSksYi5mbGFnc3w9MSxZaShhLGIsZCxjKSxcbmIuY2hpbGQ7Y2FzZSAxNDpyZXR1cm4gZD1iLnR5cGUsZT1MZyhkLGIucGVuZGluZ1Byb3BzKSxlPUxnKGQudHlwZSxlKSxhaihhLGIsZCxlLGMpO2Nhc2UgMTU6cmV0dXJuIGNqKGEsYixiLnR5cGUsYi5wZW5kaW5nUHJvcHMsYyk7Y2FzZSAxNzpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6TGcoZCxlKSxqaihhLGIpLGIudGFnPTEsWmYoZCk/KGE9ITAsY2coYikpOmE9ITEsVGcoYixjKSxwaChiLGQsZSkscmgoYixkLGUsYyksa2oobnVsbCxiLGQsITAsYSxjKTtjYXNlIDE5OnJldHVybiB5aihhLGIsYyk7Y2FzZSAyMjpyZXR1cm4gZWooYSxiLGMpfXRocm93IEVycm9yKHAoMTU2LGIudGFnKSk7fTtmdW5jdGlvbiBHayhhLGIpe3JldHVybiBhYyhhLGIpfVxuZnVuY3Rpb24gYWwoYSxiLGMsZCl7dGhpcy50YWc9YTt0aGlzLmtleT1jO3RoaXMuc2libGluZz10aGlzLmNoaWxkPXRoaXMucmV0dXJuPXRoaXMuc3RhdGVOb2RlPXRoaXMudHlwZT10aGlzLmVsZW1lbnRUeXBlPW51bGw7dGhpcy5pbmRleD0wO3RoaXMucmVmPW51bGw7dGhpcy5wZW5kaW5nUHJvcHM9Yjt0aGlzLmRlcGVuZGVuY2llcz10aGlzLm1lbW9pemVkU3RhdGU9dGhpcy51cGRhdGVRdWV1ZT10aGlzLm1lbW9pemVkUHJvcHM9bnVsbDt0aGlzLm1vZGU9ZDt0aGlzLnN1YnRyZWVGbGFncz10aGlzLmZsYWdzPTA7dGhpcy5kZWxldGlvbnM9bnVsbDt0aGlzLmNoaWxkTGFuZXM9dGhpcy5sYW5lcz0wO3RoaXMuYWx0ZXJuYXRlPW51bGx9ZnVuY3Rpb24gQmcoYSxiLGMsZCl7cmV0dXJuIG5ldyBhbChhLGIsYyxkKX1mdW5jdGlvbiBiaihhKXthPWEucHJvdG90eXBlO3JldHVybiEoIWF8fCFhLmlzUmVhY3RDb21wb25lbnQpfVxuZnVuY3Rpb24gJGsoYSl7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGJqKGEpPzE6MDtpZih2b2lkIDAhPT1hJiZudWxsIT09YSl7YT1hLiQkdHlwZW9mO2lmKGE9PT1EYSlyZXR1cm4gMTE7aWYoYT09PUdhKXJldHVybiAxNH1yZXR1cm4gMn1cbmZ1bmN0aW9uIHdoKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbD09PWM/KGM9QmcoYS50YWcsYixhLmtleSxhLm1vZGUpLGMuZWxlbWVudFR5cGU9YS5lbGVtZW50VHlwZSxjLnR5cGU9YS50eXBlLGMuc3RhdGVOb2RlPWEuc3RhdGVOb2RlLGMuYWx0ZXJuYXRlPWEsYS5hbHRlcm5hdGU9Yyk6KGMucGVuZGluZ1Byb3BzPWIsYy50eXBlPWEudHlwZSxjLmZsYWdzPTAsYy5zdWJ0cmVlRmxhZ3M9MCxjLmRlbGV0aW9ucz1udWxsKTtjLmZsYWdzPWEuZmxhZ3MmMTQ2ODAwNjQ7Yy5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcztjLmxhbmVzPWEubGFuZXM7Yy5jaGlsZD1hLmNoaWxkO2MubWVtb2l6ZWRQcm9wcz1hLm1lbW9pemVkUHJvcHM7Yy5tZW1vaXplZFN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtjLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWU7Yj1hLmRlcGVuZGVuY2llcztjLmRlcGVuZGVuY2llcz1udWxsPT09Yj9udWxsOntsYW5lczpiLmxhbmVzLGZpcnN0Q29udGV4dDpiLmZpcnN0Q29udGV4dH07XG5jLnNpYmxpbmc9YS5zaWJsaW5nO2MuaW5kZXg9YS5pbmRleDtjLnJlZj1hLnJlZjtyZXR1cm4gY31cbmZ1bmN0aW9uIHloKGEsYixjLGQsZSxmKXt2YXIgZz0yO2Q9YTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSliaihhKSYmKGc9MSk7ZWxzZSBpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpZz01O2Vsc2UgYTpzd2l0Y2goYSl7Y2FzZSB5YTpyZXR1cm4gQWgoYy5jaGlsZHJlbixlLGYsYik7Y2FzZSB6YTpnPTg7ZXw9ODticmVhaztjYXNlIEFhOnJldHVybiBhPUJnKDEyLGMsYixlfDIpLGEuZWxlbWVudFR5cGU9QWEsYS5sYW5lcz1mLGE7Y2FzZSBFYTpyZXR1cm4gYT1CZygxMyxjLGIsZSksYS5lbGVtZW50VHlwZT1FYSxhLmxhbmVzPWYsYTtjYXNlIEZhOnJldHVybiBhPUJnKDE5LGMsYixlKSxhLmVsZW1lbnRUeXBlPUZhLGEubGFuZXM9ZixhO2Nhc2UgSWE6cmV0dXJuIHFqKGMsZSxmLGIpO2RlZmF1bHQ6aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBCYTpnPTEwO2JyZWFrIGE7Y2FzZSBDYTpnPTk7YnJlYWsgYTtjYXNlIERhOmc9MTE7XG5icmVhayBhO2Nhc2UgR2E6Zz0xNDticmVhayBhO2Nhc2UgSGE6Zz0xNjtkPW51bGw7YnJlYWsgYX10aHJvdyBFcnJvcihwKDEzMCxudWxsPT1hP2E6dHlwZW9mIGEsXCJcIikpO31iPUJnKGcsYyxiLGUpO2IuZWxlbWVudFR5cGU9YTtiLnR5cGU9ZDtiLmxhbmVzPWY7cmV0dXJuIGJ9ZnVuY3Rpb24gQWgoYSxiLGMsZCl7YT1CZyg3LGEsZCxiKTthLmxhbmVzPWM7cmV0dXJuIGF9ZnVuY3Rpb24gcWooYSxiLGMsZCl7YT1CZygyMixhLGQsYik7YS5lbGVtZW50VHlwZT1JYTthLmxhbmVzPWM7YS5zdGF0ZU5vZGU9e2lzSGlkZGVuOiExfTtyZXR1cm4gYX1mdW5jdGlvbiB4aChhLGIsYyl7YT1CZyg2LGEsbnVsbCxiKTthLmxhbmVzPWM7cmV0dXJuIGF9XG5mdW5jdGlvbiB6aChhLGIsYyl7Yj1CZyg0LG51bGwhPT1hLmNoaWxkcmVuP2EuY2hpbGRyZW46W10sYS5rZXksYik7Yi5sYW5lcz1jO2Iuc3RhdGVOb2RlPXtjb250YWluZXJJbmZvOmEuY29udGFpbmVySW5mbyxwZW5kaW5nQ2hpbGRyZW46bnVsbCxpbXBsZW1lbnRhdGlvbjphLmltcGxlbWVudGF0aW9ufTtyZXR1cm4gYn1cbmZ1bmN0aW9uIGJsKGEsYixjLGQsZSl7dGhpcy50YWc9Yjt0aGlzLmNvbnRhaW5lckluZm89YTt0aGlzLmZpbmlzaGVkV29yaz10aGlzLnBpbmdDYWNoZT10aGlzLmN1cnJlbnQ9dGhpcy5wZW5kaW5nQ2hpbGRyZW49bnVsbDt0aGlzLnRpbWVvdXRIYW5kbGU9LTE7dGhpcy5jYWxsYmFja05vZGU9dGhpcy5wZW5kaW5nQ29udGV4dD10aGlzLmNvbnRleHQ9bnVsbDt0aGlzLmNhbGxiYWNrUHJpb3JpdHk9MDt0aGlzLmV2ZW50VGltZXM9emMoMCk7dGhpcy5leHBpcmF0aW9uVGltZXM9emMoLTEpO3RoaXMuZW50YW5nbGVkTGFuZXM9dGhpcy5maW5pc2hlZExhbmVzPXRoaXMubXV0YWJsZVJlYWRMYW5lcz10aGlzLmV4cGlyZWRMYW5lcz10aGlzLnBpbmdlZExhbmVzPXRoaXMuc3VzcGVuZGVkTGFuZXM9dGhpcy5wZW5kaW5nTGFuZXM9MDt0aGlzLmVudGFuZ2xlbWVudHM9emMoMCk7dGhpcy5pZGVudGlmaWVyUHJlZml4PWQ7dGhpcy5vblJlY292ZXJhYmxlRXJyb3I9ZTt0aGlzLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE9XG5udWxsfWZ1bmN0aW9uIGNsKGEsYixjLGQsZSxmLGcsaCxrKXthPW5ldyBibChhLGIsYyxoLGspOzE9PT1iPyhiPTEsITA9PT1mJiYoYnw9OCkpOmI9MDtmPUJnKDMsbnVsbCxudWxsLGIpO2EuY3VycmVudD1mO2Yuc3RhdGVOb2RlPWE7Zi5tZW1vaXplZFN0YXRlPXtlbGVtZW50OmQsaXNEZWh5ZHJhdGVkOmMsY2FjaGU6bnVsbCx0cmFuc2l0aW9uczpudWxsLHBlbmRpbmdTdXNwZW5zZUJvdW5kYXJpZXM6bnVsbH07YWgoZik7cmV0dXJuIGF9ZnVuY3Rpb24gZGwoYSxiLGMpe3ZhciBkPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsO3JldHVybnskJHR5cGVvZjp3YSxrZXk6bnVsbD09ZD9udWxsOlwiXCIrZCxjaGlsZHJlbjphLGNvbnRhaW5lckluZm86YixpbXBsZW1lbnRhdGlvbjpjfX1cbmZ1bmN0aW9uIGVsKGEpe2lmKCFhKXJldHVybiBWZjthPWEuX3JlYWN0SW50ZXJuYWxzO2E6e2lmKFZiKGEpIT09YXx8MSE9PWEudGFnKXRocm93IEVycm9yKHAoMTcwKSk7dmFyIGI9YTtkb3tzd2l0Y2goYi50YWcpe2Nhc2UgMzpiPWIuc3RhdGVOb2RlLmNvbnRleHQ7YnJlYWsgYTtjYXNlIDE6aWYoWmYoYi50eXBlKSl7Yj1iLnN0YXRlTm9kZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dDticmVhayBhfX1iPWIucmV0dXJufXdoaWxlKG51bGwhPT1iKTt0aHJvdyBFcnJvcihwKDE3MSkpO31pZigxPT09YS50YWcpe3ZhciBjPWEudHlwZTtpZihaZihjKSlyZXR1cm4gYmcoYSxjLGIpfXJldHVybiBifVxuZnVuY3Rpb24gZmwoYSxiLGMsZCxlLGYsZyxoLGspe2E9Y2woYyxkLCEwLGEsZSxmLGcsaCxrKTthLmNvbnRleHQ9ZWwobnVsbCk7Yz1hLmN1cnJlbnQ7ZD1MKCk7ZT1saChjKTtmPWNoKGQsZSk7Zi5jYWxsYmFjaz12b2lkIDAhPT1iJiZudWxsIT09Yj9iOm51bGw7ZGgoYyxmLGUpO2EuY3VycmVudC5sYW5lcz1lO0FjKGEsZSxkKTtFayhhLGQpO3JldHVybiBhfWZ1bmN0aW9uIGdsKGEsYixjLGQpe3ZhciBlPWIuY3VycmVudCxmPUwoKSxnPWxoKGUpO2M9ZWwoYyk7bnVsbD09PWIuY29udGV4dD9iLmNvbnRleHQ9YzpiLnBlbmRpbmdDb250ZXh0PWM7Yj1jaChmLGcpO2IucGF5bG9hZD17ZWxlbWVudDphfTtkPXZvaWQgMD09PWQ/bnVsbDpkO251bGwhPT1kJiYoYi5jYWxsYmFjaz1kKTthPWRoKGUsYixnKTtudWxsIT09YSYmKG1oKGEsZSxnLGYpLGVoKGEsZSxnKSk7cmV0dXJuIGd9XG5mdW5jdGlvbiBobChhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGU7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fWZ1bmN0aW9uIGlsKGEsYil7YT1hLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWEmJm51bGwhPT1hLmRlaHlkcmF0ZWQpe3ZhciBjPWEucmV0cnlMYW5lO2EucmV0cnlMYW5lPTAhPT1jJiZjPGI/YzpifX1mdW5jdGlvbiBqbChhLGIpe2lsKGEsYik7KGE9YS5hbHRlcm5hdGUpJiZpbChhLGIpfWZ1bmN0aW9uIGtsKCl7cmV0dXJuIG51bGx9dmFyIGxsPVwiZnVuY3Rpb25cIj09PXR5cGVvZiByZXBvcnRFcnJvcj9yZXBvcnRFcnJvcjpmdW5jdGlvbihhKXtjb25zb2xlLmVycm9yKGEpfTtmdW5jdGlvbiBtbChhKXt0aGlzLl9pbnRlcm5hbFJvb3Q9YX1cbm5sLnByb3RvdHlwZS5yZW5kZXI9bWwucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhKXt2YXIgYj10aGlzLl9pbnRlcm5hbFJvb3Q7aWYobnVsbD09PWIpdGhyb3cgRXJyb3IocCg0MDkpKTtnbChhLGIsbnVsbCxudWxsKX07bmwucHJvdG90eXBlLnVubW91bnQ9bWwucHJvdG90eXBlLnVubW91bnQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl9pbnRlcm5hbFJvb3Q7aWYobnVsbCE9PWEpe3RoaXMuX2ludGVybmFsUm9vdD1udWxsO3ZhciBiPWEuY29udGFpbmVySW5mbztTayhmdW5jdGlvbigpe2dsKG51bGwsYSxudWxsLG51bGwpfSk7Ylt1Zl09bnVsbH19O2Z1bmN0aW9uIG5sKGEpe3RoaXMuX2ludGVybmFsUm9vdD1hfVxubmwucHJvdG90eXBlLnVuc3RhYmxlX3NjaGVkdWxlSHlkcmF0aW9uPWZ1bmN0aW9uKGEpe2lmKGEpe3ZhciBiPUhjKCk7YT17YmxvY2tlZE9uOm51bGwsdGFyZ2V0OmEscHJpb3JpdHk6Yn07Zm9yKHZhciBjPTA7YzxRYy5sZW5ndGgmJjAhPT1iJiZiPFFjW2NdLnByaW9yaXR5O2MrKyk7UWMuc3BsaWNlKGMsMCxhKTswPT09YyYmVmMoYSl9fTtmdW5jdGlvbiBvbChhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSl9ZnVuY3Rpb24gcGwoYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUmJig4IT09YS5ub2RlVHlwZXx8XCIgcmVhY3QtbW91bnQtcG9pbnQtdW5zdGFibGUgXCIhPT1hLm5vZGVWYWx1ZSkpfWZ1bmN0aW9uIHFsKCl7fVxuZnVuY3Rpb24gcmwoYSxiLGMsZCxlKXtpZihlKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGY9ZDtkPWZ1bmN0aW9uKCl7dmFyIGE9aGwoZyk7Zi5jYWxsKGEpfX12YXIgZz1mbChiLGQsYSwwLG51bGwsITEsITEsXCJcIixxbCk7YS5fcmVhY3RSb290Q29udGFpbmVyPWc7YVt1Zl09Zy5jdXJyZW50O3NmKDg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphKTtTaygpO3JldHVybiBnfWZvcig7ZT1hLmxhc3RDaGlsZDspYS5yZW1vdmVDaGlsZChlKTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGg9ZDtkPWZ1bmN0aW9uKCl7dmFyIGE9aGwoayk7aC5jYWxsKGEpfX12YXIgaz1jbChhLDAsITEsbnVsbCxudWxsLCExLCExLFwiXCIscWwpO2EuX3JlYWN0Um9vdENvbnRhaW5lcj1rO2FbdWZdPWsuY3VycmVudDtzZig4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YSk7U2soZnVuY3Rpb24oKXtnbChiLGssYyxkKX0pO3JldHVybiBrfVxuZnVuY3Rpb24gc2woYSxiLGMsZCxlKXt2YXIgZj1jLl9yZWFjdFJvb3RDb250YWluZXI7aWYoZil7dmFyIGc9ZjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGg9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9aGwoZyk7aC5jYWxsKGEpfX1nbChiLGcsYSxlKX1lbHNlIGc9cmwoYyxiLGEsZSxkKTtyZXR1cm4gaGwoZyl9RWM9ZnVuY3Rpb24oYSl7c3dpdGNoKGEudGFnKXtjYXNlIDM6dmFyIGI9YS5zdGF0ZU5vZGU7aWYoYi5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkKXt2YXIgYz10YyhiLnBlbmRpbmdMYW5lcyk7MCE9PWMmJihDYyhiLGN8MSksRWsoYixCKCkpLDA9PT0oSyY2KSYmKEhqPUIoKSs1MDAsamcoKSkpfWJyZWFrO2Nhc2UgMTM6U2soZnVuY3Rpb24oKXt2YXIgYj1aZyhhLDEpO2lmKG51bGwhPT1iKXt2YXIgYz1MKCk7bWgoYixhLDEsYyl9fSksamwoYSwxKX19O1xuRmM9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9WmcoYSwxMzQyMTc3MjgpO2lmKG51bGwhPT1iKXt2YXIgYz1MKCk7bWgoYixhLDEzNDIxNzcyOCxjKX1qbChhLDEzNDIxNzcyOCl9fTtHYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1saChhKSxjPVpnKGEsYik7aWYobnVsbCE9PWMpe3ZhciBkPUwoKTttaChjLGEsYixkKX1qbChhLGIpfX07SGM9ZnVuY3Rpb24oKXtyZXR1cm4gQ307SWM9ZnVuY3Rpb24oYSxiKXt2YXIgYz1DO3RyeXtyZXR1cm4gQz1hLGIoKX1maW5hbGx5e0M9Y319O1xueWI9ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpiYihhLGMpO2I9Yy5uYW1lO2lmKFwicmFkaW9cIj09PWMudHlwZSYmbnVsbCE9Yil7Zm9yKGM9YTtjLnBhcmVudE5vZGU7KWM9Yy5wYXJlbnROb2RlO2M9Yy5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbbmFtZT1cIitKU09OLnN0cmluZ2lmeShcIlwiK2IpKyddW3R5cGU9XCJyYWRpb1wiXScpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspe3ZhciBkPWNbYl07aWYoZCE9PWEmJmQuZm9ybT09PWEuZm9ybSl7dmFyIGU9RGIoZCk7aWYoIWUpdGhyb3cgRXJyb3IocCg5MCkpO1dhKGQpO2JiKGQsZSl9fX1icmVhaztjYXNlIFwidGV4dGFyZWFcIjppYihhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMudmFsdWUsbnVsbCE9YiYmZmIoYSwhIWMubXVsdGlwbGUsYiwhMSl9fTtHYj1SaztIYj1TaztcbnZhciB0bD17dXNpbmdDbGllbnRFbnRyeVBvaW50OiExLEV2ZW50czpbQ2IsdWUsRGIsRWIsRmIsUmtdfSx1bD17ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6V2MsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxOC4yLjBcIixyZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9O1xudmFyIHZsPXtidW5kbGVUeXBlOnVsLmJ1bmRsZVR5cGUsdmVyc2lvbjp1bC52ZXJzaW9uLHJlbmRlcmVyUGFja2FnZU5hbWU6dWwucmVuZGVyZXJQYWNrYWdlTmFtZSxyZW5kZXJlckNvbmZpZzp1bC5yZW5kZXJlckNvbmZpZyxvdmVycmlkZUhvb2tTdGF0ZTpudWxsLG92ZXJyaWRlSG9va1N0YXRlRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlSG9va1N0YXRlUmVuYW1lUGF0aDpudWxsLG92ZXJyaWRlUHJvcHM6bnVsbCxvdmVycmlkZVByb3BzRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoOm51bGwsc2V0RXJyb3JIYW5kbGVyOm51bGwsc2V0U3VzcGVuc2VIYW5kbGVyOm51bGwsc2NoZWR1bGVVcGRhdGU6bnVsbCxjdXJyZW50RGlzcGF0Y2hlclJlZjp1YS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9WmIoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOnVsLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlfHxcbmtsLGZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaDpudWxsLHNjaGVkdWxlUmVmcmVzaDpudWxsLHNjaGVkdWxlUm9vdDpudWxsLHNldFJlZnJlc2hIYW5kbGVyOm51bGwsZ2V0Q3VycmVudEZpYmVyOm51bGwscmVjb25jaWxlclZlcnNpb246XCIxOC4yLjAtbmV4dC05ZTNiNzcyYjgtMjAyMjA2MDhcIn07aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pe3ZhciB3bD1fX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX187aWYoIXdsLmlzRGlzYWJsZWQmJndsLnN1cHBvcnRzRmliZXIpdHJ5e2tjPXdsLmluamVjdCh2bCksbGM9d2x9Y2F0Y2goYSl7fX1leHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPXRsO1xuZXhwb3J0cy5jcmVhdGVQb3J0YWw9ZnVuY3Rpb24oYSxiKXt2YXIgYz0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbDtpZighb2woYikpdGhyb3cgRXJyb3IocCgyMDApKTtyZXR1cm4gZGwoYSxiLG51bGwsYyl9O2V4cG9ydHMuY3JlYXRlUm9vdD1mdW5jdGlvbihhLGIpe2lmKCFvbChhKSl0aHJvdyBFcnJvcihwKDI5OSkpO3ZhciBjPSExLGQ9XCJcIixlPWxsO251bGwhPT1iJiZ2b2lkIDAhPT1iJiYoITA9PT1iLnVuc3RhYmxlX3N0cmljdE1vZGUmJihjPSEwKSx2b2lkIDAhPT1iLmlkZW50aWZpZXJQcmVmaXgmJihkPWIuaWRlbnRpZmllclByZWZpeCksdm9pZCAwIT09Yi5vblJlY292ZXJhYmxlRXJyb3ImJihlPWIub25SZWNvdmVyYWJsZUVycm9yKSk7Yj1jbChhLDEsITEsbnVsbCxudWxsLGMsITEsZCxlKTthW3VmXT1iLmN1cnJlbnQ7c2YoOD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmEpO3JldHVybiBuZXcgbWwoYil9O1xuZXhwb3J0cy5maW5kRE9NTm9kZT1mdW5jdGlvbihhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKDE9PT1hLm5vZGVUeXBlKXJldHVybiBhO3ZhciBiPWEuX3JlYWN0SW50ZXJuYWxzO2lmKHZvaWQgMD09PWIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnJlbmRlcil0aHJvdyBFcnJvcihwKDE4OCkpO2E9T2JqZWN0LmtleXMoYSkuam9pbihcIixcIik7dGhyb3cgRXJyb3IocCgyNjgsYSkpO31hPVpiKGIpO2E9bnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZTtyZXR1cm4gYX07ZXhwb3J0cy5mbHVzaFN5bmM9ZnVuY3Rpb24oYSl7cmV0dXJuIFNrKGEpfTtleHBvcnRzLmh5ZHJhdGU9ZnVuY3Rpb24oYSxiLGMpe2lmKCFwbChiKSl0aHJvdyBFcnJvcihwKDIwMCkpO3JldHVybiBzbChudWxsLGEsYiwhMCxjKX07XG5leHBvcnRzLmh5ZHJhdGVSb290PWZ1bmN0aW9uKGEsYixjKXtpZighb2woYSkpdGhyb3cgRXJyb3IocCg0MDUpKTt2YXIgZD1udWxsIT1jJiZjLmh5ZHJhdGVkU291cmNlc3x8bnVsbCxlPSExLGY9XCJcIixnPWxsO251bGwhPT1jJiZ2b2lkIDAhPT1jJiYoITA9PT1jLnVuc3RhYmxlX3N0cmljdE1vZGUmJihlPSEwKSx2b2lkIDAhPT1jLmlkZW50aWZpZXJQcmVmaXgmJihmPWMuaWRlbnRpZmllclByZWZpeCksdm9pZCAwIT09Yy5vblJlY292ZXJhYmxlRXJyb3ImJihnPWMub25SZWNvdmVyYWJsZUVycm9yKSk7Yj1mbChiLG51bGwsYSwxLG51bGwhPWM/YzpudWxsLGUsITEsZixnKTthW3VmXT1iLmN1cnJlbnQ7c2YoYSk7aWYoZClmb3IoYT0wO2E8ZC5sZW5ndGg7YSsrKWM9ZFthXSxlPWMuX2dldFZlcnNpb24sZT1lKGMuX3NvdXJjZSksbnVsbD09Yi5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhP2IubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT1bYyxlXTpiLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGEucHVzaChjLFxuZSk7cmV0dXJuIG5ldyBubChiKX07ZXhwb3J0cy5yZW5kZXI9ZnVuY3Rpb24oYSxiLGMpe2lmKCFwbChiKSl0aHJvdyBFcnJvcihwKDIwMCkpO3JldHVybiBzbChudWxsLGEsYiwhMSxjKX07ZXhwb3J0cy51bm1vdW50Q29tcG9uZW50QXROb2RlPWZ1bmN0aW9uKGEpe2lmKCFwbChhKSl0aHJvdyBFcnJvcihwKDQwKSk7cmV0dXJuIGEuX3JlYWN0Um9vdENvbnRhaW5lcj8oU2soZnVuY3Rpb24oKXtzbChudWxsLG51bGwsYSwhMSxmdW5jdGlvbigpe2EuX3JlYWN0Um9vdENvbnRhaW5lcj1udWxsO2FbdWZdPW51bGx9KX0pLCEwKTohMX07ZXhwb3J0cy51bnN0YWJsZV9iYXRjaGVkVXBkYXRlcz1SaztcbmV4cG9ydHMudW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI9ZnVuY3Rpb24oYSxiLGMsZCl7aWYoIXBsKGMpKXRocm93IEVycm9yKHAoMjAwKSk7aWYobnVsbD09YXx8dm9pZCAwPT09YS5fcmVhY3RJbnRlcm5hbHMpdGhyb3cgRXJyb3IocCgzOCkpO3JldHVybiBzbChhLGIsYywhMSxkKX07ZXhwb3J0cy52ZXJzaW9uPVwiMTguMi4wLW5leHQtOWUzYjc3MmI4LTIwMjIwNjA4XCI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBtID0gcmVxdWlyZSgncmVhY3QtZG9tJyk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBleHBvcnRzLmNyZWF0ZVJvb3QgPSBtLmNyZWF0ZVJvb3Q7XG4gIGV4cG9ydHMuaHlkcmF0ZVJvb3QgPSBtLmh5ZHJhdGVSb290O1xufSBlbHNlIHtcbiAgdmFyIGkgPSBtLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEO1xuICBleHBvcnRzLmNyZWF0ZVJvb3QgPSBmdW5jdGlvbihjLCBvKSB7XG4gICAgaS51c2luZ0NsaWVudEVudHJ5UG9pbnQgPSB0cnVlO1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gbS5jcmVhdGVSb290KGMsIG8pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpLnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IGZhbHNlO1xuICAgIH1cbiAgfTtcbiAgZXhwb3J0cy5oeWRyYXRlUm9vdCA9IGZ1bmN0aW9uKGMsIGgsIG8pIHtcbiAgICBpLnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IHRydWU7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBtLmh5ZHJhdGVSb290KGMsIGgsIG8pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpLnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IGZhbHNlO1xuICAgIH1cbiAgfTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO3ZhciBZPU9iamVjdC5jcmVhdGU7dmFyIEU9T2JqZWN0LmRlZmluZVByb3BlcnR5O3ZhciBxPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7dmFyIEc9T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7dmFyIEs9T2JqZWN0LmdldFByb3RvdHlwZU9mLFo9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTt2YXIgZWU9KGUsdCk9Pntmb3IodmFyIG8gaW4gdClFKGUsbyx7Z2V0OnRbb10sZW51bWVyYWJsZTohMH0pfSxqPShlLHQsbyxzKT0+e2lmKHQmJnR5cGVvZiB0PT1cIm9iamVjdFwifHx0eXBlb2YgdD09XCJmdW5jdGlvblwiKWZvcihsZXQgciBvZiBHKHQpKSFaLmNhbGwoZSxyKSYmciE9PW8mJkUoZSxyLHtnZXQ6KCk9PnRbcl0sZW51bWVyYWJsZTohKHM9cSh0LHIpKXx8cy5lbnVtZXJhYmxlfSk7cmV0dXJuIGV9O3ZhciBXPShlLHQsbyk9PihvPWUhPW51bGw/WShLKGUpKTp7fSxqKHR8fCFlfHwhZS5fX2VzTW9kdWxlP0UobyxcImRlZmF1bHRcIix7dmFsdWU6ZSxlbnVtZXJhYmxlOiEwfSk6byxlKSksdGU9ZT0+aihFKHt9LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGUpO3ZhciBWZT17fTtlZShWZSx7Q2hlY2ttYXJrSWNvbjooKT0+RixFcnJvckljb246KCk9PncsTG9hZGVySWNvbjooKT0+TSxUb2FzdEJhcjooKT0+JCxUb2FzdEljb246KCk9PlUsVG9hc3RlcjooKT0+SixkZWZhdWx0OigpPT5fZSxyZXNvbHZlVmFsdWU6KCk9PnUsdG9hc3Q6KCk9Pm4sdXNlVG9hc3RlcjooKT0+Vix1c2VUb2FzdGVyU3RvcmU6KCk9Pl99KTttb2R1bGUuZXhwb3J0cz10ZShWZSk7dmFyIG9lPWU9PnR5cGVvZiBlPT1cImZ1bmN0aW9uXCIsdT0oZSx0KT0+b2UoZSk/ZSh0KTplO3ZhciBRPSgoKT0+e2xldCBlPTA7cmV0dXJuKCk9PigrK2UpLnRvU3RyaW5nKCl9KSgpLFI9KCgpPT57bGV0IGU7cmV0dXJuKCk9PntpZihlPT09dm9pZCAwJiZ0eXBlb2Ygd2luZG93PFwidVwiKXtsZXQgdD1tYXRjaE1lZGlhKFwiKHByZWZlcnMtcmVkdWNlZC1tb3Rpb246IHJlZHVjZSlcIik7ZT0hdHx8dC5tYXRjaGVzfXJldHVybiBlfX0pKCk7dmFyIGs9cmVxdWlyZShcInJlYWN0XCIpLHJlPTIwO3ZhciB2PW5ldyBNYXAsc2U9MWUzLFg9ZT0+e2lmKHYuaGFzKGUpKXJldHVybjtsZXQgdD1zZXRUaW1lb3V0KCgpPT57di5kZWxldGUoZSksbCh7dHlwZTo0LHRvYXN0SWQ6ZX0pfSxzZSk7di5zZXQoZSx0KX0sYWU9ZT0+e2xldCB0PXYuZ2V0KGUpO3QmJmNsZWFyVGltZW91dCh0KX0sSD0oZSx0KT0+e3N3aXRjaCh0LnR5cGUpe2Nhc2UgMDpyZXR1cm57Li4uZSx0b2FzdHM6W3QudG9hc3QsLi4uZS50b2FzdHNdLnNsaWNlKDAscmUpfTtjYXNlIDE6cmV0dXJuIHQudG9hc3QuaWQmJmFlKHQudG9hc3QuaWQpLHsuLi5lLHRvYXN0czplLnRvYXN0cy5tYXAoYT0+YS5pZD09PXQudG9hc3QuaWQ/ey4uLmEsLi4udC50b2FzdH06YSl9O2Nhc2UgMjpsZXR7dG9hc3Q6b309dDtyZXR1cm4gZS50b2FzdHMuZmluZChhPT5hLmlkPT09by5pZCk/SChlLHt0eXBlOjEsdG9hc3Q6b30pOkgoZSx7dHlwZTowLHRvYXN0Om99KTtjYXNlIDM6bGV0e3RvYXN0SWQ6c309dDtyZXR1cm4gcz9YKHMpOmUudG9hc3RzLmZvckVhY2goYT0+e1goYS5pZCl9KSx7Li4uZSx0b2FzdHM6ZS50b2FzdHMubWFwKGE9PmEuaWQ9PT1zfHxzPT09dm9pZCAwP3suLi5hLHZpc2libGU6ITF9OmEpfTtjYXNlIDQ6cmV0dXJuIHQudG9hc3RJZD09PXZvaWQgMD97Li4uZSx0b2FzdHM6W119OnsuLi5lLHRvYXN0czplLnRvYXN0cy5maWx0ZXIoYT0+YS5pZCE9PXQudG9hc3RJZCl9O2Nhc2UgNTpyZXR1cm57Li4uZSxwYXVzZWRBdDp0LnRpbWV9O2Nhc2UgNjpsZXQgcj10LnRpbWUtKGUucGF1c2VkQXR8fDApO3JldHVybnsuLi5lLHBhdXNlZEF0OnZvaWQgMCx0b2FzdHM6ZS50b2FzdHMubWFwKGE9Pih7Li4uYSxwYXVzZUR1cmF0aW9uOmEucGF1c2VEdXJhdGlvbityfSkpfX19LEk9W10sRD17dG9hc3RzOltdLHBhdXNlZEF0OnZvaWQgMH0sbD1lPT57RD1IKEQsZSksSS5mb3JFYWNoKHQ9Pnt0KEQpfSl9LGllPXtibGFuazo0ZTMsZXJyb3I6NGUzLHN1Y2Nlc3M6MmUzLGxvYWRpbmc6MS8wLGN1c3RvbTo0ZTN9LF89KGU9e30pPT57bGV0W3Qsb109KDAsay51c2VTdGF0ZSkoRCk7KDAsay51c2VFZmZlY3QpKCgpPT4oSS5wdXNoKG8pLCgpPT57bGV0IHI9SS5pbmRleE9mKG8pO3I+LTEmJkkuc3BsaWNlKHIsMSl9KSxbdF0pO2xldCBzPXQudG9hc3RzLm1hcChyPT57dmFyIGEsYztyZXR1cm57Li4uZSwuLi5lW3IudHlwZV0sLi4ucixkdXJhdGlvbjpyLmR1cmF0aW9ufHwoKGE9ZVtyLnR5cGVdKT09bnVsbD92b2lkIDA6YS5kdXJhdGlvbil8fChlPT1udWxsP3ZvaWQgMDplLmR1cmF0aW9uKXx8aWVbci50eXBlXSxzdHlsZTp7Li4uZS5zdHlsZSwuLi4oYz1lW3IudHlwZV0pPT1udWxsP3ZvaWQgMDpjLnN0eWxlLC4uLnIuc3R5bGV9fX0pO3JldHVybnsuLi50LHRvYXN0czpzfX07dmFyIGNlPShlLHQ9XCJibGFua1wiLG8pPT4oe2NyZWF0ZWRBdDpEYXRlLm5vdygpLHZpc2libGU6ITAsdHlwZTp0LGFyaWFQcm9wczp7cm9sZTpcInN0YXR1c1wiLFwiYXJpYS1saXZlXCI6XCJwb2xpdGVcIn0sbWVzc2FnZTplLHBhdXNlRHVyYXRpb246MCwuLi5vLGlkOihvPT1udWxsP3ZvaWQgMDpvLmlkKXx8USgpfSksUz1lPT4odCxvKT0+e2xldCBzPWNlKHQsZSxvKTtyZXR1cm4gbCh7dHlwZToyLHRvYXN0OnN9KSxzLmlkfSxuPShlLHQpPT5TKFwiYmxhbmtcIikoZSx0KTtuLmVycm9yPVMoXCJlcnJvclwiKTtuLnN1Y2Nlc3M9UyhcInN1Y2Nlc3NcIik7bi5sb2FkaW5nPVMoXCJsb2FkaW5nXCIpO24uY3VzdG9tPVMoXCJjdXN0b21cIik7bi5kaXNtaXNzPWU9PntsKHt0eXBlOjMsdG9hc3RJZDplfSl9O24ucmVtb3ZlPWU9Pmwoe3R5cGU6NCx0b2FzdElkOmV9KTtuLnByb21pc2U9KGUsdCxvKT0+e2xldCBzPW4ubG9hZGluZyh0LmxvYWRpbmcsey4uLm8sLi4ubz09bnVsbD92b2lkIDA6by5sb2FkaW5nfSk7cmV0dXJuIGUudGhlbihyPT4obi5zdWNjZXNzKHUodC5zdWNjZXNzLHIpLHtpZDpzLC4uLm8sLi4ubz09bnVsbD92b2lkIDA6by5zdWNjZXNzfSkscikpLmNhdGNoKHI9PntuLmVycm9yKHUodC5lcnJvcixyKSx7aWQ6cywuLi5vLC4uLm89PW51bGw/dm9pZCAwOm8uZXJyb3J9KX0pLGV9O3ZhciBBPXJlcXVpcmUoXCJyZWFjdFwiKTt2YXIgcGU9KGUsdCk9PntsKHt0eXBlOjEsdG9hc3Q6e2lkOmUsaGVpZ2h0OnR9fSl9LGRlPSgpPT57bCh7dHlwZTo1LHRpbWU6RGF0ZS5ub3coKX0pfSxWPWU9PntsZXR7dG9hc3RzOnQscGF1c2VkQXQ6b309XyhlKTsoMCxBLnVzZUVmZmVjdCkoKCk9PntpZihvKXJldHVybjtsZXQgYT1EYXRlLm5vdygpLGM9dC5tYXAoaT0+e2lmKGkuZHVyYXRpb249PT0xLzApcmV0dXJuO2xldCBkPShpLmR1cmF0aW9ufHwwKStpLnBhdXNlRHVyYXRpb24tKGEtaS5jcmVhdGVkQXQpO2lmKGQ8MCl7aS52aXNpYmxlJiZuLmRpc21pc3MoaS5pZCk7cmV0dXJufXJldHVybiBzZXRUaW1lb3V0KCgpPT5uLmRpc21pc3MoaS5pZCksZCl9KTtyZXR1cm4oKT0+e2MuZm9yRWFjaChpPT5pJiZjbGVhclRpbWVvdXQoaSkpfX0sW3Qsb10pO2xldCBzPSgwLEEudXNlQ2FsbGJhY2spKCgpPT57byYmbCh7dHlwZTo2LHRpbWU6RGF0ZS5ub3coKX0pfSxbb10pLHI9KDAsQS51c2VDYWxsYmFjaykoKGEsYyk9PntsZXR7cmV2ZXJzZU9yZGVyOmk9ITEsZ3V0dGVyOmQ9OCxkZWZhdWx0UG9zaXRpb246cH09Y3x8e30sZz10LmZpbHRlcihtPT4obS5wb3NpdGlvbnx8cCk9PT0oYS5wb3NpdGlvbnx8cCkmJm0uaGVpZ2h0KSx6PWcuZmluZEluZGV4KG09Pm0uaWQ9PT1hLmlkKSxPPWcuZmlsdGVyKChtLEIpPT5CPHomJm0udmlzaWJsZSkubGVuZ3RoO3JldHVybiBnLmZpbHRlcihtPT5tLnZpc2libGUpLnNsaWNlKC4uLmk/W08rMV06WzAsT10pLnJlZHVjZSgobSxCKT0+bSsoQi5oZWlnaHR8fDApK2QsMCl9LFt0XSk7cmV0dXJue3RvYXN0czp0LGhhbmRsZXJzOnt1cGRhdGVIZWlnaHQ6cGUsc3RhcnRQYXVzZTpkZSxlbmRQYXVzZTpzLGNhbGN1bGF0ZU9mZnNldDpyfX19O3ZhciBUPVcocmVxdWlyZShcInJlYWN0XCIpKSxiPXJlcXVpcmUoXCJnb29iZXJcIik7dmFyIHk9VyhyZXF1aXJlKFwicmVhY3RcIikpLHg9cmVxdWlyZShcImdvb2JlclwiKTt2YXIgaD1yZXF1aXJlKFwiZ29vYmVyXCIpLG1lPWgua2V5ZnJhbWVzYFxuZnJvbSB7XG4gIHRyYW5zZm9ybTogc2NhbGUoMCkgcm90YXRlKDQ1ZGVnKTtcblx0b3BhY2l0eTogMDtcbn1cbnRvIHtcbiB0cmFuc2Zvcm06IHNjYWxlKDEpIHJvdGF0ZSg0NWRlZyk7XG4gIG9wYWNpdHk6IDE7XG59YCx1ZT1oLmtleWZyYW1lc2BcbmZyb20ge1xuICB0cmFuc2Zvcm06IHNjYWxlKDApO1xuICBvcGFjaXR5OiAwO1xufVxudG8ge1xuICB0cmFuc2Zvcm06IHNjYWxlKDEpO1xuICBvcGFjaXR5OiAxO1xufWAsbGU9aC5rZXlmcmFtZXNgXG5mcm9tIHtcbiAgdHJhbnNmb3JtOiBzY2FsZSgwKSByb3RhdGUoOTBkZWcpO1xuXHRvcGFjaXR5OiAwO1xufVxudG8ge1xuICB0cmFuc2Zvcm06IHNjYWxlKDEpIHJvdGF0ZSg5MGRlZyk7XG5cdG9wYWNpdHk6IDE7XG59YCx3PSgwLGguc3R5bGVkKShcImRpdlwiKWBcbiAgd2lkdGg6IDIwcHg7XG4gIG9wYWNpdHk6IDA7XG4gIGhlaWdodDogMjBweDtcbiAgYm9yZGVyLXJhZGl1czogMTBweDtcbiAgYmFja2dyb3VuZDogJHtlPT5lLnByaW1hcnl8fFwiI2ZmNGI0YlwifTtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICB0cmFuc2Zvcm06IHJvdGF0ZSg0NWRlZyk7XG5cbiAgYW5pbWF0aW9uOiAke21lfSAwLjNzIGN1YmljLWJlemllcigwLjE3NSwgMC44ODUsIDAuMzIsIDEuMjc1KVxuICAgIGZvcndhcmRzO1xuICBhbmltYXRpb24tZGVsYXk6IDEwMG1zO1xuXG4gICY6YWZ0ZXIsXG4gICY6YmVmb3JlIHtcbiAgICBjb250ZW50OiAnJztcbiAgICBhbmltYXRpb246ICR7dWV9IDAuMTVzIGVhc2Utb3V0IGZvcndhcmRzO1xuICAgIGFuaW1hdGlvbi1kZWxheTogMTUwbXM7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGJvcmRlci1yYWRpdXM6IDNweDtcbiAgICBvcGFjaXR5OiAwO1xuICAgIGJhY2tncm91bmQ6ICR7ZT0+ZS5zZWNvbmRhcnl8fFwiI2ZmZlwifTtcbiAgICBib3R0b206IDlweDtcbiAgICBsZWZ0OiA0cHg7XG4gICAgaGVpZ2h0OiAycHg7XG4gICAgd2lkdGg6IDEycHg7XG4gIH1cblxuICAmOmJlZm9yZSB7XG4gICAgYW5pbWF0aW9uOiAke2xlfSAwLjE1cyBlYXNlLW91dCBmb3J3YXJkcztcbiAgICBhbmltYXRpb24tZGVsYXk6IDE4MG1zO1xuICAgIHRyYW5zZm9ybTogcm90YXRlKDkwZGVnKTtcbiAgfVxuYDt2YXIgQz1yZXF1aXJlKFwiZ29vYmVyXCIpLFRlPUMua2V5ZnJhbWVzYFxuICBmcm9tIHtcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcbiAgfVxuICB0byB7XG4gICAgdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKTtcbiAgfVxuYCxNPSgwLEMuc3R5bGVkKShcImRpdlwiKWBcbiAgd2lkdGg6IDEycHg7XG4gIGhlaWdodDogMTJweDtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgYm9yZGVyOiAycHggc29saWQ7XG4gIGJvcmRlci1yYWRpdXM6IDEwMCU7XG4gIGJvcmRlci1jb2xvcjogJHtlPT5lLnNlY29uZGFyeXx8XCIjZTBlMGUwXCJ9O1xuICBib3JkZXItcmlnaHQtY29sb3I6ICR7ZT0+ZS5wcmltYXJ5fHxcIiM2MTYxNjFcIn07XG4gIGFuaW1hdGlvbjogJHtUZX0gMXMgbGluZWFyIGluZmluaXRlO1xuYDt2YXIgUD1yZXF1aXJlKFwiZ29vYmVyXCIpLGZlPVAua2V5ZnJhbWVzYFxuZnJvbSB7XG4gIHRyYW5zZm9ybTogc2NhbGUoMCkgcm90YXRlKDQ1ZGVnKTtcblx0b3BhY2l0eTogMDtcbn1cbnRvIHtcbiAgdHJhbnNmb3JtOiBzY2FsZSgxKSByb3RhdGUoNDVkZWcpO1xuXHRvcGFjaXR5OiAxO1xufWAseWU9UC5rZXlmcmFtZXNgXG4wJSB7XG5cdGhlaWdodDogMDtcblx0d2lkdGg6IDA7XG5cdG9wYWNpdHk6IDA7XG59XG40MCUge1xuICBoZWlnaHQ6IDA7XG5cdHdpZHRoOiA2cHg7XG5cdG9wYWNpdHk6IDE7XG59XG4xMDAlIHtcbiAgb3BhY2l0eTogMTtcbiAgaGVpZ2h0OiAxMHB4O1xufWAsRj0oMCxQLnN0eWxlZCkoXCJkaXZcIilgXG4gIHdpZHRoOiAyMHB4O1xuICBvcGFjaXR5OiAwO1xuICBoZWlnaHQ6IDIwcHg7XG4gIGJvcmRlci1yYWRpdXM6IDEwcHg7XG4gIGJhY2tncm91bmQ6ICR7ZT0+ZS5wcmltYXJ5fHxcIiM2MWQzNDVcIn07XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgdHJhbnNmb3JtOiByb3RhdGUoNDVkZWcpO1xuXG4gIGFuaW1hdGlvbjogJHtmZX0gMC4zcyBjdWJpYy1iZXppZXIoMC4xNzUsIDAuODg1LCAwLjMyLCAxLjI3NSlcbiAgICBmb3J3YXJkcztcbiAgYW5pbWF0aW9uLWRlbGF5OiAxMDBtcztcbiAgJjphZnRlciB7XG4gICAgY29udGVudDogJyc7XG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICBhbmltYXRpb246ICR7eWV9IDAuMnMgZWFzZS1vdXQgZm9yd2FyZHM7XG4gICAgb3BhY2l0eTogMDtcbiAgICBhbmltYXRpb24tZGVsYXk6IDIwMG1zO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBib3JkZXItcmlnaHQ6IDJweCBzb2xpZDtcbiAgICBib3JkZXItYm90dG9tOiAycHggc29saWQ7XG4gICAgYm9yZGVyLWNvbG9yOiAke2U9PmUuc2Vjb25kYXJ5fHxcIiNmZmZcIn07XG4gICAgYm90dG9tOiA2cHg7XG4gICAgbGVmdDogNnB4O1xuICAgIGhlaWdodDogMTBweDtcbiAgICB3aWR0aDogNnB4O1xuICB9XG5gO3ZhciBnZT0oMCx4LnN0eWxlZCkoXCJkaXZcIilgXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbmAsaGU9KDAseC5zdHlsZWQpKFwiZGl2XCIpYFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBtaW4td2lkdGg6IDIwcHg7XG4gIG1pbi1oZWlnaHQ6IDIwcHg7XG5gLHhlPXgua2V5ZnJhbWVzYFxuZnJvbSB7XG4gIHRyYW5zZm9ybTogc2NhbGUoMC42KTtcbiAgb3BhY2l0eTogMC40O1xufVxudG8ge1xuICB0cmFuc2Zvcm06IHNjYWxlKDEpO1xuICBvcGFjaXR5OiAxO1xufWAsYmU9KDAseC5zdHlsZWQpKFwiZGl2XCIpYFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHRyYW5zZm9ybTogc2NhbGUoMC42KTtcbiAgb3BhY2l0eTogMC40O1xuICBtaW4td2lkdGg6IDIwcHg7XG4gIGFuaW1hdGlvbjogJHt4ZX0gMC4zcyAwLjEycyBjdWJpYy1iZXppZXIoMC4xNzUsIDAuODg1LCAwLjMyLCAxLjI3NSlcbiAgICBmb3J3YXJkcztcbmAsVT0oe3RvYXN0OmV9KT0+e2xldHtpY29uOnQsdHlwZTpvLGljb25UaGVtZTpzfT1lO3JldHVybiB0IT09dm9pZCAwP3R5cGVvZiB0PT1cInN0cmluZ1wiP3kuY3JlYXRlRWxlbWVudChiZSxudWxsLHQpOnQ6bz09PVwiYmxhbmtcIj9udWxsOnkuY3JlYXRlRWxlbWVudChoZSxudWxsLHkuY3JlYXRlRWxlbWVudChNLHsuLi5zfSksbyE9PVwibG9hZGluZ1wiJiZ5LmNyZWF0ZUVsZW1lbnQoZ2UsbnVsbCxvPT09XCJlcnJvclwiP3kuY3JlYXRlRWxlbWVudCh3LHsuLi5zfSk6eS5jcmVhdGVFbGVtZW50KEYsey4uLnN9KSkpfTt2YXIgU2U9ZT0+YFxuMCUge3RyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwke2UqLTIwMH0lLDApIHNjYWxlKC42KTsgb3BhY2l0eTouNTt9XG4xMDAlIHt0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsMCwwKSBzY2FsZSgxKTsgb3BhY2l0eToxO31cbmAsQWU9ZT0+YFxuMCUge3RyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwwLC0xcHgpIHNjYWxlKDEpOyBvcGFjaXR5OjE7fVxuMTAwJSB7dHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCR7ZSotMTUwfSUsLTFweCkgc2NhbGUoLjYpOyBvcGFjaXR5OjA7fVxuYCxQZT1cIjAle29wYWNpdHk6MDt9IDEwMCV7b3BhY2l0eToxO31cIixPZT1cIjAle29wYWNpdHk6MTt9IDEwMCV7b3BhY2l0eTowO31cIixFZT0oMCxiLnN0eWxlZCkoXCJkaXZcIilgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGJhY2tncm91bmQ6ICNmZmY7XG4gIGNvbG9yOiAjMzYzNjM2O1xuICBsaW5lLWhlaWdodDogMS4zO1xuICB3aWxsLWNoYW5nZTogdHJhbnNmb3JtO1xuICBib3gtc2hhZG93OiAwIDNweCAxMHB4IHJnYmEoMCwgMCwgMCwgMC4xKSwgMCAzcHggM3B4IHJnYmEoMCwgMCwgMCwgMC4wNSk7XG4gIG1heC13aWR0aDogMzUwcHg7XG4gIHBvaW50ZXItZXZlbnRzOiBhdXRvO1xuICBwYWRkaW5nOiA4cHggMTBweDtcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xuYCxSZT0oMCxiLnN0eWxlZCkoXCJkaXZcIilgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBtYXJnaW46IDRweCAxMHB4O1xuICBjb2xvcjogaW5oZXJpdDtcbiAgZmxleDogMSAxIGF1dG87XG4gIHdoaXRlLXNwYWNlOiBwcmUtbGluZTtcbmAsdmU9KGUsdCk9PntsZXQgcz1lLmluY2x1ZGVzKFwidG9wXCIpPzE6LTEsW3IsYV09UigpP1tQZSxPZV06W1NlKHMpLEFlKHMpXTtyZXR1cm57YW5pbWF0aW9uOnQ/YCR7KDAsYi5rZXlmcmFtZXMpKHIpfSAwLjM1cyBjdWJpYy1iZXppZXIoLjIxLDEuMDIsLjczLDEpIGZvcndhcmRzYDpgJHsoMCxiLmtleWZyYW1lcykoYSl9IDAuNHMgZm9yd2FyZHMgY3ViaWMtYmV6aWVyKC4wNiwuNzEsLjU1LDEpYH19LCQ9VC5tZW1vKCh7dG9hc3Q6ZSxwb3NpdGlvbjp0LHN0eWxlOm8sY2hpbGRyZW46c30pPT57bGV0IHI9ZS5oZWlnaHQ/dmUoZS5wb3NpdGlvbnx8dHx8XCJ0b3AtY2VudGVyXCIsZS52aXNpYmxlKTp7b3BhY2l0eTowfSxhPVQuY3JlYXRlRWxlbWVudChVLHt0b2FzdDplfSksYz1ULmNyZWF0ZUVsZW1lbnQoUmUsey4uLmUuYXJpYVByb3BzfSx1KGUubWVzc2FnZSxlKSk7cmV0dXJuIFQuY3JlYXRlRWxlbWVudChFZSx7Y2xhc3NOYW1lOmUuY2xhc3NOYW1lLHN0eWxlOnsuLi5yLC4uLm8sLi4uZS5zdHlsZX19LHR5cGVvZiBzPT1cImZ1bmN0aW9uXCI/cyh7aWNvbjphLG1lc3NhZ2U6Y30pOlQuY3JlYXRlRWxlbWVudChULkZyYWdtZW50LG51bGwsYSxjKSl9KTt2YXIgTj1yZXF1aXJlKFwiZ29vYmVyXCIpLGY9VyhyZXF1aXJlKFwicmVhY3RcIikpOygwLE4uc2V0dXApKGYuY3JlYXRlRWxlbWVudCk7dmFyIEllPSh7aWQ6ZSxjbGFzc05hbWU6dCxzdHlsZTpvLG9uSGVpZ2h0VXBkYXRlOnMsY2hpbGRyZW46cn0pPT57bGV0IGE9Zi51c2VDYWxsYmFjayhjPT57aWYoYyl7bGV0IGk9KCk9PntsZXQgZD1jLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtzKGUsZCl9O2koKSxuZXcgTXV0YXRpb25PYnNlcnZlcihpKS5vYnNlcnZlKGMse3N1YnRyZWU6ITAsY2hpbGRMaXN0OiEwLGNoYXJhY3RlckRhdGE6ITB9KX19LFtlLHNdKTtyZXR1cm4gZi5jcmVhdGVFbGVtZW50KFwiZGl2XCIse3JlZjphLGNsYXNzTmFtZTp0LHN0eWxlOm99LHIpfSxEZT0oZSx0KT0+e2xldCBvPWUuaW5jbHVkZXMoXCJ0b3BcIikscz1vP3t0b3A6MH06e2JvdHRvbTowfSxyPWUuaW5jbHVkZXMoXCJjZW50ZXJcIik/e2p1c3RpZnlDb250ZW50OlwiY2VudGVyXCJ9OmUuaW5jbHVkZXMoXCJyaWdodFwiKT97anVzdGlmeUNvbnRlbnQ6XCJmbGV4LWVuZFwifTp7fTtyZXR1cm57bGVmdDowLHJpZ2h0OjAsZGlzcGxheTpcImZsZXhcIixwb3NpdGlvbjpcImFic29sdXRlXCIsdHJhbnNpdGlvbjpSKCk/dm9pZCAwOlwiYWxsIDIzMG1zIGN1YmljLWJlemllciguMjEsMS4wMiwuNzMsMSlcIix0cmFuc2Zvcm06YHRyYW5zbGF0ZVkoJHt0KihvPzE6LTEpfXB4KWAsLi4ucywuLi5yfX0sa2U9Ti5jc3NgXG4gIHotaW5kZXg6IDk5OTk7XG4gID4gKiB7XG4gICAgcG9pbnRlci1ldmVudHM6IGF1dG87XG4gIH1cbmAsTD0xNixKPSh7cmV2ZXJzZU9yZGVyOmUscG9zaXRpb246dD1cInRvcC1jZW50ZXJcIix0b2FzdE9wdGlvbnM6byxndXR0ZXI6cyxjaGlsZHJlbjpyLGNvbnRhaW5lclN0eWxlOmEsY29udGFpbmVyQ2xhc3NOYW1lOmN9KT0+e2xldHt0b2FzdHM6aSxoYW5kbGVyczpkfT1WKG8pO3JldHVybiBmLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIix7c3R5bGU6e3Bvc2l0aW9uOlwiZml4ZWRcIix6SW5kZXg6OTk5OSx0b3A6TCxsZWZ0OkwscmlnaHQ6TCxib3R0b206TCxwb2ludGVyRXZlbnRzOlwibm9uZVwiLC4uLmF9LGNsYXNzTmFtZTpjLG9uTW91c2VFbnRlcjpkLnN0YXJ0UGF1c2Usb25Nb3VzZUxlYXZlOmQuZW5kUGF1c2V9LGkubWFwKHA9PntsZXQgZz1wLnBvc2l0aW9ufHx0LHo9ZC5jYWxjdWxhdGVPZmZzZXQocCx7cmV2ZXJzZU9yZGVyOmUsZ3V0dGVyOnMsZGVmYXVsdFBvc2l0aW9uOnR9KSxPPURlKGcseik7cmV0dXJuIGYuY3JlYXRlRWxlbWVudChJZSx7aWQ6cC5pZCxrZXk6cC5pZCxvbkhlaWdodFVwZGF0ZTpkLnVwZGF0ZUhlaWdodCxjbGFzc05hbWU6cC52aXNpYmxlP2tlOlwiXCIsc3R5bGU6T30scC50eXBlPT09XCJjdXN0b21cIj91KHAubWVzc2FnZSxwKTpyP3IocCk6Zi5jcmVhdGVFbGVtZW50KCQse3RvYXN0OnAscG9zaXRpb246Z30pKX0pKX07dmFyIF9lPW47MCYmKG1vZHVsZS5leHBvcnRzPXtDaGVja21hcmtJY29uLEVycm9ySWNvbixMb2FkZXJJY29uLFRvYXN0QmFyLFRvYXN0SWNvbixUb2FzdGVyLHJlc29sdmVWYWx1ZSx0b2FzdCx1c2VUb2FzdGVyLHVzZVRvYXN0ZXJTdG9yZX0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogcmVhY3QtanN4LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO3ZhciBmPXJlcXVpcmUoXCJyZWFjdFwiKSxrPVN5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpLGw9U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpLG09T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxuPWYuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQuUmVhY3RDdXJyZW50T3duZXIscD17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gcShjLGEsZyl7dmFyIGIsZD17fSxlPW51bGwsaD1udWxsO3ZvaWQgMCE9PWcmJihlPVwiXCIrZyk7dm9pZCAwIT09YS5rZXkmJihlPVwiXCIrYS5rZXkpO3ZvaWQgMCE9PWEucmVmJiYoaD1hLnJlZik7Zm9yKGIgaW4gYSltLmNhbGwoYSxiKSYmIXAuaGFzT3duUHJvcGVydHkoYikmJihkW2JdPWFbYl0pO2lmKGMmJmMuZGVmYXVsdFByb3BzKWZvcihiIGluIGE9Yy5kZWZhdWx0UHJvcHMsYSl2b2lkIDA9PT1kW2JdJiYoZFtiXT1hW2JdKTtyZXR1cm57JCR0eXBlb2Y6ayx0eXBlOmMsa2V5OmUscmVmOmgscHJvcHM6ZCxfb3duZXI6bi5jdXJyZW50fX1leHBvcnRzLkZyYWdtZW50PWw7ZXhwb3J0cy5qc3g9cTtleHBvcnRzLmpzeHM9cTtcbiIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHJlYWN0LnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgbD1TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKSxuPVN5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIikscD1TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIikscT1TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIikscj1TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIiksdD1TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIiksdT1TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKSx2PVN5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKSx3PVN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKSx4PVN5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpLHk9U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIiksej1TeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gQShhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9eiYmYVt6XXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfVxudmFyIEI9e2lzTW91bnRlZDpmdW5jdGlvbigpe3JldHVybiExfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbigpe319LEM9T2JqZWN0LmFzc2lnbixEPXt9O2Z1bmN0aW9uIEUoYSxiLGUpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9RDt0aGlzLnVwZGF0ZXI9ZXx8Qn1FLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O1xuRS5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oYSxiKXtpZihcIm9iamVjdFwiIT09dHlwZW9mIGEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZudWxsIT1hKXRocm93IEVycm9yKFwic2V0U3RhdGUoLi4uKTogdGFrZXMgYW4gb2JqZWN0IG9mIHN0YXRlIHZhcmlhYmxlcyB0byB1cGRhdGUgb3IgYSBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGFuIG9iamVjdCBvZiBzdGF0ZSB2YXJpYWJsZXMuXCIpO3RoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcyxhLGIsXCJzZXRTdGF0ZVwiKX07RS5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24oYSl7dGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLGEsXCJmb3JjZVVwZGF0ZVwiKX07ZnVuY3Rpb24gRigpe31GLnByb3RvdHlwZT1FLnByb3RvdHlwZTtmdW5jdGlvbiBHKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUQ7dGhpcy51cGRhdGVyPWV8fEJ9dmFyIEg9Ry5wcm90b3R5cGU9bmV3IEY7XG5ILmNvbnN0cnVjdG9yPUc7QyhILEUucHJvdG90eXBlKTtILmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwO3ZhciBJPUFycmF5LmlzQXJyYXksSj1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEs9e2N1cnJlbnQ6bnVsbH0sTD17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gTShhLGIsZSl7dmFyIGQsYz17fSxrPW51bGwsaD1udWxsO2lmKG51bGwhPWIpZm9yKGQgaW4gdm9pZCAwIT09Yi5yZWYmJihoPWIucmVmKSx2b2lkIDAhPT1iLmtleSYmKGs9XCJcIitiLmtleSksYilKLmNhbGwoYixkKSYmIUwuaGFzT3duUHJvcGVydHkoZCkmJihjW2RdPWJbZF0pO3ZhciBnPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZyljLmNoaWxkcmVuPWU7ZWxzZSBpZigxPGcpe2Zvcih2YXIgZj1BcnJheShnKSxtPTA7bTxnO20rKylmW21dPWFyZ3VtZW50c1ttKzJdO2MuY2hpbGRyZW49Zn1pZihhJiZhLmRlZmF1bHRQcm9wcylmb3IoZCBpbiBnPWEuZGVmYXVsdFByb3BzLGcpdm9pZCAwPT09Y1tkXSYmKGNbZF09Z1tkXSk7cmV0dXJueyQkdHlwZW9mOmwsdHlwZTphLGtleTprLHJlZjpoLHByb3BzOmMsX293bmVyOksuY3VycmVudH19XG5mdW5jdGlvbiBOKGEsYil7cmV0dXJueyQkdHlwZW9mOmwsdHlwZTphLnR5cGUsa2V5OmIscmVmOmEucmVmLHByb3BzOmEucHJvcHMsX293bmVyOmEuX293bmVyfX1mdW5jdGlvbiBPKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1sfWZ1bmN0aW9uIGVzY2FwZShhKXt2YXIgYj17XCI9XCI6XCI9MFwiLFwiOlwiOlwiPTJcIn07cmV0dXJuXCIkXCIrYS5yZXBsYWNlKC9bPTpdL2csZnVuY3Rpb24oYSl7cmV0dXJuIGJbYV19KX12YXIgUD0vXFwvKy9nO2Z1bmN0aW9uIFEoYSxiKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZudWxsIT1hLmtleT9lc2NhcGUoXCJcIithLmtleSk6Yi50b1N0cmluZygzNil9XG5mdW5jdGlvbiBSKGEsYixlLGQsYyl7dmFyIGs9dHlwZW9mIGE7aWYoXCJ1bmRlZmluZWRcIj09PWt8fFwiYm9vbGVhblwiPT09aylhPW51bGw7dmFyIGg9ITE7aWYobnVsbD09PWEpaD0hMDtlbHNlIHN3aXRjaChrKXtjYXNlIFwic3RyaW5nXCI6Y2FzZSBcIm51bWJlclwiOmg9ITA7YnJlYWs7Y2FzZSBcIm9iamVjdFwiOnN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIGw6Y2FzZSBuOmg9ITB9fWlmKGgpcmV0dXJuIGg9YSxjPWMoaCksYT1cIlwiPT09ZD9cIi5cIitRKGgsMCk6ZCxJKGMpPyhlPVwiXCIsbnVsbCE9YSYmKGU9YS5yZXBsYWNlKFAsXCIkJi9cIikrXCIvXCIpLFIoYyxiLGUsXCJcIixmdW5jdGlvbihhKXtyZXR1cm4gYX0pKTpudWxsIT1jJiYoTyhjKSYmKGM9TihjLGUrKCFjLmtleXx8aCYmaC5rZXk9PT1jLmtleT9cIlwiOihcIlwiK2Mua2V5KS5yZXBsYWNlKFAsXCIkJi9cIikrXCIvXCIpK2EpKSxiLnB1c2goYykpLDE7aD0wO2Q9XCJcIj09PWQ/XCIuXCI6ZCtcIjpcIjtpZihJKGEpKWZvcih2YXIgZz0wO2c8YS5sZW5ndGg7ZysrKXtrPVxuYVtnXTt2YXIgZj1kK1EoayxnKTtoKz1SKGssYixlLGYsYyl9ZWxzZSBpZihmPUEoYSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGYpZm9yKGE9Zi5jYWxsKGEpLGc9MDshKGs9YS5uZXh0KCkpLmRvbmU7KWs9ay52YWx1ZSxmPWQrUShrLGcrKyksaCs9UihrLGIsZSxmLGMpO2Vsc2UgaWYoXCJvYmplY3RcIj09PWspdGhyb3cgYj1TdHJpbmcoYSksRXJyb3IoXCJPYmplY3RzIGFyZSBub3QgdmFsaWQgYXMgYSBSZWFjdCBjaGlsZCAoZm91bmQ6IFwiKyhcIltvYmplY3QgT2JqZWN0XVwiPT09Yj9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGEpLmpvaW4oXCIsIFwiKStcIn1cIjpiKStcIikuIElmIHlvdSBtZWFudCB0byByZW5kZXIgYSBjb2xsZWN0aW9uIG9mIGNoaWxkcmVuLCB1c2UgYW4gYXJyYXkgaW5zdGVhZC5cIik7cmV0dXJuIGh9XG5mdW5jdGlvbiBTKGEsYixlKXtpZihudWxsPT1hKXJldHVybiBhO3ZhciBkPVtdLGM9MDtSKGEsZCxcIlwiLFwiXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGIuY2FsbChlLGEsYysrKX0pO3JldHVybiBkfWZ1bmN0aW9uIFQoYSl7aWYoLTE9PT1hLl9zdGF0dXMpe3ZhciBiPWEuX3Jlc3VsdDtiPWIoKTtiLnRoZW4oZnVuY3Rpb24oYil7aWYoMD09PWEuX3N0YXR1c3x8LTE9PT1hLl9zdGF0dXMpYS5fc3RhdHVzPTEsYS5fcmVzdWx0PWJ9LGZ1bmN0aW9uKGIpe2lmKDA9PT1hLl9zdGF0dXN8fC0xPT09YS5fc3RhdHVzKWEuX3N0YXR1cz0yLGEuX3Jlc3VsdD1ifSk7LTE9PT1hLl9zdGF0dXMmJihhLl9zdGF0dXM9MCxhLl9yZXN1bHQ9Yil9aWYoMT09PWEuX3N0YXR1cylyZXR1cm4gYS5fcmVzdWx0LmRlZmF1bHQ7dGhyb3cgYS5fcmVzdWx0O31cbnZhciBVPXtjdXJyZW50Om51bGx9LFY9e3RyYW5zaXRpb246bnVsbH0sVz17UmVhY3RDdXJyZW50RGlzcGF0Y2hlcjpVLFJlYWN0Q3VycmVudEJhdGNoQ29uZmlnOlYsUmVhY3RDdXJyZW50T3duZXI6S307ZXhwb3J0cy5DaGlsZHJlbj17bWFwOlMsZm9yRWFjaDpmdW5jdGlvbihhLGIsZSl7UyhhLGZ1bmN0aW9uKCl7Yi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LGUpfSxjb3VudDpmdW5jdGlvbihhKXt2YXIgYj0wO1MoYSxmdW5jdGlvbigpe2IrK30pO3JldHVybiBifSx0b0FycmF5OmZ1bmN0aW9uKGEpe3JldHVybiBTKGEsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KXx8W119LG9ubHk6ZnVuY3Rpb24oYSl7aWYoIU8oYSkpdGhyb3cgRXJyb3IoXCJSZWFjdC5DaGlsZHJlbi5vbmx5IGV4cGVjdGVkIHRvIHJlY2VpdmUgYSBzaW5nbGUgUmVhY3QgZWxlbWVudCBjaGlsZC5cIik7cmV0dXJuIGF9fTtleHBvcnRzLkNvbXBvbmVudD1FO2V4cG9ydHMuRnJhZ21lbnQ9cDtcbmV4cG9ydHMuUHJvZmlsZXI9cjtleHBvcnRzLlB1cmVDb21wb25lbnQ9RztleHBvcnRzLlN0cmljdE1vZGU9cTtleHBvcnRzLlN1c3BlbnNlPXc7ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD1XO1xuZXhwb3J0cy5jbG9uZUVsZW1lbnQ9ZnVuY3Rpb24oYSxiLGUpe2lmKG51bGw9PT1hfHx2b2lkIDA9PT1hKXRocm93IEVycm9yKFwiUmVhY3QuY2xvbmVFbGVtZW50KC4uLik6IFRoZSBhcmd1bWVudCBtdXN0IGJlIGEgUmVhY3QgZWxlbWVudCwgYnV0IHlvdSBwYXNzZWQgXCIrYStcIi5cIik7dmFyIGQ9Qyh7fSxhLnByb3BzKSxjPWEua2V5LGs9YS5yZWYsaD1hLl9vd25lcjtpZihudWxsIT1iKXt2b2lkIDAhPT1iLnJlZiYmKGs9Yi5yZWYsaD1LLmN1cnJlbnQpO3ZvaWQgMCE9PWIua2V5JiYoYz1cIlwiK2Iua2V5KTtpZihhLnR5cGUmJmEudHlwZS5kZWZhdWx0UHJvcHMpdmFyIGc9YS50eXBlLmRlZmF1bHRQcm9wcztmb3IoZiBpbiBiKUouY2FsbChiLGYpJiYhTC5oYXNPd25Qcm9wZXJ0eShmKSYmKGRbZl09dm9pZCAwPT09YltmXSYmdm9pZCAwIT09Zz9nW2ZdOmJbZl0pfXZhciBmPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZilkLmNoaWxkcmVuPWU7ZWxzZSBpZigxPGYpe2c9QXJyYXkoZik7XG5mb3IodmFyIG09MDttPGY7bSsrKWdbbV09YXJndW1lbnRzW20rMl07ZC5jaGlsZHJlbj1nfXJldHVybnskJHR5cGVvZjpsLHR5cGU6YS50eXBlLGtleTpjLHJlZjprLHByb3BzOmQsX293bmVyOmh9fTtleHBvcnRzLmNyZWF0ZUNvbnRleHQ9ZnVuY3Rpb24oYSl7YT17JCR0eXBlb2Y6dSxfY3VycmVudFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTI6YSxfdGhyZWFkQ291bnQ6MCxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGwsX2RlZmF1bHRWYWx1ZTpudWxsLF9nbG9iYWxOYW1lOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOnQsX2NvbnRleHQ6YX07cmV0dXJuIGEuQ29uc3VtZXI9YX07ZXhwb3J0cy5jcmVhdGVFbGVtZW50PU07ZXhwb3J0cy5jcmVhdGVGYWN0b3J5PWZ1bmN0aW9uKGEpe3ZhciBiPU0uYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifTtleHBvcnRzLmNyZWF0ZVJlZj1mdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fTtcbmV4cG9ydHMuZm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6dixyZW5kZXI6YX19O2V4cG9ydHMuaXNWYWxpZEVsZW1lbnQ9TztleHBvcnRzLmxhenk9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnksX3BheWxvYWQ6e19zdGF0dXM6LTEsX3Jlc3VsdDphfSxfaW5pdDpUfX07ZXhwb3J0cy5tZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJueyQkdHlwZW9mOngsdHlwZTphLGNvbXBhcmU6dm9pZCAwPT09Yj9udWxsOmJ9fTtleHBvcnRzLnN0YXJ0VHJhbnNpdGlvbj1mdW5jdGlvbihhKXt2YXIgYj1WLnRyYW5zaXRpb247Vi50cmFuc2l0aW9uPXt9O3RyeXthKCl9ZmluYWxseXtWLnRyYW5zaXRpb249Yn19O2V4cG9ydHMudW5zdGFibGVfYWN0PWZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoXCJhY3QoLi4uKSBpcyBub3Qgc3VwcG9ydGVkIGluIHByb2R1Y3Rpb24gYnVpbGRzIG9mIFJlYWN0LlwiKTt9O1xuZXhwb3J0cy51c2VDYWxsYmFjaz1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlQ2FsbGJhY2soYSxiKX07ZXhwb3J0cy51c2VDb250ZXh0PWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlQ29udGV4dChhKX07ZXhwb3J0cy51c2VEZWJ1Z1ZhbHVlPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVzZURlZmVycmVkVmFsdWU9ZnVuY3Rpb24oYSl7cmV0dXJuIFUuY3VycmVudC51c2VEZWZlcnJlZFZhbHVlKGEpfTtleHBvcnRzLnVzZUVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlRWZmZWN0KGEsYil9O2V4cG9ydHMudXNlSWQ9ZnVuY3Rpb24oKXtyZXR1cm4gVS5jdXJyZW50LnVzZUlkKCl9O2V4cG9ydHMudXNlSW1wZXJhdGl2ZUhhbmRsZT1mdW5jdGlvbihhLGIsZSl7cmV0dXJuIFUuY3VycmVudC51c2VJbXBlcmF0aXZlSGFuZGxlKGEsYixlKX07XG5leHBvcnRzLnVzZUluc2VydGlvbkVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlSW5zZXJ0aW9uRWZmZWN0KGEsYil9O2V4cG9ydHMudXNlTGF5b3V0RWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFUuY3VycmVudC51c2VMYXlvdXRFZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VNZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFUuY3VycmVudC51c2VNZW1vKGEsYil9O2V4cG9ydHMudXNlUmVkdWNlcj1mdW5jdGlvbihhLGIsZSl7cmV0dXJuIFUuY3VycmVudC51c2VSZWR1Y2VyKGEsYixlKX07ZXhwb3J0cy51c2VSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIFUuY3VycmVudC51c2VSZWYoYSl9O2V4cG9ydHMudXNlU3RhdGU9ZnVuY3Rpb24oYSl7cmV0dXJuIFUuY3VycmVudC51c2VTdGF0ZShhKX07ZXhwb3J0cy51c2VTeW5jRXh0ZXJuYWxTdG9yZT1mdW5jdGlvbihhLGIsZSl7cmV0dXJuIFUuY3VycmVudC51c2VTeW5jRXh0ZXJuYWxTdG9yZShhLGIsZSl9O1xuZXhwb3J0cy51c2VUcmFuc2l0aW9uPWZ1bmN0aW9uKCl7cmV0dXJuIFUuY3VycmVudC51c2VUcmFuc2l0aW9uKCl9O2V4cG9ydHMudmVyc2lvbj1cIjE4LjIuMFwiO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LXJ1bnRpbWUuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsImltcG9ydCByZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgcmVhY3REb20gZnJvbSAncmVhY3QtZG9tJztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICogQG9uY2FsbCByZWNvaWxcbiAqL1xuXG5mdW5jdGlvbiBlcnIobWVzc2FnZSkge1xuICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTsgLy8gSW4gVjgsIEVycm9yIG9iamVjdHMga2VlcCB0aGUgY2xvc3VyZSBzY29wZSBjaGFpbiBhbGl2ZSB1bnRpbCB0aGVcbiAgLy8gZXJyLnN0YWNrIHByb3BlcnR5IGlzIGFjY2Vzc2VkLlxuXG4gIGlmIChlcnJvci5zdGFjayA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gSUUgc2V0cyB0aGUgc3RhY2sgb25seSBpZiBlcnJvciBpcyB0aHJvd25cbiAgICB0cnkge1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfSBjYXRjaCAoXykge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBmYi13d3cvbm8tdW51c2VkLWNhdGNoLWJpbmRpbmdzLCBuby1lbXB0eVxuXG4gIH1cblxuICByZXR1cm4gZXJyb3I7XG59XG5cbnZhciBlcnJfMSA9IGVycjtcblxuLy8gQG9zcy1vbmx5XG5cblxudmFyIFJlY29pbF9lcnIgPSBlcnJfMTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqIEBvbmNhbGwgcmVjb2lsXG4gKi9cblxuLy8gU3BsaXQgZGVjbGFyYXRpb24gYW5kIGltcGxlbWVudGF0aW9uIHRvIGFsbG93IHRoaXMgZnVuY3Rpb24gdG8gcHJldGVuZCB0b1xuLy8gY2hlY2sgZm9yIGFjdHVhbCBpbnN0YW5jZSBvZiBQcm9taXNlIGluc3RlYWQgb2Ygc29tZXRoaW5nIHdpdGggYSBgdGhlbmBcbi8vIG1ldGhvZC5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZWRlY2xhcmVcbmZ1bmN0aW9uIGlzUHJvbWlzZShwKSB7XG4gIHJldHVybiAhIXAgJiYgdHlwZW9mIHAudGhlbiA9PT0gJ2Z1bmN0aW9uJztcbn1cblxudmFyIFJlY29pbF9pc1Byb21pc2UgPSBpc1Byb21pc2U7XG5cbmZ1bmN0aW9uIG51bGx0aHJvd3MoeCwgbWVzc2FnZSkge1xuICBpZiAoeCAhPSBudWxsKSB7XG4gICAgcmV0dXJuIHg7XG4gIH1cblxuICB0aHJvdyBSZWNvaWxfZXJyKG1lc3NhZ2UgIT09IG51bGwgJiYgbWVzc2FnZSAhPT0gdm9pZCAwID8gbWVzc2FnZSA6ICdHb3QgdW5leHBlY3RlZCBudWxsIG9yIHVuZGVmaW5lZCcpO1xufVxuXG52YXIgUmVjb2lsX251bGx0aHJvd3MgPSBudWxsdGhyb3dzO1xuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxuY2xhc3MgQmFzZUxvYWRhYmxlIHtcbiAgZ2V0VmFsdWUoKSB7XG4gICAgdGhyb3cgUmVjb2lsX2VycignQmFzZUxvYWRhYmxlJyk7XG4gIH1cblxuICB0b1Byb21pc2UoKSB7XG4gICAgdGhyb3cgUmVjb2lsX2VycignQmFzZUxvYWRhYmxlJyk7XG4gIH1cblxuICB2YWx1ZU1heWJlKCkge1xuICAgIHRocm93IFJlY29pbF9lcnIoJ0Jhc2VMb2FkYWJsZScpO1xuICB9XG5cbiAgdmFsdWVPclRocm93KCkge1xuICAgIC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuICAgIHRocm93IFJlY29pbF9lcnIoYExvYWRhYmxlIGV4cGVjdGVkIHZhbHVlLCBidXQgaW4gXCIke3RoaXMuc3RhdGV9XCIgc3RhdGVgKTtcbiAgfVxuXG4gIHByb21pc2VNYXliZSgpIHtcbiAgICB0aHJvdyBSZWNvaWxfZXJyKCdCYXNlTG9hZGFibGUnKTtcbiAgfVxuXG4gIHByb21pc2VPclRocm93KCkge1xuICAgIC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuICAgIHRocm93IFJlY29pbF9lcnIoYExvYWRhYmxlIGV4cGVjdGVkIHByb21pc2UsIGJ1dCBpbiBcIiR7dGhpcy5zdGF0ZX1cIiBzdGF0ZWApO1xuICB9XG5cbiAgZXJyb3JNYXliZSgpIHtcbiAgICB0aHJvdyBSZWNvaWxfZXJyKCdCYXNlTG9hZGFibGUnKTtcbiAgfVxuXG4gIGVycm9yT3JUaHJvdygpIHtcbiAgICAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cbiAgICB0aHJvdyBSZWNvaWxfZXJyKGBMb2FkYWJsZSBleHBlY3RlZCBlcnJvciwgYnV0IGluIFwiJHt0aGlzLnN0YXRlfVwiIHN0YXRlYCk7XG4gIH1cblxuICBpcyhvdGhlcikge1xuICAgIC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuICAgIHJldHVybiBvdGhlci5zdGF0ZSA9PT0gdGhpcy5zdGF0ZSAmJiBvdGhlci5jb250ZW50cyA9PT0gdGhpcy5jb250ZW50cztcbiAgfVxuXG4gIG1hcChfbWFwKSB7XG4gICAgdGhyb3cgUmVjb2lsX2VycignQmFzZUxvYWRhYmxlJyk7XG4gIH1cblxufVxuXG5jbGFzcyBWYWx1ZUxvYWRhYmxlIGV4dGVuZHMgQmFzZUxvYWRhYmxlIHtcbiAgY29uc3RydWN0b3IodmFsdWUpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwic3RhdGVcIiwgJ2hhc1ZhbHVlJyk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJjb250ZW50c1wiLCB2b2lkIDApO1xuXG4gICAgdGhpcy5jb250ZW50cyA9IHZhbHVlO1xuICB9XG5cbiAgZ2V0VmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGVudHM7XG4gIH1cblxuICB0b1Byb21pc2UoKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLmNvbnRlbnRzKTtcbiAgfVxuXG4gIHZhbHVlTWF5YmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGVudHM7XG4gIH1cblxuICB2YWx1ZU9yVGhyb3coKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGVudHM7XG4gIH1cblxuICBwcm9taXNlTWF5YmUoKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIGVycm9yTWF5YmUoKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIG1hcChtYXApIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgbmV4dCA9IG1hcCh0aGlzLmNvbnRlbnRzKTtcbiAgICAgIHJldHVybiBSZWNvaWxfaXNQcm9taXNlKG5leHQpID8gbG9hZGFibGVXaXRoUHJvbWlzZShuZXh0KSA6IGlzTG9hZGFibGUobmV4dCkgPyBuZXh0IDogbG9hZGFibGVXaXRoVmFsdWUobmV4dCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIFJlY29pbF9pc1Byb21pc2UoZSkgPyAvLyBJZiB3ZSBcInN1c3BlbmRlZFwiLCB0aGVuIHRyeSBhZ2Fpbi5cbiAgICAgIC8vIGVycm9ycyBhbmQgc3Vic2VxdWVudCByZXRyaWVzIHdpbGwgYmUgaGFuZGxlZCBpbiAnbG9hZGluZycgY2FzZVxuICAgICAgLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG4gICAgICBsb2FkYWJsZVdpdGhQcm9taXNlKGUubmV4dCgoKSA9PiB0aGlzLm1hcChtYXApKSkgOiBsb2FkYWJsZVdpdGhFcnJvcihlKTtcbiAgICB9XG4gIH1cblxufVxuXG5jbGFzcyBFcnJvckxvYWRhYmxlIGV4dGVuZHMgQmFzZUxvYWRhYmxlIHtcbiAgY29uc3RydWN0b3IoZXJyb3IpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwic3RhdGVcIiwgJ2hhc0Vycm9yJyk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJjb250ZW50c1wiLCB2b2lkIDApO1xuXG4gICAgdGhpcy5jb250ZW50cyA9IGVycm9yO1xuICB9XG5cbiAgZ2V0VmFsdWUoKSB7XG4gICAgdGhyb3cgdGhpcy5jb250ZW50cztcbiAgfVxuXG4gIHRvUHJvbWlzZSgpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QodGhpcy5jb250ZW50cyk7XG4gIH1cblxuICB2YWx1ZU1heWJlKCkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBwcm9taXNlTWF5YmUoKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIGVycm9yTWF5YmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGVudHM7XG4gIH1cblxuICBlcnJvck9yVGhyb3coKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGVudHM7XG4gIH1cblxuICBtYXAoX21hcCkge1xuICAgIC8vICRGbG93SXNzdWVbaW5jb21wYXRpYmxlLXJldHVybl1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG59XG5cbmNsYXNzIExvYWRpbmdMb2FkYWJsZSBleHRlbmRzIEJhc2VMb2FkYWJsZSB7XG4gIGNvbnN0cnVjdG9yKHByb21pc2UpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwic3RhdGVcIiwgJ2xvYWRpbmcnKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImNvbnRlbnRzXCIsIHZvaWQgMCk7XG5cbiAgICB0aGlzLmNvbnRlbnRzID0gcHJvbWlzZTtcbiAgfVxuXG4gIGdldFZhbHVlKCkge1xuICAgIHRocm93IHRoaXMuY29udGVudHM7XG4gIH1cblxuICB0b1Byb21pc2UoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGVudHM7XG4gIH1cblxuICB2YWx1ZU1heWJlKCkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBwcm9taXNlTWF5YmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGVudHM7XG4gIH1cblxuICBwcm9taXNlT3JUaHJvdygpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZW50cztcbiAgfVxuXG4gIGVycm9yTWF5YmUoKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIG1hcChtYXApIHtcbiAgICByZXR1cm4gbG9hZGFibGVXaXRoUHJvbWlzZSh0aGlzLmNvbnRlbnRzLnRoZW4odmFsdWUgPT4ge1xuICAgICAgY29uc3QgbmV4dCA9IG1hcCh2YWx1ZSk7XG5cbiAgICAgIGlmIChpc0xvYWRhYmxlKG5leHQpKSB7XG4gICAgICAgIGNvbnN0IG5leHRMb2FkYWJsZSA9IG5leHQ7XG5cbiAgICAgICAgc3dpdGNoIChuZXh0TG9hZGFibGUuc3RhdGUpIHtcbiAgICAgICAgICBjYXNlICdoYXNWYWx1ZSc6XG4gICAgICAgICAgICByZXR1cm4gbmV4dExvYWRhYmxlLmNvbnRlbnRzO1xuXG4gICAgICAgICAgY2FzZSAnaGFzRXJyb3InOlxuICAgICAgICAgICAgdGhyb3cgbmV4dExvYWRhYmxlLmNvbnRlbnRzO1xuXG4gICAgICAgICAgY2FzZSAnbG9hZGluZyc6XG4gICAgICAgICAgICByZXR1cm4gbmV4dExvYWRhYmxlLmNvbnRlbnRzO1xuICAgICAgICB9XG4gICAgICB9IC8vICRGbG93SXNzdWVbaW5jb21wYXRpYmxlLXJldHVybl1cblxuXG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9KS5jYXRjaChlID0+IHtcbiAgICAgIGlmIChSZWNvaWxfaXNQcm9taXNlKGUpKSB7XG4gICAgICAgIC8vIHdlIHdlcmUgXCJzdXNwZW5kZWQsXCIgdHJ5IGFnYWluXG4gICAgICAgIHJldHVybiBlLnRoZW4oKCkgPT4gdGhpcy5tYXAobWFwKS5jb250ZW50cyk7XG4gICAgICB9XG5cbiAgICAgIHRocm93IGU7XG4gICAgfSkpO1xuICB9XG5cbn1cblxuZnVuY3Rpb24gbG9hZGFibGVXaXRoVmFsdWUodmFsdWUpIHtcbiAgcmV0dXJuIE9iamVjdC5mcmVlemUobmV3IFZhbHVlTG9hZGFibGUodmFsdWUpKTtcbn1cblxuZnVuY3Rpb24gbG9hZGFibGVXaXRoRXJyb3IoZXJyb3IpIHtcbiAgcmV0dXJuIE9iamVjdC5mcmVlemUobmV3IEVycm9yTG9hZGFibGUoZXJyb3IpKTtcbn1cblxuZnVuY3Rpb24gbG9hZGFibGVXaXRoUHJvbWlzZShwcm9taXNlKSB7XG4gIHJldHVybiBPYmplY3QuZnJlZXplKG5ldyBMb2FkaW5nTG9hZGFibGUocHJvbWlzZSkpO1xufVxuXG5mdW5jdGlvbiBsb2FkYWJsZUxvYWRpbmcoKSB7XG4gIHJldHVybiBPYmplY3QuZnJlZXplKG5ldyBMb2FkaW5nTG9hZGFibGUobmV3IFByb21pc2UoKCkgPT4ge30pKSk7XG59XG5cbmZ1bmN0aW9uIGxvYWRhYmxlQWxsQXJyYXkoaW5wdXRzKSB7XG4gIHJldHVybiBpbnB1dHMuZXZlcnkoaSA9PiBpLnN0YXRlID09PSAnaGFzVmFsdWUnKSA/IGxvYWRhYmxlV2l0aFZhbHVlKGlucHV0cy5tYXAoaSA9PiBpLmNvbnRlbnRzKSkgOiBpbnB1dHMuc29tZShpID0+IGkuc3RhdGUgPT09ICdoYXNFcnJvcicpID8gbG9hZGFibGVXaXRoRXJyb3IoUmVjb2lsX251bGx0aHJvd3MoaW5wdXRzLmZpbmQoaSA9PiBpLnN0YXRlID09PSAnaGFzRXJyb3InKSwgJ0ludmFsaWQgbG9hZGFibGUgcGFzc2VkIHRvIGxvYWRhYmxlQWxsJykuY29udGVudHMpIDogbG9hZGFibGVXaXRoUHJvbWlzZShQcm9taXNlLmFsbChpbnB1dHMubWFwKGkgPT4gaS5jb250ZW50cykpKTtcbn1cblxuZnVuY3Rpb24gbG9hZGFibGVBbGwoaW5wdXRzKSB7XG4gIGNvbnN0IHVud3JhcGVkSW5wdXRzID0gQXJyYXkuaXNBcnJheShpbnB1dHMpID8gaW5wdXRzIDogT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoaW5wdXRzKS5tYXAoa2V5ID0+IGlucHV0c1trZXldKTtcbiAgY29uc3Qgbm9ybWFsaXplZElucHV0cyA9IHVud3JhcGVkSW5wdXRzLm1hcCh4ID0+IGlzTG9hZGFibGUoeCkgPyB4IDogUmVjb2lsX2lzUHJvbWlzZSh4KSA/IGxvYWRhYmxlV2l0aFByb21pc2UoeCkgOiBsb2FkYWJsZVdpdGhWYWx1ZSh4KSk7XG4gIGNvbnN0IG91dHB1dCA9IGxvYWRhYmxlQWxsQXJyYXkobm9ybWFsaXplZElucHV0cyk7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGlucHV0cykgPyAvLyAkRmxvd0lzc3VlW2luY29tcGF0aWJsZS1yZXR1cm5dXG4gIG91dHB1dCA6IC8vIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKCkgaGFzIGNvbnNpc3RlbnQga2V5IG9yZGVyaW5nIHdpdGggRVM2XG4gIC8vICRGbG93SXNzdWVbaW5jb21wYXRpYmxlLWNhbGxdXG4gIG91dHB1dC5tYXAob3V0cHV0cyA9PiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhpbnB1dHMpLnJlZHVjZSgob3V0LCBrZXksIGlkeCkgPT4gKHsgLi4ub3V0LFxuICAgIFtrZXldOiBvdXRwdXRzW2lkeF1cbiAgfSksIHt9KSk7XG59XG5cbmZ1bmN0aW9uIGlzTG9hZGFibGUoeCkge1xuICByZXR1cm4geCBpbnN0YW5jZW9mIEJhc2VMb2FkYWJsZTtcbn1cblxuY29uc3QgTG9hZGFibGVTdGF0aWNJbnRlcmZhY2UgPSB7XG4gIG9mOiB2YWx1ZSA9PiBSZWNvaWxfaXNQcm9taXNlKHZhbHVlKSA/IGxvYWRhYmxlV2l0aFByb21pc2UodmFsdWUpIDogaXNMb2FkYWJsZSh2YWx1ZSkgPyB2YWx1ZSA6IGxvYWRhYmxlV2l0aFZhbHVlKHZhbHVlKSxcbiAgZXJyb3I6IGVycm9yID0+IGxvYWRhYmxlV2l0aEVycm9yKGVycm9yKSxcbiAgLy8gJEZsb3dJc3N1ZVtpbmNvbXBhdGlibGUtcmV0dXJuXVxuICBsb2FkaW5nOiAoKSA9PiBsb2FkYWJsZUxvYWRpbmcoKSxcbiAgLy8gJEZsb3dJc3N1ZVt1bmNsZWFyLXR5cGVdXG4gIGFsbDogbG9hZGFibGVBbGwsXG4gIGlzTG9hZGFibGVcbn07XG52YXIgUmVjb2lsX0xvYWRhYmxlID0ge1xuICBsb2FkYWJsZVdpdGhWYWx1ZSxcbiAgbG9hZGFibGVXaXRoRXJyb3IsXG4gIGxvYWRhYmxlV2l0aFByb21pc2UsXG4gIGxvYWRhYmxlTG9hZGluZyxcbiAgbG9hZGFibGVBbGwsXG4gIGlzTG9hZGFibGUsXG4gIFJlY29pbExvYWRhYmxlOiBMb2FkYWJsZVN0YXRpY0ludGVyZmFjZVxufTtcblxudmFyIFJlY29pbF9Mb2FkYWJsZV8xID0gUmVjb2lsX0xvYWRhYmxlLmxvYWRhYmxlV2l0aFZhbHVlO1xudmFyIFJlY29pbF9Mb2FkYWJsZV8yID0gUmVjb2lsX0xvYWRhYmxlLmxvYWRhYmxlV2l0aEVycm9yO1xudmFyIFJlY29pbF9Mb2FkYWJsZV8zID0gUmVjb2lsX0xvYWRhYmxlLmxvYWRhYmxlV2l0aFByb21pc2U7XG52YXIgUmVjb2lsX0xvYWRhYmxlXzQgPSBSZWNvaWxfTG9hZGFibGUubG9hZGFibGVMb2FkaW5nO1xudmFyIFJlY29pbF9Mb2FkYWJsZV81ID0gUmVjb2lsX0xvYWRhYmxlLmxvYWRhYmxlQWxsO1xudmFyIFJlY29pbF9Mb2FkYWJsZV82ID0gUmVjb2lsX0xvYWRhYmxlLmlzTG9hZGFibGU7XG52YXIgUmVjb2lsX0xvYWRhYmxlXzcgPSBSZWNvaWxfTG9hZGFibGUuUmVjb2lsTG9hZGFibGU7XG5cbnZhciBSZWNvaWxfTG9hZGFibGUkMSA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbiAgX19wcm90b19fOiBudWxsLFxuICBsb2FkYWJsZVdpdGhWYWx1ZTogUmVjb2lsX0xvYWRhYmxlXzEsXG4gIGxvYWRhYmxlV2l0aEVycm9yOiBSZWNvaWxfTG9hZGFibGVfMixcbiAgbG9hZGFibGVXaXRoUHJvbWlzZTogUmVjb2lsX0xvYWRhYmxlXzMsXG4gIGxvYWRhYmxlTG9hZGluZzogUmVjb2lsX0xvYWRhYmxlXzQsXG4gIGxvYWRhYmxlQWxsOiBSZWNvaWxfTG9hZGFibGVfNSxcbiAgaXNMb2FkYWJsZTogUmVjb2lsX0xvYWRhYmxlXzYsXG4gIFJlY29pbExvYWRhYmxlOiBSZWNvaWxfTG9hZGFibGVfN1xufSk7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKiBAb25jYWxsIHJlY29pbFxuICovXG5cbmNvbnN0IGdrcyA9IG5ldyBNYXAoKS5zZXQoJ3JlY29pbF9oYW10XzIwMjAnLCB0cnVlKS5zZXQoJ3JlY29pbF9zeW5jX2V4dGVybmFsX3N0b3JlJywgdHJ1ZSkuc2V0KCdyZWNvaWxfc3VwcHJlc3NfcmVyZW5kZXJfaW5fY2FsbGJhY2snLCB0cnVlKS5zZXQoJ3JlY29pbF9tZW1vcnlfbWFuYWdhbWVudF8yMDIwJywgdHJ1ZSk7XG5cbmZ1bmN0aW9uIFJlY29pbF9na3hfT1NTKGdrKSB7XG4gIHZhciBfZ2tzJGdldDtcblxuICByZXR1cm4gKF9na3MkZ2V0ID0gZ2tzLmdldChnaykpICE9PSBudWxsICYmIF9na3MkZ2V0ICE9PSB2b2lkIDAgPyBfZ2tzJGdldCA6IGZhbHNlO1xufVxuXG5SZWNvaWxfZ2t4X09TUy5zZXRQYXNzID0gZ2sgPT4ge1xuICBna3Muc2V0KGdrLCB0cnVlKTtcbn07XG5cblJlY29pbF9na3hfT1NTLnNldEZhaWwgPSBnayA9PiB7XG4gIGdrcy5zZXQoZ2ssIGZhbHNlKTtcbn07XG5cblJlY29pbF9na3hfT1NTLmNsZWFyID0gKCkgPT4ge1xuICBna3MuY2xlYXIoKTtcbn07XG5cbnZhciBSZWNvaWxfZ2t4ID0gUmVjb2lsX2dreF9PU1M7IC8vIEBvc3Mtb25seVxuXG4vKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKiBAb25jYWxsIHJlY29pbFxuICovXG5cbmZ1bmN0aW9uIHJlY292ZXJhYmxlVmlvbGF0aW9uKG1lc3NhZ2UsIF9wcm9qZWN0TmFtZSwge1xuICBlcnJvclxufSA9IHt9KSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UsIGVycm9yKTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG52YXIgcmVjb3ZlcmFibGVWaW9sYXRpb25fMSA9IHJlY292ZXJhYmxlVmlvbGF0aW9uO1xuXG4vLyBAb3NzLW9ubHlcblxuXG52YXIgUmVjb2lsX3JlY292ZXJhYmxlVmlvbGF0aW9uID0gcmVjb3ZlcmFibGVWaW9sYXRpb25fMTtcblxudmFyIF9jcmVhdGVNdXRhYmxlU291cmNlLCBfdXNlTXV0YWJsZVNvdXJjZSwgX3VzZVN5bmNFeHRlcm5hbFN0b3JlO1xuXG5cblxuXG5cblxuXG5jb25zdCBjcmVhdGVNdXRhYmxlU291cmNlID0gLy8gZmxvd2xpbnQtbmV4dC1saW5lIHVuY2xlYXItdHlwZTpvZmZcbihfY3JlYXRlTXV0YWJsZVNvdXJjZSA9IHJlYWN0LmNyZWF0ZU11dGFibGVTb3VyY2UpICE9PSBudWxsICYmIF9jcmVhdGVNdXRhYmxlU291cmNlICE9PSB2b2lkIDAgPyBfY3JlYXRlTXV0YWJsZVNvdXJjZSA6IHJlYWN0LnVuc3RhYmxlX2NyZWF0ZU11dGFibGVTb3VyY2U7XG5jb25zdCB1c2VNdXRhYmxlU291cmNlID0gLy8gZmxvd2xpbnQtbmV4dC1saW5lIHVuY2xlYXItdHlwZTpvZmZcbihfdXNlTXV0YWJsZVNvdXJjZSA9IHJlYWN0LnVzZU11dGFibGVTb3VyY2UpICE9PSBudWxsICYmIF91c2VNdXRhYmxlU291cmNlICE9PSB2b2lkIDAgPyBfdXNlTXV0YWJsZVNvdXJjZSA6IHJlYWN0LnVuc3RhYmxlX3VzZU11dGFibGVTb3VyY2U7IC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdHdnL3JlYWN0LTE4L2Rpc2N1c3Npb25zLzg2XG5cbmNvbnN0IHVzZVN5bmNFeHRlcm5hbFN0b3JlID0gLy8gZmxvd2xpbnQtbmV4dC1saW5lIHVuY2xlYXItdHlwZTpvZmZcbihfdXNlU3luY0V4dGVybmFsU3RvcmUgPSByZWFjdC51c2VTeW5jRXh0ZXJuYWxTdG9yZSkgIT09IG51bGwgJiYgX3VzZVN5bmNFeHRlcm5hbFN0b3JlICE9PSB2b2lkIDAgPyBfdXNlU3luY0V4dGVybmFsU3RvcmUgOiAvLyBmbG93bGludC1uZXh0LWxpbmUgdW5jbGVhci10eXBlOm9mZlxucmVhY3QudW5zdGFibGVfdXNlU3luY0V4dGVybmFsU3RvcmU7XG5sZXQgUmVhY3RSZW5kZXJlclZlcnNpb25NaXNtYXRjaFdhcm5PbmNlID0gZmFsc2U7IC8vIENoZWNrIGlmIHRoZSBjdXJyZW50IHJlbmRlcmVyIHN1cHBvcnRzIGB1c2VTeW5jRXh0ZXJuYWxTdG9yZSgpYC5cbi8vIFNpbmNlIFJlYWN0IGdvZXMgdGhyb3VnaCBhIHByb3h5IGRpc3BhdGNoZXIgYW5kIHRoZSBjdXJyZW50IHJlbmRlcmVyIGNhblxuLy8gY2hhbmdlIHdlIGNhbid0IHNpbXBseSBjaGVjayBpZiBgUmVhY3QudXNlU3luY0V4dGVybmFsU3RvcmUoKWAgaXMgZGVmaW5lZC5cblxuZnVuY3Rpb24gY3VycmVudFJlbmRlcmVyU3VwcG9ydHNVc2VTeW5jRXh0ZXJuYWxTdG9yZSgpIHtcbiAgdmFyIF9SZWFjdEN1cnJlbnREaXNwYXRjaDtcblxuICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS11c2VdXG4gIGNvbnN0IHtcbiAgICBSZWFjdEN1cnJlbnREaXNwYXRjaGVyLFxuICAgIFJlYWN0Q3VycmVudE93bmVyXG4gIH0gPVxuICAvKiAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ10gVGhpcyB3b3JrYXJvdW5kIHdhcyBhcHByb3ZlZCBhcyBhIHNhZmVyIG1lY2hhbmlzbVxuICAgKiB0byBkZXRlY3QgaWYgdGhlIGN1cnJlbnQgcmVuZGVyZXIgc3VwcG9ydHMgdXNlU3luY0V4dGVybmFsU3RvcmUoKVxuICAgKiBodHRwczovL2ZiLndvcmtwbGFjZS5jb20vZ3JvdXBzL3JlYWN0anMvcG9zdHMvOTU1ODY4MjMzMDg0Njk2My8gKi9cbiAgcmVhY3QuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ7XG4gIGNvbnN0IGRpc3BhdGNoZXIgPSAoX1JlYWN0Q3VycmVudERpc3BhdGNoID0gUmVhY3RDdXJyZW50RGlzcGF0Y2hlciA9PT0gbnVsbCB8fCBSZWFjdEN1cnJlbnREaXNwYXRjaGVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBSZWFjdEN1cnJlbnREaXNwYXRjaGVyLmN1cnJlbnQpICE9PSBudWxsICYmIF9SZWFjdEN1cnJlbnREaXNwYXRjaCAhPT0gdm9pZCAwID8gX1JlYWN0Q3VycmVudERpc3BhdGNoIDogUmVhY3RDdXJyZW50T3duZXIuY3VycmVudERpc3BhdGNoZXI7XG4gIGNvbnN0IGlzVXNlU3luY0V4dGVybmFsU3RvcmVTdXBwb3J0ZWQgPSBkaXNwYXRjaGVyLnVzZVN5bmNFeHRlcm5hbFN0b3JlICE9IG51bGw7XG5cbiAgaWYgKHVzZVN5bmNFeHRlcm5hbFN0b3JlICYmICFpc1VzZVN5bmNFeHRlcm5hbFN0b3JlU3VwcG9ydGVkICYmICFSZWFjdFJlbmRlcmVyVmVyc2lvbk1pc21hdGNoV2Fybk9uY2UpIHtcbiAgICBSZWFjdFJlbmRlcmVyVmVyc2lvbk1pc21hdGNoV2Fybk9uY2UgPSB0cnVlO1xuICAgIFJlY29pbF9yZWNvdmVyYWJsZVZpb2xhdGlvbignQSBSZWFjdCByZW5kZXJlciB3aXRob3V0IFJlYWN0IDE4KyBBUEkgc3VwcG9ydCBpcyBiZWluZyB1c2VkIHdpdGggUmVhY3QgMTgrLicpO1xuICB9XG5cbiAgcmV0dXJuIGlzVXNlU3luY0V4dGVybmFsU3RvcmVTdXBwb3J0ZWQ7XG59XG5cbi8qKlxuICogbW9kZTogVGhlIFJlYWN0IEFQSSBhbmQgYXBwcm9hY2ggdG8gdXNlIGZvciBzeW5jaW5nIHN0YXRlIHdpdGggUmVhY3RcbiAqIGVhcmx5OiBSZS1yZW5kZXJzIGZyb20gUmVjb2lsIHVwZGF0ZXMgb2NjdXI6XG4gKiAgICAxKSBlYXJsaWVyXG4gKiAgICAyKSBpbiBzeW5jIHdpdGggUmVhY3QgdXBkYXRlcyBpbiB0aGUgc2FtZSBiYXRjaFxuICogICAgMykgYmVmb3JlIHRyYW5zYWN0aW9uIG9ic2VydmVycyBpbnN0ZWFkIG9mIGFmdGVyLlxuICogY29uY3VycmVudDogSXMgdGhlIGN1cnJlbnQgbW9kZSBjb21wYXRpYmxlIHdpdGggQ29uY3VycmVudCBNb2RlIGFuZCB1c2VUcmFuc2l0aW9uKClcbiAqL1xuZnVuY3Rpb24gcmVhY3RNb2RlKCkge1xuICAvLyBOT1RFOiBUaGlzIG1vZGUgaXMgY3VycmVudGx5IGJyb2tlbiB3aXRoIHNvbWUgU3VzcGVuc2UgY2FzZXNcbiAgLy8gc2VlIFJlY29pbF9zZWxlY3Rvci10ZXN0LmpzXG4gIGlmIChSZWNvaWxfZ2t4KCdyZWNvaWxfdHJhbnNpdGlvbl9zdXBwb3J0JykpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbW9kZTogJ1RSQU5TSVRJT05fU1VQUE9SVCcsXG4gICAgICBlYXJseTogdHJ1ZSxcbiAgICAgIGNvbmN1cnJlbnQ6IHRydWVcbiAgICB9O1xuICB9XG5cbiAgaWYgKFJlY29pbF9na3goJ3JlY29pbF9zeW5jX2V4dGVybmFsX3N0b3JlJykgJiYgdXNlU3luY0V4dGVybmFsU3RvcmUgIT0gbnVsbCkge1xuICAgIHJldHVybiB7XG4gICAgICBtb2RlOiAnU1lOQ19FWFRFUk5BTF9TVE9SRScsXG4gICAgICBlYXJseTogdHJ1ZSxcbiAgICAgIGNvbmN1cnJlbnQ6IGZhbHNlXG4gICAgfTtcbiAgfVxuXG4gIGlmIChSZWNvaWxfZ2t4KCdyZWNvaWxfbXV0YWJsZV9zb3VyY2UnKSAmJiB1c2VNdXRhYmxlU291cmNlICE9IG51bGwgJiYgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgIXdpbmRvdy4kZGlzYWJsZVJlY29pbFZhbHVlTXV0YWJsZVNvdXJjZV9URU1QX0hBQ0tfRE9fTk9UX1VTRSkge1xuICAgIHJldHVybiBSZWNvaWxfZ2t4KCdyZWNvaWxfc3VwcHJlc3NfcmVyZW5kZXJfaW5fY2FsbGJhY2snKSA/IHtcbiAgICAgIG1vZGU6ICdNVVRBQkxFX1NPVVJDRScsXG4gICAgICBlYXJseTogdHJ1ZSxcbiAgICAgIGNvbmN1cnJlbnQ6IHRydWVcbiAgICB9IDoge1xuICAgICAgbW9kZTogJ01VVEFCTEVfU09VUkNFJyxcbiAgICAgIGVhcmx5OiBmYWxzZSxcbiAgICAgIGNvbmN1cnJlbnQ6IGZhbHNlXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBSZWNvaWxfZ2t4KCdyZWNvaWxfc3VwcHJlc3NfcmVyZW5kZXJfaW5fY2FsbGJhY2snKSA/IHtcbiAgICBtb2RlOiAnTEVHQUNZJyxcbiAgICBlYXJseTogdHJ1ZSxcbiAgICBjb25jdXJyZW50OiBmYWxzZVxuICB9IDoge1xuICAgIG1vZGU6ICdMRUdBQ1knLFxuICAgIGVhcmx5OiBmYWxzZSxcbiAgICBjb25jdXJyZW50OiBmYWxzZVxuICB9O1xufSAvLyBUT0RPIE5lZWQgdG8gZmlndXJlIG91dCBpZiB0aGVyZSBpcyBhIHN0YW5kYXJkL29wZW4tc291cmNlIGVxdWl2YWxlbnQgdG8gc2VlIGlmIGhvdCBtb2R1bGUgcmVwbGFjZW1lbnQgaXMgaGFwcGVuaW5nOlxuXG5cbmZ1bmN0aW9uIGlzRmFzdFJlZnJlc2hFbmFibGVkKCkge1xuICAvLyBAZmItb25seTogY29uc3Qge2lzQWNjZXB0aW5nVXBkYXRlfSA9IHJlcXVpcmUoJ19fZGVidWcnKTtcbiAgLy8gQGZiLW9ubHk6IHJldHVybiB0eXBlb2YgaXNBY2NlcHRpbmdVcGRhdGUgPT09ICdmdW5jdGlvbicgJiYgaXNBY2NlcHRpbmdVcGRhdGUoKTtcbiAgcmV0dXJuIGZhbHNlOyAvLyBAb3NzLW9ubHlcbn1cblxudmFyIFJlY29pbF9SZWFjdE1vZGUgPSB7XG4gIGNyZWF0ZU11dGFibGVTb3VyY2UsXG4gIHVzZU11dGFibGVTb3VyY2UsXG4gIHVzZVN5bmNFeHRlcm5hbFN0b3JlLFxuICBjdXJyZW50UmVuZGVyZXJTdXBwb3J0c1VzZVN5bmNFeHRlcm5hbFN0b3JlLFxuICByZWFjdE1vZGUsXG4gIGlzRmFzdFJlZnJlc2hFbmFibGVkXG59O1xuXG5jb25zdCBlbnYgPSB7XG4gIFJFQ09JTF9EVVBMSUNBVEVfQVRPTV9LRVlfQ0hFQ0tJTkdfRU5BQkxFRDogdHJ1ZVxufTtcbi8qKlxuICogQWxsb3cgTm9kZUpTL05leHRKUy9ldGMgdG8gc2V0IHRoZSBpbml0aWFsIHN0YXRlIHRocm91Z2ggcHJvY2Vzcy5lbnYgdmFyaWFibGVcbiAqIE5vdGU6ICB3ZSBkb24ndCBhc3N1bWUgJ3Byb2Nlc3MnIGlzIGF2YWlsYWJsZSBpbiBhbGwgcnVudGltZSBlbnZpcm9ubWVudHNcbiAqXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9va2V4cGVyaW1lbnRhbC9SZWNvaWwvaXNzdWVzLzczM1xuICovXG5cbmZ1bmN0aW9uIGFwcGx5UHJvY2Vzc0VudkZsYWdPdmVycmlkZXMoKSB7XG4gIHZhciBfcHJvY2VzcywgX3Byb2Nlc3MkZW52JFJFQ09JTF9ELCBfcHJvY2VzcyRlbnYkUkVDT0lMX0QyO1xuXG4gIC8vIG5vdGU6IHRoaXMgY2hlY2sgaXMgbmVlZGVkIGluIGFkZGl0aW9uIHRvIHRoZSBjaGVjayBiZWxvdywgcnVudGltZSBlcnJvciB3aWxsIG9jY3VyIHdpdGhvdXQgaXQhXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmYi13d3cvdHlwZW9mLXVuZGVmaW5lZFxuICBpZiAodHlwZW9mIHByb2Nlc3MgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKCgoX3Byb2Nlc3MgPSBwcm9jZXNzKSA9PT0gbnVsbCB8fCBfcHJvY2VzcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3Byb2Nlc3MuZW52KSA9PSBudWxsKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3Qgc2FuaXRpemVkVmFsdWUgPSAoX3Byb2Nlc3MkZW52JFJFQ09JTF9EID0gcHJvY2Vzcy5lbnYuUkVDT0lMX0RVUExJQ0FURV9BVE9NX0tFWV9DSEVDS0lOR19FTkFCTEVEKSA9PT0gbnVsbCB8fCBfcHJvY2VzcyRlbnYkUkVDT0lMX0QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfcHJvY2VzcyRlbnYkUkVDT0lMX0QyID0gX3Byb2Nlc3MkZW52JFJFQ09JTF9ELnRvTG93ZXJDYXNlKCkpID09PSBudWxsIHx8IF9wcm9jZXNzJGVudiRSRUNPSUxfRDIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9wcm9jZXNzJGVudiRSRUNPSUxfRDIudHJpbSgpO1xuXG4gIGlmIChzYW5pdGl6ZWRWYWx1ZSA9PSBudWxsIHx8IHNhbml0aXplZFZhbHVlID09PSAnJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IGFsbG93ZWRWYWx1ZXMgPSBbJ3RydWUnLCAnZmFsc2UnXTtcblxuICBpZiAoIWFsbG93ZWRWYWx1ZXMuaW5jbHVkZXMoc2FuaXRpemVkVmFsdWUpKSB7XG4gICAgdGhyb3cgUmVjb2lsX2VycihgcHJvY2Vzcy5lbnYuUkVDT0lMX0RVUExJQ0FURV9BVE9NX0tFWV9DSEVDS0lOR19FTkFCTEVEIHZhbHVlIG11c3QgYmUgJ3RydWUnLCAnZmFsc2UnLCBvciBlbXB0eTogJHtzYW5pdGl6ZWRWYWx1ZX1gKTtcbiAgfVxuXG4gIGVudi5SRUNPSUxfRFVQTElDQVRFX0FUT01fS0VZX0NIRUNLSU5HX0VOQUJMRUQgPSBzYW5pdGl6ZWRWYWx1ZSA9PT0gJ3RydWUnO1xufVxuXG5hcHBseVByb2Nlc3NFbnZGbGFnT3ZlcnJpZGVzKCk7XG52YXIgUmVjb2lsX1JlY29pbEVudiA9IGVudjtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqIEBvbmNhbGwgcmVjb2lsXG4gKi9cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG5jbGFzcyBBYnN0cmFjdFJlY29pbFZhbHVlIHtcbiAgY29uc3RydWN0b3IobmV3S2V5KSB7XG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwia2V5XCIsIHZvaWQgMCk7XG5cbiAgICB0aGlzLmtleSA9IG5ld0tleTtcbiAgfVxuXG4gIHRvSlNPTigpIHtcbiAgICByZXR1cm4ge1xuICAgICAga2V5OiB0aGlzLmtleVxuICAgIH07XG4gIH1cblxufVxuXG5jbGFzcyBSZWNvaWxTdGF0ZSBleHRlbmRzIEFic3RyYWN0UmVjb2lsVmFsdWUge31cblxuY2xhc3MgUmVjb2lsVmFsdWVSZWFkT25seSBleHRlbmRzIEFic3RyYWN0UmVjb2lsVmFsdWUge31cblxuZnVuY3Rpb24gaXNSZWNvaWxWYWx1ZSh4KSB7XG4gIHJldHVybiB4IGluc3RhbmNlb2YgUmVjb2lsU3RhdGUgfHwgeCBpbnN0YW5jZW9mIFJlY29pbFZhbHVlUmVhZE9ubHk7XG59XG5cbnZhciBSZWNvaWxfUmVjb2lsVmFsdWUgPSB7XG4gIEFic3RyYWN0UmVjb2lsVmFsdWUsXG4gIFJlY29pbFN0YXRlLFxuICBSZWNvaWxWYWx1ZVJlYWRPbmx5LFxuICBpc1JlY29pbFZhbHVlXG59O1xuXG52YXIgUmVjb2lsX1JlY29pbFZhbHVlXzEgPSBSZWNvaWxfUmVjb2lsVmFsdWUuQWJzdHJhY3RSZWNvaWxWYWx1ZTtcbnZhciBSZWNvaWxfUmVjb2lsVmFsdWVfMiA9IFJlY29pbF9SZWNvaWxWYWx1ZS5SZWNvaWxTdGF0ZTtcbnZhciBSZWNvaWxfUmVjb2lsVmFsdWVfMyA9IFJlY29pbF9SZWNvaWxWYWx1ZS5SZWNvaWxWYWx1ZVJlYWRPbmx5O1xudmFyIFJlY29pbF9SZWNvaWxWYWx1ZV80ID0gUmVjb2lsX1JlY29pbFZhbHVlLmlzUmVjb2lsVmFsdWU7XG5cbnZhciBSZWNvaWxfUmVjb2lsVmFsdWUkMSA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbiAgX19wcm90b19fOiBudWxsLFxuICBBYnN0cmFjdFJlY29pbFZhbHVlOiBSZWNvaWxfUmVjb2lsVmFsdWVfMSxcbiAgUmVjb2lsU3RhdGU6IFJlY29pbF9SZWNvaWxWYWx1ZV8yLFxuICBSZWNvaWxWYWx1ZVJlYWRPbmx5OiBSZWNvaWxfUmVjb2lsVmFsdWVfMyxcbiAgaXNSZWNvaWxWYWx1ZTogUmVjb2lsX1JlY29pbFZhbHVlXzRcbn0pO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKiBAb25jYWxsIHJlY29pbFxuICovXG5cbmZ1bmN0aW9uIHNwcmludGYoZm9ybWF0LCAuLi5hcmdzKSB7XG4gIGxldCBpbmRleCA9IDA7XG4gIHJldHVybiBmb3JtYXQucmVwbGFjZSgvJXMvZywgKCkgPT4gU3RyaW5nKGFyZ3NbaW5kZXgrK10pKTtcbn1cblxudmFyIHNwcmludGZfMSA9IHNwcmludGY7XG5cbmZ1bmN0aW9uIGV4cGVjdGF0aW9uVmlvbGF0aW9uKGZvcm1hdCwgLi4uYXJncykge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgY29uc3QgbWVzc2FnZSA9IHNwcmludGZfMS5jYWxsKG51bGwsIGZvcm1hdCwgLi4uYXJncyk7XG4gICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgZXJyb3IubmFtZSA9ICdFeHBlY3RhdGlvbiBWaW9sYXRpb24nO1xuICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICB9XG59XG5cbnZhciBleHBlY3RhdGlvblZpb2xhdGlvbl8xID0gZXhwZWN0YXRpb25WaW9sYXRpb247XG5cbi8vIEBvc3Mtb25seVxuXG5cbnZhciBSZWNvaWxfZXhwZWN0YXRpb25WaW9sYXRpb24gPSBleHBlY3RhdGlvblZpb2xhdGlvbl8xO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICogQG9uY2FsbCByZWNvaWxcbiAqL1xuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGl0ZXJhYmxlIHdob3NlIG91dHB1dCBpcyBnZW5lcmF0ZWQgYnkgcGFzc2luZyB0aGUgaW5wdXRcbiAqIGl0ZXJhYmxlJ3MgdmFsdWVzIHRocm91Z2ggdGhlIG1hcHBlciBmdW5jdGlvbi5cbiAqL1xuXG5mdW5jdGlvbiBtYXBJdGVyYWJsZShpdGVyYWJsZSwgY2FsbGJhY2spIHtcbiAgLy8gVXNlIGdlbmVyYXRvciB0byBjcmVhdGUgaXRlcmFibGUvaXRlcmF0b3JcbiAgcmV0dXJuIGZ1bmN0aW9uKiAoKSB7XG4gICAgbGV0IGluZGV4ID0gMDtcblxuICAgIGZvciAoY29uc3QgdmFsdWUgb2YgaXRlcmFibGUpIHtcbiAgICAgIHlpZWxkIGNhbGxiYWNrKHZhbHVlLCBpbmRleCsrKTtcbiAgICB9XG4gIH0oKTtcbn1cblxudmFyIFJlY29pbF9tYXBJdGVyYWJsZSA9IG1hcEl0ZXJhYmxlO1xuXG5jb25zdCB7XG4gIGlzRmFzdFJlZnJlc2hFbmFibGVkOiBpc0Zhc3RSZWZyZXNoRW5hYmxlZCQxXG59ID0gUmVjb2lsX1JlYWN0TW9kZTtcblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbmNsYXNzIERlZmF1bHRWYWx1ZSB7fVxuXG5jb25zdCBERUZBVUxUX1ZBTFVFID0gbmV3IERlZmF1bHRWYWx1ZSgpO1xuLy8gZmxvd2xpbnQtbmV4dC1saW5lIHVuY2xlYXItdHlwZTpvZmZcbmNvbnN0IG5vZGVzID0gbmV3IE1hcCgpOyAvLyBmbG93bGludC1uZXh0LWxpbmUgdW5jbGVhci10eXBlOm9mZlxuXG5jb25zdCByZWNvaWxWYWx1ZXMgPSBuZXcgTWFwKCk7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby1yZWRlY2xhcmUgKi9cblxuZnVuY3Rpb24gcmVjb2lsVmFsdWVzRm9yS2V5cyhrZXlzKSB7XG4gIHJldHVybiBSZWNvaWxfbWFwSXRlcmFibGUoa2V5cywga2V5ID0+IFJlY29pbF9udWxsdGhyb3dzKHJlY29pbFZhbHVlcy5nZXQoa2V5KSkpO1xufVxuXG5mdW5jdGlvbiBjaGVja0ZvckR1cGxpY2F0ZUF0b21LZXkoa2V5KSB7XG4gIGlmIChub2Rlcy5oYXMoa2V5KSkge1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBgRHVwbGljYXRlIGF0b20ga2V5IFwiJHtrZXl9XCIuIFRoaXMgaXMgYSBGQVRBTCBFUlJPUiBpblxuICAgICAgcHJvZHVjdGlvbi4gQnV0IGl0IGlzIHNhZmUgdG8gaWdub3JlIHRoaXMgd2FybmluZyBpZiBpdCBvY2N1cnJlZCBiZWNhdXNlIG9mXG4gICAgICBob3QgbW9kdWxlIHJlcGxhY2VtZW50LmA7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAvLyBUT0RPIEZpZ3VyZSB0aGlzIG91dCBmb3Igb3Blbi1zb3VyY2VcbiAgICAgIGlmICghaXNGYXN0UmVmcmVzaEVuYWJsZWQkMSgpKSB7XG4gICAgICAgIFJlY29pbF9leHBlY3RhdGlvblZpb2xhdGlvbihtZXNzYWdlLCAncmVjb2lsJyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEBmYi1vbmx5OiByZWNvdmVyYWJsZVZpb2xhdGlvbihtZXNzYWdlLCAncmVjb2lsJyk7XG4gICAgICBjb25zb2xlLndhcm4obWVzc2FnZSk7IC8vIEBvc3Mtb25seVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiByZWdpc3Rlck5vZGUobm9kZSkge1xuICBpZiAoUmVjb2lsX1JlY29pbEVudi5SRUNPSUxfRFVQTElDQVRFX0FUT01fS0VZX0NIRUNLSU5HX0VOQUJMRUQpIHtcbiAgICBjaGVja0ZvckR1cGxpY2F0ZUF0b21LZXkobm9kZS5rZXkpO1xuICB9XG5cbiAgbm9kZXMuc2V0KG5vZGUua2V5LCBub2RlKTtcbiAgY29uc3QgcmVjb2lsVmFsdWUgPSBub2RlLnNldCA9PSBudWxsID8gbmV3IFJlY29pbF9SZWNvaWxWYWx1ZSQxLlJlY29pbFZhbHVlUmVhZE9ubHkobm9kZS5rZXkpIDogbmV3IFJlY29pbF9SZWNvaWxWYWx1ZSQxLlJlY29pbFN0YXRlKG5vZGUua2V5KTtcbiAgcmVjb2lsVmFsdWVzLnNldChub2RlLmtleSwgcmVjb2lsVmFsdWUpO1xuICByZXR1cm4gcmVjb2lsVmFsdWU7XG59XG4vKiBlc2xpbnQtZW5hYmxlIG5vLXJlZGVjbGFyZSAqL1xuXG5cbmNsYXNzIE5vZGVNaXNzaW5nRXJyb3IgZXh0ZW5kcyBFcnJvciB7fSAvLyBmbG93bGludC1uZXh0LWxpbmUgdW5jbGVhci10eXBlOm9mZlxuXG5cbmZ1bmN0aW9uIGdldE5vZGUoa2V5KSB7XG4gIGNvbnN0IG5vZGUgPSBub2Rlcy5nZXQoa2V5KTtcblxuICBpZiAobm9kZSA9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IE5vZGVNaXNzaW5nRXJyb3IoYE1pc3NpbmcgZGVmaW5pdGlvbiBmb3IgUmVjb2lsVmFsdWU6IFwiJHtrZXl9XCJcImApO1xuICB9XG5cbiAgcmV0dXJuIG5vZGU7XG59IC8vIGZsb3dsaW50LW5leHQtbGluZSB1bmNsZWFyLXR5cGU6b2ZmXG5cblxuZnVuY3Rpb24gZ2V0Tm9kZU1heWJlKGtleSkge1xuICByZXR1cm4gbm9kZXMuZ2V0KGtleSk7XG59XG5cbmNvbnN0IGNvbmZpZ0RlbGV0aW9uSGFuZGxlcnMgPSBuZXcgTWFwKCk7XG5cbmZ1bmN0aW9uIGRlbGV0ZU5vZGVDb25maWdJZlBvc3NpYmxlKGtleSkge1xuICB2YXIgX25vZGUkc2hvdWxkRGVsZXRlQ29uO1xuXG4gIGlmICghUmVjb2lsX2dreCgncmVjb2lsX21lbW9yeV9tYW5hZ2FtZW50XzIwMjAnKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IG5vZGUgPSBub2Rlcy5nZXQoa2V5KTtcblxuICBpZiAobm9kZSAhPT0gbnVsbCAmJiBub2RlICE9PSB2b2lkIDAgJiYgKF9ub2RlJHNob3VsZERlbGV0ZUNvbiA9IG5vZGUuc2hvdWxkRGVsZXRlQ29uZmlnT25SZWxlYXNlKSAhPT0gbnVsbCAmJiBfbm9kZSRzaG91bGREZWxldGVDb24gIT09IHZvaWQgMCAmJiBfbm9kZSRzaG91bGREZWxldGVDb24uY2FsbChub2RlKSkge1xuICAgIHZhciBfZ2V0Q29uZmlnRGVsZXRpb25IYW47XG5cbiAgICBub2Rlcy5kZWxldGUoa2V5KTtcbiAgICAoX2dldENvbmZpZ0RlbGV0aW9uSGFuID0gZ2V0Q29uZmlnRGVsZXRpb25IYW5kbGVyKGtleSkpID09PSBudWxsIHx8IF9nZXRDb25maWdEZWxldGlvbkhhbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2dldENvbmZpZ0RlbGV0aW9uSGFuKCk7XG4gICAgY29uZmlnRGVsZXRpb25IYW5kbGVycy5kZWxldGUoa2V5KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzZXRDb25maWdEZWxldGlvbkhhbmRsZXIoa2V5LCBmbikge1xuICBpZiAoIVJlY29pbF9na3goJ3JlY29pbF9tZW1vcnlfbWFuYWdhbWVudF8yMDIwJykpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoZm4gPT09IHVuZGVmaW5lZCkge1xuICAgIGNvbmZpZ0RlbGV0aW9uSGFuZGxlcnMuZGVsZXRlKGtleSk7XG4gIH0gZWxzZSB7XG4gICAgY29uZmlnRGVsZXRpb25IYW5kbGVycy5zZXQoa2V5LCBmbik7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0Q29uZmlnRGVsZXRpb25IYW5kbGVyKGtleSkge1xuICByZXR1cm4gY29uZmlnRGVsZXRpb25IYW5kbGVycy5nZXQoa2V5KTtcbn1cblxudmFyIFJlY29pbF9Ob2RlID0ge1xuICBub2RlcyxcbiAgcmVjb2lsVmFsdWVzLFxuICByZWdpc3Rlck5vZGUsXG4gIGdldE5vZGUsXG4gIGdldE5vZGVNYXliZSxcbiAgZGVsZXRlTm9kZUNvbmZpZ0lmUG9zc2libGUsXG4gIHNldENvbmZpZ0RlbGV0aW9uSGFuZGxlcixcbiAgZ2V0Q29uZmlnRGVsZXRpb25IYW5kbGVyLFxuICByZWNvaWxWYWx1ZXNGb3JLZXlzLFxuICBOb2RlTWlzc2luZ0Vycm9yLFxuICBEZWZhdWx0VmFsdWUsXG4gIERFRkFVTFRfVkFMVUVcbn07XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKiBAb25jYWxsIHJlY29pbFxuICovXG5cbmZ1bmN0aW9uIGVucXVldWVFeGVjdXRpb24ocywgZikge1xuICBmKCk7XG59XG5cbnZhciBSZWNvaWxfUXVldWUgPSB7XG4gIGVucXVldWVFeGVjdXRpb25cbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZuLCBtb2R1bGUpIHtcblx0cmV0dXJuIG1vZHVsZSA9IHsgZXhwb3J0czoge30gfSwgZm4obW9kdWxlLCBtb2R1bGUuZXhwb3J0cyksIG1vZHVsZS5leHBvcnRzO1xufVxuXG52YXIgaGFtdF8xID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSkge1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gdHlwZW9mIG9iajtcbn0gOiBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xufTtcbi8qKlxuICAgIEBmaWxlT3ZlcnZpZXcgSGFzaCBBcnJheSBNYXBwZWQgVHJpZS5cblxuICAgIENvZGUgYmFzZWQgb246IGh0dHBzOi8vZ2l0aHViLmNvbS9leGNsaXB5L3BkYXRhXG4qL1xuXG5cbnZhciBoYW10ID0ge307IC8vIGV4cG9ydFxuXG4vKiBDb25maWd1cmF0aW9uXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG52YXIgU0laRSA9IDU7XG52YXIgQlVDS0VUX1NJWkUgPSBNYXRoLnBvdygyLCBTSVpFKTtcbnZhciBNQVNLID0gQlVDS0VUX1NJWkUgLSAxO1xudmFyIE1BWF9JTkRFWF9OT0RFID0gQlVDS0VUX1NJWkUgLyAyO1xudmFyIE1JTl9BUlJBWV9OT0RFID0gQlVDS0VUX1NJWkUgLyA0O1xuLypcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbnZhciBub3RoaW5nID0ge307XG5cbnZhciBjb25zdGFudCA9IGZ1bmN0aW9uIGNvbnN0YW50KHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn07XG4vKipcbiAgICBHZXQgMzIgYml0IGhhc2ggb2Ygc3RyaW5nLlxuXG4gICAgQmFzZWQgb246XG4gICAgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy83NjE2NDYxL2dlbmVyYXRlLWEtaGFzaC1mcm9tLXN0cmluZy1pbi1qYXZhc2NyaXB0LWpxdWVyeVxuKi9cblxuXG52YXIgaGFzaCA9IGhhbXQuaGFzaCA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2Ygc3RyID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihzdHIpO1xuICBpZiAodHlwZSA9PT0gJ251bWJlcicpIHJldHVybiBzdHI7XG4gIGlmICh0eXBlICE9PSAnc3RyaW5nJykgc3RyICs9ICcnO1xuICB2YXIgaGFzaCA9IDA7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHN0ci5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgIHZhciBjID0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gICAgaGFzaCA9IChoYXNoIDw8IDUpIC0gaGFzaCArIGMgfCAwO1xuICB9XG5cbiAgcmV0dXJuIGhhc2g7XG59O1xuLyogQml0IE9wc1xuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuLyoqXG4gICAgSGFtbWluZyB3ZWlnaHQuXG5cbiAgICBUYWtlbiBmcm9tOiBodHRwOi8vanNwZXJmLmNvbS9oYW1taW5nLXdlaWdodFxuKi9cblxuXG52YXIgcG9wY291bnQgPSBmdW5jdGlvbiBwb3Bjb3VudCh4KSB7XG4gIHggLT0geCA+PiAxICYgMHg1NTU1NTU1NTtcbiAgeCA9ICh4ICYgMHgzMzMzMzMzMykgKyAoeCA+PiAyICYgMHgzMzMzMzMzMyk7XG4gIHggPSB4ICsgKHggPj4gNCkgJiAweDBmMGYwZjBmO1xuICB4ICs9IHggPj4gODtcbiAgeCArPSB4ID4+IDE2O1xuICByZXR1cm4geCAmIDB4N2Y7XG59O1xuXG52YXIgaGFzaEZyYWdtZW50ID0gZnVuY3Rpb24gaGFzaEZyYWdtZW50KHNoaWZ0LCBoKSB7XG4gIHJldHVybiBoID4+PiBzaGlmdCAmIE1BU0s7XG59O1xuXG52YXIgdG9CaXRtYXAgPSBmdW5jdGlvbiB0b0JpdG1hcCh4KSB7XG4gIHJldHVybiAxIDw8IHg7XG59O1xuXG52YXIgZnJvbUJpdG1hcCA9IGZ1bmN0aW9uIGZyb21CaXRtYXAoYml0bWFwLCBiaXQpIHtcbiAgcmV0dXJuIHBvcGNvdW50KGJpdG1hcCAmIGJpdCAtIDEpO1xufTtcbi8qIEFycmF5IE9wc1xuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuLyoqXG4gICAgU2V0IGEgdmFsdWUgaW4gYW4gYXJyYXkuXG5cbiAgICBAcGFyYW0gbXV0YXRlIFNob3VsZCB0aGUgaW5wdXQgYXJyYXkgYmUgbXV0YXRlZD9cbiAgICBAcGFyYW0gYXQgSW5kZXggdG8gY2hhbmdlLlxuICAgIEBwYXJhbSB2IE5ldyB2YWx1ZVxuICAgIEBwYXJhbSBhcnIgQXJyYXkuXG4qL1xuXG5cbnZhciBhcnJheVVwZGF0ZSA9IGZ1bmN0aW9uIGFycmF5VXBkYXRlKG11dGF0ZSwgYXQsIHYsIGFycikge1xuICB2YXIgb3V0ID0gYXJyO1xuXG4gIGlmICghbXV0YXRlKSB7XG4gICAgdmFyIGxlbiA9IGFyci5sZW5ndGg7XG4gICAgb3V0ID0gbmV3IEFycmF5KGxlbik7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICBvdXRbaV0gPSBhcnJbaV07XG4gICAgfVxuICB9XG5cbiAgb3V0W2F0XSA9IHY7XG4gIHJldHVybiBvdXQ7XG59O1xuLyoqXG4gICAgUmVtb3ZlIGEgdmFsdWUgZnJvbSBhbiBhcnJheS5cblxuICAgIEBwYXJhbSBtdXRhdGUgU2hvdWxkIHRoZSBpbnB1dCBhcnJheSBiZSBtdXRhdGVkP1xuICAgIEBwYXJhbSBhdCBJbmRleCB0byByZW1vdmUuXG4gICAgQHBhcmFtIGFyciBBcnJheS5cbiovXG5cblxudmFyIGFycmF5U3BsaWNlT3V0ID0gZnVuY3Rpb24gYXJyYXlTcGxpY2VPdXQobXV0YXRlLCBhdCwgYXJyKSB7XG4gIHZhciBuZXdMZW4gPSBhcnIubGVuZ3RoIC0gMTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgZyA9IDA7XG4gIHZhciBvdXQgPSBhcnI7XG5cbiAgaWYgKG11dGF0ZSkge1xuICAgIGkgPSBnID0gYXQ7XG4gIH0gZWxzZSB7XG4gICAgb3V0ID0gbmV3IEFycmF5KG5ld0xlbik7XG5cbiAgICB3aGlsZSAoaSA8IGF0KSB7XG4gICAgICBvdXRbZysrXSA9IGFycltpKytdO1xuICAgIH1cbiAgfVxuXG4gICsraTtcblxuICB3aGlsZSAoaSA8PSBuZXdMZW4pIHtcbiAgICBvdXRbZysrXSA9IGFycltpKytdO1xuICB9XG5cbiAgaWYgKG11dGF0ZSkge1xuICAgIG91dC5sZW5ndGggPSBuZXdMZW47XG4gIH1cblxuICByZXR1cm4gb3V0O1xufTtcbi8qKlxuICAgIEluc2VydCBhIHZhbHVlIGludG8gYW4gYXJyYXkuXG5cbiAgICBAcGFyYW0gbXV0YXRlIFNob3VsZCB0aGUgaW5wdXQgYXJyYXkgYmUgbXV0YXRlZD9cbiAgICBAcGFyYW0gYXQgSW5kZXggdG8gaW5zZXJ0IGF0LlxuICAgIEBwYXJhbSB2IFZhbHVlIHRvIGluc2VydCxcbiAgICBAcGFyYW0gYXJyIEFycmF5LlxuKi9cblxuXG52YXIgYXJyYXlTcGxpY2VJbiA9IGZ1bmN0aW9uIGFycmF5U3BsaWNlSW4obXV0YXRlLCBhdCwgdiwgYXJyKSB7XG4gIHZhciBsZW4gPSBhcnIubGVuZ3RoO1xuXG4gIGlmIChtdXRhdGUpIHtcbiAgICB2YXIgX2kgPSBsZW47XG5cbiAgICB3aGlsZSAoX2kgPj0gYXQpIHtcbiAgICAgIGFycltfaS0tXSA9IGFycltfaV07XG4gICAgfVxuXG4gICAgYXJyW2F0XSA9IHY7XG4gICAgcmV0dXJuIGFycjtcbiAgfVxuXG4gIHZhciBpID0gMCxcbiAgICAgIGcgPSAwO1xuICB2YXIgb3V0ID0gbmV3IEFycmF5KGxlbiArIDEpO1xuXG4gIHdoaWxlIChpIDwgYXQpIHtcbiAgICBvdXRbZysrXSA9IGFycltpKytdO1xuICB9XG5cbiAgb3V0W2F0XSA9IHY7XG5cbiAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICBvdXRbKytnXSA9IGFycltpKytdO1xuICB9XG5cbiAgcmV0dXJuIG91dDtcbn07XG4vKiBOb2RlIFN0cnVjdHVyZXNcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cblxudmFyIExFQUYgPSAxO1xudmFyIENPTExJU0lPTiA9IDI7XG52YXIgSU5ERVggPSAzO1xudmFyIEFSUkFZID0gNDtcbi8qKlxuICAgIEVtcHR5IG5vZGUuXG4qL1xuXG52YXIgZW1wdHkgPSB7XG4gIF9faGFtdF9pc0VtcHR5OiB0cnVlXG59O1xuXG52YXIgaXNFbXB0eU5vZGUgPSBmdW5jdGlvbiBpc0VtcHR5Tm9kZSh4KSB7XG4gIHJldHVybiB4ID09PSBlbXB0eSB8fCB4ICYmIHguX19oYW10X2lzRW1wdHk7XG59O1xuLyoqXG4gICAgTGVhZiBob2xkaW5nIGEgdmFsdWUuXG5cbiAgICBAbWVtYmVyIGVkaXQgRWRpdCBvZiB0aGUgbm9kZS5cbiAgICBAbWVtYmVyIGhhc2ggSGFzaCBvZiBrZXkuXG4gICAgQG1lbWJlciBrZXkgS2V5LlxuICAgIEBtZW1iZXIgdmFsdWUgVmFsdWUgc3RvcmVkLlxuKi9cblxuXG52YXIgTGVhZiA9IGZ1bmN0aW9uIExlYWYoZWRpdCwgaGFzaCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IExFQUYsXG4gICAgZWRpdDogZWRpdCxcbiAgICBoYXNoOiBoYXNoLFxuICAgIGtleToga2V5LFxuICAgIHZhbHVlOiB2YWx1ZSxcbiAgICBfbW9kaWZ5OiBMZWFmX19tb2RpZnlcbiAgfTtcbn07XG4vKipcbiAgICBMZWFmIGhvbGRpbmcgbXVsdGlwbGUgdmFsdWVzIHdpdGggdGhlIHNhbWUgaGFzaCBidXQgZGlmZmVyZW50IGtleXMuXG5cbiAgICBAbWVtYmVyIGVkaXQgRWRpdCBvZiB0aGUgbm9kZS5cbiAgICBAbWVtYmVyIGhhc2ggSGFzaCBvZiBrZXkuXG4gICAgQG1lbWJlciBjaGlsZHJlbiBBcnJheSBvZiBjb2xsaXNpb24gY2hpbGRyZW4gbm9kZS5cbiovXG5cblxudmFyIENvbGxpc2lvbiA9IGZ1bmN0aW9uIENvbGxpc2lvbihlZGl0LCBoYXNoLCBjaGlsZHJlbikge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IENPTExJU0lPTixcbiAgICBlZGl0OiBlZGl0LFxuICAgIGhhc2g6IGhhc2gsXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIF9tb2RpZnk6IENvbGxpc2lvbl9fbW9kaWZ5XG4gIH07XG59O1xuLyoqXG4gICAgSW50ZXJuYWwgbm9kZSB3aXRoIGEgc3BhcnNlIHNldCBvZiBjaGlsZHJlbi5cblxuICAgIFVzZXMgYSBiaXRtYXAgYW5kIGFycmF5IHRvIHBhY2sgY2hpbGRyZW4uXG5cbiAgQG1lbWJlciBlZGl0IEVkaXQgb2YgdGhlIG5vZGUuXG4gICAgQG1lbWJlciBtYXNrIEJpdG1hcCB0aGF0IGVuY29kZSB0aGUgcG9zaXRpb25zIG9mIGNoaWxkcmVuIGluIHRoZSBhcnJheS5cbiAgICBAbWVtYmVyIGNoaWxkcmVuIEFycmF5IG9mIGNoaWxkIG5vZGVzLlxuKi9cblxuXG52YXIgSW5kZXhlZE5vZGUgPSBmdW5jdGlvbiBJbmRleGVkTm9kZShlZGl0LCBtYXNrLCBjaGlsZHJlbikge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IElOREVYLFxuICAgIGVkaXQ6IGVkaXQsXG4gICAgbWFzazogbWFzayxcbiAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgX21vZGlmeTogSW5kZXhlZE5vZGVfX21vZGlmeVxuICB9O1xufTtcbi8qKlxuICAgIEludGVybmFsIG5vZGUgd2l0aCBtYW55IGNoaWxkcmVuLlxuXG4gICAgQG1lbWJlciBlZGl0IEVkaXQgb2YgdGhlIG5vZGUuXG4gICAgQG1lbWJlciBzaXplIE51bWJlciBvZiBjaGlsZHJlbi5cbiAgICBAbWVtYmVyIGNoaWxkcmVuIEFycmF5IG9mIGNoaWxkIG5vZGVzLlxuKi9cblxuXG52YXIgQXJyYXlOb2RlID0gZnVuY3Rpb24gQXJyYXlOb2RlKGVkaXQsIHNpemUsIGNoaWxkcmVuKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogQVJSQVksXG4gICAgZWRpdDogZWRpdCxcbiAgICBzaXplOiBzaXplLFxuICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICBfbW9kaWZ5OiBBcnJheU5vZGVfX21vZGlmeVxuICB9O1xufTtcbi8qKlxuICAgIElzIGBub2RlYCBhIGxlYWYgbm9kZT9cbiovXG5cblxudmFyIGlzTGVhZiA9IGZ1bmN0aW9uIGlzTGVhZihub2RlKSB7XG4gIHJldHVybiBub2RlID09PSBlbXB0eSB8fCBub2RlLnR5cGUgPT09IExFQUYgfHwgbm9kZS50eXBlID09PSBDT0xMSVNJT047XG59O1xuLyogSW50ZXJuYWwgbm9kZSBvcGVyYXRpb25zLlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuLyoqXG4gICAgRXhwYW5kIGFuIGluZGV4ZWQgbm9kZSBpbnRvIGFuIGFycmF5IG5vZGUuXG5cbiAgQHBhcmFtIGVkaXQgQ3VycmVudCBlZGl0LlxuICAgIEBwYXJhbSBmcmFnIEluZGV4IG9mIGFkZGVkIGNoaWxkLlxuICAgIEBwYXJhbSBjaGlsZCBBZGRlZCBjaGlsZC5cbiAgICBAcGFyYW0gbWFzayBJbmRleCBub2RlIG1hc2sgYmVmb3JlIGNoaWxkIGFkZGVkLlxuICAgIEBwYXJhbSBzdWJOb2RlcyBJbmRleCBub2RlIGNoaWxkcmVuIGJlZm9yZSBjaGlsZCBhZGRlZC5cbiovXG5cblxudmFyIGV4cGFuZCA9IGZ1bmN0aW9uIGV4cGFuZChlZGl0LCBmcmFnLCBjaGlsZCwgYml0bWFwLCBzdWJOb2Rlcykge1xuICB2YXIgYXJyID0gW107XG4gIHZhciBiaXQgPSBiaXRtYXA7XG4gIHZhciBjb3VudCA9IDA7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGJpdDsgKytpKSB7XG4gICAgaWYgKGJpdCAmIDEpIGFycltpXSA9IHN1Yk5vZGVzW2NvdW50KytdO1xuICAgIGJpdCA+Pj49IDE7XG4gIH1cblxuICBhcnJbZnJhZ10gPSBjaGlsZDtcbiAgcmV0dXJuIEFycmF5Tm9kZShlZGl0LCBjb3VudCArIDEsIGFycik7XG59O1xuLyoqXG4gICAgQ29sbGFwc2UgYW4gYXJyYXkgbm9kZSBpbnRvIGEgaW5kZXhlZCBub2RlLlxuXG4gIEBwYXJhbSBlZGl0IEN1cnJlbnQgZWRpdC5cbiAgICBAcGFyYW0gY291bnQgTnVtYmVyIG9mIGVsZW1lbnRzIGluIG5ldyBhcnJheS5cbiAgICBAcGFyYW0gcmVtb3ZlZCBJbmRleCBvZiByZW1vdmVkIGVsZW1lbnQuXG4gICAgQHBhcmFtIGVsZW1lbnRzIEFycmF5IG5vZGUgY2hpbGRyZW4gYmVmb3JlIHJlbW92ZS5cbiovXG5cblxudmFyIHBhY2sgPSBmdW5jdGlvbiBwYWNrKGVkaXQsIGNvdW50LCByZW1vdmVkLCBlbGVtZW50cykge1xuICB2YXIgY2hpbGRyZW4gPSBuZXcgQXJyYXkoY291bnQgLSAxKTtcbiAgdmFyIGcgPSAwO1xuICB2YXIgYml0bWFwID0gMDtcblxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gZWxlbWVudHMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAoaSAhPT0gcmVtb3ZlZCkge1xuICAgICAgdmFyIGVsZW0gPSBlbGVtZW50c1tpXTtcblxuICAgICAgaWYgKGVsZW0gJiYgIWlzRW1wdHlOb2RlKGVsZW0pKSB7XG4gICAgICAgIGNoaWxkcmVuW2crK10gPSBlbGVtO1xuICAgICAgICBiaXRtYXAgfD0gMSA8PCBpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBJbmRleGVkTm9kZShlZGl0LCBiaXRtYXAsIGNoaWxkcmVuKTtcbn07XG4vKipcbiAgICBNZXJnZSB0d28gbGVhZiBub2Rlcy5cblxuICAgIEBwYXJhbSBzaGlmdCBDdXJyZW50IHNoaWZ0LlxuICAgIEBwYXJhbSBoMSBOb2RlIDEgaGFzaC5cbiAgICBAcGFyYW0gbjEgTm9kZSAxLlxuICAgIEBwYXJhbSBoMiBOb2RlIDIgaGFzaC5cbiAgICBAcGFyYW0gbjIgTm9kZSAyLlxuKi9cblxuXG52YXIgbWVyZ2VMZWF2ZXMgPSBmdW5jdGlvbiBtZXJnZUxlYXZlcyhlZGl0LCBzaGlmdCwgaDEsIG4xLCBoMiwgbjIpIHtcbiAgaWYgKGgxID09PSBoMikgcmV0dXJuIENvbGxpc2lvbihlZGl0LCBoMSwgW24yLCBuMV0pO1xuICB2YXIgc3ViSDEgPSBoYXNoRnJhZ21lbnQoc2hpZnQsIGgxKTtcbiAgdmFyIHN1YkgyID0gaGFzaEZyYWdtZW50KHNoaWZ0LCBoMik7XG4gIHJldHVybiBJbmRleGVkTm9kZShlZGl0LCB0b0JpdG1hcChzdWJIMSkgfCB0b0JpdG1hcChzdWJIMiksIHN1YkgxID09PSBzdWJIMiA/IFttZXJnZUxlYXZlcyhlZGl0LCBzaGlmdCArIFNJWkUsIGgxLCBuMSwgaDIsIG4yKV0gOiBzdWJIMSA8IHN1YkgyID8gW24xLCBuMl0gOiBbbjIsIG4xXSk7XG59O1xuLyoqXG4gICAgVXBkYXRlIGFuIGVudHJ5IGluIGEgY29sbGlzaW9uIGxpc3QuXG5cbiAgICBAcGFyYW0gbXV0YXRlIFNob3VsZCBtdXRhdGlvbiBiZSB1c2VkP1xuICAgIEBwYXJhbSBlZGl0IEN1cnJlbnQgZWRpdC5cbiAgICBAcGFyYW0ga2V5RXEgS2V5IGNvbXBhcmUgZnVuY3Rpb24uXG4gICAgQHBhcmFtIGhhc2ggSGFzaCBvZiBjb2xsaXNpb24uXG4gICAgQHBhcmFtIGxpc3QgQ29sbGlzaW9uIGxpc3QuXG4gICAgQHBhcmFtIGYgVXBkYXRlIGZ1bmN0aW9uLlxuICAgIEBwYXJhbSBrIEtleSB0byB1cGRhdGUuXG4gICAgQHBhcmFtIHNpemUgU2l6ZSByZWYuXG4qL1xuXG5cbnZhciB1cGRhdGVDb2xsaXNpb25MaXN0ID0gZnVuY3Rpb24gdXBkYXRlQ29sbGlzaW9uTGlzdChtdXRhdGUsIGVkaXQsIGtleUVxLCBoLCBsaXN0LCBmLCBrLCBzaXplKSB7XG4gIHZhciBsZW4gPSBsaXN0Lmxlbmd0aDtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgdmFyIGNoaWxkID0gbGlzdFtpXTtcblxuICAgIGlmIChrZXlFcShrLCBjaGlsZC5rZXkpKSB7XG4gICAgICB2YXIgdmFsdWUgPSBjaGlsZC52YWx1ZTtcblxuICAgICAgdmFyIF9uZXdWYWx1ZSA9IGYodmFsdWUpO1xuXG4gICAgICBpZiAoX25ld1ZhbHVlID09PSB2YWx1ZSkgcmV0dXJuIGxpc3Q7XG5cbiAgICAgIGlmIChfbmV3VmFsdWUgPT09IG5vdGhpbmcpIHtcbiAgICAgICAgLS1zaXplLnZhbHVlO1xuICAgICAgICByZXR1cm4gYXJyYXlTcGxpY2VPdXQobXV0YXRlLCBpLCBsaXN0KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFycmF5VXBkYXRlKG11dGF0ZSwgaSwgTGVhZihlZGl0LCBoLCBrLCBfbmV3VmFsdWUpLCBsaXN0KTtcbiAgICB9XG4gIH1cblxuICB2YXIgbmV3VmFsdWUgPSBmKCk7XG4gIGlmIChuZXdWYWx1ZSA9PT0gbm90aGluZykgcmV0dXJuIGxpc3Q7XG4gICsrc2l6ZS52YWx1ZTtcbiAgcmV0dXJuIGFycmF5VXBkYXRlKG11dGF0ZSwgbGVuLCBMZWFmKGVkaXQsIGgsIGssIG5ld1ZhbHVlKSwgbGlzdCk7XG59O1xuXG52YXIgY2FuRWRpdE5vZGUgPSBmdW5jdGlvbiBjYW5FZGl0Tm9kZShlZGl0LCBub2RlKSB7XG4gIHJldHVybiBlZGl0ID09PSBub2RlLmVkaXQ7XG59O1xuLyogRWRpdGluZ1xuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuXG52YXIgTGVhZl9fbW9kaWZ5ID0gZnVuY3Rpb24gTGVhZl9fbW9kaWZ5KGVkaXQsIGtleUVxLCBzaGlmdCwgZiwgaCwgaywgc2l6ZSkge1xuICBpZiAoa2V5RXEoaywgdGhpcy5rZXkpKSB7XG4gICAgdmFyIF92ID0gZih0aGlzLnZhbHVlKTtcblxuICAgIGlmIChfdiA9PT0gdGhpcy52YWx1ZSkgcmV0dXJuIHRoaXM7ZWxzZSBpZiAoX3YgPT09IG5vdGhpbmcpIHtcbiAgICAgIC0tc2l6ZS52YWx1ZTtcbiAgICAgIHJldHVybiBlbXB0eTtcbiAgICB9XG5cbiAgICBpZiAoY2FuRWRpdE5vZGUoZWRpdCwgdGhpcykpIHtcbiAgICAgIHRoaXMudmFsdWUgPSBfdjtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHJldHVybiBMZWFmKGVkaXQsIGgsIGssIF92KTtcbiAgfVxuXG4gIHZhciB2ID0gZigpO1xuICBpZiAodiA9PT0gbm90aGluZykgcmV0dXJuIHRoaXM7XG4gICsrc2l6ZS52YWx1ZTtcbiAgcmV0dXJuIG1lcmdlTGVhdmVzKGVkaXQsIHNoaWZ0LCB0aGlzLmhhc2gsIHRoaXMsIGgsIExlYWYoZWRpdCwgaCwgaywgdikpO1xufTtcblxudmFyIENvbGxpc2lvbl9fbW9kaWZ5ID0gZnVuY3Rpb24gQ29sbGlzaW9uX19tb2RpZnkoZWRpdCwga2V5RXEsIHNoaWZ0LCBmLCBoLCBrLCBzaXplKSB7XG4gIGlmIChoID09PSB0aGlzLmhhc2gpIHtcbiAgICB2YXIgY2FuRWRpdCA9IGNhbkVkaXROb2RlKGVkaXQsIHRoaXMpO1xuICAgIHZhciBsaXN0ID0gdXBkYXRlQ29sbGlzaW9uTGlzdChjYW5FZGl0LCBlZGl0LCBrZXlFcSwgdGhpcy5oYXNoLCB0aGlzLmNoaWxkcmVuLCBmLCBrLCBzaXplKTtcbiAgICBpZiAobGlzdCA9PT0gdGhpcy5jaGlsZHJlbikgcmV0dXJuIHRoaXM7XG4gICAgcmV0dXJuIGxpc3QubGVuZ3RoID4gMSA/IENvbGxpc2lvbihlZGl0LCB0aGlzLmhhc2gsIGxpc3QpIDogbGlzdFswXTsgLy8gY29sbGFwc2Ugc2luZ2xlIGVsZW1lbnQgY29sbGlzaW9uIGxpc3RcbiAgfVxuXG4gIHZhciB2ID0gZigpO1xuICBpZiAodiA9PT0gbm90aGluZykgcmV0dXJuIHRoaXM7XG4gICsrc2l6ZS52YWx1ZTtcbiAgcmV0dXJuIG1lcmdlTGVhdmVzKGVkaXQsIHNoaWZ0LCB0aGlzLmhhc2gsIHRoaXMsIGgsIExlYWYoZWRpdCwgaCwgaywgdikpO1xufTtcblxudmFyIEluZGV4ZWROb2RlX19tb2RpZnkgPSBmdW5jdGlvbiBJbmRleGVkTm9kZV9fbW9kaWZ5KGVkaXQsIGtleUVxLCBzaGlmdCwgZiwgaCwgaywgc2l6ZSkge1xuICB2YXIgbWFzayA9IHRoaXMubWFzaztcbiAgdmFyIGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjtcbiAgdmFyIGZyYWcgPSBoYXNoRnJhZ21lbnQoc2hpZnQsIGgpO1xuICB2YXIgYml0ID0gdG9CaXRtYXAoZnJhZyk7XG4gIHZhciBpbmR4ID0gZnJvbUJpdG1hcChtYXNrLCBiaXQpO1xuICB2YXIgZXhpc3RzID0gbWFzayAmIGJpdDtcbiAgdmFyIGN1cnJlbnQgPSBleGlzdHMgPyBjaGlsZHJlbltpbmR4XSA6IGVtcHR5O1xuXG4gIHZhciBjaGlsZCA9IGN1cnJlbnQuX21vZGlmeShlZGl0LCBrZXlFcSwgc2hpZnQgKyBTSVpFLCBmLCBoLCBrLCBzaXplKTtcblxuICBpZiAoY3VycmVudCA9PT0gY2hpbGQpIHJldHVybiB0aGlzO1xuICB2YXIgY2FuRWRpdCA9IGNhbkVkaXROb2RlKGVkaXQsIHRoaXMpO1xuICB2YXIgYml0bWFwID0gbWFzaztcbiAgdmFyIG5ld0NoaWxkcmVuID0gdm9pZCAwO1xuXG4gIGlmIChleGlzdHMgJiYgaXNFbXB0eU5vZGUoY2hpbGQpKSB7XG4gICAgLy8gcmVtb3ZlXG4gICAgYml0bWFwICY9IH5iaXQ7XG4gICAgaWYgKCFiaXRtYXApIHJldHVybiBlbXB0eTtcbiAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoIDw9IDIgJiYgaXNMZWFmKGNoaWxkcmVuW2luZHggXiAxXSkpIHJldHVybiBjaGlsZHJlbltpbmR4IF4gMV07IC8vIGNvbGxhcHNlXG5cbiAgICBuZXdDaGlsZHJlbiA9IGFycmF5U3BsaWNlT3V0KGNhbkVkaXQsIGluZHgsIGNoaWxkcmVuKTtcbiAgfSBlbHNlIGlmICghZXhpc3RzICYmICFpc0VtcHR5Tm9kZShjaGlsZCkpIHtcbiAgICAvLyBhZGRcbiAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoID49IE1BWF9JTkRFWF9OT0RFKSByZXR1cm4gZXhwYW5kKGVkaXQsIGZyYWcsIGNoaWxkLCBtYXNrLCBjaGlsZHJlbik7XG4gICAgYml0bWFwIHw9IGJpdDtcbiAgICBuZXdDaGlsZHJlbiA9IGFycmF5U3BsaWNlSW4oY2FuRWRpdCwgaW5keCwgY2hpbGQsIGNoaWxkcmVuKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBtb2RpZnlcbiAgICBuZXdDaGlsZHJlbiA9IGFycmF5VXBkYXRlKGNhbkVkaXQsIGluZHgsIGNoaWxkLCBjaGlsZHJlbik7XG4gIH1cblxuICBpZiAoY2FuRWRpdCkge1xuICAgIHRoaXMubWFzayA9IGJpdG1hcDtcbiAgICB0aGlzLmNoaWxkcmVuID0gbmV3Q2hpbGRyZW47XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICByZXR1cm4gSW5kZXhlZE5vZGUoZWRpdCwgYml0bWFwLCBuZXdDaGlsZHJlbik7XG59O1xuXG52YXIgQXJyYXlOb2RlX19tb2RpZnkgPSBmdW5jdGlvbiBBcnJheU5vZGVfX21vZGlmeShlZGl0LCBrZXlFcSwgc2hpZnQsIGYsIGgsIGssIHNpemUpIHtcbiAgdmFyIGNvdW50ID0gdGhpcy5zaXplO1xuICB2YXIgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xuICB2YXIgZnJhZyA9IGhhc2hGcmFnbWVudChzaGlmdCwgaCk7XG4gIHZhciBjaGlsZCA9IGNoaWxkcmVuW2ZyYWddO1xuXG4gIHZhciBuZXdDaGlsZCA9IChjaGlsZCB8fCBlbXB0eSkuX21vZGlmeShlZGl0LCBrZXlFcSwgc2hpZnQgKyBTSVpFLCBmLCBoLCBrLCBzaXplKTtcblxuICBpZiAoY2hpbGQgPT09IG5ld0NoaWxkKSByZXR1cm4gdGhpcztcbiAgdmFyIGNhbkVkaXQgPSBjYW5FZGl0Tm9kZShlZGl0LCB0aGlzKTtcbiAgdmFyIG5ld0NoaWxkcmVuID0gdm9pZCAwO1xuXG4gIGlmIChpc0VtcHR5Tm9kZShjaGlsZCkgJiYgIWlzRW1wdHlOb2RlKG5ld0NoaWxkKSkge1xuICAgIC8vIGFkZFxuICAgICsrY291bnQ7XG4gICAgbmV3Q2hpbGRyZW4gPSBhcnJheVVwZGF0ZShjYW5FZGl0LCBmcmFnLCBuZXdDaGlsZCwgY2hpbGRyZW4pO1xuICB9IGVsc2UgaWYgKCFpc0VtcHR5Tm9kZShjaGlsZCkgJiYgaXNFbXB0eU5vZGUobmV3Q2hpbGQpKSB7XG4gICAgLy8gcmVtb3ZlXG4gICAgLS1jb3VudDtcbiAgICBpZiAoY291bnQgPD0gTUlOX0FSUkFZX05PREUpIHJldHVybiBwYWNrKGVkaXQsIGNvdW50LCBmcmFnLCBjaGlsZHJlbik7XG4gICAgbmV3Q2hpbGRyZW4gPSBhcnJheVVwZGF0ZShjYW5FZGl0LCBmcmFnLCBlbXB0eSwgY2hpbGRyZW4pO1xuICB9IGVsc2Uge1xuICAgIC8vIG1vZGlmeVxuICAgIG5ld0NoaWxkcmVuID0gYXJyYXlVcGRhdGUoY2FuRWRpdCwgZnJhZywgbmV3Q2hpbGQsIGNoaWxkcmVuKTtcbiAgfVxuXG4gIGlmIChjYW5FZGl0KSB7XG4gICAgdGhpcy5zaXplID0gY291bnQ7XG4gICAgdGhpcy5jaGlsZHJlbiA9IG5ld0NoaWxkcmVuO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcmV0dXJuIEFycmF5Tm9kZShlZGl0LCBjb3VudCwgbmV3Q2hpbGRyZW4pO1xufTtcblxuZW1wdHkuX21vZGlmeSA9IGZ1bmN0aW9uIChlZGl0LCBrZXlFcSwgc2hpZnQsIGYsIGgsIGssIHNpemUpIHtcbiAgdmFyIHYgPSBmKCk7XG4gIGlmICh2ID09PSBub3RoaW5nKSByZXR1cm4gZW1wdHk7XG4gICsrc2l6ZS52YWx1ZTtcbiAgcmV0dXJuIExlYWYoZWRpdCwgaCwgaywgdik7XG59O1xuLypcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cblxuZnVuY3Rpb24gTWFwKGVkaXRhYmxlLCBlZGl0LCBjb25maWcsIHJvb3QsIHNpemUpIHtcbiAgdGhpcy5fZWRpdGFibGUgPSBlZGl0YWJsZTtcbiAgdGhpcy5fZWRpdCA9IGVkaXQ7XG4gIHRoaXMuX2NvbmZpZyA9IGNvbmZpZztcbiAgdGhpcy5fcm9vdCA9IHJvb3Q7XG4gIHRoaXMuX3NpemUgPSBzaXplO1xufVxuXG5NYXAucHJvdG90eXBlLnNldFRyZWUgPSBmdW5jdGlvbiAobmV3Um9vdCwgbmV3U2l6ZSkge1xuICBpZiAodGhpcy5fZWRpdGFibGUpIHtcbiAgICB0aGlzLl9yb290ID0gbmV3Um9vdDtcbiAgICB0aGlzLl9zaXplID0gbmV3U2l6ZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHJldHVybiBuZXdSb290ID09PSB0aGlzLl9yb290ID8gdGhpcyA6IG5ldyBNYXAodGhpcy5fZWRpdGFibGUsIHRoaXMuX2VkaXQsIHRoaXMuX2NvbmZpZywgbmV3Um9vdCwgbmV3U2l6ZSk7XG59O1xuLyogUXVlcmllc1xuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuLyoqXG4gICAgTG9va3VwIHRoZSB2YWx1ZSBmb3IgYGtleWAgaW4gYG1hcGAgdXNpbmcgYSBjdXN0b20gYGhhc2hgLlxuXG4gICAgUmV0dXJucyB0aGUgdmFsdWUgb3IgYGFsdGAgaWYgbm9uZS5cbiovXG5cblxudmFyIHRyeUdldEhhc2ggPSBoYW10LnRyeUdldEhhc2ggPSBmdW5jdGlvbiAoYWx0LCBoYXNoLCBrZXksIG1hcCkge1xuICB2YXIgbm9kZSA9IG1hcC5fcm9vdDtcbiAgdmFyIHNoaWZ0ID0gMDtcbiAgdmFyIGtleUVxID0gbWFwLl9jb25maWcua2V5RXE7XG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBzd2l0Y2ggKG5vZGUudHlwZSkge1xuICAgICAgY2FzZSBMRUFGOlxuICAgICAgICB7XG4gICAgICAgICAgcmV0dXJuIGtleUVxKGtleSwgbm9kZS5rZXkpID8gbm9kZS52YWx1ZSA6IGFsdDtcbiAgICAgICAgfVxuXG4gICAgICBjYXNlIENPTExJU0lPTjpcbiAgICAgICAge1xuICAgICAgICAgIGlmIChoYXNoID09PSBub2RlLmhhc2gpIHtcbiAgICAgICAgICAgIHZhciBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW47XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgICAgICAgICAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICAgICAgICAgICAgaWYgKGtleUVxKGtleSwgY2hpbGQua2V5KSkgcmV0dXJuIGNoaWxkLnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBhbHQ7XG4gICAgICAgIH1cblxuICAgICAgY2FzZSBJTkRFWDpcbiAgICAgICAge1xuICAgICAgICAgIHZhciBmcmFnID0gaGFzaEZyYWdtZW50KHNoaWZ0LCBoYXNoKTtcbiAgICAgICAgICB2YXIgYml0ID0gdG9CaXRtYXAoZnJhZyk7XG5cbiAgICAgICAgICBpZiAobm9kZS5tYXNrICYgYml0KSB7XG4gICAgICAgICAgICBub2RlID0gbm9kZS5jaGlsZHJlbltmcm9tQml0bWFwKG5vZGUubWFzaywgYml0KV07XG4gICAgICAgICAgICBzaGlmdCArPSBTSVpFO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIGFsdDtcbiAgICAgICAgfVxuXG4gICAgICBjYXNlIEFSUkFZOlxuICAgICAgICB7XG4gICAgICAgICAgbm9kZSA9IG5vZGUuY2hpbGRyZW5baGFzaEZyYWdtZW50KHNoaWZ0LCBoYXNoKV07XG5cbiAgICAgICAgICBpZiAobm9kZSkge1xuICAgICAgICAgICAgc2hpZnQgKz0gU0laRTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBhbHQ7XG4gICAgICAgIH1cblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGFsdDtcbiAgICB9XG4gIH1cbn07XG5cbk1hcC5wcm90b3R5cGUudHJ5R2V0SGFzaCA9IGZ1bmN0aW9uIChhbHQsIGhhc2gsIGtleSkge1xuICByZXR1cm4gdHJ5R2V0SGFzaChhbHQsIGhhc2gsIGtleSwgdGhpcyk7XG59O1xuLyoqXG4gICAgTG9va3VwIHRoZSB2YWx1ZSBmb3IgYGtleWAgaW4gYG1hcGAgdXNpbmcgaW50ZXJuYWwgaGFzaCBmdW5jdGlvbi5cblxuICAgIEBzZWUgYHRyeUdldEhhc2hgXG4qL1xuXG5cbnZhciB0cnlHZXQgPSBoYW10LnRyeUdldCA9IGZ1bmN0aW9uIChhbHQsIGtleSwgbWFwKSB7XG4gIHJldHVybiB0cnlHZXRIYXNoKGFsdCwgbWFwLl9jb25maWcuaGFzaChrZXkpLCBrZXksIG1hcCk7XG59O1xuXG5NYXAucHJvdG90eXBlLnRyeUdldCA9IGZ1bmN0aW9uIChhbHQsIGtleSkge1xuICByZXR1cm4gdHJ5R2V0KGFsdCwga2V5LCB0aGlzKTtcbn07XG4vKipcbiAgICBMb29rdXAgdGhlIHZhbHVlIGZvciBga2V5YCBpbiBgbWFwYCB1c2luZyBhIGN1c3RvbSBgaGFzaGAuXG5cbiAgICBSZXR1cm5zIHRoZSB2YWx1ZSBvciBgdW5kZWZpbmVkYCBpZiBub25lLlxuKi9cblxuXG52YXIgZ2V0SGFzaCA9IGhhbXQuZ2V0SGFzaCA9IGZ1bmN0aW9uIChoYXNoLCBrZXksIG1hcCkge1xuICByZXR1cm4gdHJ5R2V0SGFzaCh1bmRlZmluZWQsIGhhc2gsIGtleSwgbWFwKTtcbn07XG5cbk1hcC5wcm90b3R5cGUuZ2V0SGFzaCA9IGZ1bmN0aW9uIChoYXNoLCBrZXkpIHtcbiAgcmV0dXJuIGdldEhhc2goaGFzaCwga2V5LCB0aGlzKTtcbn07XG4vKipcbiAgICBMb29rdXAgdGhlIHZhbHVlIGZvciBga2V5YCBpbiBgbWFwYCB1c2luZyBpbnRlcm5hbCBoYXNoIGZ1bmN0aW9uLlxuXG4gICAgQHNlZSBgZ2V0YFxuKi9cblxuXG52YXIgZ2V0ID0gaGFtdC5nZXQgPSBmdW5jdGlvbiAoa2V5LCBtYXApIHtcbiAgcmV0dXJuIHRyeUdldEhhc2godW5kZWZpbmVkLCBtYXAuX2NvbmZpZy5oYXNoKGtleSksIGtleSwgbWFwKTtcbn07XG5cbk1hcC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGtleSwgYWx0KSB7XG4gIHJldHVybiB0cnlHZXQoYWx0LCBrZXksIHRoaXMpO1xufTtcbi8qKlxuICAgIERvZXMgYW4gZW50cnkgZXhpc3QgZm9yIGBrZXlgIGluIGBtYXBgPyBVc2VzIGN1c3RvbSBgaGFzaGAuXG4qL1xuXG5cbnZhciBoYXNIYXNoID0gaGFtdC5oYXMgPSBmdW5jdGlvbiAoaGFzaCwga2V5LCBtYXApIHtcbiAgcmV0dXJuIHRyeUdldEhhc2gobm90aGluZywgaGFzaCwga2V5LCBtYXApICE9PSBub3RoaW5nO1xufTtcblxuTWFwLnByb3RvdHlwZS5oYXNIYXNoID0gZnVuY3Rpb24gKGhhc2gsIGtleSkge1xuICByZXR1cm4gaGFzSGFzaChoYXNoLCBrZXksIHRoaXMpO1xufTtcbi8qKlxuICAgIERvZXMgYW4gZW50cnkgZXhpc3QgZm9yIGBrZXlgIGluIGBtYXBgPyBVc2VzIGludGVybmFsIGhhc2ggZnVuY3Rpb24uXG4qL1xuXG5cbnZhciBoYXMgPSBoYW10LmhhcyA9IGZ1bmN0aW9uIChrZXksIG1hcCkge1xuICByZXR1cm4gaGFzSGFzaChtYXAuX2NvbmZpZy5oYXNoKGtleSksIGtleSwgbWFwKTtcbn07XG5cbk1hcC5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gaGFzKGtleSwgdGhpcyk7XG59O1xuXG52YXIgZGVmS2V5Q29tcGFyZSA9IGZ1bmN0aW9uIGRlZktleUNvbXBhcmUoeCwgeSkge1xuICByZXR1cm4geCA9PT0geTtcbn07XG4vKipcbiAgICBDcmVhdGUgYW4gZW1wdHkgbWFwLlxuXG4gICAgQHBhcmFtIGNvbmZpZyBDb25maWd1cmF0aW9uLlxuKi9cblxuXG5oYW10Lm1ha2UgPSBmdW5jdGlvbiAoY29uZmlnKSB7XG4gIHJldHVybiBuZXcgTWFwKDAsIDAsIHtcbiAgICBrZXlFcTogY29uZmlnICYmIGNvbmZpZy5rZXlFcSB8fCBkZWZLZXlDb21wYXJlLFxuICAgIGhhc2g6IGNvbmZpZyAmJiBjb25maWcuaGFzaCB8fCBoYXNoXG4gIH0sIGVtcHR5LCAwKTtcbn07XG4vKipcbiAgICBFbXB0eSBtYXAuXG4qL1xuXG5cbmhhbXQuZW1wdHkgPSBoYW10Lm1ha2UoKTtcbi8qKlxuICAgIERvZXMgYG1hcGAgY29udGFpbiBhbnkgZWxlbWVudHM/XG4qL1xuXG52YXIgaXNFbXB0eSA9IGhhbXQuaXNFbXB0eSA9IGZ1bmN0aW9uIChtYXApIHtcbiAgcmV0dXJuIG1hcCAmJiAhIWlzRW1wdHlOb2RlKG1hcC5fcm9vdCk7XG59O1xuXG5NYXAucHJvdG90eXBlLmlzRW1wdHkgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBpc0VtcHR5KHRoaXMpO1xufTtcbi8qIFVwZGF0ZXNcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbi8qKlxuICAgIEFsdGVyIHRoZSB2YWx1ZSBzdG9yZWQgZm9yIGBrZXlgIGluIGBtYXBgIHVzaW5nIGZ1bmN0aW9uIGBmYCB1c2luZ1xuICAgIGN1c3RvbSBoYXNoLlxuXG4gICAgYGZgIGlzIGludm9rZWQgd2l0aCB0aGUgY3VycmVudCB2YWx1ZSBmb3IgYGtgIGlmIGl0IGV4aXN0cyxcbiAgICBvciBubyBhcmd1bWVudHMgaWYgbm8gc3VjaCB2YWx1ZSBleGlzdHMuIGBtb2RpZnlgIHdpbGwgYWx3YXlzIGVpdGhlclxuICAgIHVwZGF0ZSBvciBpbnNlcnQgYSB2YWx1ZSBpbnRvIHRoZSBtYXAuXG5cbiAgICBSZXR1cm5zIGEgbWFwIHdpdGggdGhlIG1vZGlmaWVkIHZhbHVlLiBEb2VzIG5vdCBhbHRlciBgbWFwYC5cbiovXG5cblxudmFyIG1vZGlmeUhhc2ggPSBoYW10Lm1vZGlmeUhhc2ggPSBmdW5jdGlvbiAoZiwgaGFzaCwga2V5LCBtYXApIHtcbiAgdmFyIHNpemUgPSB7XG4gICAgdmFsdWU6IG1hcC5fc2l6ZVxuICB9O1xuXG4gIHZhciBuZXdSb290ID0gbWFwLl9yb290Ll9tb2RpZnkobWFwLl9lZGl0YWJsZSA/IG1hcC5fZWRpdCA6IE5hTiwgbWFwLl9jb25maWcua2V5RXEsIDAsIGYsIGhhc2gsIGtleSwgc2l6ZSk7XG5cbiAgcmV0dXJuIG1hcC5zZXRUcmVlKG5ld1Jvb3QsIHNpemUudmFsdWUpO1xufTtcblxuTWFwLnByb3RvdHlwZS5tb2RpZnlIYXNoID0gZnVuY3Rpb24gKGhhc2gsIGtleSwgZikge1xuICByZXR1cm4gbW9kaWZ5SGFzaChmLCBoYXNoLCBrZXksIHRoaXMpO1xufTtcbi8qKlxuICAgIEFsdGVyIHRoZSB2YWx1ZSBzdG9yZWQgZm9yIGBrZXlgIGluIGBtYXBgIHVzaW5nIGZ1bmN0aW9uIGBmYCB1c2luZ1xuICAgIGludGVybmFsIGhhc2ggZnVuY3Rpb24uXG5cbiAgICBAc2VlIGBtb2RpZnlIYXNoYFxuKi9cblxuXG52YXIgbW9kaWZ5ID0gaGFtdC5tb2RpZnkgPSBmdW5jdGlvbiAoZiwga2V5LCBtYXApIHtcbiAgcmV0dXJuIG1vZGlmeUhhc2goZiwgbWFwLl9jb25maWcuaGFzaChrZXkpLCBrZXksIG1hcCk7XG59O1xuXG5NYXAucHJvdG90eXBlLm1vZGlmeSA9IGZ1bmN0aW9uIChrZXksIGYpIHtcbiAgcmV0dXJuIG1vZGlmeShmLCBrZXksIHRoaXMpO1xufTtcbi8qKlxuICAgIFN0b3JlIGB2YWx1ZWAgZm9yIGBrZXlgIGluIGBtYXBgIHVzaW5nIGN1c3RvbSBgaGFzaGAuXG5cbiAgICBSZXR1cm5zIGEgbWFwIHdpdGggdGhlIG1vZGlmaWVkIHZhbHVlLiBEb2VzIG5vdCBhbHRlciBgbWFwYC5cbiovXG5cblxudmFyIHNldEhhc2ggPSBoYW10LnNldEhhc2ggPSBmdW5jdGlvbiAoaGFzaCwga2V5LCB2YWx1ZSwgbWFwKSB7XG4gIHJldHVybiBtb2RpZnlIYXNoKGNvbnN0YW50KHZhbHVlKSwgaGFzaCwga2V5LCBtYXApO1xufTtcblxuTWFwLnByb3RvdHlwZS5zZXRIYXNoID0gZnVuY3Rpb24gKGhhc2gsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHNldEhhc2goaGFzaCwga2V5LCB2YWx1ZSwgdGhpcyk7XG59O1xuLyoqXG4gICAgU3RvcmUgYHZhbHVlYCBmb3IgYGtleWAgaW4gYG1hcGAgdXNpbmcgaW50ZXJuYWwgaGFzaCBmdW5jdGlvbi5cblxuICAgIEBzZWUgYHNldEhhc2hgXG4qL1xuXG5cbnZhciBzZXQgPSBoYW10LnNldCA9IGZ1bmN0aW9uIChrZXksIHZhbHVlLCBtYXApIHtcbiAgcmV0dXJuIHNldEhhc2gobWFwLl9jb25maWcuaGFzaChrZXkpLCBrZXksIHZhbHVlLCBtYXApO1xufTtcblxuTWFwLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gc2V0KGtleSwgdmFsdWUsIHRoaXMpO1xufTtcbi8qKlxuICAgIFJlbW92ZSB0aGUgZW50cnkgZm9yIGBrZXlgIGluIGBtYXBgLlxuXG4gICAgUmV0dXJucyBhIG1hcCB3aXRoIHRoZSB2YWx1ZSByZW1vdmVkLiBEb2VzIG5vdCBhbHRlciBgbWFwYC5cbiovXG5cblxudmFyIGRlbCA9IGNvbnN0YW50KG5vdGhpbmcpO1xuXG52YXIgcmVtb3ZlSGFzaCA9IGhhbXQucmVtb3ZlSGFzaCA9IGZ1bmN0aW9uIChoYXNoLCBrZXksIG1hcCkge1xuICByZXR1cm4gbW9kaWZ5SGFzaChkZWwsIGhhc2gsIGtleSwgbWFwKTtcbn07XG5cbk1hcC5wcm90b3R5cGUucmVtb3ZlSGFzaCA9IE1hcC5wcm90b3R5cGUuZGVsZXRlSGFzaCA9IGZ1bmN0aW9uIChoYXNoLCBrZXkpIHtcbiAgcmV0dXJuIHJlbW92ZUhhc2goaGFzaCwga2V5LCB0aGlzKTtcbn07XG4vKipcbiAgICBSZW1vdmUgdGhlIGVudHJ5IGZvciBga2V5YCBpbiBgbWFwYCB1c2luZyBpbnRlcm5hbCBoYXNoIGZ1bmN0aW9uLlxuXG4gICAgQHNlZSBgcmVtb3ZlSGFzaGBcbiovXG5cblxudmFyIHJlbW92ZSA9IGhhbXQucmVtb3ZlID0gZnVuY3Rpb24gKGtleSwgbWFwKSB7XG4gIHJldHVybiByZW1vdmVIYXNoKG1hcC5fY29uZmlnLmhhc2goa2V5KSwga2V5LCBtYXApO1xufTtcblxuTWFwLnByb3RvdHlwZS5yZW1vdmUgPSBNYXAucHJvdG90eXBlLmRlbGV0ZSA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIHJlbW92ZShrZXksIHRoaXMpO1xufTtcbi8qIE11dGF0aW9uXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG4vKipcbiAgICBNYXJrIGBtYXBgIGFzIG11dGFibGUuXG4gKi9cblxuXG52YXIgYmVnaW5NdXRhdGlvbiA9IGhhbXQuYmVnaW5NdXRhdGlvbiA9IGZ1bmN0aW9uIChtYXApIHtcbiAgcmV0dXJuIG5ldyBNYXAobWFwLl9lZGl0YWJsZSArIDEsIG1hcC5fZWRpdCArIDEsIG1hcC5fY29uZmlnLCBtYXAuX3Jvb3QsIG1hcC5fc2l6ZSk7XG59O1xuXG5NYXAucHJvdG90eXBlLmJlZ2luTXV0YXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBiZWdpbk11dGF0aW9uKHRoaXMpO1xufTtcbi8qKlxuICAgIE1hcmsgYG1hcGAgYXMgaW1tdXRhYmxlLlxuICovXG5cblxudmFyIGVuZE11dGF0aW9uID0gaGFtdC5lbmRNdXRhdGlvbiA9IGZ1bmN0aW9uIChtYXApIHtcbiAgbWFwLl9lZGl0YWJsZSA9IG1hcC5fZWRpdGFibGUgJiYgbWFwLl9lZGl0YWJsZSAtIDE7XG4gIHJldHVybiBtYXA7XG59O1xuXG5NYXAucHJvdG90eXBlLmVuZE11dGF0aW9uID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZW5kTXV0YXRpb24odGhpcyk7XG59O1xuLyoqXG4gICAgTXV0YXRlIGBtYXBgIHdpdGhpbiB0aGUgY29udGV4dCBvZiBgZmAuXG4gICAgQHBhcmFtIGZcbiAgICBAcGFyYW0gbWFwIEhBTVRcbiovXG5cblxudmFyIG11dGF0ZSA9IGhhbXQubXV0YXRlID0gZnVuY3Rpb24gKGYsIG1hcCkge1xuICB2YXIgdHJhbnNpZW50ID0gYmVnaW5NdXRhdGlvbihtYXApO1xuICBmKHRyYW5zaWVudCk7XG4gIHJldHVybiBlbmRNdXRhdGlvbih0cmFuc2llbnQpO1xufTtcblxuTWFwLnByb3RvdHlwZS5tdXRhdGUgPSBmdW5jdGlvbiAoZikge1xuICByZXR1cm4gbXV0YXRlKGYsIHRoaXMpO1xufTtcbi8qIFRyYXZlcnNhbFxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuLyoqXG4gICAgQXBwbHkgYSBjb250aW51YXRpb24uXG4qL1xuXG5cbnZhciBhcHBrID0gZnVuY3Rpb24gYXBwayhrKSB7XG4gIHJldHVybiBrICYmIGxhenlWaXNpdENoaWxkcmVuKGtbMF0sIGtbMV0sIGtbMl0sIGtbM10sIGtbNF0pO1xufTtcbi8qKlxuICAgIFJlY3Vyc2l2ZWx5IHZpc2l0IGFsbCB2YWx1ZXMgc3RvcmVkIGluIGFuIGFycmF5IG9mIG5vZGVzIGxhemlseS5cbiovXG5cblxudmFyIGxhenlWaXNpdENoaWxkcmVuID0gZnVuY3Rpb24gbGF6eVZpc2l0Q2hpbGRyZW4obGVuLCBjaGlsZHJlbiwgaSwgZiwgaykge1xuICB3aGlsZSAoaSA8IGxlbikge1xuICAgIHZhciBjaGlsZCA9IGNoaWxkcmVuW2krK107XG4gICAgaWYgKGNoaWxkICYmICFpc0VtcHR5Tm9kZShjaGlsZCkpIHJldHVybiBsYXp5VmlzaXQoY2hpbGQsIGYsIFtsZW4sIGNoaWxkcmVuLCBpLCBmLCBrXSk7XG4gIH1cblxuICByZXR1cm4gYXBwayhrKTtcbn07XG4vKipcbiAgICBSZWN1cnNpdmVseSB2aXNpdCBhbGwgdmFsdWVzIHN0b3JlZCBpbiBgbm9kZWAgbGF6aWx5LlxuKi9cblxuXG52YXIgbGF6eVZpc2l0ID0gZnVuY3Rpb24gbGF6eVZpc2l0KG5vZGUsIGYsIGspIHtcbiAgc3dpdGNoIChub2RlLnR5cGUpIHtcbiAgICBjYXNlIExFQUY6XG4gICAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZTogZihub2RlKSxcbiAgICAgICAgcmVzdDoga1xuICAgICAgfTtcblxuICAgIGNhc2UgQ09MTElTSU9OOlxuICAgIGNhc2UgQVJSQVk6XG4gICAgY2FzZSBJTkRFWDpcbiAgICAgIHZhciBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW47XG4gICAgICByZXR1cm4gbGF6eVZpc2l0Q2hpbGRyZW4oY2hpbGRyZW4ubGVuZ3RoLCBjaGlsZHJlbiwgMCwgZiwgayk7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGFwcGsoayk7XG4gIH1cbn07XG5cbnZhciBET05FID0ge1xuICBkb25lOiB0cnVlXG59O1xuLyoqXG4gICAgSmF2YXNjcmlwdCBpdGVyYXRvciBvdmVyIGEgbWFwLlxuKi9cblxuZnVuY3Rpb24gTWFwSXRlcmF0b3Iodikge1xuICB0aGlzLnYgPSB2O1xufVxuXG5NYXBJdGVyYXRvci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCF0aGlzLnYpIHJldHVybiBET05FO1xuICB2YXIgdjAgPSB0aGlzLnY7XG4gIHRoaXMudiA9IGFwcGsodjAucmVzdCk7XG4gIHJldHVybiB2MDtcbn07XG5cbk1hcEl0ZXJhdG9yLnByb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcztcbn07XG4vKipcbiAgICBMYXppbHkgdmlzaXQgZWFjaCB2YWx1ZSBpbiBtYXAgd2l0aCBmdW5jdGlvbiBgZmAuXG4qL1xuXG5cbnZhciB2aXNpdCA9IGZ1bmN0aW9uIHZpc2l0KG1hcCwgZikge1xuICByZXR1cm4gbmV3IE1hcEl0ZXJhdG9yKGxhenlWaXNpdChtYXAuX3Jvb3QsIGYpKTtcbn07XG4vKipcbiAgICBHZXQgYSBKYXZhc2NzcmlwdCBpdGVyYXRvciBvZiBgbWFwYC5cblxuICAgIEl0ZXJhdGVzIG92ZXIgYFtrZXksIHZhbHVlXWAgYXJyYXlzLlxuKi9cblxuXG52YXIgYnVpbGRQYWlycyA9IGZ1bmN0aW9uIGJ1aWxkUGFpcnMoeCkge1xuICByZXR1cm4gW3gua2V5LCB4LnZhbHVlXTtcbn07XG5cbnZhciBlbnRyaWVzID0gaGFtdC5lbnRyaWVzID0gZnVuY3Rpb24gKG1hcCkge1xuICByZXR1cm4gdmlzaXQobWFwLCBidWlsZFBhaXJzKTtcbn07XG5cbk1hcC5wcm90b3R5cGUuZW50cmllcyA9IE1hcC5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGVudHJpZXModGhpcyk7XG59O1xuLyoqXG4gICAgR2V0IGFycmF5IG9mIGFsbCBrZXlzIGluIGBtYXBgLlxuXG4gICAgT3JkZXIgaXMgbm90IGd1YXJhbnRlZWQuXG4qL1xuXG5cbnZhciBidWlsZEtleXMgPSBmdW5jdGlvbiBidWlsZEtleXMoeCkge1xuICByZXR1cm4geC5rZXk7XG59O1xuXG52YXIga2V5cyA9IGhhbXQua2V5cyA9IGZ1bmN0aW9uIChtYXApIHtcbiAgcmV0dXJuIHZpc2l0KG1hcCwgYnVpbGRLZXlzKTtcbn07XG5cbk1hcC5wcm90b3R5cGUua2V5cyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGtleXModGhpcyk7XG59O1xuLyoqXG4gICAgR2V0IGFycmF5IG9mIGFsbCB2YWx1ZXMgaW4gYG1hcGAuXG5cbiAgICBPcmRlciBpcyBub3QgZ3VhcmFudGVlZCwgZHVwbGljYXRlcyBhcmUgcHJlc2VydmVkLlxuKi9cblxuXG52YXIgYnVpbGRWYWx1ZXMgPSBmdW5jdGlvbiBidWlsZFZhbHVlcyh4KSB7XG4gIHJldHVybiB4LnZhbHVlO1xufTtcblxudmFyIHZhbHVlcyA9IGhhbXQudmFsdWVzID0gTWFwLnByb3RvdHlwZS52YWx1ZXMgPSBmdW5jdGlvbiAobWFwKSB7XG4gIHJldHVybiB2aXNpdChtYXAsIGJ1aWxkVmFsdWVzKTtcbn07XG5cbk1hcC5wcm90b3R5cGUudmFsdWVzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdmFsdWVzKHRoaXMpO1xufTtcbi8qIEZvbGRcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbi8qKlxuICAgIFZpc2l0IGV2ZXJ5IGVudHJ5IGluIHRoZSBtYXAsIGFnZ3JlZ2F0aW5nIGRhdGEuXG5cbiAgICBPcmRlciBvZiBub2RlcyBpcyBub3QgZ3VhcmFudGVlZC5cblxuICAgIEBwYXJhbSBmIEZ1bmN0aW9uIG1hcHBpbmcgYWNjdW11bGF0ZWQgdmFsdWUsIHZhbHVlLCBhbmQga2V5IHRvIG5ldyB2YWx1ZS5cbiAgICBAcGFyYW0geiBTdGFydGluZyB2YWx1ZS5cbiAgICBAcGFyYW0gbSBIQU1UXG4qL1xuXG5cbnZhciBmb2xkID0gaGFtdC5mb2xkID0gZnVuY3Rpb24gKGYsIHosIG0pIHtcbiAgdmFyIHJvb3QgPSBtLl9yb290O1xuICBpZiAocm9vdC50eXBlID09PSBMRUFGKSByZXR1cm4gZih6LCByb290LnZhbHVlLCByb290LmtleSk7XG4gIHZhciB0b1Zpc2l0ID0gW3Jvb3QuY2hpbGRyZW5dO1xuICB2YXIgY2hpbGRyZW4gPSB2b2lkIDA7XG5cbiAgd2hpbGUgKGNoaWxkcmVuID0gdG9WaXNpdC5wb3AoKSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsZW47KSB7XG4gICAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltpKytdO1xuXG4gICAgICBpZiAoY2hpbGQgJiYgY2hpbGQudHlwZSkge1xuICAgICAgICBpZiAoY2hpbGQudHlwZSA9PT0gTEVBRikgeiA9IGYoeiwgY2hpbGQudmFsdWUsIGNoaWxkLmtleSk7ZWxzZSB0b1Zpc2l0LnB1c2goY2hpbGQuY2hpbGRyZW4pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB6O1xufTtcblxuTWFwLnByb3RvdHlwZS5mb2xkID0gZnVuY3Rpb24gKGYsIHopIHtcbiAgcmV0dXJuIGZvbGQoZiwgeiwgdGhpcyk7XG59O1xuLyoqXG4gICAgVmlzaXQgZXZlcnkgZW50cnkgaW4gdGhlIG1hcCwgYWdncmVnYXRpbmcgZGF0YS5cblxuICAgIE9yZGVyIG9mIG5vZGVzIGlzIG5vdCBndWFyYW50ZWVkLlxuXG4gICAgQHBhcmFtIGYgRnVuY3Rpb24gaW52b2tlZCB3aXRoIHZhbHVlIGFuZCBrZXlcbiAgICBAcGFyYW0gbWFwIEhBTVRcbiovXG5cblxudmFyIGZvckVhY2ggPSBoYW10LmZvckVhY2ggPSBmdW5jdGlvbiAoZiwgbWFwKSB7XG4gIHJldHVybiBmb2xkKGZ1bmN0aW9uIChfLCB2YWx1ZSwga2V5KSB7XG4gICAgcmV0dXJuIGYodmFsdWUsIGtleSwgbWFwKTtcbiAgfSwgbnVsbCwgbWFwKTtcbn07XG5cbk1hcC5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIChmKSB7XG4gIHJldHVybiBmb3JFYWNoKGYsIHRoaXMpO1xufTtcbi8qIEFnZ3JlZ2F0ZVxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuLyoqXG4gICAgR2V0IHRoZSBudW1iZXIgb2YgZW50cmllcyBpbiBgbWFwYC5cbiovXG5cblxudmFyIGNvdW50ID0gaGFtdC5jb3VudCA9IGZ1bmN0aW9uIChtYXApIHtcbiAgcmV0dXJuIG1hcC5fc2l6ZTtcbn07XG5cbk1hcC5wcm90b3R5cGUuY291bnQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBjb3VudCh0aGlzKTtcbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShNYXAucHJvdG90eXBlLCAnc2l6ZScsIHtcbiAgZ2V0OiBNYXAucHJvdG90eXBlLmNvdW50XG59KTtcbi8qIEV4cG9ydFxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuaWYgKCBtb2R1bGUuZXhwb3J0cykge1xuICBtb2R1bGUuZXhwb3J0cyA9IGhhbXQ7XG59IGVsc2Uge1xuICB1bmRlZmluZWQuaGFtdCA9IGhhbXQ7XG59XG59KTtcblxuY2xhc3MgQnVpbHRJbk1hcCB7XG4gIGNvbnN0cnVjdG9yKGV4aXN0aW5nKSB7XG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiX21hcFwiLCB2b2lkIDApO1xuXG4gICAgdGhpcy5fbWFwID0gbmV3IE1hcChleGlzdGluZyA9PT0gbnVsbCB8fCBleGlzdGluZyA9PT0gdm9pZCAwID8gdm9pZCAwIDogZXhpc3RpbmcuZW50cmllcygpKTtcbiAgfVxuXG4gIGtleXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX21hcC5rZXlzKCk7XG4gIH1cblxuICBlbnRyaWVzKCkge1xuICAgIHJldHVybiB0aGlzLl9tYXAuZW50cmllcygpO1xuICB9XG5cbiAgZ2V0KGspIHtcbiAgICByZXR1cm4gdGhpcy5fbWFwLmdldChrKTtcbiAgfVxuXG4gIGhhcyhrKSB7XG4gICAgcmV0dXJuIHRoaXMuX21hcC5oYXMoayk7XG4gIH1cblxuICBzZXQoaywgdikge1xuICAgIHRoaXMuX21hcC5zZXQoaywgdik7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGRlbGV0ZShrKSB7XG4gICAgdGhpcy5fbWFwLmRlbGV0ZShrKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgY2xvbmUoKSB7XG4gICAgcmV0dXJuIHBlcnNpc3RlbnRNYXAodGhpcyk7XG4gIH1cblxuICB0b01hcCgpIHtcbiAgICByZXR1cm4gbmV3IE1hcCh0aGlzLl9tYXApO1xuICB9XG5cbn1cblxuY2xhc3MgSGFzaEFycmF5TWFwcGVkVHJpZU1hcCB7XG4gIC8vIEJlY2F1c2UgaGFtdC5lbXB0eSBpcyBub3QgYSBmdW5jdGlvbiB0aGVyZSBpcyBubyB3YXkgdG8gaW50cm9kdWNlIHR5cGVcbiAgLy8gcGFyYW1ldGVycyBvbiBpdCwgc28gZW1wdHkgaXMgdHlwZWQgYXMgSEFNVFBsdXNNYXA8c3RyaW5nLCBtaXhlZD4uXG4gIC8vICRGbG93SXNzdWVcbiAgY29uc3RydWN0b3IoZXhpc3RpbmcpIHtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJfaGFtdFwiLCBoYW10XzEuZW1wdHkuYmVnaW5NdXRhdGlvbigpKTtcblxuICAgIGlmIChleGlzdGluZyBpbnN0YW5jZW9mIEhhc2hBcnJheU1hcHBlZFRyaWVNYXApIHtcbiAgICAgIGNvbnN0IGggPSBleGlzdGluZy5faGFtdC5lbmRNdXRhdGlvbigpO1xuXG4gICAgICBleGlzdGluZy5faGFtdCA9IGguYmVnaW5NdXRhdGlvbigpO1xuICAgICAgdGhpcy5faGFtdCA9IGguYmVnaW5NdXRhdGlvbigpO1xuICAgIH0gZWxzZSBpZiAoZXhpc3RpbmcpIHtcbiAgICAgIGZvciAoY29uc3QgW2ssIHZdIG9mIGV4aXN0aW5nLmVudHJpZXMoKSkge1xuICAgICAgICB0aGlzLl9oYW10LnNldChrLCB2KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBrZXlzKCkge1xuICAgIHJldHVybiB0aGlzLl9oYW10LmtleXMoKTtcbiAgfVxuXG4gIGVudHJpZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2hhbXQuZW50cmllcygpO1xuICB9XG5cbiAgZ2V0KGspIHtcbiAgICByZXR1cm4gdGhpcy5faGFtdC5nZXQoayk7XG4gIH1cblxuICBoYXMoaykge1xuICAgIHJldHVybiB0aGlzLl9oYW10LmhhcyhrKTtcbiAgfVxuXG4gIHNldChrLCB2KSB7XG4gICAgdGhpcy5faGFtdC5zZXQoaywgdik7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGRlbGV0ZShrKSB7XG4gICAgdGhpcy5faGFtdC5kZWxldGUoayk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGNsb25lKCkge1xuICAgIHJldHVybiBwZXJzaXN0ZW50TWFwKHRoaXMpO1xuICB9XG5cbiAgdG9NYXAoKSB7XG4gICAgcmV0dXJuIG5ldyBNYXAodGhpcy5faGFtdCk7XG4gIH1cblxufVxuXG5mdW5jdGlvbiBwZXJzaXN0ZW50TWFwKGV4aXN0aW5nKSB7XG4gIGlmIChSZWNvaWxfZ2t4KCdyZWNvaWxfaGFtdF8yMDIwJykpIHtcbiAgICByZXR1cm4gbmV3IEhhc2hBcnJheU1hcHBlZFRyaWVNYXAoZXhpc3RpbmcpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXcgQnVpbHRJbk1hcChleGlzdGluZyk7XG4gIH1cbn1cblxudmFyIFJlY29pbF9QZXJzaXN0ZW50TWFwID0ge1xuICBwZXJzaXN0ZW50TWFwXG59O1xuXG52YXIgUmVjb2lsX1BlcnNpc3RlbnRNYXBfMSA9IFJlY29pbF9QZXJzaXN0ZW50TWFwLnBlcnNpc3RlbnRNYXA7XG5cbnZhciBSZWNvaWxfUGVyc2lzdGVudE1hcCQxID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuICBfX3Byb3RvX186IG51bGwsXG4gIHBlcnNpc3RlbnRNYXA6IFJlY29pbF9QZXJzaXN0ZW50TWFwXzFcbn0pO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICogQG9uY2FsbCByZWNvaWxcbiAqL1xuLyoqXG4gKiBSZXR1cm5zIGEgc2V0IGNvbnRhaW5pbmcgYWxsIG9mIHRoZSB2YWx1ZXMgZnJvbSB0aGUgZmlyc3Qgc2V0IHRoYXQgYXJlIG5vdFxuICogcHJlc2VudCBpbiBhbnkgb2YgdGhlIHN1YnNlcXVlbnQgc2V0cy5cbiAqXG4gKiBOb3RlOiB0aGlzIGlzIHdyaXR0ZW4gcHJvY2VkdXJhbGx5IChpLmUuLCB3aXRob3V0IGZpbHRlclNldCkgZm9yIHBlcmZvcm1hbnRcbiAqIHVzZSBpbiB0aWdodCBsb29wcy5cbiAqL1xuXG5mdW5jdGlvbiBkaWZmZXJlbmNlU2V0cyhzZXQsIC4uLnNldHNXaXRoVmFsdWVzVG9SZW1vdmUpIHtcbiAgY29uc3QgcmV0ID0gbmV3IFNldCgpO1xuXG4gIEZJUlNUOiBmb3IgKGNvbnN0IHZhbHVlIG9mIHNldCkge1xuICAgIGZvciAoY29uc3Qgb3RoZXJTZXQgb2Ygc2V0c1dpdGhWYWx1ZXNUb1JlbW92ZSkge1xuICAgICAgaWYgKG90aGVyU2V0Lmhhcyh2YWx1ZSkpIHtcbiAgICAgICAgY29udGludWUgRklSU1Q7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0LmFkZCh2YWx1ZSk7XG4gIH1cblxuICByZXR1cm4gcmV0O1xufVxuXG52YXIgUmVjb2lsX2RpZmZlcmVuY2VTZXRzID0gZGlmZmVyZW5jZVNldHM7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKiBAb25jYWxsIHJlY29pbFxuICovXG4vKipcbiAqIFJldHVybnMgYSBuZXcgTWFwIG9iamVjdCB3aXRoIHRoZSBzYW1lIGtleXMgYXMgdGhlIG9yaWdpbmFsLCBidXQgd2l0aCB0aGVcbiAqIHZhbHVlcyByZXBsYWNlZCB3aXRoIHRoZSBvdXRwdXQgb2YgdGhlIGdpdmVuIGNhbGxiYWNrIGZ1bmN0aW9uLlxuICovXG5cbmZ1bmN0aW9uIG1hcE1hcChtYXAsIGNhbGxiYWNrKSB7XG4gIGNvbnN0IHJlc3VsdCA9IG5ldyBNYXAoKTtcbiAgbWFwLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHtcbiAgICByZXN1bHQuc2V0KGtleSwgY2FsbGJhY2sodmFsdWUsIGtleSkpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxudmFyIFJlY29pbF9tYXBNYXAgPSBtYXBNYXA7XG5cbmZ1bmN0aW9uIG1ha2VHcmFwaCgpIHtcbiAgcmV0dXJuIHtcbiAgICBub2RlRGVwczogbmV3IE1hcCgpLFxuICAgIG5vZGVUb05vZGVTdWJzY3JpcHRpb25zOiBuZXcgTWFwKClcbiAgfTtcbn1cblxuZnVuY3Rpb24gY2xvbmVHcmFwaChncmFwaCkge1xuICByZXR1cm4ge1xuICAgIG5vZGVEZXBzOiBSZWNvaWxfbWFwTWFwKGdyYXBoLm5vZGVEZXBzLCBzID0+IG5ldyBTZXQocykpLFxuICAgIG5vZGVUb05vZGVTdWJzY3JpcHRpb25zOiBSZWNvaWxfbWFwTWFwKGdyYXBoLm5vZGVUb05vZGVTdWJzY3JpcHRpb25zLCBzID0+IG5ldyBTZXQocykpXG4gIH07XG59IC8vIE5vdGUgdGhhdCB0aGlzIG92ZXJ3cml0ZXMgdGhlIGRlcHMgb2YgZXhpc3Rpbmcgbm9kZXMsIHJhdGhlciB0aGFuIHVuaW9uaW5nXG4vLyB0aGUgbmV3IGRlcHMgd2l0aCB0aGUgb2xkIGRlcHMuXG5cblxuZnVuY3Rpb24gbWVyZ2VEZXBzSW50b0dyYXBoKGtleSwgbmV3RGVwcywgZ3JhcGgsIC8vIElmIG9sZGVyR3JhcGggaXMgZ2l2ZW4gdGhlbiB3ZSB3aWxsIG5vdCBvdmVyd3JpdGUgY2hhbmdlcyBtYWRlIHRvIHRoZSBnaXZlblxuLy8gZ3JhcGggY29tcGFyZWQgd2l0aCBvbGRlckdyYXBoOlxub2xkZXJHcmFwaCkge1xuICBjb25zdCB7XG4gICAgbm9kZURlcHMsXG4gICAgbm9kZVRvTm9kZVN1YnNjcmlwdGlvbnNcbiAgfSA9IGdyYXBoO1xuICBjb25zdCBvbGREZXBzID0gbm9kZURlcHMuZ2V0KGtleSk7XG5cbiAgaWYgKG9sZERlcHMgJiYgb2xkZXJHcmFwaCAmJiBvbGREZXBzICE9PSBvbGRlckdyYXBoLm5vZGVEZXBzLmdldChrZXkpKSB7XG4gICAgcmV0dXJuO1xuICB9IC8vIFVwZGF0ZSBub2RlRGVwczpcblxuXG4gIG5vZGVEZXBzLnNldChrZXksIG5ld0RlcHMpOyAvLyBBZGQgbmV3IGRlcHMgdG8gbm9kZVRvTm9kZVN1YnNjcmlwdGlvbnM6XG5cbiAgY29uc3QgYWRkZWREZXBzID0gb2xkRGVwcyA9PSBudWxsID8gbmV3RGVwcyA6IFJlY29pbF9kaWZmZXJlbmNlU2V0cyhuZXdEZXBzLCBvbGREZXBzKTtcblxuICBmb3IgKGNvbnN0IGRlcCBvZiBhZGRlZERlcHMpIHtcbiAgICBpZiAoIW5vZGVUb05vZGVTdWJzY3JpcHRpb25zLmhhcyhkZXApKSB7XG4gICAgICBub2RlVG9Ob2RlU3Vic2NyaXB0aW9ucy5zZXQoZGVwLCBuZXcgU2V0KCkpO1xuICAgIH1cblxuICAgIGNvbnN0IGV4aXN0aW5nID0gUmVjb2lsX251bGx0aHJvd3Mobm9kZVRvTm9kZVN1YnNjcmlwdGlvbnMuZ2V0KGRlcCkpO1xuICAgIGV4aXN0aW5nLmFkZChrZXkpO1xuICB9IC8vIFJlbW92ZSByZW1vdmVkIGRlcHMgZnJvbSBub2RlVG9Ob2RlU3Vic2NyaXB0aW9uczpcblxuXG4gIGlmIChvbGREZXBzKSB7XG4gICAgY29uc3QgcmVtb3ZlZERlcHMgPSBSZWNvaWxfZGlmZmVyZW5jZVNldHMob2xkRGVwcywgbmV3RGVwcyk7XG5cbiAgICBmb3IgKGNvbnN0IGRlcCBvZiByZW1vdmVkRGVwcykge1xuICAgICAgaWYgKCFub2RlVG9Ob2RlU3Vic2NyaXB0aW9ucy5oYXMoZGVwKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGV4aXN0aW5nID0gUmVjb2lsX251bGx0aHJvd3Mobm9kZVRvTm9kZVN1YnNjcmlwdGlvbnMuZ2V0KGRlcCkpO1xuICAgICAgZXhpc3RpbmcuZGVsZXRlKGtleSk7XG5cbiAgICAgIGlmIChleGlzdGluZy5zaXplID09PSAwKSB7XG4gICAgICAgIG5vZGVUb05vZGVTdWJzY3JpcHRpb25zLmRlbGV0ZShkZXApO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBzYXZlRGVwc1RvU3RvcmUoa2V5LCBkZXBzLCBzdG9yZSwgdmVyc2lvbikge1xuICB2YXIgX3N0b3JlU3RhdGUkbmV4dFRyZWUsIF9zdG9yZVN0YXRlJHByZXZpb3VzVCwgX3N0b3JlU3RhdGUkcHJldmlvdXNUMiwgX3N0b3JlU3RhdGUkcHJldmlvdXNUMztcblxuICBjb25zdCBzdG9yZVN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcblxuICBpZiAoISh2ZXJzaW9uID09PSBzdG9yZVN0YXRlLmN1cnJlbnRUcmVlLnZlcnNpb24gfHwgdmVyc2lvbiA9PT0gKChfc3RvcmVTdGF0ZSRuZXh0VHJlZSA9IHN0b3JlU3RhdGUubmV4dFRyZWUpID09PSBudWxsIHx8IF9zdG9yZVN0YXRlJG5leHRUcmVlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfc3RvcmVTdGF0ZSRuZXh0VHJlZS52ZXJzaW9uKSB8fCB2ZXJzaW9uID09PSAoKF9zdG9yZVN0YXRlJHByZXZpb3VzVCA9IHN0b3JlU3RhdGUucHJldmlvdXNUcmVlKSA9PT0gbnVsbCB8fCBfc3RvcmVTdGF0ZSRwcmV2aW91c1QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9zdG9yZVN0YXRlJHByZXZpb3VzVC52ZXJzaW9uKSkpIHtcbiAgICBSZWNvaWxfcmVjb3ZlcmFibGVWaW9sYXRpb24oJ1RyaWVkIHRvIHNhdmUgZGVwZW5kZW5jaWVzIHRvIGEgZGlzY2FyZGVkIHRyZWUnKTtcbiAgfSAvLyBNZXJnZSB0aGUgZGVwZW5kZW5jaWVzIGRpc2NvdmVyZWQgaW50byB0aGUgc3RvcmUncyBkZXBlbmRlbmN5IG1hcFxuICAvLyBmb3IgdGhlIHZlcnNpb24gdGhhdCB3YXMgcmVhZDpcblxuXG4gIGNvbnN0IGdyYXBoID0gc3RvcmUuZ2V0R3JhcGgodmVyc2lvbik7XG4gIG1lcmdlRGVwc0ludG9HcmFwaChrZXksIGRlcHMsIGdyYXBoKTsgLy8gSWYgdGhpcyB2ZXJzaW9uIGlzIG5vdCB0aGUgbGF0ZXN0IHZlcnNpb24sIGFsc28gd3JpdGUgdGhlc2UgZGVwZW5kZW5jaWVzXG4gIC8vIGludG8gbGF0ZXIgdmVyc2lvbnMgaWYgdGhleSBkb24ndCBhbHJlYWR5IGhhdmUgdGhlaXIgb3duOlxuXG4gIGlmICh2ZXJzaW9uID09PSAoKF9zdG9yZVN0YXRlJHByZXZpb3VzVDIgPSBzdG9yZVN0YXRlLnByZXZpb3VzVHJlZSkgPT09IG51bGwgfHwgX3N0b3JlU3RhdGUkcHJldmlvdXNUMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3N0b3JlU3RhdGUkcHJldmlvdXNUMi52ZXJzaW9uKSkge1xuICAgIGNvbnN0IGN1cnJlbnRHcmFwaCA9IHN0b3JlLmdldEdyYXBoKHN0b3JlU3RhdGUuY3VycmVudFRyZWUudmVyc2lvbik7XG4gICAgbWVyZ2VEZXBzSW50b0dyYXBoKGtleSwgZGVwcywgY3VycmVudEdyYXBoLCBncmFwaCk7XG4gIH1cblxuICBpZiAodmVyc2lvbiA9PT0gKChfc3RvcmVTdGF0ZSRwcmV2aW91c1QzID0gc3RvcmVTdGF0ZS5wcmV2aW91c1RyZWUpID09PSBudWxsIHx8IF9zdG9yZVN0YXRlJHByZXZpb3VzVDMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9zdG9yZVN0YXRlJHByZXZpb3VzVDMudmVyc2lvbikgfHwgdmVyc2lvbiA9PT0gc3RvcmVTdGF0ZS5jdXJyZW50VHJlZS52ZXJzaW9uKSB7XG4gICAgdmFyIF9zdG9yZVN0YXRlJG5leHRUcmVlMjtcblxuICAgIGNvbnN0IG5leHRWZXJzaW9uID0gKF9zdG9yZVN0YXRlJG5leHRUcmVlMiA9IHN0b3JlU3RhdGUubmV4dFRyZWUpID09PSBudWxsIHx8IF9zdG9yZVN0YXRlJG5leHRUcmVlMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3N0b3JlU3RhdGUkbmV4dFRyZWUyLnZlcnNpb247XG5cbiAgICBpZiAobmV4dFZlcnNpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgY29uc3QgbmV4dEdyYXBoID0gc3RvcmUuZ2V0R3JhcGgobmV4dFZlcnNpb24pO1xuICAgICAgbWVyZ2VEZXBzSW50b0dyYXBoKGtleSwgZGVwcywgbmV4dEdyYXBoLCBncmFwaCk7XG4gICAgfVxuICB9XG59XG5cbnZhciBSZWNvaWxfR3JhcGggPSB7XG4gIGNsb25lR3JhcGgsXG4gIGdyYXBoOiBtYWtlR3JhcGgsXG4gIHNhdmVEZXBzVG9TdG9yZVxufTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqIEBvbmNhbGwgcmVjb2lsXG4gKi9cblxubGV0IG5leHRUcmVlU3RhdGVWZXJzaW9uID0gMDtcblxuY29uc3QgZ2V0TmV4dFRyZWVTdGF0ZVZlcnNpb24gPSAoKSA9PiBuZXh0VHJlZVN0YXRlVmVyc2lvbisrO1xuXG5sZXQgbmV4dFN0b3JlSUQgPSAwO1xuXG5jb25zdCBnZXROZXh0U3RvcmVJRCA9ICgpID0+IG5leHRTdG9yZUlEKys7XG5cbmxldCBuZXh0Q29tcG9uZW50SUQgPSAwO1xuXG5jb25zdCBnZXROZXh0Q29tcG9uZW50SUQgPSAoKSA9PiBuZXh0Q29tcG9uZW50SUQrKztcblxudmFyIFJlY29pbF9LZXlzID0ge1xuICBnZXROZXh0VHJlZVN0YXRlVmVyc2lvbixcbiAgZ2V0TmV4dFN0b3JlSUQsXG4gIGdldE5leHRDb21wb25lbnRJRFxufTtcblxuY29uc3Qge1xuICBwZXJzaXN0ZW50TWFwOiBwZXJzaXN0ZW50TWFwJDFcbn0gPSBSZWNvaWxfUGVyc2lzdGVudE1hcCQxO1xuXG5jb25zdCB7XG4gIGdyYXBoXG59ID0gUmVjb2lsX0dyYXBoO1xuXG5jb25zdCB7XG4gIGdldE5leHRUcmVlU3RhdGVWZXJzaW9uOiBnZXROZXh0VHJlZVN0YXRlVmVyc2lvbiQxXG59ID0gUmVjb2lsX0tleXM7XG5cbmZ1bmN0aW9uIG1ha2VFbXB0eVRyZWVTdGF0ZSgpIHtcbiAgY29uc3QgdmVyc2lvbiA9IGdldE5leHRUcmVlU3RhdGVWZXJzaW9uJDEoKTtcbiAgcmV0dXJuIHtcbiAgICB2ZXJzaW9uLFxuICAgIHN0YXRlSUQ6IHZlcnNpb24sXG4gICAgdHJhbnNhY3Rpb25NZXRhZGF0YToge30sXG4gICAgZGlydHlBdG9tczogbmV3IFNldCgpLFxuICAgIGF0b21WYWx1ZXM6IHBlcnNpc3RlbnRNYXAkMSgpLFxuICAgIG5vbnZhbGlkYXRlZEF0b21zOiBwZXJzaXN0ZW50TWFwJDEoKVxuICB9O1xufVxuXG5mdW5jdGlvbiBtYWtlRW1wdHlTdG9yZVN0YXRlKCkge1xuICBjb25zdCBjdXJyZW50VHJlZSA9IG1ha2VFbXB0eVRyZWVTdGF0ZSgpO1xuICByZXR1cm4ge1xuICAgIGN1cnJlbnRUcmVlLFxuICAgIG5leHRUcmVlOiBudWxsLFxuICAgIHByZXZpb3VzVHJlZTogbnVsbCxcbiAgICBjb21taXREZXB0aDogMCxcbiAgICBrbm93bkF0b21zOiBuZXcgU2V0KCksXG4gICAga25vd25TZWxlY3RvcnM6IG5ldyBTZXQoKSxcbiAgICB0cmFuc2FjdGlvblN1YnNjcmlwdGlvbnM6IG5ldyBNYXAoKSxcbiAgICBub2RlVHJhbnNhY3Rpb25TdWJzY3JpcHRpb25zOiBuZXcgTWFwKCksXG4gICAgbm9kZVRvQ29tcG9uZW50U3Vic2NyaXB0aW9uczogbmV3IE1hcCgpLFxuICAgIHF1ZXVlZENvbXBvbmVudENhbGxiYWNrc19ERVBSRUNBVEVEOiBbXSxcbiAgICBzdXNwZW5kZWRDb21wb25lbnRSZXNvbHZlcnM6IG5ldyBTZXQoKSxcbiAgICBncmFwaHNCeVZlcnNpb246IG5ldyBNYXAoKS5zZXQoY3VycmVudFRyZWUudmVyc2lvbiwgZ3JhcGgoKSksXG4gICAgcmV0ZW50aW9uOiB7XG4gICAgICByZWZlcmVuY2VDb3VudHM6IG5ldyBNYXAoKSxcbiAgICAgIG5vZGVzUmV0YWluZWRCeVpvbmU6IG5ldyBNYXAoKSxcbiAgICAgIHJldGFpbmFibGVzVG9DaGVja0ZvclJlbGVhc2U6IG5ldyBTZXQoKVxuICAgIH0sXG4gICAgbm9kZUNsZWFudXBGdW5jdGlvbnM6IG5ldyBNYXAoKVxuICB9O1xufVxuXG52YXIgUmVjb2lsX1N0YXRlID0ge1xuICBtYWtlRW1wdHlUcmVlU3RhdGUsXG4gIG1ha2VFbXB0eVN0b3JlU3RhdGUsXG4gIGdldE5leHRUcmVlU3RhdGVWZXJzaW9uOiBnZXROZXh0VHJlZVN0YXRlVmVyc2lvbiQxXG59O1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICogQG9uY2FsbCByZWNvaWxcbiAqL1xuXG5jbGFzcyBSZXRlbnRpb25ab25lIHt9XG5cbmZ1bmN0aW9uIHJldGVudGlvblpvbmUoKSB7XG4gIHJldHVybiBuZXcgUmV0ZW50aW9uWm9uZSgpO1xufVxuXG52YXIgUmVjb2lsX1JldGVudGlvblpvbmUgPSB7XG4gIFJldGVudGlvblpvbmUsXG4gIHJldGVudGlvblpvbmVcbn07XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogVXRpbGl0aWVzIGZvciB3b3JraW5nIHdpdGggYnVpbHQtaW4gTWFwcyBhbmQgU2V0cyB3aXRob3V0IG11dGF0aW5nIHRoZW0uXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKiBAb25jYWxsIHJlY29pbFxuICovXG5cbmZ1bmN0aW9uIHNldEJ5QWRkaW5nVG9TZXQoc2V0LCB2KSB7XG4gIGNvbnN0IG5leHQgPSBuZXcgU2V0KHNldCk7XG4gIG5leHQuYWRkKHYpO1xuICByZXR1cm4gbmV4dDtcbn1cblxuZnVuY3Rpb24gc2V0QnlEZWxldGluZ0Zyb21TZXQoc2V0LCB2KSB7XG4gIGNvbnN0IG5leHQgPSBuZXcgU2V0KHNldCk7XG4gIG5leHQuZGVsZXRlKHYpO1xuICByZXR1cm4gbmV4dDtcbn1cblxuZnVuY3Rpb24gbWFwQnlTZXR0aW5nSW5NYXAobWFwLCBrLCB2KSB7XG4gIGNvbnN0IG5leHQgPSBuZXcgTWFwKG1hcCk7XG4gIG5leHQuc2V0KGssIHYpO1xuICByZXR1cm4gbmV4dDtcbn1cblxuZnVuY3Rpb24gbWFwQnlVcGRhdGluZ0luTWFwKG1hcCwgaywgdXBkYXRlcikge1xuICBjb25zdCBuZXh0ID0gbmV3IE1hcChtYXApO1xuICBuZXh0LnNldChrLCB1cGRhdGVyKG5leHQuZ2V0KGspKSk7XG4gIHJldHVybiBuZXh0O1xufVxuXG5mdW5jdGlvbiBtYXBCeURlbGV0aW5nRnJvbU1hcChtYXAsIGspIHtcbiAgY29uc3QgbmV4dCA9IG5ldyBNYXAobWFwKTtcbiAgbmV4dC5kZWxldGUoayk7XG4gIHJldHVybiBuZXh0O1xufVxuXG5mdW5jdGlvbiBtYXBCeURlbGV0aW5nTXVsdGlwbGVGcm9tTWFwKG1hcCwga3MpIHtcbiAgY29uc3QgbmV4dCA9IG5ldyBNYXAobWFwKTtcbiAga3MuZm9yRWFjaChrID0+IG5leHQuZGVsZXRlKGspKTtcbiAgcmV0dXJuIG5leHQ7XG59XG5cbnZhciBSZWNvaWxfQ29weU9uV3JpdGUgPSB7XG4gIHNldEJ5QWRkaW5nVG9TZXQsXG4gIHNldEJ5RGVsZXRpbmdGcm9tU2V0LFxuICBtYXBCeVNldHRpbmdJbk1hcCxcbiAgbWFwQnlVcGRhdGluZ0luTWFwLFxuICBtYXBCeURlbGV0aW5nRnJvbU1hcCxcbiAgbWFwQnlEZWxldGluZ011bHRpcGxlRnJvbU1hcFxufTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqIEBvbmNhbGwgcmVjb2lsXG4gKi9cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBpdGVyYWJsZSB3aG9zZSBvdXRwdXQgaXMgZ2VuZXJhdGVkIGJ5IHBhc3NpbmcgdGhlIGlucHV0XG4gKiBpdGVyYWJsZSdzIHZhbHVlcyB0aHJvdWdoIHRoZSBmaWx0ZXIgZnVuY3Rpb24uXG4gKi9cblxuZnVuY3Rpb24qIGZpbHRlckl0ZXJhYmxlKGl0ZXJhYmxlLCBwcmVkaWNhdGUpIHtcbiAgLy8gVXNlIGdlbmVyYXRvciB0byBjcmVhdGUgaXRlcmFibGUvaXRlcmF0b3JcbiAgbGV0IGluZGV4ID0gMDtcblxuICBmb3IgKGNvbnN0IHZhbHVlIG9mIGl0ZXJhYmxlKSB7XG4gICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgrKykpIHtcbiAgICAgIHlpZWxkIHZhbHVlO1xuICAgIH1cbiAgfVxufVxuXG52YXIgUmVjb2lsX2ZpbHRlckl0ZXJhYmxlID0gZmlsdGVySXRlcmFibGU7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKiBAb25jYWxsIHJlY29pbFxuICovXG4vKipcbiAqIFJldHVybiBhIHByb3h5IG9iamVjdCBiYXNlZCBvbiB0aGUgcHJvdmlkZWQgYmFzZSBhbmQgZmFjdG9yaWVzIG9iamVjdHMuXG4gKiBUaGUgcHJveHkgd2lsbCBpbmNsdWRlIGFsbCBwcm9wZXJ0aWVzIG9mIHRoZSBiYXNlIG9iamVjdCBhcy1pcy5cbiAqIFRoZSBmYWN0b3JpZXMgb2JqZWN0IGNvbnRhaW5zIGNhbGxiYWNrcyB0byBvYnRhaW4gdGhlIHZhbHVlcyBvZiB0aGUgcHJvcGVyaWVzXG4gKiBmb3IgaXRzIGtleXMuXG4gKlxuICogVGhpcyBpcyB1c2VmdWwgZm9yIHByb3ZpZGluZyB1c2VycyBhbiBvYmplY3Qgd2hlcmUgc29tZSBwcm9wZXJ0aWVzIG1heSBiZVxuICogbGF6aWx5IGNvbXB1dGVkIG9ubHkgb24gZmlyc3QgYWNjZXNzLlxuICovXG4vLyAkRmxvd0lzc3VlW3VuY2xlYXItdHlwZV1cblxuZnVuY3Rpb24gbGF6eVByb3h5KGJhc2UsIGZhY3Rvcmllcykge1xuICBjb25zdCBwcm94eSA9IG5ldyBQcm94eShiYXNlLCB7XG4gICAgLy8gQ29tcHV0ZSBhbmQgY2FjaGUgbGF6eSBwcm9wZXJ0eSBpZiBub3QgYWxyZWFkeSBkb25lLlxuICAgIGdldDogKHRhcmdldCwgcHJvcCkgPT4ge1xuICAgICAgaWYgKCEocHJvcCBpbiB0YXJnZXQpICYmIHByb3AgaW4gZmFjdG9yaWVzKSB7XG4gICAgICAgIHRhcmdldFtwcm9wXSA9IGZhY3Rvcmllc1twcm9wXSgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGFyZ2V0W3Byb3BdO1xuICAgIH0sXG4gICAgLy8gVGhpcyBtZXRob2QgYWxsb3dzIHVzZXIgdG8gaXRlcmF0ZSBrZXlzIGFzIG5vcm1hbFxuICAgIG93bktleXM6IHRhcmdldCA9PiB7XG5cbiAgICAgIHJldHVybiBPYmplY3Qua2V5cyh0YXJnZXQpO1xuICAgIH1cbiAgfSk7IC8vICRGbG93SXNzdWVbaW5jb21wYXRpYmxlLXJldHVybl1cblxuICByZXR1cm4gcHJveHk7XG59XG5cbnZhciBSZWNvaWxfbGF6eVByb3h5ID0gbGF6eVByb3h5O1xuXG5jb25zdCB7XG4gIGdldE5vZGU6IGdldE5vZGUkMSxcbiAgZ2V0Tm9kZU1heWJlOiBnZXROb2RlTWF5YmUkMSxcbiAgcmVjb2lsVmFsdWVzRm9yS2V5czogcmVjb2lsVmFsdWVzRm9yS2V5cyQxXG59ID0gUmVjb2lsX05vZGU7XG5cbmNvbnN0IHtcbiAgUmV0ZW50aW9uWm9uZTogUmV0ZW50aW9uWm9uZSQxXG59ID0gUmVjb2lsX1JldGVudGlvblpvbmU7XG5cbmNvbnN0IHtcbiAgc2V0QnlBZGRpbmdUb1NldDogc2V0QnlBZGRpbmdUb1NldCQxXG59ID0gUmVjb2lsX0NvcHlPbldyaXRlO1xuXG5cblxuXG5cblxuXG4gLy8gZmxvd2xpbnQtbmV4dC1saW5lIHVuY2xlYXItdHlwZTpvZmZcblxuXG5jb25zdCBlbXB0eVNldCA9IE9iamVjdC5mcmVlemUobmV3IFNldCgpKTtcblxuY2xhc3MgUmVhZE9ubHlSZWNvaWxWYWx1ZUVycm9yIGV4dGVuZHMgRXJyb3Ige31cblxuZnVuY3Rpb24gaW5pdGlhbGl6ZVJldGVudGlvbkZvck5vZGUoc3RvcmUsIG5vZGVLZXksIHJldGFpbmVkQnkpIHtcbiAgaWYgKCFSZWNvaWxfZ2t4KCdyZWNvaWxfbWVtb3J5X21hbmFnYW1lbnRfMjAyMCcpKSB7XG4gICAgcmV0dXJuICgpID0+IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGNvbnN0IHtcbiAgICBub2Rlc1JldGFpbmVkQnlab25lXG4gIH0gPSBzdG9yZS5nZXRTdGF0ZSgpLnJldGVudGlvbjtcblxuICBmdW5jdGlvbiBhZGRUb1pvbmUoem9uZSkge1xuICAgIGxldCBzZXQgPSBub2Rlc1JldGFpbmVkQnlab25lLmdldCh6b25lKTtcblxuICAgIGlmICghc2V0KSB7XG4gICAgICBub2Rlc1JldGFpbmVkQnlab25lLnNldCh6b25lLCBzZXQgPSBuZXcgU2V0KCkpO1xuICAgIH1cblxuICAgIHNldC5hZGQobm9kZUtleSk7XG4gIH1cblxuICBpZiAocmV0YWluZWRCeSBpbnN0YW5jZW9mIFJldGVudGlvblpvbmUkMSkge1xuICAgIGFkZFRvWm9uZShyZXRhaW5lZEJ5KTtcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHJldGFpbmVkQnkpKSB7XG4gICAgZm9yIChjb25zdCB6b25lIG9mIHJldGFpbmVkQnkpIHtcbiAgICAgIGFkZFRvWm9uZSh6b25lKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gKCkgPT4ge1xuICAgIGlmICghUmVjb2lsX2dreCgncmVjb2lsX21lbW9yeV9tYW5hZ2FtZW50XzIwMjAnKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHtcbiAgICAgIHJldGVudGlvblxuICAgIH0gPSBzdG9yZS5nZXRTdGF0ZSgpO1xuXG4gICAgZnVuY3Rpb24gZGVsZXRlRnJvbVpvbmUoem9uZSkge1xuICAgICAgY29uc3Qgc2V0ID0gcmV0ZW50aW9uLm5vZGVzUmV0YWluZWRCeVpvbmUuZ2V0KHpvbmUpO1xuICAgICAgc2V0ID09PSBudWxsIHx8IHNldCA9PT0gdm9pZCAwID8gdm9pZCAwIDogc2V0LmRlbGV0ZShub2RlS2V5KTtcblxuICAgICAgaWYgKHNldCAmJiBzZXQuc2l6ZSA9PT0gMCkge1xuICAgICAgICByZXRlbnRpb24ubm9kZXNSZXRhaW5lZEJ5Wm9uZS5kZWxldGUoem9uZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHJldGFpbmVkQnkgaW5zdGFuY2VvZiBSZXRlbnRpb25ab25lJDEpIHtcbiAgICAgIGRlbGV0ZUZyb21ab25lKHJldGFpbmVkQnkpO1xuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShyZXRhaW5lZEJ5KSkge1xuICAgICAgZm9yIChjb25zdCB6b25lIG9mIHJldGFpbmVkQnkpIHtcbiAgICAgICAgZGVsZXRlRnJvbVpvbmUoem9uZSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBpbml0aWFsaXplTm9kZUlmTmV3VG9TdG9yZShzdG9yZSwgdHJlZVN0YXRlLCBrZXksIHRyaWdnZXIpIHtcbiAgY29uc3Qgc3RvcmVTdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG5cbiAgaWYgKHN0b3JlU3RhdGUubm9kZUNsZWFudXBGdW5jdGlvbnMuaGFzKGtleSkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBub2RlID0gZ2V0Tm9kZSQxKGtleSk7XG4gIGNvbnN0IHJldGVudGlvbkNsZWFudXAgPSBpbml0aWFsaXplUmV0ZW50aW9uRm9yTm9kZShzdG9yZSwga2V5LCBub2RlLnJldGFpbmVkQnkpO1xuICBjb25zdCBub2RlQ2xlYW51cCA9IG5vZGUuaW5pdChzdG9yZSwgdHJlZVN0YXRlLCB0cmlnZ2VyKTtcbiAgc3RvcmVTdGF0ZS5ub2RlQ2xlYW51cEZ1bmN0aW9ucy5zZXQoa2V5LCAoKSA9PiB7XG4gICAgbm9kZUNsZWFudXAoKTtcbiAgICByZXRlbnRpb25DbGVhbnVwKCk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBpbml0aWFsaXplTm9kZShzdG9yZSwga2V5LCB0cmlnZ2VyKSB7XG4gIGluaXRpYWxpemVOb2RlSWZOZXdUb1N0b3JlKHN0b3JlLCBzdG9yZS5nZXRTdGF0ZSgpLmN1cnJlbnRUcmVlLCBrZXksIHRyaWdnZXIpO1xufVxuXG5mdW5jdGlvbiBjbGVhblVwTm9kZShzdG9yZSwga2V5KSB7XG4gIHZhciBfc3RhdGUkbm9kZUNsZWFudXBGdW47XG5cbiAgY29uc3Qgc3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICAoX3N0YXRlJG5vZGVDbGVhbnVwRnVuID0gc3RhdGUubm9kZUNsZWFudXBGdW5jdGlvbnMuZ2V0KGtleSkpID09PSBudWxsIHx8IF9zdGF0ZSRub2RlQ2xlYW51cEZ1biA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3N0YXRlJG5vZGVDbGVhbnVwRnVuKCk7XG4gIHN0YXRlLm5vZGVDbGVhbnVwRnVuY3Rpb25zLmRlbGV0ZShrZXkpO1xufSAvLyBHZXQgdGhlIGN1cnJlbnQgdmFsdWUgbG9hZGFibGUgb2YgYSBub2RlIGFuZCB1cGRhdGUgdGhlIHN0YXRlLlxuLy8gVXBkYXRlIGRlcGVuZGVuY2llcyBhbmQgc3Vic2NyaXB0aW9ucyBmb3Igc2VsZWN0b3JzLlxuLy8gVXBkYXRlIHNhdmVkIHZhbHVlIHZhbGlkYXRpb24gZm9yIGF0b21zLlxuXG5cbmZ1bmN0aW9uIGdldE5vZGVMb2FkYWJsZShzdG9yZSwgc3RhdGUsIGtleSkge1xuICBpbml0aWFsaXplTm9kZUlmTmV3VG9TdG9yZShzdG9yZSwgc3RhdGUsIGtleSwgJ2dldCcpO1xuICByZXR1cm4gZ2V0Tm9kZSQxKGtleSkuZ2V0KHN0b3JlLCBzdGF0ZSk7XG59IC8vIFBlZWsgYXQgdGhlIGN1cnJlbnQgdmFsdWUgbG9hZGFibGUgZm9yIGEgbm9kZSB3aXRob3V0IGFueSBldmFsdWF0aW9uIG9yIHN0YXRlIGNoYW5nZVxuXG5cbmZ1bmN0aW9uIHBlZWtOb2RlTG9hZGFibGUoc3RvcmUsIHN0YXRlLCBrZXkpIHtcbiAgcmV0dXJuIGdldE5vZGUkMShrZXkpLnBlZWsoc3RvcmUsIHN0YXRlKTtcbn0gLy8gV3JpdGUgdmFsdWUgZGlyZWN0bHkgdG8gc3RhdGUgYnlwYXNzaW5nIHRoZSBOb2RlIGludGVyZmFjZSBhcyB0aGUgbm9kZVxuLy8gZGVmaW5pdGlvbnMgbWF5IG5vdCBoYXZlIGJlZW4gbG9hZGVkIHlldCB3aGVuIHByb2Nlc3NpbmcgdGhlIGluaXRpYWwgc25hcHNob3QuXG5cblxuZnVuY3Rpb24gc2V0VW52YWxpZGF0ZWRBdG9tVmFsdWVfREVQUkVDQVRFRChzdGF0ZSwga2V5LCBuZXdWYWx1ZSkge1xuICB2YXIgX25vZGUkaW52YWxpZGF0ZTtcblxuICBjb25zdCBub2RlID0gZ2V0Tm9kZU1heWJlJDEoa2V5KTtcbiAgbm9kZSA9PT0gbnVsbCB8fCBub2RlID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX25vZGUkaW52YWxpZGF0ZSA9IG5vZGUuaW52YWxpZGF0ZSkgPT09IG51bGwgfHwgX25vZGUkaW52YWxpZGF0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX25vZGUkaW52YWxpZGF0ZS5jYWxsKG5vZGUsIHN0YXRlKTtcbiAgcmV0dXJuIHsgLi4uc3RhdGUsXG4gICAgYXRvbVZhbHVlczogc3RhdGUuYXRvbVZhbHVlcy5jbG9uZSgpLmRlbGV0ZShrZXkpLFxuICAgIG5vbnZhbGlkYXRlZEF0b21zOiBzdGF0ZS5ub252YWxpZGF0ZWRBdG9tcy5jbG9uZSgpLnNldChrZXksIG5ld1ZhbHVlKSxcbiAgICBkaXJ0eUF0b21zOiBzZXRCeUFkZGluZ1RvU2V0JDEoc3RhdGUuZGlydHlBdG9tcywga2V5KVxuICB9O1xufSAvLyBSZXR1cm4gdGhlIGRpc2NvdmVyZWQgZGVwZW5kZW5jaWVzIGFuZCB2YWx1ZXMgdG8gYmUgd3JpdHRlbiBieSBzZXR0aW5nXG4vLyBhIG5vZGUgdmFsdWUuIChNdWx0aXBsZSB2YWx1ZXMgbWF5IGJlIHdyaXR0ZW4gZHVlIHRvIHNlbGVjdG9ycyBnZXR0aW5nIHRvXG4vLyBzZXQgdXBzdHJlYW1zOyBkZXBzIG1heSBiZSBkaXNjb3ZlcmVkIGJlY2F1c2Ugb2YgcmVhZHMgaW4gdXBkYXRlciBmdW5jdGlvbnMuKVxuXG5cbmZ1bmN0aW9uIHNldE5vZGVWYWx1ZShzdG9yZSwgc3RhdGUsIGtleSwgbmV3VmFsdWUpIHtcbiAgY29uc3Qgbm9kZSA9IGdldE5vZGUkMShrZXkpO1xuXG4gIGlmIChub2RlLnNldCA9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFJlYWRPbmx5UmVjb2lsVmFsdWVFcnJvcihgQXR0ZW1wdCB0byBzZXQgcmVhZC1vbmx5IFJlY29pbFZhbHVlOiAke2tleX1gKTtcbiAgfVxuXG4gIGNvbnN0IHNldCA9IG5vZGUuc2V0OyAvLyBzbyBmbG93IGRvZXNuJ3QgbG9zZSB0aGUgYWJvdmUgcmVmaW5lbWVudC5cblxuICBpbml0aWFsaXplTm9kZUlmTmV3VG9TdG9yZShzdG9yZSwgc3RhdGUsIGtleSwgJ3NldCcpO1xuICByZXR1cm4gc2V0KHN0b3JlLCBzdGF0ZSwgbmV3VmFsdWUpO1xufVxuXG5mdW5jdGlvbiBwZWVrTm9kZUluZm8oc3RvcmUsIHN0YXRlLCBrZXkpIHtcbiAgY29uc3Qgc3RvcmVTdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG4gIGNvbnN0IGdyYXBoID0gc3RvcmUuZ2V0R3JhcGgoc3RhdGUudmVyc2lvbik7XG4gIGNvbnN0IHR5cGUgPSBnZXROb2RlJDEoa2V5KS5ub2RlVHlwZTtcbiAgcmV0dXJuIFJlY29pbF9sYXp5UHJveHkoe1xuICAgIHR5cGVcbiAgfSwge1xuICAgIGxvYWRhYmxlOiAoKSA9PiBwZWVrTm9kZUxvYWRhYmxlKHN0b3JlLCBzdGF0ZSwga2V5KSxcbiAgICBpc0FjdGl2ZTogKCkgPT4gc3RvcmVTdGF0ZS5rbm93bkF0b21zLmhhcyhrZXkpIHx8IHN0b3JlU3RhdGUua25vd25TZWxlY3RvcnMuaGFzKGtleSksXG4gICAgaXNTZXQ6ICgpID0+IHR5cGUgPT09ICdzZWxlY3RvcicgPyBmYWxzZSA6IHN0YXRlLmF0b21WYWx1ZXMuaGFzKGtleSksXG4gICAgaXNNb2RpZmllZDogKCkgPT4gc3RhdGUuZGlydHlBdG9tcy5oYXMoa2V5KSxcbiAgICAvLyBSZXBvcnQgY3VycmVudCBkZXBlbmRlbmNpZXMuICBJZiB0aGUgbm9kZSBoYXNuJ3QgYmVlbiBldmFsdWF0ZWQsIHRoZW5cbiAgICAvLyBkZXBlbmRlbmNpZXMgbWF5IGJlIG1pc3NpbmcgYmFzZWQgb24gdGhlIGN1cnJlbnQgc3RhdGUuXG4gICAgZGVwczogKCkgPT4ge1xuICAgICAgdmFyIF9ncmFwaCRub2RlRGVwcyRnZXQ7XG5cbiAgICAgIHJldHVybiByZWNvaWxWYWx1ZXNGb3JLZXlzJDEoKF9ncmFwaCRub2RlRGVwcyRnZXQgPSBncmFwaC5ub2RlRGVwcy5nZXQoa2V5KSkgIT09IG51bGwgJiYgX2dyYXBoJG5vZGVEZXBzJGdldCAhPT0gdm9pZCAwID8gX2dyYXBoJG5vZGVEZXBzJGdldCA6IFtdKTtcbiAgICB9LFxuICAgIC8vIFJlcG9ydHMgYWxsIFwiY3VycmVudFwiIHN1YnNjcmliZXJzLiAgRXZhbHVhdGluZyBvdGhlciBub2RlcyBvclxuICAgIC8vIHByZXZpb3VzIGluLXByb2dyZXNzIGFzeW5jIGV2YWx1YXRpb25zIG1heSBpbnRyb2R1Y2UgbmV3IHN1YnNjcmliZXJzLlxuICAgIHN1YnNjcmliZXJzOiAoKSA9PiB7XG4gICAgICB2YXIgX3N0b3JlU3RhdGUkbm9kZVRvQ29tLCBfc3RvcmVTdGF0ZSRub2RlVG9Db20yO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBub2RlczogcmVjb2lsVmFsdWVzRm9yS2V5cyQxKFJlY29pbF9maWx0ZXJJdGVyYWJsZShnZXREb3duc3RyZWFtTm9kZXMoc3RvcmUsIHN0YXRlLCBuZXcgU2V0KFtrZXldKSksIG5vZGVLZXkgPT4gbm9kZUtleSAhPT0ga2V5KSksXG4gICAgICAgIGNvbXBvbmVudHM6IFJlY29pbF9tYXBJdGVyYWJsZSgoX3N0b3JlU3RhdGUkbm9kZVRvQ29tID0gKF9zdG9yZVN0YXRlJG5vZGVUb0NvbTIgPSBzdG9yZVN0YXRlLm5vZGVUb0NvbXBvbmVudFN1YnNjcmlwdGlvbnMuZ2V0KGtleSkpID09PSBudWxsIHx8IF9zdG9yZVN0YXRlJG5vZGVUb0NvbTIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9zdG9yZVN0YXRlJG5vZGVUb0NvbTIudmFsdWVzKCkpICE9PSBudWxsICYmIF9zdG9yZVN0YXRlJG5vZGVUb0NvbSAhPT0gdm9pZCAwID8gX3N0b3JlU3RhdGUkbm9kZVRvQ29tIDogW10sIChbbmFtZV0pID0+ICh7XG4gICAgICAgICAgbmFtZVxuICAgICAgICB9KSlcbiAgICAgIH07XG4gICAgfVxuICB9KTtcbn0gLy8gRmluZCBhbGwgb2YgdGhlIHJlY3Vyc2l2ZWx5IGRlcGVuZGVudCBub2Rlc1xuXG5cbmZ1bmN0aW9uIGdldERvd25zdHJlYW1Ob2RlcyhzdG9yZSwgc3RhdGUsIGtleXMpIHtcbiAgY29uc3QgdmlzaXRlZE5vZGVzID0gbmV3IFNldCgpO1xuICBjb25zdCB2aXNpdGluZ05vZGVzID0gQXJyYXkuZnJvbShrZXlzKTtcbiAgY29uc3QgZ3JhcGggPSBzdG9yZS5nZXRHcmFwaChzdGF0ZS52ZXJzaW9uKTtcblxuICBmb3IgKGxldCBrZXkgPSB2aXNpdGluZ05vZGVzLnBvcCgpOyBrZXk7IGtleSA9IHZpc2l0aW5nTm9kZXMucG9wKCkpIHtcbiAgICB2YXIgX2dyYXBoJG5vZGVUb05vZGVTdWJzO1xuXG4gICAgdmlzaXRlZE5vZGVzLmFkZChrZXkpO1xuICAgIGNvbnN0IHN1YnNjcmliZWROb2RlcyA9IChfZ3JhcGgkbm9kZVRvTm9kZVN1YnMgPSBncmFwaC5ub2RlVG9Ob2RlU3Vic2NyaXB0aW9ucy5nZXQoa2V5KSkgIT09IG51bGwgJiYgX2dyYXBoJG5vZGVUb05vZGVTdWJzICE9PSB2b2lkIDAgPyBfZ3JhcGgkbm9kZVRvTm9kZVN1YnMgOiBlbXB0eVNldDtcblxuICAgIGZvciAoY29uc3QgZG93bnN0cmVhbU5vZGUgb2Ygc3Vic2NyaWJlZE5vZGVzKSB7XG4gICAgICBpZiAoIXZpc2l0ZWROb2Rlcy5oYXMoZG93bnN0cmVhbU5vZGUpKSB7XG4gICAgICAgIHZpc2l0aW5nTm9kZXMucHVzaChkb3duc3RyZWFtTm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHZpc2l0ZWROb2Rlcztcbn1cblxudmFyIFJlY29pbF9GdW5jdGlvbmFsQ29yZSA9IHtcbiAgZ2V0Tm9kZUxvYWRhYmxlLFxuICBwZWVrTm9kZUxvYWRhYmxlLFxuICBzZXROb2RlVmFsdWUsXG4gIGluaXRpYWxpemVOb2RlLFxuICBjbGVhblVwTm9kZSxcbiAgc2V0VW52YWxpZGF0ZWRBdG9tVmFsdWVfREVQUkVDQVRFRCxcbiAgcGVla05vZGVJbmZvLFxuICBnZXREb3duc3RyZWFtTm9kZXNcbn07XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKiBAb25jYWxsIHJlY29pbFxuICovXG5cbmxldCBfaW52YWxpZGF0ZU1lbW9pemVkU25hcHNob3QgPSBudWxsO1xuXG5mdW5jdGlvbiBzZXRJbnZhbGlkYXRlTWVtb2l6ZWRTbmFwc2hvdChpbnZhbGlkYXRlKSB7XG4gIF9pbnZhbGlkYXRlTWVtb2l6ZWRTbmFwc2hvdCA9IGludmFsaWRhdGU7XG59XG5cbmZ1bmN0aW9uIGludmFsaWRhdGVNZW1vaXplZFNuYXBzaG90KCkge1xuICB2YXIgX2ludmFsaWRhdGVNZW1vaXplZFNuO1xuXG4gIChfaW52YWxpZGF0ZU1lbW9pemVkU24gPSBfaW52YWxpZGF0ZU1lbW9pemVkU25hcHNob3QpID09PSBudWxsIHx8IF9pbnZhbGlkYXRlTWVtb2l6ZWRTbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2ludmFsaWRhdGVNZW1vaXplZFNuKCk7XG59XG5cbnZhciBSZWNvaWxfU25hcHNob3RDYWNoZSA9IHtcbiAgc2V0SW52YWxpZGF0ZU1lbW9pemVkU25hcHNob3QsXG4gIGludmFsaWRhdGVNZW1vaXplZFNuYXBzaG90XG59O1xuXG5jb25zdCB7XG4gIGdldERvd25zdHJlYW1Ob2RlczogZ2V0RG93bnN0cmVhbU5vZGVzJDEsXG4gIGdldE5vZGVMb2FkYWJsZTogZ2V0Tm9kZUxvYWRhYmxlJDEsXG4gIHNldE5vZGVWYWx1ZTogc2V0Tm9kZVZhbHVlJDFcbn0gPSBSZWNvaWxfRnVuY3Rpb25hbENvcmU7XG5cbmNvbnN0IHtcbiAgZ2V0TmV4dENvbXBvbmVudElEOiBnZXROZXh0Q29tcG9uZW50SUQkMVxufSA9IFJlY29pbF9LZXlzO1xuXG5jb25zdCB7XG4gIGdldE5vZGU6IGdldE5vZGUkMixcbiAgZ2V0Tm9kZU1heWJlOiBnZXROb2RlTWF5YmUkMlxufSA9IFJlY29pbF9Ob2RlO1xuXG5jb25zdCB7XG4gIERlZmF1bHRWYWx1ZTogRGVmYXVsdFZhbHVlJDFcbn0gPSBSZWNvaWxfTm9kZTtcblxuY29uc3Qge1xuICByZWFjdE1vZGU6IHJlYWN0TW9kZSQxXG59ID0gUmVjb2lsX1JlYWN0TW9kZTtcblxuY29uc3Qge1xuICBBYnN0cmFjdFJlY29pbFZhbHVlOiBBYnN0cmFjdFJlY29pbFZhbHVlJDEsXG4gIFJlY29pbFN0YXRlOiBSZWNvaWxTdGF0ZSQxLFxuICBSZWNvaWxWYWx1ZVJlYWRPbmx5OiBSZWNvaWxWYWx1ZVJlYWRPbmx5JDEsXG4gIGlzUmVjb2lsVmFsdWU6IGlzUmVjb2lsVmFsdWUkMVxufSA9IFJlY29pbF9SZWNvaWxWYWx1ZSQxO1xuXG5jb25zdCB7XG4gIGludmFsaWRhdGVNZW1vaXplZFNuYXBzaG90OiBpbnZhbGlkYXRlTWVtb2l6ZWRTbmFwc2hvdCQxXG59ID0gUmVjb2lsX1NuYXBzaG90Q2FjaGU7XG5cblxuXG5cblxuXG5cbmZ1bmN0aW9uIGdldFJlY29pbFZhbHVlQXNMb2FkYWJsZShzdG9yZSwge1xuICBrZXlcbn0sIHRyZWVTdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCkuY3VycmVudFRyZWUpIHtcbiAgdmFyIF9zdG9yZVN0YXRlJG5leHRUcmVlLCBfc3RvcmVTdGF0ZSRwcmV2aW91c1Q7XG5cbiAgLy8gUmVhZGluZyBmcm9tIGFuIG9sZGVyIHRyZWUgY2FuIGNhdXNlIGJ1Z3MgYmVjYXVzZSB0aGUgZGVwZW5kZW5jaWVzIHRoYXQgd2VcbiAgLy8gZGlzY292ZXIgZHVyaW5nIHRoZSByZWFkIGFyZSBsb3N0LlxuICBjb25zdCBzdG9yZVN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcblxuICBpZiAoISh0cmVlU3RhdGUudmVyc2lvbiA9PT0gc3RvcmVTdGF0ZS5jdXJyZW50VHJlZS52ZXJzaW9uIHx8IHRyZWVTdGF0ZS52ZXJzaW9uID09PSAoKF9zdG9yZVN0YXRlJG5leHRUcmVlID0gc3RvcmVTdGF0ZS5uZXh0VHJlZSkgPT09IG51bGwgfHwgX3N0b3JlU3RhdGUkbmV4dFRyZWUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9zdG9yZVN0YXRlJG5leHRUcmVlLnZlcnNpb24pIHx8IHRyZWVTdGF0ZS52ZXJzaW9uID09PSAoKF9zdG9yZVN0YXRlJHByZXZpb3VzVCA9IHN0b3JlU3RhdGUucHJldmlvdXNUcmVlKSA9PT0gbnVsbCB8fCBfc3RvcmVTdGF0ZSRwcmV2aW91c1QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9zdG9yZVN0YXRlJHByZXZpb3VzVC52ZXJzaW9uKSkpIHtcbiAgICBSZWNvaWxfcmVjb3ZlcmFibGVWaW9sYXRpb24oJ1RyaWVkIHRvIHJlYWQgZnJvbSBhIGRpc2NhcmRlZCB0cmVlJyk7XG4gIH1cblxuICBjb25zdCBsb2FkYWJsZSA9IGdldE5vZGVMb2FkYWJsZSQxKHN0b3JlLCB0cmVlU3RhdGUsIGtleSk7XG5cbiAgaWYgKGxvYWRhYmxlLnN0YXRlID09PSAnbG9hZGluZycpIHtcbiAgICBsb2FkYWJsZS5jb250ZW50cy5jYXRjaCgoKSA9PiB7XG4gICAgICAvKipcbiAgICAgICAqIEhBQ0s6IGludGVyY2VwdCB0aHJvd24gZXJyb3IgaGVyZSB0byBwcmV2ZW50IGFuIHVuY2F1Z2h0IHByb21pc2UgZXhjZXB0aW9uLiBJZGVhbGx5IHRoaXMgd291bGQgaGFwcGVuIGNsb3NlciB0byBzZWxlY3RvclxuICAgICAgICogZXhlY3V0aW9uIChwZXJoYXBzIGludHJvZHVjaW5nIGEgbmV3IEVSUk9SIGNsYXNzIHRvIGJlIHJlc29sdmVkIGJ5IGFzeW5jIHNlbGVjdG9ycyB0aGF0IGFyZSBpbiBhbiBlcnJvciBzdGF0ZSlcbiAgICAgICAqL1xuICAgICAgcmV0dXJuO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGxvYWRhYmxlO1xufVxuXG5mdW5jdGlvbiBhcHBseUF0b21WYWx1ZVdyaXRlcyhhdG9tVmFsdWVzLCB3cml0ZXMpIHtcbiAgY29uc3QgcmVzdWx0ID0gYXRvbVZhbHVlcy5jbG9uZSgpO1xuICB3cml0ZXMuZm9yRWFjaCgodiwgaykgPT4ge1xuICAgIGlmICh2LnN0YXRlID09PSAnaGFzVmFsdWUnICYmIHYuY29udGVudHMgaW5zdGFuY2VvZiBEZWZhdWx0VmFsdWUkMSkge1xuICAgICAgcmVzdWx0LmRlbGV0ZShrKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0LnNldChrLCB2KTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiB2YWx1ZUZyb21WYWx1ZU9yVXBkYXRlcihzdG9yZSwgc3RhdGUsIHtcbiAga2V5XG59LCB2YWx1ZU9yVXBkYXRlcikge1xuICBpZiAodHlwZW9mIHZhbHVlT3JVcGRhdGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gVXBkYXRlciBmb3JtOiBwYXNzIGluIHRoZSBjdXJyZW50IHZhbHVlLiBUaHJvdyBpZiB0aGUgY3VycmVudCB2YWx1ZVxuICAgIC8vIGlzIHVuYXZhaWxhYmxlIChuYW1lbHkgd2hlbiB1cGRhdGluZyBhbiBhc3luYyBzZWxlY3RvciB0aGF0J3NcbiAgICAvLyBwZW5kaW5nIG9yIGVycm9yZWQpOlxuICAgIGNvbnN0IGN1cnJlbnQgPSBnZXROb2RlTG9hZGFibGUkMShzdG9yZSwgc3RhdGUsIGtleSk7XG5cbiAgICBpZiAoY3VycmVudC5zdGF0ZSA9PT0gJ2xvYWRpbmcnKSB7XG4gICAgICBjb25zdCBtc2cgPSBgVHJpZWQgdG8gc2V0IGF0b20gb3Igc2VsZWN0b3IgXCIke2tleX1cIiB1c2luZyBhbiB1cGRhdGVyIGZ1bmN0aW9uIHdoaWxlIHRoZSBjdXJyZW50IHN0YXRlIGlzIHBlbmRpbmcsIHRoaXMgaXMgbm90IGN1cnJlbnRseSBzdXBwb3J0ZWQuYDtcbiAgICAgIFJlY29pbF9yZWNvdmVyYWJsZVZpb2xhdGlvbihtc2cpO1xuICAgICAgdGhyb3cgUmVjb2lsX2Vycihtc2cpO1xuICAgIH0gZWxzZSBpZiAoY3VycmVudC5zdGF0ZSA9PT0gJ2hhc0Vycm9yJykge1xuICAgICAgdGhyb3cgY3VycmVudC5jb250ZW50cztcbiAgICB9IC8vIFQgaXRzZWxmIG1heSBiZSBhIGZ1bmN0aW9uLCBzbyBvdXIgcmVmaW5lbWVudCBpcyBub3Qgc3VmZmljaWVudDpcblxuXG4gICAgcmV0dXJuIHZhbHVlT3JVcGRhdGVyKGN1cnJlbnQuY29udGVudHMpOyAvLyBmbG93bGludC1saW5lIHVuY2xlYXItdHlwZTpvZmZcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdmFsdWVPclVwZGF0ZXI7XG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlBY3Rpb24oc3RvcmUsIHN0YXRlLCBhY3Rpb24pIHtcbiAgaWYgKGFjdGlvbi50eXBlID09PSAnc2V0Jykge1xuICAgIGNvbnN0IHtcbiAgICAgIHJlY29pbFZhbHVlLFxuICAgICAgdmFsdWVPclVwZGF0ZXJcbiAgICB9ID0gYWN0aW9uO1xuICAgIGNvbnN0IG5ld1ZhbHVlID0gdmFsdWVGcm9tVmFsdWVPclVwZGF0ZXIoc3RvcmUsIHN0YXRlLCByZWNvaWxWYWx1ZSwgdmFsdWVPclVwZGF0ZXIpO1xuICAgIGNvbnN0IHdyaXRlcyA9IHNldE5vZGVWYWx1ZSQxKHN0b3JlLCBzdGF0ZSwgcmVjb2lsVmFsdWUua2V5LCBuZXdWYWx1ZSk7XG5cbiAgICBmb3IgKGNvbnN0IFtrZXksIGxvYWRhYmxlXSBvZiB3cml0ZXMuZW50cmllcygpKSB7XG4gICAgICB3cml0ZUxvYWRhYmxlVG9UcmVlU3RhdGUoc3RhdGUsIGtleSwgbG9hZGFibGUpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChhY3Rpb24udHlwZSA9PT0gJ3NldExvYWRhYmxlJykge1xuICAgIGNvbnN0IHtcbiAgICAgIHJlY29pbFZhbHVlOiB7XG4gICAgICAgIGtleVxuICAgICAgfSxcbiAgICAgIGxvYWRhYmxlXG4gICAgfSA9IGFjdGlvbjtcbiAgICB3cml0ZUxvYWRhYmxlVG9UcmVlU3RhdGUoc3RhdGUsIGtleSwgbG9hZGFibGUpO1xuICB9IGVsc2UgaWYgKGFjdGlvbi50eXBlID09PSAnbWFya01vZGlmaWVkJykge1xuICAgIGNvbnN0IHtcbiAgICAgIHJlY29pbFZhbHVlOiB7XG4gICAgICAgIGtleVxuICAgICAgfVxuICAgIH0gPSBhY3Rpb247XG4gICAgc3RhdGUuZGlydHlBdG9tcy5hZGQoa2V5KTtcbiAgfSBlbHNlIGlmIChhY3Rpb24udHlwZSA9PT0gJ3NldFVudmFsaWRhdGVkJykge1xuICAgIHZhciBfbm9kZSRpbnZhbGlkYXRlO1xuXG4gICAgLy8gV3JpdGUgdmFsdWUgZGlyZWN0bHkgdG8gc3RhdGUgYnlwYXNzaW5nIHRoZSBOb2RlIGludGVyZmFjZSBhcyB0aGUgbm9kZVxuICAgIC8vIGRlZmluaXRpb25zIG1heSBub3QgaGF2ZSBiZWVuIGxvYWRlZCB5ZXQgd2hlbiBwcm9jZXNzaW5nIHRoZSBpbml0aWFsIHNuYXBzaG90LlxuICAgIGNvbnN0IHtcbiAgICAgIHJlY29pbFZhbHVlOiB7XG4gICAgICAgIGtleVxuICAgICAgfSxcbiAgICAgIHVudmFsaWRhdGVkVmFsdWVcbiAgICB9ID0gYWN0aW9uO1xuICAgIGNvbnN0IG5vZGUgPSBnZXROb2RlTWF5YmUkMihrZXkpO1xuICAgIG5vZGUgPT09IG51bGwgfHwgbm9kZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9ub2RlJGludmFsaWRhdGUgPSBub2RlLmludmFsaWRhdGUpID09PSBudWxsIHx8IF9ub2RlJGludmFsaWRhdGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9ub2RlJGludmFsaWRhdGUuY2FsbChub2RlLCBzdGF0ZSk7XG4gICAgc3RhdGUuYXRvbVZhbHVlcy5kZWxldGUoa2V5KTtcbiAgICBzdGF0ZS5ub252YWxpZGF0ZWRBdG9tcy5zZXQoa2V5LCB1bnZhbGlkYXRlZFZhbHVlKTtcbiAgICBzdGF0ZS5kaXJ0eUF0b21zLmFkZChrZXkpO1xuICB9IGVsc2Uge1xuICAgIFJlY29pbF9yZWNvdmVyYWJsZVZpb2xhdGlvbihgVW5rbm93biBhY3Rpb24gJHthY3Rpb24udHlwZX1gKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB3cml0ZUxvYWRhYmxlVG9UcmVlU3RhdGUoc3RhdGUsIGtleSwgbG9hZGFibGUpIHtcbiAgaWYgKGxvYWRhYmxlLnN0YXRlID09PSAnaGFzVmFsdWUnICYmIGxvYWRhYmxlLmNvbnRlbnRzIGluc3RhbmNlb2YgRGVmYXVsdFZhbHVlJDEpIHtcbiAgICBzdGF0ZS5hdG9tVmFsdWVzLmRlbGV0ZShrZXkpO1xuICB9IGVsc2Uge1xuICAgIHN0YXRlLmF0b21WYWx1ZXMuc2V0KGtleSwgbG9hZGFibGUpO1xuICB9XG5cbiAgc3RhdGUuZGlydHlBdG9tcy5hZGQoa2V5KTtcbiAgc3RhdGUubm9udmFsaWRhdGVkQXRvbXMuZGVsZXRlKGtleSk7XG59XG5cbmZ1bmN0aW9uIGFwcGx5QWN0aW9uc1RvU3RvcmUoc3RvcmUsIGFjdGlvbnMpIHtcbiAgc3RvcmUucmVwbGFjZVN0YXRlKHN0YXRlID0+IHtcbiAgICBjb25zdCBuZXdTdGF0ZSA9IGNvcHlUcmVlU3RhdGUoc3RhdGUpO1xuXG4gICAgZm9yIChjb25zdCBhY3Rpb24gb2YgYWN0aW9ucykge1xuICAgICAgYXBwbHlBY3Rpb24oc3RvcmUsIG5ld1N0YXRlLCBhY3Rpb24pO1xuICAgIH1cblxuICAgIGludmFsaWRhdGVEb3duc3RyZWFtcyhzdG9yZSwgbmV3U3RhdGUpO1xuICAgIGludmFsaWRhdGVNZW1vaXplZFNuYXBzaG90JDEoKTtcbiAgICByZXR1cm4gbmV3U3RhdGU7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBxdWV1ZU9yUGVyZm9ybVN0YXRlVXBkYXRlKHN0b3JlLCBhY3Rpb24pIHtcbiAgaWYgKGJhdGNoU3RhY2subGVuZ3RoKSB7XG4gICAgY29uc3QgYWN0aW9uc0J5U3RvcmUgPSBiYXRjaFN0YWNrW2JhdGNoU3RhY2subGVuZ3RoIC0gMV07XG4gICAgbGV0IGFjdGlvbnMgPSBhY3Rpb25zQnlTdG9yZS5nZXQoc3RvcmUpO1xuXG4gICAgaWYgKCFhY3Rpb25zKSB7XG4gICAgICBhY3Rpb25zQnlTdG9yZS5zZXQoc3RvcmUsIGFjdGlvbnMgPSBbXSk7XG4gICAgfVxuXG4gICAgYWN0aW9ucy5wdXNoKGFjdGlvbik7XG4gIH0gZWxzZSB7XG4gICAgYXBwbHlBY3Rpb25zVG9TdG9yZShzdG9yZSwgW2FjdGlvbl0pO1xuICB9XG59XG5cbmNvbnN0IGJhdGNoU3RhY2sgPSBbXTtcblxuZnVuY3Rpb24gYmF0Y2hTdGFydCgpIHtcbiAgY29uc3QgYWN0aW9uc0J5U3RvcmUgPSBuZXcgTWFwKCk7XG4gIGJhdGNoU3RhY2sucHVzaChhY3Rpb25zQnlTdG9yZSk7XG4gIHJldHVybiAoKSA9PiB7XG4gICAgZm9yIChjb25zdCBbc3RvcmUsIGFjdGlvbnNdIG9mIGFjdGlvbnNCeVN0b3JlKSB7XG4gICAgICBhcHBseUFjdGlvbnNUb1N0b3JlKHN0b3JlLCBhY3Rpb25zKTtcbiAgICB9XG5cbiAgICBjb25zdCBwb3BwZWQgPSBiYXRjaFN0YWNrLnBvcCgpO1xuXG4gICAgaWYgKHBvcHBlZCAhPT0gYWN0aW9uc0J5U3RvcmUpIHtcbiAgICAgIFJlY29pbF9yZWNvdmVyYWJsZVZpb2xhdGlvbignSW5jb3JyZWN0IG9yZGVyIG9mIGJhdGNoIHBvcHBpbmcnKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvcHlUcmVlU3RhdGUoc3RhdGUpIHtcbiAgcmV0dXJuIHsgLi4uc3RhdGUsXG4gICAgYXRvbVZhbHVlczogc3RhdGUuYXRvbVZhbHVlcy5jbG9uZSgpLFxuICAgIG5vbnZhbGlkYXRlZEF0b21zOiBzdGF0ZS5ub252YWxpZGF0ZWRBdG9tcy5jbG9uZSgpLFxuICAgIGRpcnR5QXRvbXM6IG5ldyBTZXQoc3RhdGUuZGlydHlBdG9tcylcbiAgfTtcbn1cblxuZnVuY3Rpb24gaW52YWxpZGF0ZURvd25zdHJlYW1zKHN0b3JlLCBzdGF0ZSkge1xuICAvLyBJbmZvcm0gYW55IG5vZGVzIHRoYXQgd2VyZSBjaGFuZ2VkIG9yIGRvd25zdHJlYW0gb2YgY2hhbmdlcyBzbyB0aGF0IHRoZXlcbiAgLy8gY2FuIGNsZWFyIG91dCBhbnkgY2FjaGVzIGFzIG5lZWRlZCBkdWUgdG8gdGhlIHVwZGF0ZTpcbiAgY29uc3QgZG93bnN0cmVhbXMgPSBnZXREb3duc3RyZWFtTm9kZXMkMShzdG9yZSwgc3RhdGUsIHN0YXRlLmRpcnR5QXRvbXMpO1xuXG4gIGZvciAoY29uc3Qga2V5IG9mIGRvd25zdHJlYW1zKSB7XG4gICAgdmFyIF9nZXROb2RlTWF5YmUsIF9nZXROb2RlTWF5YmUkaW52YWxpZDtcblxuICAgIChfZ2V0Tm9kZU1heWJlID0gZ2V0Tm9kZU1heWJlJDIoa2V5KSkgPT09IG51bGwgfHwgX2dldE5vZGVNYXliZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9nZXROb2RlTWF5YmUkaW52YWxpZCA9IF9nZXROb2RlTWF5YmUuaW52YWxpZGF0ZSkgPT09IG51bGwgfHwgX2dldE5vZGVNYXliZSRpbnZhbGlkID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZ2V0Tm9kZU1heWJlJGludmFsaWQuY2FsbChfZ2V0Tm9kZU1heWJlLCBzdGF0ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc2V0UmVjb2lsVmFsdWUoc3RvcmUsIHJlY29pbFZhbHVlLCB2YWx1ZU9yVXBkYXRlcikge1xuICBxdWV1ZU9yUGVyZm9ybVN0YXRlVXBkYXRlKHN0b3JlLCB7XG4gICAgdHlwZTogJ3NldCcsXG4gICAgcmVjb2lsVmFsdWUsXG4gICAgdmFsdWVPclVwZGF0ZXJcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHNldFJlY29pbFZhbHVlTG9hZGFibGUoc3RvcmUsIHJlY29pbFZhbHVlLCBsb2FkYWJsZSkge1xuICBpZiAobG9hZGFibGUgaW5zdGFuY2VvZiBEZWZhdWx0VmFsdWUkMSkge1xuICAgIHJldHVybiBzZXRSZWNvaWxWYWx1ZShzdG9yZSwgcmVjb2lsVmFsdWUsIGxvYWRhYmxlKTtcbiAgfVxuXG4gIHF1ZXVlT3JQZXJmb3JtU3RhdGVVcGRhdGUoc3RvcmUsIHtcbiAgICB0eXBlOiAnc2V0TG9hZGFibGUnLFxuICAgIHJlY29pbFZhbHVlLFxuICAgIGxvYWRhYmxlOiBsb2FkYWJsZVxuICB9KTtcbn1cblxuZnVuY3Rpb24gbWFya1JlY29pbFZhbHVlTW9kaWZpZWQoc3RvcmUsIHJlY29pbFZhbHVlKSB7XG4gIHF1ZXVlT3JQZXJmb3JtU3RhdGVVcGRhdGUoc3RvcmUsIHtcbiAgICB0eXBlOiAnbWFya01vZGlmaWVkJyxcbiAgICByZWNvaWxWYWx1ZVxuICB9KTtcbn1cblxuZnVuY3Rpb24gc2V0VW52YWxpZGF0ZWRSZWNvaWxWYWx1ZShzdG9yZSwgcmVjb2lsVmFsdWUsIHVudmFsaWRhdGVkVmFsdWUpIHtcbiAgcXVldWVPclBlcmZvcm1TdGF0ZVVwZGF0ZShzdG9yZSwge1xuICAgIHR5cGU6ICdzZXRVbnZhbGlkYXRlZCcsXG4gICAgcmVjb2lsVmFsdWUsXG4gICAgdW52YWxpZGF0ZWRWYWx1ZVxuICB9KTtcbn1cblxuZnVuY3Rpb24gc3Vic2NyaWJlVG9SZWNvaWxWYWx1ZShzdG9yZSwge1xuICBrZXlcbn0sIGNhbGxiYWNrLCBjb21wb25lbnREZWJ1Z05hbWUgPSBudWxsKSB7XG4gIGNvbnN0IHN1YklEID0gZ2V0TmV4dENvbXBvbmVudElEJDEoKTtcbiAgY29uc3Qgc3RvcmVTdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG5cbiAgaWYgKCFzdG9yZVN0YXRlLm5vZGVUb0NvbXBvbmVudFN1YnNjcmlwdGlvbnMuaGFzKGtleSkpIHtcbiAgICBzdG9yZVN0YXRlLm5vZGVUb0NvbXBvbmVudFN1YnNjcmlwdGlvbnMuc2V0KGtleSwgbmV3IE1hcCgpKTtcbiAgfVxuXG4gIFJlY29pbF9udWxsdGhyb3dzKHN0b3JlU3RhdGUubm9kZVRvQ29tcG9uZW50U3Vic2NyaXB0aW9ucy5nZXQoa2V5KSkuc2V0KHN1YklELCBbY29tcG9uZW50RGVidWdOYW1lICE9PSBudWxsICYmIGNvbXBvbmVudERlYnVnTmFtZSAhPT0gdm9pZCAwID8gY29tcG9uZW50RGVidWdOYW1lIDogJzxub3QgY2FwdHVyZWQ+JywgY2FsbGJhY2tdKTsgLy8gSGFuZGxlIHRoZSBjYXNlIHRoYXQsIGR1cmluZyB0aGUgc2FtZSB0aWNrIHRoYXQgd2UgYXJlIHN1YnNjcmliaW5nLCBhbiBhdG9tXG4gIC8vIGhhcyBiZWVuIHVwZGF0ZWQgYnkgc29tZSBlZmZlY3QgaGFuZGxlci4gT3RoZXJ3aXNlIHdlIHdpbGwgbWlzcyB0aGUgdXBkYXRlLlxuXG4gIGNvbnN0IG1vZGUgPSByZWFjdE1vZGUkMSgpO1xuXG4gIGlmIChtb2RlLmVhcmx5ICYmIChtb2RlLm1vZGUgPT09ICdMRUdBQ1knIHx8IG1vZGUubW9kZSA9PT0gJ01VVEFCTEVfU09VUkNFJykpIHtcbiAgICBjb25zdCBuZXh0VHJlZSA9IHN0b3JlLmdldFN0YXRlKCkubmV4dFRyZWU7XG5cbiAgICBpZiAobmV4dFRyZWUgJiYgbmV4dFRyZWUuZGlydHlBdG9tcy5oYXMoa2V5KSkge1xuICAgICAgY2FsbGJhY2sobmV4dFRyZWUpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcmVsZWFzZTogKCkgPT4ge1xuICAgICAgY29uc3QgcmVsZWFzZVN0b3JlU3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICAgICAgY29uc3Qgc3VicyA9IHJlbGVhc2VTdG9yZVN0YXRlLm5vZGVUb0NvbXBvbmVudFN1YnNjcmlwdGlvbnMuZ2V0KGtleSk7XG5cbiAgICAgIGlmIChzdWJzID09PSB1bmRlZmluZWQgfHwgIXN1YnMuaGFzKHN1YklEKSkge1xuICAgICAgICBSZWNvaWxfcmVjb3ZlcmFibGVWaW9sYXRpb24oYFN1YnNjcmlwdGlvbiBtaXNzaW5nIGF0IHJlbGVhc2UgdGltZSBmb3IgYXRvbSAke2tleX0uIFRoaXMgaXMgYSBidWcgaW4gUmVjb2lsLmApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHN1YnMuZGVsZXRlKHN1YklEKTtcblxuICAgICAgaWYgKHN1YnMuc2l6ZSA9PT0gMCkge1xuICAgICAgICByZWxlYXNlU3RvcmVTdGF0ZS5ub2RlVG9Db21wb25lbnRTdWJzY3JpcHRpb25zLmRlbGV0ZShrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gcmVmcmVzaFJlY29pbFZhbHVlKHN0b3JlLCByZWNvaWxWYWx1ZSkge1xuICB2YXIgX25vZGUkY2xlYXJDYWNoZTtcblxuICBjb25zdCB7XG4gICAgY3VycmVudFRyZWVcbiAgfSA9IHN0b3JlLmdldFN0YXRlKCk7XG4gIGNvbnN0IG5vZGUgPSBnZXROb2RlJDIocmVjb2lsVmFsdWUua2V5KTtcbiAgKF9ub2RlJGNsZWFyQ2FjaGUgPSBub2RlLmNsZWFyQ2FjaGUpID09PSBudWxsIHx8IF9ub2RlJGNsZWFyQ2FjaGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9ub2RlJGNsZWFyQ2FjaGUuY2FsbChub2RlLCBzdG9yZSwgY3VycmVudFRyZWUpO1xufVxuXG52YXIgUmVjb2lsX1JlY29pbFZhbHVlSW50ZXJmYWNlID0ge1xuICBSZWNvaWxWYWx1ZVJlYWRPbmx5OiBSZWNvaWxWYWx1ZVJlYWRPbmx5JDEsXG4gIEFic3RyYWN0UmVjb2lsVmFsdWU6IEFic3RyYWN0UmVjb2lsVmFsdWUkMSxcbiAgUmVjb2lsU3RhdGU6IFJlY29pbFN0YXRlJDEsXG4gIGdldFJlY29pbFZhbHVlQXNMb2FkYWJsZSxcbiAgc2V0UmVjb2lsVmFsdWUsXG4gIHNldFJlY29pbFZhbHVlTG9hZGFibGUsXG4gIG1hcmtSZWNvaWxWYWx1ZU1vZGlmaWVkLFxuICBzZXRVbnZhbGlkYXRlZFJlY29pbFZhbHVlLFxuICBzdWJzY3JpYmVUb1JlY29pbFZhbHVlLFxuICBpc1JlY29pbFZhbHVlOiBpc1JlY29pbFZhbHVlJDEsXG4gIGFwcGx5QXRvbVZhbHVlV3JpdGVzLFxuICAvLyBUT0RPIFJlbW92ZSBleHBvcnQgd2hlbiBkZXByZWNhdGluZyBpbml0aWFsU3RvcmVTdGF0ZV9ERVBSRUNBVEVEIGluIFJlY29pbFJvb3RcbiAgYmF0Y2hTdGFydCxcbiAgd3JpdGVMb2FkYWJsZVRvVHJlZVN0YXRlLFxuICBpbnZhbGlkYXRlRG93bnN0cmVhbXMsXG4gIGNvcHlUcmVlU3RhdGUsXG4gIHJlZnJlc2hSZWNvaWxWYWx1ZVxufTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqIEBvbmNhbGwgcmVjb2lsXG4gKi9cbi8qKlxuICogVGhlIHNvbWVTZXQoKSBtZXRob2QgdGVzdHMgd2hldGhlciBzb21lIGVsZW1lbnRzIGluIHRoZSBnaXZlbiBTZXQgcGFzcyB0aGVcbiAqIHRlc3QgaW1wbGVtZW50ZWQgYnkgdGhlIHByb3ZpZGVkIGZ1bmN0aW9uLlxuICovXG5cbmZ1bmN0aW9uIHNvbWVTZXQoc2V0LCBjYWxsYmFjaywgY29udGV4dCkge1xuICBjb25zdCBpdGVyYXRvciA9IHNldC5lbnRyaWVzKCk7XG4gIGxldCBjdXJyZW50ID0gaXRlcmF0b3IubmV4dCgpO1xuXG4gIHdoaWxlICghY3VycmVudC5kb25lKSB7XG4gICAgY29uc3QgZW50cnkgPSBjdXJyZW50LnZhbHVlO1xuXG4gICAgaWYgKGNhbGxiYWNrLmNhbGwoY29udGV4dCwgZW50cnlbMV0sIGVudHJ5WzBdLCBzZXQpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBjdXJyZW50ID0gaXRlcmF0b3IubmV4dCgpO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG52YXIgUmVjb2lsX3NvbWVTZXQgPSBzb21lU2V0O1xuXG5jb25zdCB7XG4gIGNsZWFuVXBOb2RlOiBjbGVhblVwTm9kZSQxXG59ID0gUmVjb2lsX0Z1bmN0aW9uYWxDb3JlO1xuXG5jb25zdCB7XG4gIGRlbGV0ZU5vZGVDb25maWdJZlBvc3NpYmxlOiBkZWxldGVOb2RlQ29uZmlnSWZQb3NzaWJsZSQxLFxuICBnZXROb2RlOiBnZXROb2RlJDNcbn0gPSBSZWNvaWxfTm9kZTtcblxuY29uc3Qge1xuICBSZXRlbnRpb25ab25lOiBSZXRlbnRpb25ab25lJDJcbn0gPSBSZWNvaWxfUmV0ZW50aW9uWm9uZTtcblxuXG5cblxuXG5cblxuIC8vIENvbXBvbmVudHMgdGhhdCBhcmVuJ3QgbW91bnRlZCBhZnRlciBzdXNwZW5kaW5nIGZvciB0aGlzIGxvbmcgd2lsbCBiZSBhc3N1bWVkXG4vLyB0byBiZSBkaXNjYXJkZWQgYW5kIHRoZWlyIHJlc291cmNlcyByZWxlYXNlZC5cblxuXG5jb25zdCBTVVNQRU5TRV9USU1FT1VUX01TID0gMTIwMDAwO1xuY29uc3QgZW1wdHlTZXQkMSA9IG5ldyBTZXQoKTtcblxuZnVuY3Rpb24gcmVsZWFzZVJldGFpbmFibGVzTm93T25DdXJyZW50VHJlZShzdG9yZSwgcmV0YWluYWJsZXMpIHtcbiAgY29uc3Qgc3RvcmVTdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG4gIGNvbnN0IHRyZWVTdGF0ZSA9IHN0b3JlU3RhdGUuY3VycmVudFRyZWU7XG5cbiAgaWYgKHN0b3JlU3RhdGUubmV4dFRyZWUpIHtcbiAgICBSZWNvaWxfcmVjb3ZlcmFibGVWaW9sYXRpb24oJ3JlbGVhc2VOb2Rlc05vd09uQ3VycmVudFRyZWUgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIGF0IHRoZSBlbmQgb2YgYSBiYXRjaCcpO1xuICAgIHJldHVybjsgLy8gbGVhayBtZW1vcnkgcmF0aGVyIHRoYW4gZXJhc2Ugc29tZXRoaW5nIHRoYXQncyBhYm91dCB0byBiZSB1c2VkLlxuICB9XG5cbiAgY29uc3Qgbm9kZXMgPSBuZXcgU2V0KCk7XG5cbiAgZm9yIChjb25zdCByIG9mIHJldGFpbmFibGVzKSB7XG4gICAgaWYgKHIgaW5zdGFuY2VvZiBSZXRlbnRpb25ab25lJDIpIHtcbiAgICAgIGZvciAoY29uc3QgbiBvZiBub2Rlc1JldGFpbmVkQnlab25lKHN0b3JlU3RhdGUsIHIpKSB7XG4gICAgICAgIG5vZGVzLmFkZChuKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZXMuYWRkKHIpO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHJlbGVhc2FibGVOb2RlcyA9IGZpbmRSZWxlYXNhYmxlTm9kZXMoc3RvcmUsIG5vZGVzKTtcblxuICBmb3IgKGNvbnN0IG5vZGUgb2YgcmVsZWFzYWJsZU5vZGVzKSB7XG4gICAgcmVsZWFzZU5vZGUoc3RvcmUsIHRyZWVTdGF0ZSwgbm9kZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZmluZFJlbGVhc2FibGVOb2RlcyhzdG9yZSwgc2VhcmNoRnJvbU5vZGVzKSB7XG4gIGNvbnN0IHN0b3JlU3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICBjb25zdCB0cmVlU3RhdGUgPSBzdG9yZVN0YXRlLmN1cnJlbnRUcmVlO1xuICBjb25zdCBncmFwaCA9IHN0b3JlLmdldEdyYXBoKHRyZWVTdGF0ZS52ZXJzaW9uKTtcbiAgY29uc3QgcmVsZWFzYWJsZU5vZGVzID0gbmV3IFNldCgpOyAvLyBtdXRhdGVkIHRvIGNvbGxlY3QgYW5zd2VyXG5cbiAgY29uc3Qgbm9uUmVsZWFzYWJsZU5vZGVzID0gbmV3IFNldCgpO1xuICBmaW5kUmVsZWFzYWJsZU5vZGVzSW5uZXIoc2VhcmNoRnJvbU5vZGVzKTtcbiAgcmV0dXJuIHJlbGVhc2FibGVOb2RlcztcblxuICBmdW5jdGlvbiBmaW5kUmVsZWFzYWJsZU5vZGVzSW5uZXIoc2VhcmNoRnJvbU5vZGVzKSB7XG4gICAgY29uc3QgcmVsZWFzYWJsZU5vZGVzRm91bmRUaGlzSXRlcmF0aW9uID0gbmV3IFNldCgpO1xuICAgIGNvbnN0IGRvd25zdHJlYW1zID0gZ2V0RG93bnN0cmVhbU5vZGVzSW5Ub3BvbG9naWNhbE9yZGVyKHN0b3JlLCB0cmVlU3RhdGUsIHNlYXJjaEZyb21Ob2RlcywgcmVsZWFzYWJsZU5vZGVzLCAvLyBkb24ndCBkZXNjZW5kIGludG8gdGhlc2VcbiAgICBub25SZWxlYXNhYmxlTm9kZXMgLy8gZG9uJ3QgZGVzY2VuZCBpbnRvIHRoZXNlXG4gICAgKTsgLy8gRmluZCB3aGljaCBvZiB0aGUgZG93bnN0cmVhbSBub2RlcyBhcmUgcmVsZWFzYWJsZSBhbmQgd2hpY2ggYXJlIG5vdDpcblxuICAgIGZvciAoY29uc3Qgbm9kZSBvZiBkb3duc3RyZWFtcykge1xuICAgICAgdmFyIF9zdG9yZVN0YXRlJHJldGVudGlvbjtcblxuICAgICAgLy8gTm90IHJlbGVhc2FibGUgaWYgY29uZmlndXJlZCB0byBiZSByZXRhaW5lZCBmb3JldmVyOlxuICAgICAgaWYgKGdldE5vZGUkMyhub2RlKS5yZXRhaW5lZEJ5ID09PSAncmVjb2lsUm9vdCcpIHtcbiAgICAgICAgbm9uUmVsZWFzYWJsZU5vZGVzLmFkZChub2RlKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9IC8vIE5vdCByZWxlYXNhYmxlIGlmIHJldGFpbmVkIGRpcmVjdGx5IGJ5IGEgY29tcG9uZW50OlxuXG5cbiAgICAgIGlmICgoKF9zdG9yZVN0YXRlJHJldGVudGlvbiA9IHN0b3JlU3RhdGUucmV0ZW50aW9uLnJlZmVyZW5jZUNvdW50cy5nZXQobm9kZSkpICE9PSBudWxsICYmIF9zdG9yZVN0YXRlJHJldGVudGlvbiAhPT0gdm9pZCAwID8gX3N0b3JlU3RhdGUkcmV0ZW50aW9uIDogMCkgPiAwKSB7XG4gICAgICAgIG5vblJlbGVhc2FibGVOb2Rlcy5hZGQobm9kZSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfSAvLyBOb3QgcmVsZWFzYWJsZSBpZiByZXRhaW5lZCBieSBhIHpvbmU6XG5cblxuICAgICAgaWYgKHpvbmVzVGhhdENvdWxkUmV0YWluTm9kZShub2RlKS5zb21lKHogPT4gc3RvcmVTdGF0ZS5yZXRlbnRpb24ucmVmZXJlbmNlQ291bnRzLmdldCh6KSkpIHtcbiAgICAgICAgbm9uUmVsZWFzYWJsZU5vZGVzLmFkZChub2RlKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9IC8vIE5vdCByZWxlYXNhYmxlIGlmIGl0IGhhcyBhIG5vbi1yZWxlYXNhYmxlIGNoaWxkICh3aGljaCB3aWxsIGFscmVhZHkgYmUgaW5cbiAgICAgIC8vIG5vblJlbGVhc2FibGVOb2RlcyBiZWNhdXNlIHdlIGFyZSBnb2luZyBpbiB0b3BvbG9naWNhbCBvcmRlcik6XG5cblxuICAgICAgY29uc3Qgbm9kZUNoaWxkcmVuID0gZ3JhcGgubm9kZVRvTm9kZVN1YnNjcmlwdGlvbnMuZ2V0KG5vZGUpO1xuXG4gICAgICBpZiAobm9kZUNoaWxkcmVuICYmIFJlY29pbF9zb21lU2V0KG5vZGVDaGlsZHJlbiwgY2hpbGQgPT4gbm9uUmVsZWFzYWJsZU5vZGVzLmhhcyhjaGlsZCkpKSB7XG4gICAgICAgIG5vblJlbGVhc2FibGVOb2Rlcy5hZGQobm9kZSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICByZWxlYXNhYmxlTm9kZXMuYWRkKG5vZGUpO1xuICAgICAgcmVsZWFzYWJsZU5vZGVzRm91bmRUaGlzSXRlcmF0aW9uLmFkZChub2RlKTtcbiAgICB9IC8vIElmIHdlIGZvdW5kIGFueSByZWxlYXNhYmxlIG5vZGVzLCB3ZSBuZWVkIHRvIHdhbGsgVVAgZnJvbSB0aG9zZSBub2RlcyB0b1xuICAgIC8vIGZpbmQgd2hldGhlciB0aGVpciBwYXJlbnRzIGNhbiBub3cgYmUgcmVsZWFzZWQgYXMgd2VsbDpcblxuXG4gICAgY29uc3QgcGFyZW50cyA9IG5ldyBTZXQoKTtcblxuICAgIGZvciAoY29uc3Qgbm9kZSBvZiByZWxlYXNhYmxlTm9kZXNGb3VuZFRoaXNJdGVyYXRpb24pIHtcbiAgICAgIGZvciAoY29uc3QgcGFyZW50IG9mIChfZ3JhcGgkbm9kZURlcHMkZ2V0ID0gZ3JhcGgubm9kZURlcHMuZ2V0KG5vZGUpKSAhPT0gbnVsbCAmJiBfZ3JhcGgkbm9kZURlcHMkZ2V0ICE9PSB2b2lkIDAgPyBfZ3JhcGgkbm9kZURlcHMkZ2V0IDogZW1wdHlTZXQkMSkge1xuICAgICAgICB2YXIgX2dyYXBoJG5vZGVEZXBzJGdldDtcblxuICAgICAgICBpZiAoIXJlbGVhc2FibGVOb2Rlcy5oYXMocGFyZW50KSkge1xuICAgICAgICAgIHBhcmVudHMuYWRkKHBhcmVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocGFyZW50cy5zaXplKSB7XG4gICAgICBmaW5kUmVsZWFzYWJsZU5vZGVzSW5uZXIocGFyZW50cyk7XG4gICAgfVxuICB9XG59IC8vIENoaWxkcmVuIGJlZm9yZSBwYXJlbnRzXG5cblxuZnVuY3Rpb24gZ2V0RG93bnN0cmVhbU5vZGVzSW5Ub3BvbG9naWNhbE9yZGVyKHN0b3JlLCB0cmVlU3RhdGUsIG5vZGVzLCAvLyBNdXRhYmxlIHNldCBpcyBkZXN0cm95ZWQgaW4gcGxhY2VcbmRvTm90RGVzY2VuZEludG8xLCBkb05vdERlc2NlbmRJbnRvMikge1xuICBjb25zdCBncmFwaCA9IHN0b3JlLmdldEdyYXBoKHRyZWVTdGF0ZS52ZXJzaW9uKTtcbiAgY29uc3QgYW5zd2VyID0gW107XG4gIGNvbnN0IHZpc2l0ZWQgPSBuZXcgU2V0KCk7XG5cbiAgd2hpbGUgKG5vZGVzLnNpemUgPiAwKSB7XG4gICAgdmlzaXQoUmVjb2lsX251bGx0aHJvd3Mobm9kZXMudmFsdWVzKCkubmV4dCgpLnZhbHVlKSk7XG4gIH1cblxuICByZXR1cm4gYW5zd2VyO1xuXG4gIGZ1bmN0aW9uIHZpc2l0KG5vZGUpIHtcbiAgICBpZiAoZG9Ob3REZXNjZW5kSW50bzEuaGFzKG5vZGUpIHx8IGRvTm90RGVzY2VuZEludG8yLmhhcyhub2RlKSkge1xuICAgICAgbm9kZXMuZGVsZXRlKG5vZGUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh2aXNpdGVkLmhhcyhub2RlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGNoaWxkcmVuID0gZ3JhcGgubm9kZVRvTm9kZVN1YnNjcmlwdGlvbnMuZ2V0KG5vZGUpO1xuXG4gICAgaWYgKGNoaWxkcmVuKSB7XG4gICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIGNoaWxkcmVuKSB7XG4gICAgICAgIHZpc2l0KGNoaWxkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2aXNpdGVkLmFkZChub2RlKTtcbiAgICBub2Rlcy5kZWxldGUobm9kZSk7XG4gICAgYW5zd2VyLnB1c2gobm9kZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVsZWFzZU5vZGUoc3RvcmUsIHRyZWVTdGF0ZSwgbm9kZSkge1xuICBpZiAoIVJlY29pbF9na3goJ3JlY29pbF9tZW1vcnlfbWFuYWdhbWVudF8yMDIwJykpIHtcbiAgICByZXR1cm47XG4gIH0gLy8gQXRvbSBlZmZlY3RzLCBpbi1jbG9zdXJlIGNhY2hlcywgZXRjLjpcblxuXG4gIGNsZWFuVXBOb2RlJDEoc3RvcmUsIG5vZGUpOyAvLyBEZWxldGUgZnJvbSBzdG9yZSBzdGF0ZTpcblxuICBjb25zdCBzdG9yZVN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgc3RvcmVTdGF0ZS5rbm93bkF0b21zLmRlbGV0ZShub2RlKTtcbiAgc3RvcmVTdGF0ZS5rbm93blNlbGVjdG9ycy5kZWxldGUobm9kZSk7XG4gIHN0b3JlU3RhdGUubm9kZVRyYW5zYWN0aW9uU3Vic2NyaXB0aW9ucy5kZWxldGUobm9kZSk7XG4gIHN0b3JlU3RhdGUucmV0ZW50aW9uLnJlZmVyZW5jZUNvdW50cy5kZWxldGUobm9kZSk7XG4gIGNvbnN0IHpvbmVzID0gem9uZXNUaGF0Q291bGRSZXRhaW5Ob2RlKG5vZGUpO1xuXG4gIGZvciAoY29uc3Qgem9uZSBvZiB6b25lcykge1xuICAgIHZhciBfc3RvcmVTdGF0ZSRyZXRlbnRpb24yO1xuXG4gICAgKF9zdG9yZVN0YXRlJHJldGVudGlvbjIgPSBzdG9yZVN0YXRlLnJldGVudGlvbi5ub2Rlc1JldGFpbmVkQnlab25lLmdldCh6b25lKSkgPT09IG51bGwgfHwgX3N0b3JlU3RhdGUkcmV0ZW50aW9uMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3N0b3JlU3RhdGUkcmV0ZW50aW9uMi5kZWxldGUobm9kZSk7XG4gIH0gLy8gTm90ZSB0aGF0IHdlIERPIE5PVCBkZWxldGUgZnJvbSBub2RlVG9Db21wb25lbnRTdWJzY3JpcHRpb25zIGJlY2F1c2UgdGhpc1xuICAvLyBhbHJlYWR5IGhhcHBlbnMgd2hlbiB0aGUgbGFzdCBjb21wb25lbnQgdGhhdCB3YXMgcmV0YWluaW5nIHRoZSBub2RlIHVubW91bnRzLFxuICAvLyBhbmQgdGhpcyBjb3VsZCBoYXBwZW4gZWl0aGVyIGJlZm9yZSBvciBhZnRlciB0aGF0LlxuICAvLyBEZWxldGUgZnJvbSBUcmVlU3RhdGUgYW5kIGRlcCBncmFwaDpcblxuXG4gIHRyZWVTdGF0ZS5hdG9tVmFsdWVzLmRlbGV0ZShub2RlKTtcbiAgdHJlZVN0YXRlLmRpcnR5QXRvbXMuZGVsZXRlKG5vZGUpO1xuICB0cmVlU3RhdGUubm9udmFsaWRhdGVkQXRvbXMuZGVsZXRlKG5vZGUpO1xuICBjb25zdCBncmFwaCA9IHN0b3JlU3RhdGUuZ3JhcGhzQnlWZXJzaW9uLmdldCh0cmVlU3RhdGUudmVyc2lvbik7XG5cbiAgaWYgKGdyYXBoKSB7XG4gICAgY29uc3QgZGVwcyA9IGdyYXBoLm5vZGVEZXBzLmdldChub2RlKTtcblxuICAgIGlmIChkZXBzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGdyYXBoLm5vZGVEZXBzLmRlbGV0ZShub2RlKTtcblxuICAgICAgZm9yIChjb25zdCBkZXAgb2YgZGVwcykge1xuICAgICAgICB2YXIgX2dyYXBoJG5vZGVUb05vZGVTdWJzO1xuXG4gICAgICAgIChfZ3JhcGgkbm9kZVRvTm9kZVN1YnMgPSBncmFwaC5ub2RlVG9Ob2RlU3Vic2NyaXB0aW9ucy5nZXQoZGVwKSkgPT09IG51bGwgfHwgX2dyYXBoJG5vZGVUb05vZGVTdWJzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZ3JhcGgkbm9kZVRvTm9kZVN1YnMuZGVsZXRlKG5vZGUpO1xuICAgICAgfVxuICAgIH0gLy8gTm8gbmVlZCB0byBkZWxldGUgc3ViJ3MgZGVwcyBhcyB0aGVyZSBzaG91bGQgYmUgbm8gc3VicyBhdCB0aGlzIHBvaW50LlxuICAgIC8vIEJ1dCBhbiBpbnZhcmlhbnQgd291bGQgcmVxdWlyZSBkZWxldGluZyBub2RlcyBpbiB0b3BvbG9naWNhbCBvcmRlci5cblxuXG4gICAgZ3JhcGgubm9kZVRvTm9kZVN1YnNjcmlwdGlvbnMuZGVsZXRlKG5vZGUpO1xuICB9IC8vIE5vZGUgY29uZmlnIChmb3IgZmFtaWx5IG1lbWJlcnMgb25seSBhcyB0aGVpciBjb25maWdzIGNhbiBiZSByZWNyZWF0ZWQsIGFuZFxuICAvLyBvbmx5IGlmIHRoZXkgYXJlIG5vdCByZXRhaW5lZCB3aXRoaW4gYW55IG90aGVyIFN0b3Jlcyk6XG5cblxuICBkZWxldGVOb2RlQ29uZmlnSWZQb3NzaWJsZSQxKG5vZGUpO1xufVxuXG5mdW5jdGlvbiBub2Rlc1JldGFpbmVkQnlab25lKHN0b3JlU3RhdGUsIHpvbmUpIHtcbiAgdmFyIF9zdG9yZVN0YXRlJHJldGVudGlvbjM7XG5cbiAgcmV0dXJuIChfc3RvcmVTdGF0ZSRyZXRlbnRpb24zID0gc3RvcmVTdGF0ZS5yZXRlbnRpb24ubm9kZXNSZXRhaW5lZEJ5Wm9uZS5nZXQoem9uZSkpICE9PSBudWxsICYmIF9zdG9yZVN0YXRlJHJldGVudGlvbjMgIT09IHZvaWQgMCA/IF9zdG9yZVN0YXRlJHJldGVudGlvbjMgOiBlbXB0eVNldCQxO1xufVxuXG5mdW5jdGlvbiB6b25lc1RoYXRDb3VsZFJldGFpbk5vZGUobm9kZSkge1xuICBjb25zdCByZXRhaW5lZEJ5ID0gZ2V0Tm9kZSQzKG5vZGUpLnJldGFpbmVkQnk7XG5cbiAgaWYgKHJldGFpbmVkQnkgPT09IHVuZGVmaW5lZCB8fCByZXRhaW5lZEJ5ID09PSAnY29tcG9uZW50cycgfHwgcmV0YWluZWRCeSA9PT0gJ3JlY29pbFJvb3QnKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9IGVsc2UgaWYgKHJldGFpbmVkQnkgaW5zdGFuY2VvZiBSZXRlbnRpb25ab25lJDIpIHtcbiAgICByZXR1cm4gW3JldGFpbmVkQnldO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiByZXRhaW5lZEJ5OyAvLyBpdCdzIGFuIGFycmF5IG9mIHpvbmVzXG4gIH1cbn1cblxuZnVuY3Rpb24gc2NoZWR1bGVPclBlcmZvcm1Qb3NzaWJsZVJlbGVhc2VPZlJldGFpbmFibGUoc3RvcmUsIHJldGFpbmFibGUpIHtcbiAgY29uc3Qgc3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuXG4gIGlmIChzdGF0ZS5uZXh0VHJlZSkge1xuICAgIHN0YXRlLnJldGVudGlvbi5yZXRhaW5hYmxlc1RvQ2hlY2tGb3JSZWxlYXNlLmFkZChyZXRhaW5hYmxlKTtcbiAgfSBlbHNlIHtcbiAgICByZWxlYXNlUmV0YWluYWJsZXNOb3dPbkN1cnJlbnRUcmVlKHN0b3JlLCBuZXcgU2V0KFtyZXRhaW5hYmxlXSkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVJldGFpbkNvdW50KHN0b3JlLCByZXRhaW5hYmxlLCBkZWx0YSkge1xuICB2YXIgX21hcCRnZXQ7XG5cbiAgaWYgKCFSZWNvaWxfZ2t4KCdyZWNvaWxfbWVtb3J5X21hbmFnYW1lbnRfMjAyMCcpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgbWFwID0gc3RvcmUuZ2V0U3RhdGUoKS5yZXRlbnRpb24ucmVmZXJlbmNlQ291bnRzO1xuICBjb25zdCBuZXdDb3VudCA9ICgoX21hcCRnZXQgPSBtYXAuZ2V0KHJldGFpbmFibGUpKSAhPT0gbnVsbCAmJiBfbWFwJGdldCAhPT0gdm9pZCAwID8gX21hcCRnZXQgOiAwKSArIGRlbHRhO1xuXG4gIGlmIChuZXdDb3VudCA9PT0gMCkge1xuICAgIHVwZGF0ZVJldGFpbkNvdW50VG9aZXJvKHN0b3JlLCByZXRhaW5hYmxlKTtcbiAgfSBlbHNlIHtcbiAgICBtYXAuc2V0KHJldGFpbmFibGUsIG5ld0NvdW50KTtcbiAgfVxufVxuXG5mdW5jdGlvbiB1cGRhdGVSZXRhaW5Db3VudFRvWmVybyhzdG9yZSwgcmV0YWluYWJsZSkge1xuICBpZiAoIVJlY29pbF9na3goJ3JlY29pbF9tZW1vcnlfbWFuYWdhbWVudF8yMDIwJykpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBtYXAgPSBzdG9yZS5nZXRTdGF0ZSgpLnJldGVudGlvbi5yZWZlcmVuY2VDb3VudHM7XG4gIG1hcC5kZWxldGUocmV0YWluYWJsZSk7XG4gIHNjaGVkdWxlT3JQZXJmb3JtUG9zc2libGVSZWxlYXNlT2ZSZXRhaW5hYmxlKHN0b3JlLCByZXRhaW5hYmxlKTtcbn1cblxuZnVuY3Rpb24gcmVsZWFzZVNjaGVkdWxlZFJldGFpbmFibGVzTm93KHN0b3JlKSB7XG4gIGlmICghUmVjb2lsX2dreCgncmVjb2lsX21lbW9yeV9tYW5hZ2FtZW50XzIwMjAnKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgcmVsZWFzZVJldGFpbmFibGVzTm93T25DdXJyZW50VHJlZShzdG9yZSwgc3RhdGUucmV0ZW50aW9uLnJldGFpbmFibGVzVG9DaGVja0ZvclJlbGVhc2UpO1xuICBzdGF0ZS5yZXRlbnRpb24ucmV0YWluYWJsZXNUb0NoZWNrRm9yUmVsZWFzZS5jbGVhcigpO1xufVxuXG5mdW5jdGlvbiByZXRhaW5lZEJ5T3B0aW9uV2l0aERlZmF1bHQocikge1xuICAvLyBUaGUgZGVmYXVsdCB3aWxsIGNoYW5nZSBmcm9tICdyZWNvaWxSb290JyB0byAnY29tcG9uZW50cycgaW4gdGhlIGZ1dHVyZS5cbiAgcmV0dXJuIHIgPT09IHVuZGVmaW5lZCA/ICdyZWNvaWxSb290JyA6IHI7XG59XG5cbnZhciBSZWNvaWxfUmV0ZW50aW9uID0ge1xuICBTVVNQRU5TRV9USU1FT1VUX01TLFxuICB1cGRhdGVSZXRhaW5Db3VudCxcbiAgdXBkYXRlUmV0YWluQ291bnRUb1plcm8sXG4gIHJlbGVhc2VTY2hlZHVsZWRSZXRhaW5hYmxlc05vdyxcbiAgcmV0YWluZWRCeU9wdGlvbldpdGhEZWZhdWx0XG59O1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogVGhpcyBpcyB0byBleHBvcnQgZXNzdGllbnRpYWwgZnVuY3Rpb25zIGZyb20gcmVhY3QtZG9tXG4gKiBmb3Igb3VyIHdlYiBidWlsZFxuICpcbiAqIFxuICogQGZvcm1hdFxuICogQG9uY2FsbCByZWNvaWxcbiAqL1xuY29uc3Qge1xuICB1bnN0YWJsZV9iYXRjaGVkVXBkYXRlc1xufSA9IHJlYWN0RG9tO1xuXG52YXIgUmVhY3RCYXRjaGVkVXBkYXRlcyA9IHtcbiAgdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXNcbn07XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogVGhpcyBpcyB0byBleHBvcnQgZXNzdGllbnRpYWwgZnVuY3Rpb25zIGZyb20gcmVhY3QtZG9tXG4gKiBmb3Igb3VyIHdlYiBidWlsZFxuICpcbiAqIFxuICogQGZvcm1hdFxuICogQG9uY2FsbCByZWNvaWxcbiAqL1xuLy8gQGZiLW9ubHk6IGNvbnN0IHt1bnN0YWJsZV9iYXRjaGVkVXBkYXRlc30gPSByZXF1aXJlKCdSZWFjdERPTUNvbWV0Jyk7XG4vLyBwcmV0dGllci1pZ25vcmVcbmNvbnN0IHtcbiAgdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM6IHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzJDFcbn0gPSBSZWFjdEJhdGNoZWRVcGRhdGVzOyAvLyBAb3NzLW9ubHlcblxuXG52YXIgUmVjb2lsX1JlYWN0QmF0Y2hlZFVwZGF0ZXMgPSB7XG4gIHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzOiB1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyQxXG59O1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICogQG9uY2FsbCByZWNvaWxcbiAqL1xuY29uc3Qge1xuICBiYXRjaFN0YXJ0OiBiYXRjaFN0YXJ0JDFcbn0gPSBSZWNvaWxfUmVjb2lsVmFsdWVJbnRlcmZhY2U7XG5cbmNvbnN0IHtcbiAgdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM6IHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzJDJcbn0gPSBSZWNvaWxfUmVhY3RCYXRjaGVkVXBkYXRlcztcblxubGV0IGJhdGNoZXIgPSB1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyQyOyAvLyBmbG93bGludC1uZXh0LWxpbmUgdW5jbGVhci10eXBlOm9mZlxuXG4vKipcbiAqIFNldHMgdGhlIHByb3ZpZGVkIGJhdGNoZXIgZnVuY3Rpb24gYXMgdGhlIGJhdGNoZXIgZnVuY3Rpb24gdXNlZCBieSBSZWNvaWwuXG4gKlxuICogU2V0IHRoZSBiYXRjaGVyIHRvIGEgY3VzdG9tIGJhdGNoZXIgZm9yIHlvdXIgcmVuZGVyZXIsXG4gKiBpZiB5b3UgdXNlIGEgcmVuZGVyZXIgb3RoZXIgdGhhbiBSZWFjdCBET00gb3IgUmVhY3QgTmF0aXZlLlxuICovXG5jb25zdCBzZXRCYXRjaGVyID0gbmV3QmF0Y2hlciA9PiB7XG4gIGJhdGNoZXIgPSBuZXdCYXRjaGVyO1xufTtcbi8qKlxuICogUmV0dXJucyB0aGUgY3VycmVudCBiYXRjaGVyIGZ1bmN0aW9uLlxuICovXG5cblxuY29uc3QgZ2V0QmF0Y2hlciA9ICgpID0+IGJhdGNoZXI7XG4vKipcbiAqIENhbGxzIHRoZSBjdXJyZW50IGJhdGNoZXIgZnVuY3Rpb24gYW5kIHBhc3NlcyB0aGVcbiAqIHByb3ZpZGVkIGNhbGxiYWNrIGZ1bmN0aW9uLlxuICovXG5cblxuY29uc3QgYmF0Y2hVcGRhdGVzID0gY2FsbGJhY2sgPT4ge1xuICBiYXRjaGVyKCgpID0+IHtcbiAgICBsZXQgYmF0Y2hFbmQgPSAoKSA9PiB1bmRlZmluZWQ7XG5cbiAgICB0cnkge1xuICAgICAgYmF0Y2hFbmQgPSBiYXRjaFN0YXJ0JDEoKTtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGJhdGNoRW5kKCk7XG4gICAgfVxuICB9KTtcbn07XG5cbnZhciBSZWNvaWxfQmF0Y2hpbmcgPSB7XG4gIGdldEJhdGNoZXIsXG4gIHNldEJhdGNoZXIsXG4gIGJhdGNoVXBkYXRlc1xufTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqIEBvbmNhbGwgcmVjb2lsXG4gKi9cbi8qKlxuICogQ29tYmluZXMgbXVsdGlwbGUgSXRlcmFibGVzIGludG8gYSBzaW5nbGUgSXRlcmFibGUuXG4gKiBUcmF2ZXJzZXMgdGhlIGlucHV0IEl0ZXJhYmxlcyBpbiB0aGUgb3JkZXIgcHJvdmlkZWQgYW5kIG1haW50YWlucyB0aGUgb3JkZXJcbiAqIG9mIHRoZWlyIGVsZW1lbnRzLlxuICpcbiAqIEV4YW1wbGU6XG4gKiBgYGBcbiAqIGNvbnN0IHIgPSBBcnJheS5mcm9tKGNvbmNhdEl0ZXJhYmxlcyhbJ2EnLCAnYiddLCBbJ2MnXSwgWydkJywgJ2UnLCAnZiddKSk7XG4gKiByID09IFsnYScsICdiJywgJ2MnLCAnZCcsICdlJywgJ2YnXTtcbiAqIGBgYFxuICovXG5cbmZ1bmN0aW9uKiBjb25jYXRJdGVyYWJsZXMoaXRlcnMpIHtcbiAgZm9yIChjb25zdCBpdGVyIG9mIGl0ZXJzKSB7XG4gICAgZm9yIChjb25zdCB2YWwgb2YgaXRlcikge1xuICAgICAgeWllbGQgdmFsO1xuICAgIH1cbiAgfVxufVxuXG52YXIgUmVjb2lsX2NvbmNhdEl0ZXJhYmxlcyA9IGNvbmNhdEl0ZXJhYmxlcztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqIEBvbmNhbGwgcmVjb2lsXG4gKi9cbi8qIGVzbGludC1kaXNhYmxlIGZiLXd3dy90eXBlb2YtdW5kZWZpbmVkICovXG5cbmNvbnN0IGlzU1NSID0gLy8gJEZsb3dGaXhNZShzaXRlPXJlY29pbCkgV2luZG93IGRvZXMgbm90IGhhdmUgYSBGbG93VHlwZSBkZWZpbml0aW9uIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mbG93L2lzc3Vlcy82NzA5XG50eXBlb2YgV2luZG93ID09PSAndW5kZWZpbmVkJyB8fCB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJztcbi8qIGVzbGludC1lbmFibGUgZmItd3d3L3R5cGVvZi11bmRlZmluZWQgKi9cblxuY29uc3QgaXNXaW5kb3cgPSB2YWx1ZSA9PiAhaXNTU1IgJiYgKCAvLyAkRmxvd0ZpeE1lKHNpdGU9cmVjb2lsKSBXaW5kb3cgZG9lcyBub3QgaGF2ZSBhIEZsb3dUeXBlIGRlZmluaXRpb24gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2Zsb3cvaXNzdWVzLzY3MDlcbnZhbHVlID09PSB3aW5kb3cgfHwgdmFsdWUgaW5zdGFuY2VvZiBXaW5kb3cpO1xuXG5jb25zdCBpc1JlYWN0TmF0aXZlID0gdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdSZWFjdE5hdGl2ZSc7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZmItd3d3L3R5cGVvZi11bmRlZmluZWRcblxudmFyIFJlY29pbF9FbnZpcm9ubWVudCA9IHtcbiAgaXNTU1IsXG4gIGlzUmVhY3ROYXRpdmUsXG4gIGlzV2luZG93XG59O1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICogQG9uY2FsbCByZWNvaWxcbiAqL1xuLyoqXG4gKiBDYWNoZXMgYSBmdW5jdGlvbidzIHJlc3VsdHMgYmFzZWQgb24gdGhlIGtleSByZXR1cm5lZCBieSB0aGUgcGFzc2VkXG4gKiBoYXNoRnVuY3Rpb24uXG4gKi9cblxuZnVuY3Rpb24gbWVtb2l6ZVdpdGhBcmdzSGFzaChmbiwgaGFzaEZ1bmN0aW9uKSB7XG4gIGxldCBjYWNoZTtcblxuICBjb25zdCBtZW1vaXplZEZuID0gKC4uLmFyZ3MpID0+IHtcbiAgICBpZiAoIWNhY2hlKSB7XG4gICAgICBjYWNoZSA9IHt9O1xuICAgIH1cblxuICAgIGNvbnN0IGtleSA9IGhhc2hGdW5jdGlvbiguLi5hcmdzKTtcblxuICAgIGlmICghT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoY2FjaGUsIGtleSkpIHtcbiAgICAgIGNhY2hlW2tleV0gPSBmbiguLi5hcmdzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2FjaGVba2V5XTtcbiAgfTtcblxuICByZXR1cm4gbWVtb2l6ZWRGbjtcbn1cbi8qKlxuICogQ2FjaGVzIGEgZnVuY3Rpb24ncyByZXN1bHRzIGJhc2VkIG9uIGEgY29tcGFyaXNvbiBvZiB0aGUgYXJndW1lbnRzLlxuICogT25seSBjYWNoZXMgdGhlIGxhc3QgcmV0dXJuIG9mIHRoZSBmdW5jdGlvbi5cbiAqIERlZmF1bHRzIHRvIHJlZmVyZW5jZSBlcXVhbGl0eVxuICovXG5cblxuZnVuY3Rpb24gbWVtb2l6ZU9uZVdpdGhBcmdzSGFzaChmbiwgaGFzaEZ1bmN0aW9uKSB7XG4gIGxldCBsYXN0S2V5O1xuICBsZXQgbGFzdFJlc3VsdDsgLy8gYnJlYWtpbmcgY2FjaGUgd2hlbiBhcmd1bWVudHMgY2hhbmdlXG5cbiAgY29uc3QgbWVtb2l6ZWRGbiA9ICguLi5hcmdzKSA9PiB7XG4gICAgY29uc3Qga2V5ID0gaGFzaEZ1bmN0aW9uKC4uLmFyZ3MpO1xuXG4gICAgaWYgKGxhc3RLZXkgPT09IGtleSkge1xuICAgICAgcmV0dXJuIGxhc3RSZXN1bHQ7XG4gICAgfVxuXG4gICAgbGFzdEtleSA9IGtleTtcbiAgICBsYXN0UmVzdWx0ID0gZm4oLi4uYXJncyk7XG4gICAgcmV0dXJuIGxhc3RSZXN1bHQ7XG4gIH07XG5cbiAgcmV0dXJuIG1lbW9pemVkRm47XG59XG4vKipcbiAqIENhY2hlcyBhIGZ1bmN0aW9uJ3MgcmVzdWx0cyBiYXNlZCBvbiBhIGNvbXBhcmlzb24gb2YgdGhlIGFyZ3VtZW50cy5cbiAqIE9ubHkgY2FjaGVzIHRoZSBsYXN0IHJldHVybiBvZiB0aGUgZnVuY3Rpb24uXG4gKiBEZWZhdWx0cyB0byByZWZlcmVuY2UgZXF1YWxpdHlcbiAqL1xuXG5cbmZ1bmN0aW9uIG1lbW9pemVPbmVXaXRoQXJnc0hhc2hBbmRJbnZhbGlkYXRpb24oZm4sIGhhc2hGdW5jdGlvbikge1xuICBsZXQgbGFzdEtleTtcbiAgbGV0IGxhc3RSZXN1bHQ7IC8vIGJyZWFraW5nIGNhY2hlIHdoZW4gYXJndW1lbnRzIGNoYW5nZVxuXG4gIGNvbnN0IG1lbW9pemVkRm4gPSAoLi4uYXJncykgPT4ge1xuICAgIGNvbnN0IGtleSA9IGhhc2hGdW5jdGlvbiguLi5hcmdzKTtcblxuICAgIGlmIChsYXN0S2V5ID09PSBrZXkpIHtcbiAgICAgIHJldHVybiBsYXN0UmVzdWx0O1xuICAgIH1cblxuICAgIGxhc3RLZXkgPSBrZXk7XG4gICAgbGFzdFJlc3VsdCA9IGZuKC4uLmFyZ3MpO1xuICAgIHJldHVybiBsYXN0UmVzdWx0O1xuICB9O1xuXG4gIGNvbnN0IGludmFsaWRhdGUgPSAoKSA9PiB7XG4gICAgbGFzdEtleSA9IG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIFttZW1vaXplZEZuLCBpbnZhbGlkYXRlXTtcbn1cblxudmFyIFJlY29pbF9NZW1vaXplID0ge1xuICBtZW1vaXplV2l0aEFyZ3NIYXNoLFxuICBtZW1vaXplT25lV2l0aEFyZ3NIYXNoLFxuICBtZW1vaXplT25lV2l0aEFyZ3NIYXNoQW5kSW52YWxpZGF0aW9uXG59O1xuXG5jb25zdCB7XG4gIGJhdGNoVXBkYXRlczogYmF0Y2hVcGRhdGVzJDFcbn0gPSBSZWNvaWxfQmF0Y2hpbmc7XG5cbmNvbnN0IHtcbiAgaW5pdGlhbGl6ZU5vZGU6IGluaXRpYWxpemVOb2RlJDEsXG4gIHBlZWtOb2RlSW5mbzogcGVla05vZGVJbmZvJDFcbn0gPSBSZWNvaWxfRnVuY3Rpb25hbENvcmU7XG5cbmNvbnN0IHtcbiAgZ3JhcGg6IGdyYXBoJDFcbn0gPSBSZWNvaWxfR3JhcGg7XG5cbmNvbnN0IHtcbiAgZ2V0TmV4dFN0b3JlSUQ6IGdldE5leHRTdG9yZUlEJDFcbn0gPSBSZWNvaWxfS2V5cztcblxuY29uc3Qge1xuICBERUZBVUxUX1ZBTFVFOiBERUZBVUxUX1ZBTFVFJDEsXG4gIHJlY29pbFZhbHVlczogcmVjb2lsVmFsdWVzJDEsXG4gIHJlY29pbFZhbHVlc0ZvcktleXM6IHJlY29pbFZhbHVlc0ZvcktleXMkMlxufSA9IFJlY29pbF9Ob2RlO1xuXG5jb25zdCB7XG4gIEFic3RyYWN0UmVjb2lsVmFsdWU6IEFic3RyYWN0UmVjb2lsVmFsdWUkMixcbiAgZ2V0UmVjb2lsVmFsdWVBc0xvYWRhYmxlOiBnZXRSZWNvaWxWYWx1ZUFzTG9hZGFibGUkMSxcbiAgc2V0UmVjb2lsVmFsdWU6IHNldFJlY29pbFZhbHVlJDEsXG4gIHNldFVudmFsaWRhdGVkUmVjb2lsVmFsdWU6IHNldFVudmFsaWRhdGVkUmVjb2lsVmFsdWUkMVxufSA9IFJlY29pbF9SZWNvaWxWYWx1ZUludGVyZmFjZTtcblxuY29uc3Qge1xuICB1cGRhdGVSZXRhaW5Db3VudDogdXBkYXRlUmV0YWluQ291bnQkMVxufSA9IFJlY29pbF9SZXRlbnRpb247XG5cbmNvbnN0IHtcbiAgc2V0SW52YWxpZGF0ZU1lbW9pemVkU25hcHNob3Q6IHNldEludmFsaWRhdGVNZW1vaXplZFNuYXBzaG90JDFcbn0gPSBSZWNvaWxfU25hcHNob3RDYWNoZTtcblxuY29uc3Qge1xuICBnZXROZXh0VHJlZVN0YXRlVmVyc2lvbjogZ2V0TmV4dFRyZWVTdGF0ZVZlcnNpb24kMixcbiAgbWFrZUVtcHR5U3RvcmVTdGF0ZTogbWFrZUVtcHR5U3RvcmVTdGF0ZSQxXG59ID0gUmVjb2lsX1N0YXRlO1xuXG5cblxuY29uc3Qge1xuICBpc1NTUjogaXNTU1IkMVxufSA9IFJlY29pbF9FbnZpcm9ubWVudDtcblxuXG5cblxuXG5cblxuXG5cbmNvbnN0IHtcbiAgbWVtb2l6ZU9uZVdpdGhBcmdzSGFzaEFuZEludmFsaWRhdGlvbjogbWVtb2l6ZU9uZVdpdGhBcmdzSGFzaEFuZEludmFsaWRhdGlvbiQxXG59ID0gUmVjb2lsX01lbW9pemU7XG5cblxuXG4gLy8gT3BhcXVlIGF0IHRoaXMgc3VyZmFjZSBiZWNhdXNlIGl0J3MgcGFydCBvZiB0aGUgcHVibGljIEFQSSBmcm9tIGhlcmUuXG5cblxuY29uc3QgcmV0YWluV2FybmluZyA9IGBcblJlY29pbCBTbmFwc2hvdHMgb25seSBsYXN0IGZvciB0aGUgZHVyYXRpb24gb2YgdGhlIGNhbGxiYWNrIHRoZXkgYXJlIHByb3ZpZGVkIHRvLiBUbyBrZWVwIGEgU25hcHNob3QgbG9uZ2VyLCBkbyB0aGlzOlxuXG4gIGNvbnN0IHJlbGVhc2UgPSBzbmFwc2hvdC5yZXRhaW4oKTtcbiAgdHJ5IHtcbiAgICBhd2FpdCBkb1NvbWV0aGluZ1dpdGhTbmFwc2hvdChzbmFwc2hvdCk7XG4gIH0gZmluYWxseSB7XG4gICAgcmVsZWFzZSgpO1xuICB9XG5cblRoaXMgaXMgY3VycmVudGx5IGEgREVWLW9ubHkgd2FybmluZyBidXQgd2lsbCBiZWNvbWUgYSB0aHJvd24gZXhjZXB0aW9uIGluIHRoZSBuZXh0IHJlbGVhc2Ugb2YgUmVjb2lsLlxuYDsgLy8gQSBcIlNuYXBzaG90XCIgaXMgXCJyZWFkLW9ubHlcIiBhbmQgY2FwdHVyZXMgYSBzcGVjaWZpYyBzZXQgb2YgdmFsdWVzIG9mIGF0b21zLlxuLy8gSG93ZXZlciwgdGhlIGRhdGEtZmxvdy1ncmFwaCBhbmQgc2VsZWN0b3IgdmFsdWVzIG1heSBldm9sdmUgYXMgc2VsZWN0b3Jcbi8vIGV2YWx1YXRpb24gZnVuY3Rpb25zIGFyZSBleGVjdXRlZCBhbmQgYXN5bmMgc2VsZWN0b3JzIHJlc29sdmUuXG5cbmNsYXNzIFNuYXBzaG90IHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZiLXd3dy9uby11bmluaXRpYWxpemVkLXByb3BlcnRpZXNcbiAgY29uc3RydWN0b3Ioc3RvcmVTdGF0ZSwgcGFyZW50U3RvcmVJRCkge1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIl9zdG9yZVwiLCB2b2lkIDApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiX3JlZkNvdW50XCIsIDEpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiZ2V0TG9hZGFibGVcIiwgcmVjb2lsVmFsdWUgPT4ge1xuICAgICAgdGhpcy5jaGVja1JlZkNvdW50X0lOVEVSTkFMKCk7XG4gICAgICByZXR1cm4gZ2V0UmVjb2lsVmFsdWVBc0xvYWRhYmxlJDEodGhpcy5fc3RvcmUsIHJlY29pbFZhbHVlKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImdldFByb21pc2VcIiwgcmVjb2lsVmFsdWUgPT4ge1xuICAgICAgdGhpcy5jaGVja1JlZkNvdW50X0lOVEVSTkFMKCk7XG4gICAgICByZXR1cm4gdGhpcy5nZXRMb2FkYWJsZShyZWNvaWxWYWx1ZSkudG9Qcm9taXNlKCk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJnZXROb2Rlc19VTlNUQUJMRVwiLCBvcHQgPT4ge1xuICAgICAgdGhpcy5jaGVja1JlZkNvdW50X0lOVEVSTkFMKCk7IC8vIFRPRE8gRGVhbCB3aXRoIG1vZGlmaWVkIHNlbGVjdG9yc1xuXG4gICAgICBpZiAoKG9wdCA9PT0gbnVsbCB8fCBvcHQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdC5pc01vZGlmaWVkKSA9PT0gdHJ1ZSkge1xuICAgICAgICBpZiAoKG9wdCA9PT0gbnVsbCB8fCBvcHQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdC5pc0luaXRpYWxpemVkKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMuX3N0b3JlLmdldFN0YXRlKCkuY3VycmVudFRyZWU7XG5cbiAgICAgICAgcmV0dXJuIHJlY29pbFZhbHVlc0ZvcktleXMkMihzdGF0ZS5kaXJ0eUF0b21zKTtcbiAgICAgIH1cblxuICAgICAgY29uc3Qga25vd25BdG9tcyA9IHRoaXMuX3N0b3JlLmdldFN0YXRlKCkua25vd25BdG9tcztcblxuICAgICAgY29uc3Qga25vd25TZWxlY3RvcnMgPSB0aGlzLl9zdG9yZS5nZXRTdGF0ZSgpLmtub3duU2VsZWN0b3JzO1xuXG4gICAgICByZXR1cm4gKG9wdCA9PT0gbnVsbCB8fCBvcHQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdC5pc0luaXRpYWxpemVkKSA9PSBudWxsID8gcmVjb2lsVmFsdWVzJDEudmFsdWVzKCkgOiBvcHQuaXNJbml0aWFsaXplZCA9PT0gdHJ1ZSA/IHJlY29pbFZhbHVlc0ZvcktleXMkMihSZWNvaWxfY29uY2F0SXRlcmFibGVzKFtrbm93bkF0b21zLCBrbm93blNlbGVjdG9yc10pKSA6IFJlY29pbF9maWx0ZXJJdGVyYWJsZShyZWNvaWxWYWx1ZXMkMS52YWx1ZXMoKSwgKHtcbiAgICAgICAga2V5XG4gICAgICB9KSA9PiAha25vd25BdG9tcy5oYXMoa2V5KSAmJiAha25vd25TZWxlY3RvcnMuaGFzKGtleSkpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiZ2V0SW5mb19VTlNUQUJMRVwiLCAoe1xuICAgICAga2V5XG4gICAgfSkgPT4ge1xuICAgICAgdGhpcy5jaGVja1JlZkNvdW50X0lOVEVSTkFMKCk7XG4gICAgICByZXR1cm4gcGVla05vZGVJbmZvJDEodGhpcy5fc3RvcmUsIHRoaXMuX3N0b3JlLmdldFN0YXRlKCkuY3VycmVudFRyZWUsIGtleSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJtYXBcIiwgbWFwcGVyID0+IHtcbiAgICAgIHRoaXMuY2hlY2tSZWZDb3VudF9JTlRFUk5BTCgpO1xuICAgICAgY29uc3QgbXV0YWJsZVNuYXBzaG90ID0gbmV3IE11dGFibGVTbmFwc2hvdCh0aGlzLCBiYXRjaFVwZGF0ZXMkMSk7XG4gICAgICBtYXBwZXIobXV0YWJsZVNuYXBzaG90KTsgLy8gaWYgcmVtb3ZpbmcgYmF0Y2hVcGRhdGVzIGZyb20gYHNldGAgYWRkIGl0IGhlcmVcblxuICAgICAgcmV0dXJuIG11dGFibGVTbmFwc2hvdDtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImFzeW5jTWFwXCIsIGFzeW5jIG1hcHBlciA9PiB7XG4gICAgICB0aGlzLmNoZWNrUmVmQ291bnRfSU5URVJOQUwoKTtcbiAgICAgIGNvbnN0IG11dGFibGVTbmFwc2hvdCA9IG5ldyBNdXRhYmxlU25hcHNob3QodGhpcywgYmF0Y2hVcGRhdGVzJDEpO1xuICAgICAgbXV0YWJsZVNuYXBzaG90LnJldGFpbigpOyAvLyBSZXRhaW4gbmV3IHNuYXBzaG90IGR1cmluZyBhc3luYyBtYXBwZXJcblxuICAgICAgYXdhaXQgbWFwcGVyKG11dGFibGVTbmFwc2hvdCk7IC8vIENvbnRpbnVlIHRvIHJldGFpbiB0aGUgbmV3IHNuYXBzaG90IGZvciB0aGUgdXNlciwgYnV0IGF1dG8tcmVsZWFzZSBpdFxuICAgICAgLy8gYWZ0ZXIgdGhlIG5leHQgdGljaywgdGhlIHNhbWUgYXMgYSBuZXcgc3luY2hyb25vdXMgc25hcHNob3QuXG5cbiAgICAgIG11dGFibGVTbmFwc2hvdC5hdXRvUmVsZWFzZV9JTlRFUk5BTCgpO1xuICAgICAgcmV0dXJuIG11dGFibGVTbmFwc2hvdDtcbiAgICB9KTtcblxuICAgIHRoaXMuX3N0b3JlID0ge1xuICAgICAgc3RvcmVJRDogZ2V0TmV4dFN0b3JlSUQkMSgpLFxuICAgICAgcGFyZW50U3RvcmVJRCxcbiAgICAgIGdldFN0YXRlOiAoKSA9PiBzdG9yZVN0YXRlLFxuICAgICAgcmVwbGFjZVN0YXRlOiByZXBsYWNlciA9PiB7XG4gICAgICAgIC8vIG5vIGJhdGNoaW5nLCBzbyBuZXh0VHJlZSBpcyBuZXZlciBhY3RpdmVcbiAgICAgICAgc3RvcmVTdGF0ZS5jdXJyZW50VHJlZSA9IHJlcGxhY2VyKHN0b3JlU3RhdGUuY3VycmVudFRyZWUpO1xuICAgICAgfSxcbiAgICAgIGdldEdyYXBoOiB2ZXJzaW9uID0+IHtcbiAgICAgICAgY29uc3QgZ3JhcGhzID0gc3RvcmVTdGF0ZS5ncmFwaHNCeVZlcnNpb247XG5cbiAgICAgICAgaWYgKGdyYXBocy5oYXModmVyc2lvbikpIHtcbiAgICAgICAgICByZXR1cm4gUmVjb2lsX251bGx0aHJvd3MoZ3JhcGhzLmdldCh2ZXJzaW9uKSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBuZXdHcmFwaCA9IGdyYXBoJDEoKTtcbiAgICAgICAgZ3JhcGhzLnNldCh2ZXJzaW9uLCBuZXdHcmFwaCk7XG4gICAgICAgIHJldHVybiBuZXdHcmFwaDtcbiAgICAgIH0sXG4gICAgICBzdWJzY3JpYmVUb1RyYW5zYWN0aW9uczogKCkgPT4gKHtcbiAgICAgICAgcmVsZWFzZTogKCkgPT4ge31cbiAgICAgIH0pLFxuICAgICAgYWRkVHJhbnNhY3Rpb25NZXRhZGF0YTogKCkgPT4ge1xuICAgICAgICB0aHJvdyBSZWNvaWxfZXJyKCdDYW5ub3Qgc3Vic2NyaWJlIHRvIFNuYXBzaG90cycpO1xuICAgICAgfVxuICAgIH07IC8vIEluaXRpYWxpemUgYW55IG5vZGVzIHRoYXQgYXJlIGxpdmUgaW4gdGhlIHBhcmVudCBzdG9yZSAocHJpbWFyaWx5IHNvIHRoYXRcbiAgICAvLyB0aGlzIHNuYXBzaG90IGdldHMgY291bnRlZCB0b3dhcmRzIHRoZSBub2RlJ3MgbGl2ZSBzdG9yZXMgY291bnQpLlxuICAgIC8vIFRPRE8gT3B0aW1pemUgdGhpcyB3aGVuIGNsb25pbmcgc25hcHNob3RzIGZvciBjYWxsYmFja3NcblxuICAgIGZvciAoY29uc3Qgbm9kZUtleSBvZiB0aGlzLl9zdG9yZS5nZXRTdGF0ZSgpLmtub3duQXRvbXMpIHtcbiAgICAgIGluaXRpYWxpemVOb2RlJDEodGhpcy5fc3RvcmUsIG5vZGVLZXksICdnZXQnKTtcbiAgICAgIHVwZGF0ZVJldGFpbkNvdW50JDEodGhpcy5fc3RvcmUsIG5vZGVLZXksIDEpO1xuICAgIH1cblxuICAgIHRoaXMuYXV0b1JlbGVhc2VfSU5URVJOQUwoKTtcbiAgfVxuXG4gIHJldGFpbigpIHtcbiAgICBpZiAodGhpcy5fcmVmQ291bnQgPD0gMCkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICB0aHJvdyBSZWNvaWxfZXJyKCdTbmFwc2hvdCBoYXMgYWxyZWFkeSBiZWVuIHJlbGVhc2VkLicpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgUmVjb2lsX3JlY292ZXJhYmxlVmlvbGF0aW9uKCdBdHRlbXB0IHRvIHJldGFpbigpIFNuYXBzaG90IHRoYXQgd2FzIGFscmVhZHkgcmVsZWFzZWQuJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5fcmVmQ291bnQrKztcbiAgICBsZXQgcmVsZWFzZWQgPSBmYWxzZTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaWYgKCFyZWxlYXNlZCkge1xuICAgICAgICByZWxlYXNlZCA9IHRydWU7XG5cbiAgICAgICAgdGhpcy5fcmVsZWFzZSgpO1xuICAgICAgfVxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIFJlbGVhc2UgdGhlIHNuYXBzaG90IG9uIHRoZSBuZXh0IHRpY2suICBUaGlzIG1lYW5zIHRoZSBzbmFwc2hvdCBpcyByZXRhaW5lZFxuICAgKiBkdXJpbmcgdGhlIGV4ZWN1dGlvbiBvZiB0aGUgY3VycmVudCBmdW5jdGlvbiB1c2luZyBpdC5cbiAgICovXG5cblxuICBhdXRvUmVsZWFzZV9JTlRFUk5BTCgpIHtcbiAgICBpZiAoIWlzU1NSJDEpIHtcbiAgICAgIC8vIFVzZSB0aW1lb3V0IG9mIDEwIHRvIHdvcmthcm91bmQgRmlyZWZveCBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rZXhwZXJpbWVudGFsL1JlY29pbC9pc3N1ZXMvMTkzNlxuICAgICAgd2luZG93LnNldFRpbWVvdXQoKCkgPT4gdGhpcy5fcmVsZWFzZSgpLCAxMCk7XG4gICAgfVxuICB9XG5cbiAgX3JlbGVhc2UoKSB7XG4gICAgdGhpcy5fcmVmQ291bnQtLTtcblxuICAgIGlmICh0aGlzLl9yZWZDb3VudCA9PT0gMCkge1xuICAgICAgdGhpcy5fc3RvcmUuZ2V0U3RhdGUoKS5ub2RlQ2xlYW51cEZ1bmN0aW9ucy5mb3JFYWNoKGNsZWFudXAgPT4gY2xlYW51cCgpKTtcblxuICAgICAgdGhpcy5fc3RvcmUuZ2V0U3RhdGUoKS5ub2RlQ2xlYW51cEZ1bmN0aW9ucy5jbGVhcigpO1xuXG4gICAgICBpZiAoIVJlY29pbF9na3goJ3JlY29pbF9tZW1vcnlfbWFuYWdhbWVudF8yMDIwJykpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBUZW1wb3JhcmlseSBuZXJmaW5nIHRoaXMgdG8gYWxsb3cgdXMgdG8gZmluZCBicm9rZW4gY2FsbCBzaXRlcyB3aXRob3V0XG4gICAgICAvLyBhY3R1YWxseSBicmVha2luZyBhbnlib2R5IHlldC5cbiAgICAgIC8vIGZvciAoY29uc3QgayBvZiB0aGlzLl9zdG9yZS5nZXRTdGF0ZSgpLmtub3duQXRvbXMpIHtcbiAgICAgIC8vICAgdXBkYXRlUmV0YWluQ291bnRUb1plcm8odGhpcy5fc3RvcmUsIGspO1xuICAgICAgLy8gfVxuXG4gICAgfSBlbHNlIGlmICh0aGlzLl9yZWZDb3VudCA8IDApIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgUmVjb2lsX3JlY292ZXJhYmxlVmlvbGF0aW9uKCdTbmFwc2hvdCByZWxlYXNlZCBhbiBleHRyYSB0aW1lLicpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlzUmV0YWluZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlZkNvdW50ID4gMDtcbiAgfVxuXG4gIGNoZWNrUmVmQ291bnRfSU5URVJOQUwoKSB7XG4gICAgaWYgKFJlY29pbF9na3goJ3JlY29pbF9tZW1vcnlfbWFuYWdhbWVudF8yMDIwJykgJiYgdGhpcy5fcmVmQ291bnQgPD0gMCkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICBSZWNvaWxfcmVjb3ZlcmFibGVWaW9sYXRpb24ocmV0YWluV2FybmluZyk7XG4gICAgICB9IC8vIFdoYXQgd2Ugd2lsbCBzaGlwIGxhdGVyOlxuICAgICAgLy8gdGhyb3cgZXJyKHJldGFpbldhcm5pbmcpO1xuXG4gICAgfVxuICB9XG5cbiAgZ2V0U3RvcmVfSU5URVJOQUwoKSB7XG4gICAgdGhpcy5jaGVja1JlZkNvdW50X0lOVEVSTkFMKCk7XG4gICAgcmV0dXJuIHRoaXMuX3N0b3JlO1xuICB9XG5cbiAgZ2V0SUQoKSB7XG4gICAgdGhpcy5jaGVja1JlZkNvdW50X0lOVEVSTkFMKCk7XG4gICAgcmV0dXJuIHRoaXMuX3N0b3JlLmdldFN0YXRlKCkuY3VycmVudFRyZWUuc3RhdGVJRDtcbiAgfVxuXG4gIGdldFN0b3JlSUQoKSB7XG4gICAgdGhpcy5jaGVja1JlZkNvdW50X0lOVEVSTkFMKCk7XG4gICAgcmV0dXJuIHRoaXMuX3N0b3JlLnN0b3JlSUQ7XG4gIH0gLy8gV2Ugd2FudCB0byBhbGxvdyB0aGUgbWV0aG9kcyB0byBiZSBkZXN0cnVjdHVyZWQgYW5kIHVzZWQgYXMgYWNjZXNzb3JzXG5cbiAgLyogZXNsaW50LWRpc2FibGUgZmItd3d3L2V4dHJhLWFycm93LWluaXRpYWxpemVyICovXG5cbiAgLyogZXNsaW50LWVuYWJsZSBmYi13d3cvZXh0cmEtYXJyb3ctaW5pdGlhbGl6ZXIgKi9cblxuXG59XG5cbmZ1bmN0aW9uIGNsb25lU3RvcmVTdGF0ZShzdG9yZSwgdHJlZVN0YXRlLCBidW1wVmVyc2lvbiA9IGZhbHNlKSB7XG4gIGNvbnN0IHN0b3JlU3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICBjb25zdCB2ZXJzaW9uID0gYnVtcFZlcnNpb24gPyBnZXROZXh0VHJlZVN0YXRlVmVyc2lvbiQyKCkgOiB0cmVlU3RhdGUudmVyc2lvbjtcbiAgcmV0dXJuIHtcbiAgICAvLyBBbHdheXMgY2xvbmUgdGhlIFRyZWVTdGF0ZSB0byBpc29sYXRlIHN0b3JlcyBmcm9tIGFjY2lkZW50YWwgbXV0YXRpb25zLlxuICAgIC8vIEZvciBleGFtcGxlLCByZWFkaW5nIGEgc2VsZWN0b3IgZnJvbSBhIGNsb25lZCBzbmFwc2hvdCBzaG91bGRuJ3QgY2FjaGVcbiAgICAvLyBpbiB0aGUgb3JpZ2luYWwgdHJlZXN0YXRlIHdoaWNoIG1heSBjYXVzZSB0aGUgb3JpZ2luYWwgdG8gc2tpcFxuICAgIC8vIGluaXRpYWxpemF0aW9uIG9mIHVwc3RyZWFtIGF0b21zLlxuICAgIGN1cnJlbnRUcmVlOiB7XG4gICAgICAvLyBUT0RPIHNuYXBzaG90cyBzaG91bGRuJ3QgcmVhbGx5IGhhdmUgdmVyc2lvbnMgYmVjYXVzZSBhIG5ldyB2ZXJzaW9uIG51bWJlclxuICAgICAgLy8gaXMgYWx3YXlzIGFzc2lnbmVkIHdoZW4gdGhlIHNuYXBzaG90IGlzIGdvbmUgdG8uXG4gICAgICB2ZXJzaW9uOiBidW1wVmVyc2lvbiA/IHZlcnNpb24gOiB0cmVlU3RhdGUudmVyc2lvbixcbiAgICAgIHN0YXRlSUQ6IGJ1bXBWZXJzaW9uID8gdmVyc2lvbiA6IHRyZWVTdGF0ZS5zdGF0ZUlELFxuICAgICAgdHJhbnNhY3Rpb25NZXRhZGF0YTogeyAuLi50cmVlU3RhdGUudHJhbnNhY3Rpb25NZXRhZGF0YVxuICAgICAgfSxcbiAgICAgIGRpcnR5QXRvbXM6IG5ldyBTZXQodHJlZVN0YXRlLmRpcnR5QXRvbXMpLFxuICAgICAgYXRvbVZhbHVlczogdHJlZVN0YXRlLmF0b21WYWx1ZXMuY2xvbmUoKSxcbiAgICAgIG5vbnZhbGlkYXRlZEF0b21zOiB0cmVlU3RhdGUubm9udmFsaWRhdGVkQXRvbXMuY2xvbmUoKVxuICAgIH0sXG4gICAgY29tbWl0RGVwdGg6IDAsXG4gICAgbmV4dFRyZWU6IG51bGwsXG4gICAgcHJldmlvdXNUcmVlOiBudWxsLFxuICAgIGtub3duQXRvbXM6IG5ldyBTZXQoc3RvcmVTdGF0ZS5rbm93bkF0b21zKSxcbiAgICAvLyBGSVhNRSBoZXJlJ3MgYSBjb3B5XG4gICAga25vd25TZWxlY3RvcnM6IG5ldyBTZXQoc3RvcmVTdGF0ZS5rbm93blNlbGVjdG9ycyksXG4gICAgLy8gRklYTUUgaGVyZSdzIGEgY29weVxuICAgIHRyYW5zYWN0aW9uU3Vic2NyaXB0aW9uczogbmV3IE1hcCgpLFxuICAgIG5vZGVUcmFuc2FjdGlvblN1YnNjcmlwdGlvbnM6IG5ldyBNYXAoKSxcbiAgICBub2RlVG9Db21wb25lbnRTdWJzY3JpcHRpb25zOiBuZXcgTWFwKCksXG4gICAgcXVldWVkQ29tcG9uZW50Q2FsbGJhY2tzX0RFUFJFQ0FURUQ6IFtdLFxuICAgIHN1c3BlbmRlZENvbXBvbmVudFJlc29sdmVyczogbmV3IFNldCgpLFxuICAgIGdyYXBoc0J5VmVyc2lvbjogbmV3IE1hcCgpLnNldCh2ZXJzaW9uLCBzdG9yZS5nZXRHcmFwaCh0cmVlU3RhdGUudmVyc2lvbikpLFxuICAgIHJldGVudGlvbjoge1xuICAgICAgcmVmZXJlbmNlQ291bnRzOiBuZXcgTWFwKCksXG4gICAgICBub2Rlc1JldGFpbmVkQnlab25lOiBuZXcgTWFwKCksXG4gICAgICByZXRhaW5hYmxlc1RvQ2hlY2tGb3JSZWxlYXNlOiBuZXcgU2V0KClcbiAgICB9LFxuICAgIC8vIEZJWE1FIGhlcmUncyBhIGNvcHlcbiAgICAvLyBDcmVhdGUgYmxhbmsgY2xlYW51cCBoYW5kbGVycyBmb3IgYXRvbXMgc28gc25hcHNob3RzIGRvbid0IHJlLXJ1blxuICAgIC8vIGF0b20gZWZmZWN0cy5cbiAgICBub2RlQ2xlYW51cEZ1bmN0aW9uczogbmV3IE1hcChSZWNvaWxfbWFwSXRlcmFibGUoc3RvcmVTdGF0ZS5ub2RlQ2xlYW51cEZ1bmN0aW9ucy5lbnRyaWVzKCksIChba2V5XSkgPT4gW2tleSwgKCkgPT4ge31dKSlcbiAgfTtcbn0gLy8gRmFjdG9yeSB0byBidWlsZCBhIGZyZXNoIHNuYXBzaG90XG5cblxuZnVuY3Rpb24gZnJlc2hTbmFwc2hvdChpbml0aWFsaXplU3RhdGUpIHtcbiAgY29uc3Qgc25hcHNob3QgPSBuZXcgU25hcHNob3QobWFrZUVtcHR5U3RvcmVTdGF0ZSQxKCkpO1xuICByZXR1cm4gaW5pdGlhbGl6ZVN0YXRlICE9IG51bGwgPyBzbmFwc2hvdC5tYXAoaW5pdGlhbGl6ZVN0YXRlKSA6IHNuYXBzaG90O1xufSAvLyBGYWN0b3J5IHRvIGNsb25lIGEgc25hcHNob3Qgc3RhdGVcblxuXG5jb25zdCBbbWVtb2l6ZWRDbG9uZVNuYXBzaG90LCBpbnZhbGlkYXRlTWVtb2l6ZWRTbmFwc2hvdCQyXSA9IG1lbW9pemVPbmVXaXRoQXJnc0hhc2hBbmRJbnZhbGlkYXRpb24kMSgoc3RvcmUsIHZlcnNpb24pID0+IHtcbiAgdmFyIF9zdG9yZVN0YXRlJG5leHRUcmVlO1xuXG4gIGNvbnN0IHN0b3JlU3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICBjb25zdCB0cmVlU3RhdGUgPSB2ZXJzaW9uID09PSAnbGF0ZXN0JyA/IChfc3RvcmVTdGF0ZSRuZXh0VHJlZSA9IHN0b3JlU3RhdGUubmV4dFRyZWUpICE9PSBudWxsICYmIF9zdG9yZVN0YXRlJG5leHRUcmVlICE9PSB2b2lkIDAgPyBfc3RvcmVTdGF0ZSRuZXh0VHJlZSA6IHN0b3JlU3RhdGUuY3VycmVudFRyZWUgOiBSZWNvaWxfbnVsbHRocm93cyhzdG9yZVN0YXRlLnByZXZpb3VzVHJlZSk7XG4gIHJldHVybiBuZXcgU25hcHNob3QoY2xvbmVTdG9yZVN0YXRlKHN0b3JlLCB0cmVlU3RhdGUpLCBzdG9yZS5zdG9yZUlEKTtcbn0sIChzdG9yZSwgdmVyc2lvbikgPT4ge1xuICB2YXIgX3N0b3JlJGdldFN0YXRlJG5leHRULCBfc3RvcmUkZ2V0U3RhdGUkcHJldmk7XG5cbiAgcmV0dXJuIFN0cmluZyh2ZXJzaW9uKSArIFN0cmluZyhzdG9yZS5zdG9yZUlEKSArIFN0cmluZygoX3N0b3JlJGdldFN0YXRlJG5leHRUID0gc3RvcmUuZ2V0U3RhdGUoKS5uZXh0VHJlZSkgPT09IG51bGwgfHwgX3N0b3JlJGdldFN0YXRlJG5leHRUID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfc3RvcmUkZ2V0U3RhdGUkbmV4dFQudmVyc2lvbikgKyBTdHJpbmcoc3RvcmUuZ2V0U3RhdGUoKS5jdXJyZW50VHJlZS52ZXJzaW9uKSArIFN0cmluZygoX3N0b3JlJGdldFN0YXRlJHByZXZpID0gc3RvcmUuZ2V0U3RhdGUoKS5wcmV2aW91c1RyZWUpID09PSBudWxsIHx8IF9zdG9yZSRnZXRTdGF0ZSRwcmV2aSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3N0b3JlJGdldFN0YXRlJHByZXZpLnZlcnNpb24pO1xufSk7IC8vIEF2b2lkIGNpcmN1bGFyIGRlcGVuZGVuY2llc1xuXG5zZXRJbnZhbGlkYXRlTWVtb2l6ZWRTbmFwc2hvdCQxKGludmFsaWRhdGVNZW1vaXplZFNuYXBzaG90JDIpO1xuXG5mdW5jdGlvbiBjbG9uZVNuYXBzaG90KHN0b3JlLCB2ZXJzaW9uID0gJ2xhdGVzdCcpIHtcbiAgY29uc3Qgc25hcHNob3QgPSBtZW1vaXplZENsb25lU25hcHNob3Qoc3RvcmUsIHZlcnNpb24pO1xuXG4gIGlmICghc25hcHNob3QuaXNSZXRhaW5lZCgpKSB7XG4gICAgaW52YWxpZGF0ZU1lbW9pemVkU25hcHNob3QkMigpO1xuICAgIHJldHVybiBtZW1vaXplZENsb25lU25hcHNob3Qoc3RvcmUsIHZlcnNpb24pO1xuICB9XG5cbiAgcmV0dXJuIHNuYXBzaG90O1xufVxuXG5jbGFzcyBNdXRhYmxlU25hcHNob3QgZXh0ZW5kcyBTbmFwc2hvdCB7XG4gIGNvbnN0cnVjdG9yKHNuYXBzaG90LCBiYXRjaCkge1xuICAgIHN1cGVyKGNsb25lU3RvcmVTdGF0ZShzbmFwc2hvdC5nZXRTdG9yZV9JTlRFUk5BTCgpLCBzbmFwc2hvdC5nZXRTdG9yZV9JTlRFUk5BTCgpLmdldFN0YXRlKCkuY3VycmVudFRyZWUsIHRydWUpLCBzbmFwc2hvdC5nZXRTdG9yZUlEKCkpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiX2JhdGNoXCIsIHZvaWQgMCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJzZXRcIiwgKHJlY29pbFN0YXRlLCBuZXdWYWx1ZU9yVXBkYXRlcikgPT4ge1xuICAgICAgdGhpcy5jaGVja1JlZkNvdW50X0lOVEVSTkFMKCk7XG4gICAgICBjb25zdCBzdG9yZSA9IHRoaXMuZ2V0U3RvcmVfSU5URVJOQUwoKTsgLy8gVGhpcyBiYXRjaFVwZGF0ZXMgZW5zdXJlcyB0aGlzIGBzZXRgIGlzIGFwcGxpZWQgaW1tZWRpYXRlbHkgYW5kIHlvdSBjYW5cbiAgICAgIC8vIHJlYWQgdGhlIHdyaXR0ZW4gdmFsdWUgYWZ0ZXIgY2FsbGluZyBgc2V0YC4gSSB3b3VsZCBsaWtlIHRvIHJlbW92ZSB0aGlzXG4gICAgICAvLyBiZWhhdmlvciBhbmQgb25seSBiYXRjaCBpbiBgU25hcHNob3QubWFwYCwgYnV0IHRoaXMgd291bGQgYmUgYSBicmVha2luZ1xuICAgICAgLy8gY2hhbmdlIHBvdGVudGlhbGx5LlxuXG4gICAgICB0aGlzLl9iYXRjaCgoKSA9PiB7XG4gICAgICAgIHVwZGF0ZVJldGFpbkNvdW50JDEoc3RvcmUsIHJlY29pbFN0YXRlLmtleSwgMSk7XG4gICAgICAgIHNldFJlY29pbFZhbHVlJDEodGhpcy5nZXRTdG9yZV9JTlRFUk5BTCgpLCByZWNvaWxTdGF0ZSwgbmV3VmFsdWVPclVwZGF0ZXIpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJyZXNldFwiLCByZWNvaWxTdGF0ZSA9PiB7XG4gICAgICB0aGlzLmNoZWNrUmVmQ291bnRfSU5URVJOQUwoKTtcbiAgICAgIGNvbnN0IHN0b3JlID0gdGhpcy5nZXRTdG9yZV9JTlRFUk5BTCgpOyAvLyBTZWUgbm90ZSBhdCBgc2V0YCBhYm91dCBiYXRjaGVkIHVwZGF0ZXMuXG5cbiAgICAgIHRoaXMuX2JhdGNoKCgpID0+IHtcbiAgICAgICAgdXBkYXRlUmV0YWluQ291bnQkMShzdG9yZSwgcmVjb2lsU3RhdGUua2V5LCAxKTtcbiAgICAgICAgc2V0UmVjb2lsVmFsdWUkMSh0aGlzLmdldFN0b3JlX0lOVEVSTkFMKCksIHJlY29pbFN0YXRlLCBERUZBVUxUX1ZBTFVFJDEpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJzZXRVbnZhbGlkYXRlZEF0b21WYWx1ZXNfREVQUkVDQVRFRFwiLCB2YWx1ZXMgPT4ge1xuICAgICAgdGhpcy5jaGVja1JlZkNvdW50X0lOVEVSTkFMKCk7XG4gICAgICBjb25zdCBzdG9yZSA9IHRoaXMuZ2V0U3RvcmVfSU5URVJOQUwoKTsgLy8gU2VlIG5vdGUgYXQgYHNldGAgYWJvdXQgYmF0Y2hlZCB1cGRhdGVzLlxuXG4gICAgICBiYXRjaFVwZGF0ZXMkMSgoKSA9PiB7XG4gICAgICAgIGZvciAoY29uc3QgW2ssIHZdIG9mIHZhbHVlcy5lbnRyaWVzKCkpIHtcbiAgICAgICAgICB1cGRhdGVSZXRhaW5Db3VudCQxKHN0b3JlLCBrLCAxKTtcbiAgICAgICAgICBzZXRVbnZhbGlkYXRlZFJlY29pbFZhbHVlJDEoc3RvcmUsIG5ldyBBYnN0cmFjdFJlY29pbFZhbHVlJDIoayksIHYpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHRoaXMuX2JhdGNoID0gYmF0Y2g7XG4gIH1cblxufVxuXG52YXIgUmVjb2lsX1NuYXBzaG90ID0ge1xuICBTbmFwc2hvdCxcbiAgTXV0YWJsZVNuYXBzaG90LFxuICBmcmVzaFNuYXBzaG90LFxuICBjbG9uZVNuYXBzaG90XG59O1xuXG52YXIgUmVjb2lsX1NuYXBzaG90XzEgPSBSZWNvaWxfU25hcHNob3QuU25hcHNob3Q7XG52YXIgUmVjb2lsX1NuYXBzaG90XzIgPSBSZWNvaWxfU25hcHNob3QuTXV0YWJsZVNuYXBzaG90O1xudmFyIFJlY29pbF9TbmFwc2hvdF8zID0gUmVjb2lsX1NuYXBzaG90LmZyZXNoU25hcHNob3Q7XG52YXIgUmVjb2lsX1NuYXBzaG90XzQgPSBSZWNvaWxfU25hcHNob3QuY2xvbmVTbmFwc2hvdDtcblxudmFyIFJlY29pbF9TbmFwc2hvdCQxID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuICBfX3Byb3RvX186IG51bGwsXG4gIFNuYXBzaG90OiBSZWNvaWxfU25hcHNob3RfMSxcbiAgTXV0YWJsZVNuYXBzaG90OiBSZWNvaWxfU25hcHNob3RfMixcbiAgZnJlc2hTbmFwc2hvdDogUmVjb2lsX1NuYXBzaG90XzMsXG4gIGNsb25lU25hcHNob3Q6IFJlY29pbF9TbmFwc2hvdF80XG59KTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqIEBvbmNhbGwgcmVjb2lsXG4gKi9cblxuZnVuY3Rpb24gdW5pb25TZXRzKC4uLnNldHMpIHtcbiAgY29uc3QgcmVzdWx0ID0gbmV3IFNldCgpO1xuXG4gIGZvciAoY29uc3Qgc2V0IG9mIHNldHMpIHtcbiAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIHNldCkge1xuICAgICAgcmVzdWx0LmFkZCh2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxudmFyIFJlY29pbF91bmlvblNldHMgPSB1bmlvblNldHM7XG5cbmNvbnN0IHtcbiAgdXNlUmVmXG59ID0gcmVhY3Q7XG4vKipcbiAqIFRoZSBzYW1lIGFzIGB1c2VSZWYoKWAgZXhjZXB0IHRoYXQgaWYgYSBmdW5jdGlvbiBpcyBzcGVjaWZpZWQgdGhlbiBpdCB3aWxsXG4gKiBjYWxsIHRoYXQgZnVuY3Rpb24gdG8gZ2V0IHRoZSB2YWx1ZSB0byBpbml0aWFsaXplIHRoZSByZWZlcmVuY2Ugd2l0aC5cbiAqIFRoaXMgaXMgc2ltaWxhciB0byBob3cgYHVzZVN0YXRlKClgIGJlaGF2ZXMgd2hlbiBnaXZlbiBhIGZ1bmN0aW9uLiAgSXQgYWxsb3dzXG4gKiB0aGUgdXNlciB0byBhdm9pZCBnZW5lcmF0aW5nIHRoZSBpbml0aWFsIHZhbHVlIGZvciBzdWJzZXF1ZW50IHJlbmRlcnMuXG4gKiBUaGUgdHJhZGVvZmYgaXMgdGhhdCB0byBzZXQgdGhlIHJlZmVyZW5jZSB0byBhIGZ1bmN0aW9uIGl0c2VsZiB5b3UgbmVlZCB0b1xuICogbmVzdCBpdDogdXNlUmVmSW5pdE9uY2UoKCkgPT4gKCkgPT4gey4uLn0pO1xuICovXG5cblxuZnVuY3Rpb24gdXNlUmVmSW5pdE9uY2UoaW5pdGlhbFZhbHVlKSB7XG4gIC8vICRGbG93RXhwZWN0ZWRFcnJvcltpbmNvbXBhdGlibGUtY2FsbF1cbiAgY29uc3QgcmVmID0gdXNlUmVmKGluaXRpYWxWYWx1ZSk7XG5cbiAgaWYgKHJlZi5jdXJyZW50ID09PSBpbml0aWFsVmFsdWUgJiYgdHlwZW9mIGluaXRpYWxWYWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vICRGbG93RXhwZWN0ZWRFcnJvcltpbmNvbXBhdGlibGUtdXNlXVxuICAgIHJlZi5jdXJyZW50ID0gaW5pdGlhbFZhbHVlKCk7XG4gIH1cblxuICByZXR1cm4gcmVmO1xufVxuXG52YXIgUmVjb2lsX3VzZVJlZkluaXRPbmNlID0gdXNlUmVmSW5pdE9uY2U7XG5cbi8vIEBmYi1vbmx5OiBjb25zdCBSZWNvaWx1c2FnZWxvZ0V2ZW50ID0gcmVxdWlyZSgnUmVjb2lsdXNhZ2Vsb2dFdmVudCcpO1xuLy8gQGZiLW9ubHk6IGNvbnN0IFJlY29pbFVzYWdlTG9nRmFsY29FdmVudCA9IHJlcXVpcmUoJ1JlY29pbFVzYWdlTG9nRmFsY29FdmVudCcpO1xuLy8gQGZiLW9ubHk6IGNvbnN0IFVSSSA9IHJlcXVpcmUoJ1VSSScpO1xuXG5cbmNvbnN0IHtcbiAgZ2V0TmV4dFRyZWVTdGF0ZVZlcnNpb246IGdldE5leHRUcmVlU3RhdGVWZXJzaW9uJDMsXG4gIG1ha2VFbXB0eVN0b3JlU3RhdGU6IG1ha2VFbXB0eVN0b3JlU3RhdGUkMlxufSA9IFJlY29pbF9TdGF0ZTtcblxuY29uc3Qge1xuICBjbGVhblVwTm9kZTogY2xlYW5VcE5vZGUkMixcbiAgZ2V0RG93bnN0cmVhbU5vZGVzOiBnZXREb3duc3RyZWFtTm9kZXMkMixcbiAgaW5pdGlhbGl6ZU5vZGU6IGluaXRpYWxpemVOb2RlJDIsXG4gIHNldE5vZGVWYWx1ZTogc2V0Tm9kZVZhbHVlJDIsXG4gIHNldFVudmFsaWRhdGVkQXRvbVZhbHVlX0RFUFJFQ0FURUQ6IHNldFVudmFsaWRhdGVkQXRvbVZhbHVlX0RFUFJFQ0FURUQkMVxufSA9IFJlY29pbF9GdW5jdGlvbmFsQ29yZTtcblxuY29uc3Qge1xuICBncmFwaDogZ3JhcGgkMlxufSA9IFJlY29pbF9HcmFwaDtcblxuY29uc3Qge1xuICBjbG9uZUdyYXBoOiBjbG9uZUdyYXBoJDFcbn0gPSBSZWNvaWxfR3JhcGg7XG5cbmNvbnN0IHtcbiAgZ2V0TmV4dFN0b3JlSUQ6IGdldE5leHRTdG9yZUlEJDJcbn0gPSBSZWNvaWxfS2V5cztcblxuY29uc3Qge1xuICBjcmVhdGVNdXRhYmxlU291cmNlOiBjcmVhdGVNdXRhYmxlU291cmNlJDEsXG4gIHJlYWN0TW9kZTogcmVhY3RNb2RlJDJcbn0gPSBSZWNvaWxfUmVhY3RNb2RlO1xuXG5jb25zdCB7XG4gIGFwcGx5QXRvbVZhbHVlV3JpdGVzOiBhcHBseUF0b21WYWx1ZVdyaXRlcyQxXG59ID0gUmVjb2lsX1JlY29pbFZhbHVlSW50ZXJmYWNlO1xuXG5jb25zdCB7XG4gIHJlbGVhc2VTY2hlZHVsZWRSZXRhaW5hYmxlc05vdzogcmVsZWFzZVNjaGVkdWxlZFJldGFpbmFibGVzTm93JDFcbn0gPSBSZWNvaWxfUmV0ZW50aW9uO1xuXG5jb25zdCB7XG4gIGZyZXNoU25hcHNob3Q6IGZyZXNoU25hcHNob3QkMVxufSA9IFJlY29pbF9TbmFwc2hvdCQxO1xuXG5cblxuY29uc3Qge1xuICB1c2VDYWxsYmFjayxcbiAgdXNlQ29udGV4dCxcbiAgdXNlRWZmZWN0LFxuICB1c2VNZW1vLFxuICB1c2VSZWY6IHVzZVJlZiQxLFxuICB1c2VTdGF0ZVxufSA9IHJlYWN0O1xuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuZnVuY3Rpb24gbm90SW5BQ29udGV4dCgpIHtcbiAgdGhyb3cgUmVjb2lsX2VycignVGhpcyBjb21wb25lbnQgbXVzdCBiZSB1c2VkIGluc2lkZSBhIDxSZWNvaWxSb290PiBjb21wb25lbnQuJyk7XG59XG5cbmNvbnN0IGRlZmF1bHRTdG9yZSA9IE9iamVjdC5mcmVlemUoe1xuICBzdG9yZUlEOiBnZXROZXh0U3RvcmVJRCQyKCksXG4gIGdldFN0YXRlOiBub3RJbkFDb250ZXh0LFxuICByZXBsYWNlU3RhdGU6IG5vdEluQUNvbnRleHQsXG4gIGdldEdyYXBoOiBub3RJbkFDb250ZXh0LFxuICBzdWJzY3JpYmVUb1RyYW5zYWN0aW9uczogbm90SW5BQ29udGV4dCxcbiAgYWRkVHJhbnNhY3Rpb25NZXRhZGF0YTogbm90SW5BQ29udGV4dFxufSk7XG5sZXQgc3RhdGVSZXBsYWNlcklzQmVpbmdFeGVjdXRlZCA9IGZhbHNlO1xuXG5mdW5jdGlvbiBzdGFydE5leHRUcmVlSWZOZWVkZWQoc3RvcmUpIHtcbiAgaWYgKHN0YXRlUmVwbGFjZXJJc0JlaW5nRXhlY3V0ZWQpIHtcbiAgICB0aHJvdyBSZWNvaWxfZXJyKCdBbiBhdG9tIHVwZGF0ZSB3YXMgdHJpZ2dlcmVkIHdpdGhpbiB0aGUgZXhlY3V0aW9uIG9mIGEgc3RhdGUgdXBkYXRlciBmdW5jdGlvbi4gU3RhdGUgdXBkYXRlciBmdW5jdGlvbnMgcHJvdmlkZWQgdG8gUmVjb2lsIG11c3QgYmUgcHVyZSBmdW5jdGlvbnMuJyk7XG4gIH1cblxuICBjb25zdCBzdG9yZVN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcblxuICBpZiAoc3RvcmVTdGF0ZS5uZXh0VHJlZSA9PT0gbnVsbCkge1xuICAgIGlmIChSZWNvaWxfZ2t4KCdyZWNvaWxfbWVtb3J5X21hbmFnYW1lbnRfMjAyMCcpICYmIFJlY29pbF9na3goJ3JlY29pbF9yZWxlYXNlX29uX2Nhc2NhZGluZ191cGRhdGVfa2lsbHN3aXRjaF8yMDIxJykpIHtcbiAgICAgIC8vIElmIHRoaXMgaXMgYSBjYXNjYWRpbmcgdXBkYXRlICh0aGF0IGlzLCByZW5kZXJpbmcgZHVlIHRvIG9uZSBzdGF0ZSBjaGFuZ2VcbiAgICAgIC8vIGludm9rZXMgYSBzZWNvbmQgc3RhdGUgY2hhbmdlKSwgd2Ugd29uJ3QgaGF2ZSBjbGVhbmVkIHVwIHJldGFpbmFibGVzIHlldFxuICAgICAgLy8gYmVjYXVzZSB0aGlzIG5vcm1hbGx5IGhhcHBlbnMgYWZ0ZXIgbm90aWZ5aW5nIGNvbXBvbmVudHMuIERvIGl0IGJlZm9yZVxuICAgICAgLy8gcHJvY2VlZGluZyB3aXRoIHRoZSBjYXNjYWRpbmcgdXBkYXRlIHNvIHRoYXQgaXQgcmVtYWlucyBwcmVkaWN0YWJsZTpcbiAgICAgIGlmIChzdG9yZVN0YXRlLmNvbW1pdERlcHRoID4gMCkge1xuICAgICAgICByZWxlYXNlU2NoZWR1bGVkUmV0YWluYWJsZXNOb3ckMShzdG9yZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgdmVyc2lvbiA9IHN0b3JlU3RhdGUuY3VycmVudFRyZWUudmVyc2lvbjtcbiAgICBjb25zdCBuZXh0VmVyc2lvbiA9IGdldE5leHRUcmVlU3RhdGVWZXJzaW9uJDMoKTtcbiAgICBzdG9yZVN0YXRlLm5leHRUcmVlID0geyAuLi5zdG9yZVN0YXRlLmN1cnJlbnRUcmVlLFxuICAgICAgdmVyc2lvbjogbmV4dFZlcnNpb24sXG4gICAgICBzdGF0ZUlEOiBuZXh0VmVyc2lvbixcbiAgICAgIGRpcnR5QXRvbXM6IG5ldyBTZXQoKSxcbiAgICAgIHRyYW5zYWN0aW9uTWV0YWRhdGE6IHt9XG4gICAgfTtcbiAgICBzdG9yZVN0YXRlLmdyYXBoc0J5VmVyc2lvbi5zZXQobmV4dFZlcnNpb24sIGNsb25lR3JhcGgkMShSZWNvaWxfbnVsbHRocm93cyhzdG9yZVN0YXRlLmdyYXBoc0J5VmVyc2lvbi5nZXQodmVyc2lvbikpKSk7XG4gIH1cbn1cblxuY29uc3QgQXBwQ29udGV4dCA9IHJlYWN0LmNyZWF0ZUNvbnRleHQoe1xuICBjdXJyZW50OiBkZWZhdWx0U3RvcmVcbn0pO1xuXG5jb25zdCB1c2VTdG9yZVJlZiA9ICgpID0+IHVzZUNvbnRleHQoQXBwQ29udGV4dCk7IC8vICRGbG93RXhwZWN0ZWRFcnJvcltpbmNvbXBhdGlibGUtY2FsbF1cblxuXG5jb25zdCBNdXRhYmxlU291cmNlQ29udGV4dCA9IHJlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5cbmZ1bmN0aW9uIHVzZVJlY29pbE11dGFibGVTb3VyY2UoKSB7XG4gIGNvbnN0IG11dGFibGVTb3VyY2UgPSB1c2VDb250ZXh0KE11dGFibGVTb3VyY2VDb250ZXh0KTtcblxuICBpZiAobXV0YWJsZVNvdXJjZSA9PSBudWxsKSB7XG4gICAgUmVjb2lsX2V4cGVjdGF0aW9uVmlvbGF0aW9uKCdBdHRlbXB0ZWQgdG8gdXNlIGEgUmVjb2lsIGhvb2sgb3V0c2lkZSBvZiBhIDxSZWNvaWxSb290Pi4gJyArICc8UmVjb2lsUm9vdD4gbXVzdCBiZSBhbiBhbmNlc3RvciBvZiBhbnkgY29tcG9uZW50IHRoYXQgdXNlcyAnICsgJ1JlY29pbCBob29rcy4nKTtcbiAgfVxuXG4gIHJldHVybiBtdXRhYmxlU291cmNlO1xufVxuXG5mdW5jdGlvbiBub3RpZnlDb21wb25lbnRzKHN0b3JlLCBzdG9yZVN0YXRlLCB0cmVlU3RhdGUpIHtcbiAgY29uc3QgZGVwZW5kZW50Tm9kZXMgPSBnZXREb3duc3RyZWFtTm9kZXMkMihzdG9yZSwgdHJlZVN0YXRlLCB0cmVlU3RhdGUuZGlydHlBdG9tcyk7XG5cbiAgZm9yIChjb25zdCBrZXkgb2YgZGVwZW5kZW50Tm9kZXMpIHtcbiAgICBjb25zdCBjb21wcyA9IHN0b3JlU3RhdGUubm9kZVRvQ29tcG9uZW50U3Vic2NyaXB0aW9ucy5nZXQoa2V5KTtcblxuICAgIGlmIChjb21wcykge1xuICAgICAgZm9yIChjb25zdCBbX3N1YklELCBbX2RlYnVnTmFtZSwgY2FsbGJhY2tdXSBvZiBjb21wcykge1xuICAgICAgICBjYWxsYmFjayh0cmVlU3RhdGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBzZW5kRW5kT2ZCYXRjaE5vdGlmaWNhdGlvbnMoc3RvcmUpIHtcbiAgY29uc3Qgc3RvcmVTdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG4gIGNvbnN0IHRyZWVTdGF0ZSA9IHN0b3JlU3RhdGUuY3VycmVudFRyZWU7IC8vIEluZm9ybSB0cmFuc2FjdGlvbiBzdWJzY3JpYmVycyBvZiB0aGUgdHJhbnNhY3Rpb246XG5cbiAgY29uc3QgZGlydHlBdG9tcyA9IHRyZWVTdGF0ZS5kaXJ0eUF0b21zO1xuXG4gIGlmIChkaXJ0eUF0b21zLnNpemUpIHtcbiAgICAvLyBFeGVjdXRlIE5vZGUtc3BlY2lmaWMgc3Vic2NyaWJlcnMgYmVmb3JlIGdsb2JhbCBzdWJzY3JpYmVyc1xuICAgIGZvciAoY29uc3QgW2tleSwgc3Vic2NyaXB0aW9uc10gb2Ygc3RvcmVTdGF0ZS5ub2RlVHJhbnNhY3Rpb25TdWJzY3JpcHRpb25zKSB7XG4gICAgICBpZiAoZGlydHlBdG9tcy5oYXMoa2V5KSkge1xuICAgICAgICBmb3IgKGNvbnN0IFtfLCBzdWJzY3JpcHRpb25dIG9mIHN1YnNjcmlwdGlvbnMpIHtcbiAgICAgICAgICBzdWJzY3JpcHRpb24oc3RvcmUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBbXywgc3Vic2NyaXB0aW9uXSBvZiBzdG9yZVN0YXRlLnRyYW5zYWN0aW9uU3Vic2NyaXB0aW9ucykge1xuICAgICAgc3Vic2NyaXB0aW9uKHN0b3JlKTtcbiAgICB9XG5cbiAgICBpZiAoIXJlYWN0TW9kZSQyKCkuZWFybHkgfHwgc3RvcmVTdGF0ZS5zdXNwZW5kZWRDb21wb25lbnRSZXNvbHZlcnMuc2l6ZSA+IDApIHtcbiAgICAgIC8vIE5vdGlmeWluZyBjb21wb25lbnRzIGlzIG5lZWRlZCB0byB3YWtlIGZyb20gc3VzcGVuc2UsIGV2ZW4gd2hlbiB1c2luZ1xuICAgICAgLy8gZWFybHkgcmVuZGVyaW5nLlxuICAgICAgbm90aWZ5Q29tcG9uZW50cyhzdG9yZSwgc3RvcmVTdGF0ZSwgdHJlZVN0YXRlKTsgLy8gV2FrZSBhbGwgc3VzcGVuZGVkIGNvbXBvbmVudHMgc28gdGhlIHJpZ2h0IG9uZShzKSBjYW4gdHJ5IHRvIHJlLXJlbmRlci5cbiAgICAgIC8vIFdlIG5lZWQgdG8gd2FrZSB1cCBjb21wb25lbnRzIG5vdCBqdXN0IHdoZW4gc29tZSBhc3luY2hyb25vdXMgc2VsZWN0b3JcbiAgICAgIC8vIHJlc29sdmVkLCBidXQgYWxzbyB3aGVuIGNoYW5naW5nIHN5bmNocm9ub3VzIHZhbHVlcyBiZWNhdXNlIHRoaXMgbWF5IGNhdXNlXG4gICAgICAvLyBhIHNlbGVjdG9yIHRvIGNoYW5nZSBmcm9tIGFzeW5jaHJvbm91cyB0byBzeW5jaHJvbm91cywgaW4gd2hpY2ggY2FzZSB0aGVyZVxuICAgICAgLy8gd291bGQgYmUgbm8gZm9sbG93LXVwIGFzeW5jaHJvbm91cyByZXNvbHV0aW9uIHRvIHdha2UgdXMgdXAuXG4gICAgICAvLyBUT0RPIE9QVElNSVpBVElPTiBPbmx5IHdha2UgdXAgcmVsYXRlZCBkb3duc3RyZWFtIGNvbXBvbmVudHNcblxuICAgICAgc3RvcmVTdGF0ZS5zdXNwZW5kZWRDb21wb25lbnRSZXNvbHZlcnMuZm9yRWFjaChjYiA9PiBjYigpKTtcbiAgICAgIHN0b3JlU3RhdGUuc3VzcGVuZGVkQ29tcG9uZW50UmVzb2x2ZXJzLmNsZWFyKCk7XG4gICAgfVxuICB9IC8vIFNwZWNpYWwgYmVoYXZpb3IgT05MWSBpbnZva2VkIGJ5IHVzZUludGVyZmFjZS5cbiAgLy8gRklYTUUgZGVsZXRlIHF1ZXVlZENvbXBvbmVudENhbGxiYWNrc19ERVBSRUNBVEVEIHdoZW4gZGVsZXRpbmcgdXNlSW50ZXJmYWNlLlxuXG5cbiAgc3RvcmVTdGF0ZS5xdWV1ZWRDb21wb25lbnRDYWxsYmFja3NfREVQUkVDQVRFRC5mb3JFYWNoKGNiID0+IGNiKHRyZWVTdGF0ZSkpO1xuICBzdG9yZVN0YXRlLnF1ZXVlZENvbXBvbmVudENhbGxiYWNrc19ERVBSRUNBVEVELnNwbGljZSgwLCBzdG9yZVN0YXRlLnF1ZXVlZENvbXBvbmVudENhbGxiYWNrc19ERVBSRUNBVEVELmxlbmd0aCk7XG59XG5cbmZ1bmN0aW9uIGVuZEJhdGNoKHN0b3JlKSB7XG4gIGNvbnN0IHN0b3JlU3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICBzdG9yZVN0YXRlLmNvbW1pdERlcHRoKys7XG5cbiAgdHJ5IHtcbiAgICBjb25zdCB7XG4gICAgICBuZXh0VHJlZVxuICAgIH0gPSBzdG9yZVN0YXRlOyAvLyBJZ25vcmUgY29tbWl0cyB0aGF0IGFyZSBub3QgYmVjYXVzZSBvZiBSZWNvaWwgdHJhbnNhY3Rpb25zIC0tIG5hbWVseSxcbiAgICAvLyBiZWNhdXNlIHNvbWV0aGluZyBhYm92ZSBSZWNvaWxSb290IHJlLXJlbmRlcmVkOlxuXG4gICAgaWYgKG5leHRUcmVlID09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIG5leHRUcmVlIGlzIG5vdyBjb21taXR0ZWQgLS0gbm90ZSB0aGF0IGNvcHlpbmcgYW5kIHJlc2V0IG9jY3VycyB3aGVuXG4gICAgLy8gYSB0cmFuc2FjdGlvbiBiZWdpbnMsIGluIHN0YXJ0TmV4dFRyZWVJZk5lZWRlZDpcblxuXG4gICAgc3RvcmVTdGF0ZS5wcmV2aW91c1RyZWUgPSBzdG9yZVN0YXRlLmN1cnJlbnRUcmVlO1xuICAgIHN0b3JlU3RhdGUuY3VycmVudFRyZWUgPSBuZXh0VHJlZTtcbiAgICBzdG9yZVN0YXRlLm5leHRUcmVlID0gbnVsbDtcbiAgICBzZW5kRW5kT2ZCYXRjaE5vdGlmaWNhdGlvbnMoc3RvcmUpO1xuXG4gICAgaWYgKHN0b3JlU3RhdGUucHJldmlvdXNUcmVlICE9IG51bGwpIHtcbiAgICAgIHN0b3JlU3RhdGUuZ3JhcGhzQnlWZXJzaW9uLmRlbGV0ZShzdG9yZVN0YXRlLnByZXZpb3VzVHJlZS52ZXJzaW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgUmVjb2lsX3JlY292ZXJhYmxlVmlvbGF0aW9uKCdFbmRlZCBiYXRjaCB3aXRoIG5vIHByZXZpb3VzIHN0YXRlLCB3aGljaCBpcyB1bmV4cGVjdGVkJywgJ3JlY29pbCcpO1xuICAgIH1cblxuICAgIHN0b3JlU3RhdGUucHJldmlvdXNUcmVlID0gbnVsbDtcblxuICAgIGlmIChSZWNvaWxfZ2t4KCdyZWNvaWxfbWVtb3J5X21hbmFnYW1lbnRfMjAyMCcpKSB7XG4gICAgICAvLyBPbmx5IHJlbGVhc2UgcmV0YWluYWJsZXMgaWYgdGhlcmUgd2VyZSBubyB3cml0ZXMgZHVyaW5nIHRoZSBlbmQgb2YgdGhlXG4gICAgICAvLyBiYXRjaC4gIFRoaXMgYXZvaWRzIHJlbGVhc2luZyBzb21ldGhpbmcgd2UgbWlnaHQgYmUgYWJvdXQgdG8gdXNlLlxuICAgICAgaWYgKG5leHRUcmVlID09IG51bGwpIHtcbiAgICAgICAgcmVsZWFzZVNjaGVkdWxlZFJldGFpbmFibGVzTm93JDEoc3RvcmUpO1xuICAgICAgfVxuICAgIH1cbiAgfSBmaW5hbGx5IHtcbiAgICBzdG9yZVN0YXRlLmNvbW1pdERlcHRoLS07XG4gIH1cbn1cbi8qXG4gKiBUaGUgcHVycG9zZSBvZiB0aGUgQmF0Y2hlciBpcyB0byBvYnNlcnZlIHdoZW4gUmVhY3QgYmF0Y2hlcyBlbmQgc28gdGhhdFxuICogUmVjb2lsIHN0YXRlIGNoYW5nZXMgY2FuIGJlIGJhdGNoZWQuIFdoZW5ldmVyIFJlY29pbCBzdGF0ZSBjaGFuZ2VzLCB3ZSBjYWxsXG4gKiBzZXRTdGF0ZSBvbiB0aGUgYmF0Y2hlci4gVGhlbiB3ZSB3YWl0IGZvciB0aGF0IGNoYW5nZSB0byBiZSBjb21taXR0ZWQsIHdoaWNoXG4gKiBzaWduaWZpZXMgdGhlIGVuZCBvZiB0aGUgYmF0Y2guIFRoYXQncyB3aGVuIHdlIHJlc3BvbmQgdG8gdGhlIFJlY29pbCBjaGFuZ2UuXG4gKi9cblxuXG5mdW5jdGlvbiBCYXRjaGVyKHtcbiAgc2V0Tm90aWZ5QmF0Y2hlck9mQ2hhbmdlXG59KSB7XG4gIGNvbnN0IHN0b3JlUmVmID0gdXNlU3RvcmVSZWYoKTtcbiAgY29uc3QgWywgc2V0U3RhdGVdID0gdXNlU3RhdGUoW10pO1xuICBzZXROb3RpZnlCYXRjaGVyT2ZDaGFuZ2UoKCkgPT4gc2V0U3RhdGUoe30pKTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBzZXROb3RpZnlCYXRjaGVyT2ZDaGFuZ2UoKCkgPT4gc2V0U3RhdGUoe30pKTsgLy8gSWYgYW4gYXN5bmNocm9ub3VzIHNlbGVjdG9yIHJlc29sdmVzIGFmdGVyIHRoZSBCYXRjaGVyIGlzIHVubW91bnRlZCxcbiAgICAvLyBub3RpZnlCYXRjaGVyT2ZDaGFuZ2Ugd2lsbCBzdGlsbCBiZSBjYWxsZWQuIEFuIGVycm9yIGdldHMgdGhyb3duIHdoZW5ldmVyXG4gICAgLy8gc2V0U3RhdGUgaXMgY2FsbGVkIGFmdGVyIGEgY29tcG9uZW50IGlzIGFscmVhZHkgdW5tb3VudGVkLCBzbyB0aGlzIHNldHNcbiAgICAvLyBub3RpZnlCYXRjaGVyT2ZDaGFuZ2UgdG8gYmUgYSBuby1vcC5cblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBzZXROb3RpZnlCYXRjaGVyT2ZDaGFuZ2UoKCkgPT4ge30pO1xuICAgIH07XG4gIH0sIFtzZXROb3RpZnlCYXRjaGVyT2ZDaGFuZ2VdKTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAvLyBlbnF1ZXVlRXhlY3V0aW9uIHJ1bnMgdGhpcyBmdW5jdGlvbiBpbW1lZGlhdGVseTsgaXQgaXMgb25seSB1c2VkIHRvXG4gICAgLy8gbWFuaXB1bGF0ZSB0aGUgb3JkZXIgb2YgdXNlRWZmZWN0cyBkdXJpbmcgdGVzdHMsIHNpbmNlIFJlYWN0IHNlZW1zIHRvXG4gICAgLy8gY2FsbCB1c2VFZmZlY3QgaW4gYW4gdW5wcmVkaWN0YWJsZSBvcmRlciBzb21ldGltZXMuXG4gICAgUmVjb2lsX1F1ZXVlLmVucXVldWVFeGVjdXRpb24oJ0JhdGNoZXInLCAoKSA9PiB7XG4gICAgICBlbmRCYXRjaChzdG9yZVJlZi5jdXJyZW50KTtcbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiBudWxsO1xufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiAhd2luZG93LiRyZWNvaWxEZWJ1Z1N0YXRlcykge1xuICAgIHdpbmRvdy4kcmVjb2lsRGVidWdTdGF0ZXMgPSBbXTtcbiAgfVxufSAvLyBXaGVuIHJlbW92aW5nIHRoaXMgZGVwcmVjYXRlZCBmdW5jdGlvbiwgcmVtb3ZlIHN0YXRlQnlTZXR0aW5nUmVjb2lsVmFsdWVcbi8vIHdoaWNoIHdpbGwgbm8gbG9uZ2VyIGJlIG5lZWRlZC5cblxuXG5mdW5jdGlvbiBpbml0aWFsU3RvcmVTdGF0ZV9ERVBSRUNBVEVEKHN0b3JlLCBpbml0aWFsaXplU3RhdGUpIHtcbiAgY29uc3QgaW5pdGlhbCA9IG1ha2VFbXB0eVN0b3JlU3RhdGUkMigpO1xuICBpbml0aWFsaXplU3RhdGUoe1xuICAgIHNldDogKGF0b20sIHZhbHVlKSA9PiB7XG4gICAgICBjb25zdCBzdGF0ZSA9IGluaXRpYWwuY3VycmVudFRyZWU7XG4gICAgICBjb25zdCB3cml0ZXMgPSBzZXROb2RlVmFsdWUkMihzdG9yZSwgc3RhdGUsIGF0b20ua2V5LCB2YWx1ZSk7XG4gICAgICBjb25zdCB3cml0dGVuTm9kZXMgPSBuZXcgU2V0KHdyaXRlcy5rZXlzKCkpO1xuICAgICAgY29uc3Qgbm9udmFsaWRhdGVkQXRvbXMgPSBzdGF0ZS5ub252YWxpZGF0ZWRBdG9tcy5jbG9uZSgpO1xuXG4gICAgICBmb3IgKGNvbnN0IG4gb2Ygd3JpdHRlbk5vZGVzKSB7XG4gICAgICAgIG5vbnZhbGlkYXRlZEF0b21zLmRlbGV0ZShuKTtcbiAgICAgIH1cblxuICAgICAgaW5pdGlhbC5jdXJyZW50VHJlZSA9IHsgLi4uc3RhdGUsXG4gICAgICAgIGRpcnR5QXRvbXM6IFJlY29pbF91bmlvblNldHMoc3RhdGUuZGlydHlBdG9tcywgd3JpdHRlbk5vZGVzKSxcbiAgICAgICAgYXRvbVZhbHVlczogYXBwbHlBdG9tVmFsdWVXcml0ZXMkMShzdGF0ZS5hdG9tVmFsdWVzLCB3cml0ZXMpLFxuICAgICAgICAvLyBOQjogUExFQVNFIHVuLWV4cG9ydCBhcHBseUF0b21WYWx1ZVdyaXRlcyB3aGVuIGRlbGV0aW5nIHRoaXMgY29kZVxuICAgICAgICBub252YWxpZGF0ZWRBdG9tc1xuICAgICAgfTtcbiAgICB9LFxuICAgIHNldFVudmFsaWRhdGVkQXRvbVZhbHVlczogYXRvbVZhbHVlcyA9PiB7XG4gICAgICAvLyBGSVhNRSByZXBsYWNlIHRoaXMgd2l0aCBhIG11dGF0aXZlIGxvb3BcbiAgICAgIGF0b21WYWx1ZXMuZm9yRWFjaCgodiwgaykgPT4ge1xuICAgICAgICBpbml0aWFsLmN1cnJlbnRUcmVlID0gc2V0VW52YWxpZGF0ZWRBdG9tVmFsdWVfREVQUkVDQVRFRCQxKGluaXRpYWwuY3VycmVudFRyZWUsIGssIHYpO1xuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGluaXRpYWw7XG59IC8vIEluaXRpYWxpemUgc3RhdGUgc25hcHNob3QgZm9yIDxSZWNvaWxSb290PiBmb3IgdGhlIGluaXRpYWxpemVTdGF0ZSBwcm9wLlxuLy8gQXRvbSBlZmZlY3QgaW5pdGlhbGl6YXRpb24gdGFrZXMgcHJlY2VkZW5jZSBvdmVyIHRoaXMgcHJvcC5cbi8vIEFueSBhdG9tIGVmZmVjdHMgd2lsbCBiZSBydW4gYmVmb3JlIGluaXRpYWxpemF0aW9uLCBidXQgdGhlbiBjbGVhbmVkIHVwLFxuLy8gdGhleSBhcmUgdGhlbiByZS1ydW4gd2hlbiB1c2VkIGFzIHBhcnQgb2YgcmVuZGVyaW5nLiAgVGhlc2Ugc2VtYW50aWNzIGFyZVxuLy8gY29tcGF0aWJsZSB3aXRoIFJlYWN0IFN0cmljdE1vZGUgd2hlcmUgZWZmZWN0cyBtYXkgYmUgcmUtcnVuIG11bHRpcGxlIHRpbWVzXG4vLyBidXQgc3RhdGUgaW5pdGlhbGl6YXRpb24gb25seSBoYXBwZW5zIG9uY2UgdGhlIGZpcnN0IHRpbWUuXG5cblxuZnVuY3Rpb24gaW5pdGlhbFN0b3JlU3RhdGUoaW5pdGlhbGl6ZVN0YXRlKSB7XG4gIC8vIEluaXRpYWxpemUgYSBzbmFwc2hvdCBhbmQgZ2V0IGl0cyBzdG9yZVxuICBjb25zdCBzbmFwc2hvdCA9IGZyZXNoU25hcHNob3QkMShpbml0aWFsaXplU3RhdGUpO1xuICBjb25zdCBzdG9yZVN0YXRlID0gc25hcHNob3QuZ2V0U3RvcmVfSU5URVJOQUwoKS5nZXRTdGF0ZSgpOyAvLyBDb3VudGVyYWN0IHRoZSBzbmFwc2hvdCBhdXRvLXJlbGVhc2VcblxuICBzbmFwc2hvdC5yZXRhaW4oKTsgLy8gQ2xlYW51cCBhbnkgZWZmZWN0cyBydW4gZHVyaW5nIGluaXRpYWxpemF0aW9uIGFuZCBjbGVhciB0aGUgaGFuZGxlcnMgc29cbiAgLy8gdGhleSB3aWxsIHJlLWluaXRpYWxpemUgaWYgdXNlZCBkdXJpbmcgcmVuZGVyaW5nLiAgVGhpcyBhbGxvd3MgYXRvbSBlZmZlY3RcbiAgLy8gaW5pdGlhbGl6YXRpb24gdG8gdGFrZSBwcmVjZWRlbmNlIG92ZXIgaW5pdGlhbGl6ZVN0YXRlIGFuZCBiZSBjb21wYXRpYmxlXG4gIC8vIHdpdGggU3RyaWN0TW9kZSBzZW1hbnRpY3MuXG5cbiAgc3RvcmVTdGF0ZS5ub2RlQ2xlYW51cEZ1bmN0aW9ucy5mb3JFYWNoKGNsZWFudXAgPT4gY2xlYW51cCgpKTtcbiAgc3RvcmVTdGF0ZS5ub2RlQ2xlYW51cEZ1bmN0aW9ucy5jbGVhcigpO1xuICByZXR1cm4gc3RvcmVTdGF0ZTtcbn1cblxubGV0IG5leHRJRCA9IDA7XG5cbmZ1bmN0aW9uIFJlY29pbFJvb3RfSU5URVJOQUwoe1xuICBpbml0aWFsaXplU3RhdGVfREVQUkVDQVRFRCxcbiAgaW5pdGlhbGl6ZVN0YXRlLFxuICBzdG9yZV9JTlRFUk5BTDogc3RvcmVQcm9wLFxuICAvLyBGb3IgdXNlIHdpdGggUmVhY3QgXCJjb250ZXh0IGJyaWRnaW5nXCJcbiAgY2hpbGRyZW5cbn0pIHtcbiAgLy8gcHJldHRpZXItaWdub3JlXG4gIC8vIEBmYi1vbmx5OiB1c2VFZmZlY3QoKCkgPT4ge1xuICAvLyBAZmItb25seTogaWYgKGdreCgncmVjb2lsX3VzYWdlX2xvZ2dpbmcnKSkge1xuICAvLyBAZmItb25seTogdHJ5IHtcbiAgLy8gQGZiLW9ubHk6IFJlY29pbFVzYWdlTG9nRmFsY29FdmVudC5sb2coKCkgPT4gKHtcbiAgLy8gQGZiLW9ubHk6IHR5cGU6IFJlY29pbHVzYWdlbG9nRXZlbnQuUkVDT0lMX1JPT1RfTU9VTlRFRCxcbiAgLy8gQGZiLW9ubHk6IHBhdGg6IFVSSS5nZXRSZXF1ZXN0VVJJKCkuZ2V0UGF0aCgpLFxuICAvLyBAZmItb25seTogfSkpO1xuICAvLyBAZmItb25seTogfSBjYXRjaCB7XG4gIC8vIEBmYi1vbmx5OiByZWNvdmVyYWJsZVZpb2xhdGlvbihcbiAgLy8gQGZiLW9ubHk6ICdFcnJvciB3aGVuIGxvZ2dpbmcgUmVjb2lsIFVzYWdlIGV2ZW50JyxcbiAgLy8gQGZiLW9ubHk6ICdyZWNvaWwnLFxuICAvLyBAZmItb25seTogKTtcbiAgLy8gQGZiLW9ubHk6IH1cbiAgLy8gQGZiLW9ubHk6IH1cbiAgLy8gQGZiLW9ubHk6IH0sIFtdKTtcbiAgbGV0IHN0b3JlU3RhdGVSZWY7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcHJlZmVyLWNvbnN0XG5cbiAgY29uc3QgZ2V0R3JhcGggPSB2ZXJzaW9uID0+IHtcbiAgICBjb25zdCBncmFwaHMgPSBzdG9yZVN0YXRlUmVmLmN1cnJlbnQuZ3JhcGhzQnlWZXJzaW9uO1xuXG4gICAgaWYgKGdyYXBocy5oYXModmVyc2lvbikpIHtcbiAgICAgIHJldHVybiBSZWNvaWxfbnVsbHRocm93cyhncmFwaHMuZ2V0KHZlcnNpb24pKTtcbiAgICB9XG5cbiAgICBjb25zdCBuZXdHcmFwaCA9IGdyYXBoJDIoKTtcbiAgICBncmFwaHMuc2V0KHZlcnNpb24sIG5ld0dyYXBoKTtcbiAgICByZXR1cm4gbmV3R3JhcGg7XG4gIH07XG5cbiAgY29uc3Qgc3Vic2NyaWJlVG9UcmFuc2FjdGlvbnMgPSAoY2FsbGJhY2ssIGtleSkgPT4ge1xuICAgIGlmIChrZXkgPT0gbnVsbCkge1xuICAgICAgLy8gR2xvYmFsIHRyYW5zYWN0aW9uIHN1YnNjcmlwdGlvbnNcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgdHJhbnNhY3Rpb25TdWJzY3JpcHRpb25zXG4gICAgICB9ID0gc3RvcmVSZWYuY3VycmVudC5nZXRTdGF0ZSgpO1xuICAgICAgY29uc3QgaWQgPSBuZXh0SUQrKztcbiAgICAgIHRyYW5zYWN0aW9uU3Vic2NyaXB0aW9ucy5zZXQoaWQsIGNhbGxiYWNrKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlbGVhc2U6ICgpID0+IHtcbiAgICAgICAgICB0cmFuc2FjdGlvblN1YnNjcmlwdGlvbnMuZGVsZXRlKGlkKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gTm9kZS1zcGVjaWZpYyB0cmFuc2FjdGlvbiBzdWJzY3JpcHRpb25zOlxuICAgICAgY29uc3Qge1xuICAgICAgICBub2RlVHJhbnNhY3Rpb25TdWJzY3JpcHRpb25zXG4gICAgICB9ID0gc3RvcmVSZWYuY3VycmVudC5nZXRTdGF0ZSgpO1xuXG4gICAgICBpZiAoIW5vZGVUcmFuc2FjdGlvblN1YnNjcmlwdGlvbnMuaGFzKGtleSkpIHtcbiAgICAgICAgbm9kZVRyYW5zYWN0aW9uU3Vic2NyaXB0aW9ucy5zZXQoa2V5LCBuZXcgTWFwKCkpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBpZCA9IG5leHRJRCsrO1xuICAgICAgUmVjb2lsX251bGx0aHJvd3Mobm9kZVRyYW5zYWN0aW9uU3Vic2NyaXB0aW9ucy5nZXQoa2V5KSkuc2V0KGlkLCBjYWxsYmFjayk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZWxlYXNlOiAoKSA9PiB7XG4gICAgICAgICAgY29uc3Qgc3VicyA9IG5vZGVUcmFuc2FjdGlvblN1YnNjcmlwdGlvbnMuZ2V0KGtleSk7XG5cbiAgICAgICAgICBpZiAoc3Vicykge1xuICAgICAgICAgICAgc3Vicy5kZWxldGUoaWQpO1xuXG4gICAgICAgICAgICBpZiAoc3Vicy5zaXplID09PSAwKSB7XG4gICAgICAgICAgICAgIG5vZGVUcmFuc2FjdGlvblN1YnNjcmlwdGlvbnMuZGVsZXRlKGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBhZGRUcmFuc2FjdGlvbk1ldGFkYXRhID0gbWV0YWRhdGEgPT4ge1xuICAgIHN0YXJ0TmV4dFRyZWVJZk5lZWRlZChzdG9yZVJlZi5jdXJyZW50KTtcblxuICAgIGZvciAoY29uc3QgayBvZiBPYmplY3Qua2V5cyhtZXRhZGF0YSkpIHtcbiAgICAgIFJlY29pbF9udWxsdGhyb3dzKHN0b3JlUmVmLmN1cnJlbnQuZ2V0U3RhdGUoKS5uZXh0VHJlZSkudHJhbnNhY3Rpb25NZXRhZGF0YVtrXSA9IG1ldGFkYXRhW2tdO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCByZXBsYWNlU3RhdGUgPSByZXBsYWNlciA9PiB7XG4gICAgc3RhcnROZXh0VHJlZUlmTmVlZGVkKHN0b3JlUmVmLmN1cnJlbnQpOyAvLyBVc2UgcmVwbGFjZXIgdG8gZ2V0IHRoZSBuZXh0IHN0YXRlOlxuXG4gICAgY29uc3QgbmV4dFRyZWUgPSBSZWNvaWxfbnVsbHRocm93cyhzdG9yZVN0YXRlUmVmLmN1cnJlbnQubmV4dFRyZWUpO1xuICAgIGxldCByZXBsYWNlZDtcblxuICAgIHRyeSB7XG4gICAgICBzdGF0ZVJlcGxhY2VySXNCZWluZ0V4ZWN1dGVkID0gdHJ1ZTtcbiAgICAgIHJlcGxhY2VkID0gcmVwbGFjZXIobmV4dFRyZWUpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBzdGF0ZVJlcGxhY2VySXNCZWluZ0V4ZWN1dGVkID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKHJlcGxhY2VkID09PSBuZXh0VHJlZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB3aW5kb3cuJHJlY29pbERlYnVnU3RhdGVzLnB1c2gocmVwbGFjZWQpOyAvLyBUT0RPIHRoaXMgc2hvdWxkbid0IGhhcHBlbiBoZXJlIGJlY2F1c2UgaXQncyBub3QgYmF0Y2hlZFxuICAgICAgfVxuICAgIH0gLy8gU2F2ZSBjaGFuZ2VzIHRvIG5leHRUcmVlIGFuZCBzY2hlZHVsZSBhIFJlYWN0IHVwZGF0ZTpcblxuXG4gICAgc3RvcmVTdGF0ZVJlZi5jdXJyZW50Lm5leHRUcmVlID0gcmVwbGFjZWQ7XG5cbiAgICBpZiAocmVhY3RNb2RlJDIoKS5lYXJseSkge1xuICAgICAgbm90aWZ5Q29tcG9uZW50cyhzdG9yZVJlZi5jdXJyZW50LCBzdG9yZVN0YXRlUmVmLmN1cnJlbnQsIHJlcGxhY2VkKTtcbiAgICB9XG5cbiAgICBSZWNvaWxfbnVsbHRocm93cyhub3RpZnlCYXRjaGVyT2ZDaGFuZ2UuY3VycmVudCkoKTtcbiAgfTtcblxuICBjb25zdCBub3RpZnlCYXRjaGVyT2ZDaGFuZ2UgPSB1c2VSZWYkMShudWxsKTtcbiAgY29uc3Qgc2V0Tm90aWZ5QmF0Y2hlck9mQ2hhbmdlID0gdXNlQ2FsbGJhY2soeCA9PiB7XG4gICAgbm90aWZ5QmF0Y2hlck9mQ2hhbmdlLmN1cnJlbnQgPSB4O1xuICB9LCBbbm90aWZ5QmF0Y2hlck9mQ2hhbmdlXSk7XG4gIGNvbnN0IHN0b3JlUmVmID0gUmVjb2lsX3VzZVJlZkluaXRPbmNlKCgpID0+IHN0b3JlUHJvcCAhPT0gbnVsbCAmJiBzdG9yZVByb3AgIT09IHZvaWQgMCA/IHN0b3JlUHJvcCA6IHtcbiAgICBzdG9yZUlEOiBnZXROZXh0U3RvcmVJRCQyKCksXG4gICAgZ2V0U3RhdGU6ICgpID0+IHN0b3JlU3RhdGVSZWYuY3VycmVudCxcbiAgICByZXBsYWNlU3RhdGUsXG4gICAgZ2V0R3JhcGgsXG4gICAgc3Vic2NyaWJlVG9UcmFuc2FjdGlvbnMsXG4gICAgYWRkVHJhbnNhY3Rpb25NZXRhZGF0YVxuICB9KTtcblxuICBpZiAoc3RvcmVQcm9wICE9IG51bGwpIHtcbiAgICBzdG9yZVJlZi5jdXJyZW50ID0gc3RvcmVQcm9wO1xuICB9XG5cbiAgc3RvcmVTdGF0ZVJlZiA9IFJlY29pbF91c2VSZWZJbml0T25jZSgoKSA9PiBpbml0aWFsaXplU3RhdGVfREVQUkVDQVRFRCAhPSBudWxsID8gaW5pdGlhbFN0b3JlU3RhdGVfREVQUkVDQVRFRChzdG9yZVJlZi5jdXJyZW50LCBpbml0aWFsaXplU3RhdGVfREVQUkVDQVRFRCkgOiBpbml0aWFsaXplU3RhdGUgIT0gbnVsbCA/IGluaXRpYWxTdG9yZVN0YXRlKGluaXRpYWxpemVTdGF0ZSkgOiBtYWtlRW1wdHlTdG9yZVN0YXRlJDIoKSk7XG4gIGNvbnN0IG11dGFibGVTb3VyY2UgPSB1c2VNZW1vKCgpID0+IGNyZWF0ZU11dGFibGVTb3VyY2UkMSA9PT0gbnVsbCB8fCBjcmVhdGVNdXRhYmxlU291cmNlJDEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNyZWF0ZU11dGFibGVTb3VyY2UkMShzdG9yZVN0YXRlUmVmLCAoKSA9PiBzdG9yZVN0YXRlUmVmLmN1cnJlbnQuY3VycmVudFRyZWUudmVyc2lvbiksIFtzdG9yZVN0YXRlUmVmXSk7IC8vIENsZWFudXAgd2hlbiB0aGUgPFJlY29pbFJvb3Q+IGlzIHVubW91bnRlZFxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgLy8gUmVhY3QgaXMgZnJlZSB0byBjYWxsIGVmZmVjdCBjbGVhbnVwIGhhbmRsZXJzIGFuZCBlZmZlY3RzIGF0IHdpbGwsIHRoZVxuICAgIC8vIGRlcHMgYXJyYXkgaXMgb25seSBhbiBvcHRpbWl6YXRpb24uICBGb3IgZXhhbXBsZSwgUmVhY3Qgc3RyaWN0IG1vZGVcbiAgICAvLyB3aWxsIGV4ZWN1dGUgZWFjaCBlZmZlY3QgdHdpY2UgZm9yIHRlc3RpbmcuICBUaGVyZWZvcmUsIHdlIG5lZWQgc3ltbWV0cnlcbiAgICAvLyB0byByZS1pbml0aWFsaXplIGFsbCBrbm93biBhdG9tcyBhZnRlciB0aGV5IHdlcmUgY2xlYW5lZCB1cC5cbiAgICBjb25zdCBzdG9yZSA9IHN0b3JlUmVmLmN1cnJlbnQ7XG5cbiAgICBmb3IgKGNvbnN0IGF0b21LZXkgb2YgbmV3IFNldChzdG9yZS5nZXRTdGF0ZSgpLmtub3duQXRvbXMpKSB7XG4gICAgICBpbml0aWFsaXplTm9kZSQyKHN0b3JlLCBhdG9tS2V5LCAnZ2V0Jyk7XG4gICAgfVxuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGZvciAoY29uc3QgYXRvbUtleSBvZiBzdG9yZS5nZXRTdGF0ZSgpLmtub3duQXRvbXMpIHtcbiAgICAgICAgY2xlYW5VcE5vZGUkMihzdG9yZSwgYXRvbUtleSk7XG4gICAgICB9XG4gICAgfTtcbiAgfSwgW3N0b3JlUmVmXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovcmVhY3QuY3JlYXRlRWxlbWVudChBcHBDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHN0b3JlUmVmXG4gIH0sIC8qI19fUFVSRV9fKi9yZWFjdC5jcmVhdGVFbGVtZW50KE11dGFibGVTb3VyY2VDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IG11dGFibGVTb3VyY2VcbiAgfSwgLyojX19QVVJFX18qL3JlYWN0LmNyZWF0ZUVsZW1lbnQoQmF0Y2hlciwge1xuICAgIHNldE5vdGlmeUJhdGNoZXJPZkNoYW5nZTogc2V0Tm90aWZ5QmF0Y2hlck9mQ2hhbmdlXG4gIH0pLCBjaGlsZHJlbikpO1xufVxuXG5mdW5jdGlvbiBSZWNvaWxSb290KHByb3BzKSB7XG4gIGNvbnN0IHtcbiAgICBvdmVycmlkZSxcbiAgICAuLi5wcm9wc0V4Y2VwdE92ZXJyaWRlXG4gIH0gPSBwcm9wcztcbiAgY29uc3QgYW5jZXN0b3JTdG9yZVJlZiA9IHVzZVN0b3JlUmVmKCk7XG5cbiAgaWYgKG92ZXJyaWRlID09PSBmYWxzZSAmJiBhbmNlc3RvclN0b3JlUmVmLmN1cnJlbnQgIT09IGRlZmF1bHRTdG9yZSkge1xuICAgIC8vIElmIGFuY2VzdG9yU3RvcmVSZWYuY3VycmVudCAhPT0gZGVmYXVsdFN0b3JlLCBpdCBtZWFucyB0aGF0IHRoaXNcbiAgICAvLyBSZWNvaWxSb290IGlzIG5vdCBuZXN0ZWQgd2l0aGluIGFub3RoZXIuXG4gICAgcmV0dXJuIHByb3BzLmNoaWxkcmVuO1xuICB9XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9yZWFjdC5jcmVhdGVFbGVtZW50KFJlY29pbFJvb3RfSU5URVJOQUwsIHByb3BzRXhjZXB0T3ZlcnJpZGUpO1xufVxuXG5mdW5jdGlvbiB1c2VSZWNvaWxTdG9yZUlEKCkge1xuICByZXR1cm4gdXNlU3RvcmVSZWYoKS5jdXJyZW50LnN0b3JlSUQ7XG59XG5cbnZhciBSZWNvaWxfUmVjb2lsUm9vdCA9IHtcbiAgUmVjb2lsUm9vdCxcbiAgdXNlU3RvcmVSZWYsXG4gIHVzZVJlY29pbE11dGFibGVTb3VyY2UsXG4gIHVzZVJlY29pbFN0b3JlSUQsXG4gIG5vdGlmeUNvbXBvbmVudHNfRk9SX1RFU1RJTkc6IG5vdGlmeUNvbXBvbmVudHMsXG4gIHNlbmRFbmRPZkJhdGNoTm90aWZpY2F0aW9uc19GT1JfVEVTVElORzogc2VuZEVuZE9mQmF0Y2hOb3RpZmljYXRpb25zXG59O1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICogQG9uY2FsbCByZWNvaWxcbiAqL1xuXG5mdW5jdGlvbiBzaGFsbG93QXJyYXlFcXVhbChhLCBiKSB7XG4gIGlmIChhID09PSBiKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZm9yIChsZXQgaSA9IDAsIGwgPSBhLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGlmIChhW2ldICE9PSBiW2ldKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbnZhciBSZWNvaWxfc2hhbGxvd0FycmF5RXF1YWwgPSBzaGFsbG93QXJyYXlFcXVhbDtcblxuY29uc3Qge1xuICB1c2VFZmZlY3Q6IHVzZUVmZmVjdCQxLFxuICB1c2VSZWY6IHVzZVJlZiQyXG59ID0gcmVhY3Q7XG5cbmZ1bmN0aW9uIHVzZVByZXZpb3VzKHZhbHVlKSB7XG4gIGNvbnN0IHJlZiA9IHVzZVJlZiQyKCk7XG4gIHVzZUVmZmVjdCQxKCgpID0+IHtcbiAgICByZWYuY3VycmVudCA9IHZhbHVlO1xuICB9KTtcbiAgcmV0dXJuIHJlZi5jdXJyZW50O1xufVxuXG52YXIgUmVjb2lsX3VzZVByZXZpb3VzID0gdXNlUHJldmlvdXM7XG5cbmNvbnN0IHtcbiAgdXNlU3RvcmVSZWY6IHVzZVN0b3JlUmVmJDFcbn0gPSBSZWNvaWxfUmVjb2lsUm9vdDtcblxuY29uc3Qge1xuICBTVVNQRU5TRV9USU1FT1VUX01TOiBTVVNQRU5TRV9USU1FT1VUX01TJDFcbn0gPSBSZWNvaWxfUmV0ZW50aW9uO1xuXG5jb25zdCB7XG4gIHVwZGF0ZVJldGFpbkNvdW50OiB1cGRhdGVSZXRhaW5Db3VudCQyXG59ID0gUmVjb2lsX1JldGVudGlvbjtcblxuY29uc3Qge1xuICBSZXRlbnRpb25ab25lOiBSZXRlbnRpb25ab25lJDNcbn0gPSBSZWNvaWxfUmV0ZW50aW9uWm9uZTtcblxuY29uc3Qge1xuICB1c2VFZmZlY3Q6IHVzZUVmZmVjdCQyLFxuICB1c2VSZWY6IHVzZVJlZiQzXG59ID0gcmVhY3Q7XG5cbmNvbnN0IHtcbiAgaXNTU1I6IGlzU1NSJDJcbn0gPSBSZWNvaWxfRW52aXJvbm1lbnQ7XG5cblxuXG5cblxuIC8vIEkgZG9uJ3Qgc2VlIGEgd2F5IHRvIGF2b2lkIHRoZSBhbnkgdHlwZSBoZXJlIGJlY2F1c2Ugd2Ugd2FudCB0byBhY2NlcHQgcmVhZGFibGVcbi8vIGFuZCB3cml0YWJsZSB2YWx1ZXMgd2l0aCBhbnkgdHlwZSBwYXJhbWV0ZXIsIGJ1dCBub3JtYWxseSB3aXRoIHdyaXRhYmxlIG9uZXNcbi8vIFJlY29pbFN0YXRlPFNvbWVUPiBpcyBub3QgYSBzdWJ0eXBlIG9mIFJlY29pbFN0YXRlPG1peGVkPi5cblxuXG4vLyBmbG93bGludC1saW5lIHVuY2xlYXItdHlwZTpvZmZcbmZ1bmN0aW9uIHVzZVJldGFpbih0b1JldGFpbikge1xuICBpZiAoIVJlY29pbF9na3goJ3JlY29pbF9tZW1vcnlfbWFuYWdhbWVudF8yMDIwJykpIHtcbiAgICByZXR1cm47XG4gIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZiLXd3dy9yZWFjdC1ob29rc1xuXG5cbiAgcmV0dXJuIHVzZVJldGFpbl9BQ1RVQUwodG9SZXRhaW4pO1xufVxuXG5mdW5jdGlvbiB1c2VSZXRhaW5fQUNUVUFMKHRvUmV0YWluKSB7XG4gIGNvbnN0IGFycmF5ID0gQXJyYXkuaXNBcnJheSh0b1JldGFpbikgPyB0b1JldGFpbiA6IFt0b1JldGFpbl07XG4gIGNvbnN0IHJldGFpbmFibGVzID0gYXJyYXkubWFwKGEgPT4gYSBpbnN0YW5jZW9mIFJldGVudGlvblpvbmUkMyA/IGEgOiBhLmtleSk7XG4gIGNvbnN0IHN0b3JlUmVmID0gdXNlU3RvcmVSZWYkMSgpO1xuICB1c2VFZmZlY3QkMigoKSA9PiB7XG4gICAgaWYgKCFSZWNvaWxfZ2t4KCdyZWNvaWxfbWVtb3J5X21hbmFnYW1lbnRfMjAyMCcpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qgc3RvcmUgPSBzdG9yZVJlZi5jdXJyZW50O1xuXG4gICAgaWYgKHRpbWVvdXRJRC5jdXJyZW50ICYmICFpc1NTUiQyKSB7XG4gICAgICAvLyBBbHJlYWR5IHBlcmZvcm1lZCBhIHRlbXBvcmFyeSByZXRhaW4gb24gcmVuZGVyLCBzaW1wbHkgY2FuY2VsIHRoZSByZWxlYXNlXG4gICAgICAvLyBvZiB0aGF0IHRlbXBvcmFyeSByZXRhaW4uXG4gICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHRpbWVvdXRJRC5jdXJyZW50KTtcbiAgICAgIHRpbWVvdXRJRC5jdXJyZW50ID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChjb25zdCByIG9mIHJldGFpbmFibGVzKSB7XG4gICAgICAgIHVwZGF0ZVJldGFpbkNvdW50JDIoc3RvcmUsIHIsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBmb3IgKGNvbnN0IHIgb2YgcmV0YWluYWJsZXMpIHtcbiAgICAgICAgdXBkYXRlUmV0YWluQ291bnQkMihzdG9yZSwgciwgLTEpO1xuICAgICAgfVxuICAgIH07IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmYi13d3cvcmVhY3QtaG9va3MtZGVwc1xuICB9LCBbc3RvcmVSZWYsIC4uLnJldGFpbmFibGVzXSk7IC8vIFdlIHdhbnQgdG8gcmV0YWluIGlmIHRoZSBjb21wb25lbnQgc3VzcGVuZHMuIFRoaXMgaXMgdGVycmlibGUgYnV0IHRoZSBTdXNwZW5zZVxuICAvLyBBUEkgYWZmb3JkcyB1cyBubyBiZXR0ZXIgb3B0aW9uLiBJZiB3ZSBzdXNwZW5kIGFuZCBuZXZlciBjb21taXQgYWZ0ZXIgc29tZVxuICAvLyBzZWNvbmRzLCB0aGVuIHJlbGVhc2UuIFRoZSAnYWN0dWFsJyByZXRhaW4vcmVsZWFzZSBpbiB0aGUgZWZmZWN0IGFib3ZlXG4gIC8vIGNhbmNlbHMgdGhpcy5cblxuICBjb25zdCB0aW1lb3V0SUQgPSB1c2VSZWYkMygpO1xuICBjb25zdCBwcmV2aW91c1JldGFpbmFibGVzID0gUmVjb2lsX3VzZVByZXZpb3VzKHJldGFpbmFibGVzKTtcblxuICBpZiAoIWlzU1NSJDIgJiYgKHByZXZpb3VzUmV0YWluYWJsZXMgPT09IHVuZGVmaW5lZCB8fCAhUmVjb2lsX3NoYWxsb3dBcnJheUVxdWFsKHByZXZpb3VzUmV0YWluYWJsZXMsIHJldGFpbmFibGVzKSkpIHtcbiAgICBjb25zdCBzdG9yZSA9IHN0b3JlUmVmLmN1cnJlbnQ7XG5cbiAgICBmb3IgKGNvbnN0IHIgb2YgcmV0YWluYWJsZXMpIHtcbiAgICAgIHVwZGF0ZVJldGFpbkNvdW50JDIoc3RvcmUsIHIsIDEpO1xuICAgIH1cblxuICAgIGlmIChwcmV2aW91c1JldGFpbmFibGVzKSB7XG4gICAgICBmb3IgKGNvbnN0IHIgb2YgcHJldmlvdXNSZXRhaW5hYmxlcykge1xuICAgICAgICB1cGRhdGVSZXRhaW5Db3VudCQyKHN0b3JlLCByLCAtMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRpbWVvdXRJRC5jdXJyZW50KSB7XG4gICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHRpbWVvdXRJRC5jdXJyZW50KTtcbiAgICB9XG5cbiAgICB0aW1lb3V0SUQuY3VycmVudCA9IHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRpbWVvdXRJRC5jdXJyZW50ID0gbnVsbDtcblxuICAgICAgZm9yIChjb25zdCByIG9mIHJldGFpbmFibGVzKSB7XG4gICAgICAgIHVwZGF0ZVJldGFpbkNvdW50JDIoc3RvcmUsIHIsIC0xKTtcbiAgICAgIH1cbiAgICB9LCBTVVNQRU5TRV9USU1FT1VUX01TJDEpO1xuICB9XG59XG5cbnZhciBSZWNvaWxfdXNlUmV0YWluID0gdXNlUmV0YWluO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICogQG9uY2FsbCByZWNvaWxcbiAqL1xuLyoqXG4gKiBUSElTIENPREUgSEFTIEJFRU4gQ09NTUVOVEVEIE9VVCBJTlRFTlRJT05BTExZXG4gKlxuICogVGhpcyB0ZWNobmlxdWUgb2YgZ2V0dGluZyB0aGUgY29tcG9uZW50IG5hbWUgaXMgaW1wZXJmZWN0LCBzaW5jZSBpdCBib3RoIG9ubHlcbiAqIHdvcmtzIGluIGEgbm9uLW1pbmlmaWVkIGNvZGUgYmFzZSwgYW5kIG1vcmUgaW1wb3J0YW50bHkgaW50cm9kdWNlcyBwZXJmb3JtYW5jZVxuICogcHJvYmxlbXMgc2luY2UgaXQgcmVsaWVzIGluIHRocm93aW5nIGVycm9ycyB3aGljaCBpcyBhbiBleHBlbnNpdmUgb3BlcmF0aW9uLlxuICpcbiAqIEF0IHNvbWUgcG9pbnQgd2UgbWF5IHdhbnQgdG8gcmVldmFsdWF0ZSB0aGlzIHRlY2huaXF1ZSBoZW5jZSB3aHkgd2UgaGF2ZSBjb21tZW50ZWRcbiAqIHRoaXMgY29kZSBvdXQsIHJhdGhlciB0aGFuIGRlbGV0ZSBpdCBhbGwgdG9nZXRoZXIuXG4gKi9cbi8vIGNvbnN0IHt1c2VSZWZ9ID0gcmVxdWlyZSgncmVhY3QnKTtcbi8vIGNvbnN0IGdreCA9IHJlcXVpcmUoJ3JlY29pbC1zaGFyZWQvdXRpbC9SZWNvaWxfZ2t4Jyk7XG4vLyBjb25zdCBzdGFja1RyYWNlUGFyc2VyID0gcmVxdWlyZSgncmVjb2lsLXNoYXJlZC91dGlsL1JlY29pbF9zdGFja1RyYWNlUGFyc2VyJyk7XG5cbmZ1bmN0aW9uIHVzZUNvbXBvbmVudE5hbWUoKSB7XG4gIC8vIGNvbnN0IG5hbWVSZWYgPSB1c2VSZWYoKTtcbiAgLy8gaWYgKF9fREVWX18pIHtcbiAgLy8gICBpZiAoZ2t4KCdyZWNvaWxfaW5mZXJfY29tcG9uZW50X25hbWVzJykpIHtcbiAgLy8gICAgIGlmIChuYW1lUmVmLmN1cnJlbnQgPT09IHVuZGVmaW5lZCkge1xuICAvLyAgICAgICAvLyBUaGVyZSBpcyBubyBibGVzc2VkIHdheSB0byBkZXRlcm1pbmUgdGhlIGNhbGxpbmcgUmVhY3QgY29tcG9uZW50IGZyb21cbiAgLy8gICAgICAgLy8gd2l0aGluIGEgaG9vay4gVGhpcyBoYWNrIHVzZXMgdGhlIGZhY3QgdGhhdCBob29rcyBtdXN0IHN0YXJ0IHdpdGggJ3VzZSdcbiAgLy8gICAgICAgLy8gYW5kIHRoYXQgaG9va3MgYXJlIGVpdGhlciBjYWxsZWQgYnkgUmVhY3QgQ29tcG9uZW50cyBvciBvdGhlciBob29rcy4gSXRcbiAgLy8gICAgICAgLy8gZm9sbG93cyB0aGVyZWZvcmUsIHRoYXQgdG8gZmluZCB0aGUgY2FsbGluZyBjb21wb25lbnQsIHlvdSBzaW1wbHkgbmVlZFxuICAvLyAgICAgICAvLyB0byBsb29rIGRvd24gdGhlIHN0YWNrIGFuZCBmaW5kIHRoZSBmaXJzdCBmdW5jdGlvbiB3aGljaCBkb2Vzbid0IHN0YXJ0XG4gIC8vICAgICAgIC8vIHdpdGggJ3VzZScuIFdlIGFyZSBvbmx5IGVuYWJsaW5nIHRoaXMgaW4gZGV2IGZvciBub3csIHNpbmNlIG9uY2UgdGhlXG4gIC8vICAgICAgIC8vIGNvZGViYXNlIGlzIG1pbmlmaWVkLCB0aGUgbmFtaW5nIGFzc3VtcHRpb25zIG5vIGxvbmdlciBob2xkIHRydWUuXG4gIC8vICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmYi13d3cvbm8tbmV3LWVycm9yXG4gIC8vICAgICAgIGNvbnN0IGZyYW1lcyA9IHN0YWNrVHJhY2VQYXJzZXIobmV3IEVycm9yKCkuc3RhY2spO1xuICAvLyAgICAgICBmb3IgKGNvbnN0IHttZXRob2ROYW1lfSBvZiBmcmFtZXMpIHtcbiAgLy8gICAgICAgICAvLyBJIG9ic2VydmVkIGNhc2VzIHdoZXJlIHRoZSBmcmFtZSB3YXMgb2YgdGhlIGZvcm0gJ09iamVjdC51c2VYWFgnXG4gIC8vICAgICAgICAgLy8gaGVuY2Ugd2h5IEknbSBzZWFyY2hpbmcgZm9yIGhvb2tzIGZvbGxvd2luZyBhIHdvcmQgYm91bmRhcnlcbiAgLy8gICAgICAgICBpZiAoIW1ldGhvZE5hbWUubWF0Y2goL1xcYnVzZVteXFxiXSskLykpIHtcbiAgLy8gICAgICAgICAgIHJldHVybiAobmFtZVJlZi5jdXJyZW50ID0gbWV0aG9kTmFtZSk7XG4gIC8vICAgICAgICAgfVxuICAvLyAgICAgICB9XG4gIC8vICAgICAgIG5hbWVSZWYuY3VycmVudCA9IG51bGw7XG4gIC8vICAgICB9XG4gIC8vICAgICByZXR1cm4gbmFtZVJlZi5jdXJyZW50ID8/ICc8dW5hYmxlIHRvIGRldGVybWluZSBjb21wb25lbnQgbmFtZT4nO1xuICAvLyAgIH1cbiAgLy8gfVxuICAvLyBAZmItb25seTogcmV0dXJuIFwiPGNvbXBvbmVudCBuYW1lIG9ubHkgYXZhaWxhYmxlIHdoZW4gYm90aCBpbiBkZXYgbW9kZSBhbmQgd2hlbiBwYXNzaW5nIEdLICdyZWNvaWxfaW5mZXJfY29tcG9uZW50X25hbWVzJz5cIjtcbiAgcmV0dXJuICc8Y29tcG9uZW50IG5hbWUgbm90IGF2YWlsYWJsZT4nOyAvLyBAb3NzLW9ubHlcbn1cblxudmFyIFJlY29pbF91c2VDb21wb25lbnROYW1lID0gdXNlQ29tcG9uZW50TmFtZTtcblxuY29uc3Qge1xuICBiYXRjaFVwZGF0ZXM6IGJhdGNoVXBkYXRlcyQyXG59ID0gUmVjb2lsX0JhdGNoaW5nO1xuXG5jb25zdCB7XG4gIERFRkFVTFRfVkFMVUU6IERFRkFVTFRfVkFMVUUkMlxufSA9IFJlY29pbF9Ob2RlO1xuXG5jb25zdCB7XG4gIGN1cnJlbnRSZW5kZXJlclN1cHBvcnRzVXNlU3luY0V4dGVybmFsU3RvcmU6IGN1cnJlbnRSZW5kZXJlclN1cHBvcnRzVXNlU3luY0V4dGVybmFsU3RvcmUkMSxcbiAgcmVhY3RNb2RlOiByZWFjdE1vZGUkMyxcbiAgdXNlTXV0YWJsZVNvdXJjZTogdXNlTXV0YWJsZVNvdXJjZSQxLFxuICB1c2VTeW5jRXh0ZXJuYWxTdG9yZTogdXNlU3luY0V4dGVybmFsU3RvcmUkMVxufSA9IFJlY29pbF9SZWFjdE1vZGU7XG5cbmNvbnN0IHtcbiAgdXNlUmVjb2lsTXV0YWJsZVNvdXJjZTogdXNlUmVjb2lsTXV0YWJsZVNvdXJjZSQxLFxuICB1c2VTdG9yZVJlZjogdXNlU3RvcmVSZWYkMlxufSA9IFJlY29pbF9SZWNvaWxSb290O1xuXG5jb25zdCB7XG4gIGlzUmVjb2lsVmFsdWU6IGlzUmVjb2lsVmFsdWUkMlxufSA9IFJlY29pbF9SZWNvaWxWYWx1ZSQxO1xuXG5jb25zdCB7XG4gIEFic3RyYWN0UmVjb2lsVmFsdWU6IEFic3RyYWN0UmVjb2lsVmFsdWUkMyxcbiAgZ2V0UmVjb2lsVmFsdWVBc0xvYWRhYmxlOiBnZXRSZWNvaWxWYWx1ZUFzTG9hZGFibGUkMixcbiAgc2V0UmVjb2lsVmFsdWU6IHNldFJlY29pbFZhbHVlJDIsXG4gIHNldFVudmFsaWRhdGVkUmVjb2lsVmFsdWU6IHNldFVudmFsaWRhdGVkUmVjb2lsVmFsdWUkMixcbiAgc3Vic2NyaWJlVG9SZWNvaWxWYWx1ZTogc3Vic2NyaWJlVG9SZWNvaWxWYWx1ZSQxXG59ID0gUmVjb2lsX1JlY29pbFZhbHVlSW50ZXJmYWNlO1xuXG5cblxuY29uc3Qge1xuICB1c2VDYWxsYmFjazogdXNlQ2FsbGJhY2skMSxcbiAgdXNlRWZmZWN0OiB1c2VFZmZlY3QkMyxcbiAgdXNlTWVtbzogdXNlTWVtbyQxLFxuICB1c2VSZWY6IHVzZVJlZiQ0LFxuICB1c2VTdGF0ZTogdXNlU3RhdGUkMVxufSA9IHJlYWN0O1xuXG5jb25zdCB7XG4gIHNldEJ5QWRkaW5nVG9TZXQ6IHNldEJ5QWRkaW5nVG9TZXQkMlxufSA9IFJlY29pbF9Db3B5T25Xcml0ZTtcblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuZnVuY3Rpb24gaGFuZGxlTG9hZGFibGUobG9hZGFibGUsIHJlY29pbFZhbHVlLCBzdG9yZVJlZikge1xuICAvLyBXZSBjYW4ndCBqdXN0IHRocm93IHRoZSBwcm9taXNlIHdlIGFyZSB3YWl0aW5nIG9uIHRvIFN1c3BlbnNlLiAgSWYgdGhlXG4gIC8vIHVwc3RyZWFtIGRlcGVuZGVuY2llcyBjaGFuZ2UgaXQgbWF5IHByb2R1Y2UgYSBzdGF0ZSBpbiB3aGljaCB0aGUgY29tcG9uZW50XG4gIC8vIGNhbiByZW5kZXIsIGJ1dCBpdCB3b3VsZCBzdGlsbCBiZSBzdXNwZW5kZWQgb24gYSBQcm9taXNlIHRoYXQgbWF5IG5ldmVyIHJlc29sdmUuXG4gIGlmIChsb2FkYWJsZS5zdGF0ZSA9PT0gJ2hhc1ZhbHVlJykge1xuICAgIHJldHVybiBsb2FkYWJsZS5jb250ZW50cztcbiAgfSBlbHNlIGlmIChsb2FkYWJsZS5zdGF0ZSA9PT0gJ2xvYWRpbmcnKSB7XG4gICAgY29uc3QgcHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgc3RvcmVSZWYuY3VycmVudC5nZXRTdGF0ZSgpLnN1c3BlbmRlZENvbXBvbmVudFJlc29sdmVycy5hZGQocmVzb2x2ZSk7XG4gICAgfSk7IC8vICRGbG93RXhwZWN0ZWRFcnJvciBGbG93KHByb3AtbWlzc2luZykgZm9yIGludGVncmF0aW5nIHdpdGggdG9vbHMgdGhhdCBpbnNwZWN0IHRocm93biBwcm9taXNlcyBAZmItb25seVxuICAgIC8vIEBmYi1vbmx5OiBwcm9taXNlLmRpc3BsYXlOYW1lID0gYFJlY29pbCBTdGF0ZTogJHtyZWNvaWxWYWx1ZS5rZXl9YDtcblxuICAgIHRocm93IHByb21pc2U7XG4gIH0gZWxzZSBpZiAobG9hZGFibGUuc3RhdGUgPT09ICdoYXNFcnJvcicpIHtcbiAgICB0aHJvdyBsb2FkYWJsZS5jb250ZW50cztcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBSZWNvaWxfZXJyKGBJbnZhbGlkIHZhbHVlIG9mIGxvYWRhYmxlIGF0b20gXCIke3JlY29pbFZhbHVlLmtleX1cImApO1xuICB9XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlUmVjb2lsVmFsdWUocmVjb2lsVmFsdWUsIGhvb2tOYW1lKSB7XG4gIGlmICghaXNSZWNvaWxWYWx1ZSQyKHJlY29pbFZhbHVlKSkge1xuICAgIHRocm93IFJlY29pbF9lcnIoYEludmFsaWQgYXJndW1lbnQgdG8gJHtob29rTmFtZX06IGV4cGVjdGVkIGFuIGF0b20gb3Igc2VsZWN0b3IgYnV0IGdvdCAke1N0cmluZyhyZWNvaWxWYWx1ZSl9YCk7XG4gIH1cbn1cblxuLyoqXG4gKiBWYXJpb3VzIHRoaW5ncyBhcmUgYnJva2VuIHdpdGggdXNlUmVjb2lsSW50ZXJmYWNlLCBwYXJ0aWN1bGFybHkgY29uY3VycmVudFxuICogbW9kZSwgUmVhY3Qgc3RyaWN0IG1vZGUsIGFuZCBtZW1vcnkgbWFuYWdlbWVudC4gVGhleSB3aWxsIG5vdCBiZSBmaXhlZC5cbiAqICovXG5mdW5jdGlvbiB1c2VSZWNvaWxJbnRlcmZhY2VfREVQUkVDQVRFRCgpIHtcbiAgY29uc3QgY29tcG9uZW50TmFtZSA9IFJlY29pbF91c2VDb21wb25lbnROYW1lKCk7XG4gIGNvbnN0IHN0b3JlUmVmID0gdXNlU3RvcmVSZWYkMigpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZmItd3d3L3JlYWN0LW5vLXVudXNlZC1zdGF0ZS1ob29rXG5cbiAgY29uc3QgWywgZm9yY2VVcGRhdGVdID0gdXNlU3RhdGUkMShbXSk7XG4gIGNvbnN0IHJlY29pbFZhbHVlc1VzZWQgPSB1c2VSZWYkNChuZXcgU2V0KCkpO1xuICByZWNvaWxWYWx1ZXNVc2VkLmN1cnJlbnQgPSBuZXcgU2V0KCk7IC8vIFRyYWNrIHRoZSBSZWNvaWxWYWx1ZXMgdXNlZCBqdXN0IGR1cmluZyB0aGlzIHJlbmRlclxuXG4gIGNvbnN0IHByZXZpb3VzU3Vic2NyaXB0aW9ucyA9IHVzZVJlZiQ0KG5ldyBTZXQoKSk7XG4gIGNvbnN0IHN1YnNjcmlwdGlvbnMgPSB1c2VSZWYkNChuZXcgTWFwKCkpO1xuICBjb25zdCB1bnN1YnNjcmliZUZyb20gPSB1c2VDYWxsYmFjayQxKGtleSA9PiB7XG4gICAgY29uc3Qgc3ViID0gc3Vic2NyaXB0aW9ucy5jdXJyZW50LmdldChrZXkpO1xuXG4gICAgaWYgKHN1Yikge1xuICAgICAgc3ViLnJlbGVhc2UoKTtcbiAgICAgIHN1YnNjcmlwdGlvbnMuY3VycmVudC5kZWxldGUoa2V5KTtcbiAgICB9XG4gIH0sIFtzdWJzY3JpcHRpb25zXSk7XG4gIGNvbnN0IHVwZGF0ZVN0YXRlID0gdXNlQ2FsbGJhY2skMSgoX3N0YXRlLCBrZXkpID0+IHtcbiAgICBpZiAoc3Vic2NyaXB0aW9ucy5jdXJyZW50LmhhcyhrZXkpKSB7XG4gICAgICBmb3JjZVVwZGF0ZShbXSk7XG4gICAgfVxuICB9LCBbXSk7IC8vIEVmZmVjdCB0byBhZGQvcmVtb3ZlIHN1YnNjcmlwdGlvbnMgYXMgbm9kZXMgYXJlIHVzZWRcblxuICB1c2VFZmZlY3QkMygoKSA9PiB7XG4gICAgY29uc3Qgc3RvcmUgPSBzdG9yZVJlZi5jdXJyZW50O1xuICAgIFJlY29pbF9kaWZmZXJlbmNlU2V0cyhyZWNvaWxWYWx1ZXNVc2VkLmN1cnJlbnQsIHByZXZpb3VzU3Vic2NyaXB0aW9ucy5jdXJyZW50KS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICBpZiAoc3Vic2NyaXB0aW9ucy5jdXJyZW50LmhhcyhrZXkpKSB7XG4gICAgICAgIFJlY29pbF9leHBlY3RhdGlvblZpb2xhdGlvbihgRG91YmxlIHN1YnNjcmlwdGlvbiB0byBSZWNvaWxWYWx1ZSBcIiR7a2V5fVwiYCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgc3ViID0gc3Vic2NyaWJlVG9SZWNvaWxWYWx1ZSQxKHN0b3JlLCBuZXcgQWJzdHJhY3RSZWNvaWxWYWx1ZSQzKGtleSksIHN0YXRlID0+IHVwZGF0ZVN0YXRlKHN0YXRlLCBrZXkpLCBjb21wb25lbnROYW1lKTtcbiAgICAgIHN1YnNjcmlwdGlvbnMuY3VycmVudC5zZXQoa2V5LCBzdWIpO1xuICAgICAgLyoqXG4gICAgICAgKiBTaW5jZSB3ZSdyZSBzdWJzY3JpYmluZyBpbiBhbiBlZmZlY3Qgd2UgbmVlZCB0byB1cGRhdGUgdG8gdGhlIGxhdGVzdFxuICAgICAgICogdmFsdWUgb2YgdGhlIGF0b20gc2luY2UgaXQgbWF5IGhhdmUgY2hhbmdlZCBzaW5jZSB3ZSByZW5kZXJlZC4gV2UgY2FuXG4gICAgICAgKiBnbyBhaGVhZCBhbmQgZG8gdGhhdCBub3csIHVubGVzcyB3ZSdyZSBpbiB0aGUgbWlkZGxlIG9mIGEgYmF0Y2ggLS1cbiAgICAgICAqIGluIHdoaWNoIGNhc2Ugd2Ugc2hvdWxkIGRvIGl0IGF0IHRoZSBlbmQgb2YgdGhlIGJhdGNoLCBkdWUgdG8gdGhlXG4gICAgICAgKiBmb2xsb3dpbmcgZWRnZSBjYXNlOiBTdXBwb3NlIGFuIGF0b20gaXMgdXBkYXRlZCBpbiBhbm90aGVyIHVzZUVmZmVjdFxuICAgICAgICogb2YgdGhpcyBzYW1lIGNvbXBvbmVudC4gVGhlbiB0aGUgZm9sbG93aW5nIHNlcXVlbmNlIG9mIGV2ZW50cyBvY2N1cjpcbiAgICAgICAqIDEuIEF0b20gaXMgdXBkYXRlZCBhbmQgc3VicyBmaXJlZCAoYnV0IHdlIG1heSBub3QgYmUgc3Vic2NyaWJlZFxuICAgICAgICogICAgeWV0IGRlcGVuZGluZyBvbiBvcmRlciBvZiBlZmZlY3RzLCBzbyB3ZSBtaXNzIHRoaXMpIFVwZGF0ZWQgdmFsdWVcbiAgICAgICAqICAgIGlzIG5vdyBpbiBuZXh0VHJlZSwgYnV0IG5vdCBjdXJyZW50VHJlZS5cbiAgICAgICAqIDIuIFRoaXMgZWZmZWN0IGhhcHBlbnMuIFdlIHN1YnNjcmliZSBhbmQgdXBkYXRlLlxuICAgICAgICogMy4gRnJvbSB0aGUgdXBkYXRlIHdlIHJlLXJlbmRlciBhbmQgcmVhZCBjdXJyZW50VHJlZSwgd2l0aCBvbGQgdmFsdWUuXG4gICAgICAgKiA0LiBCYXRjaGVyJ3MgZWZmZWN0IHNldHMgY3VycmVudFRyZWUgdG8gbmV4dFRyZWUuXG4gICAgICAgKiBJbiB0aGlzIHNlcXVlbmNlIHdlIG1pc3MgdGhlIHVwZGF0ZS4gVG8gYXZvaWQgdGhhdCwgYWRkIHRoZSB1cGRhdGVcbiAgICAgICAqIHRvIHF1ZXVlZENvbXBvbmVudENhbGxiYWNrIGlmIGEgYmF0Y2ggaXMgaW4gcHJvZ3Jlc3MuXG4gICAgICAgKi9cbiAgICAgIC8vIEZJWE1FIGRlbGV0ZSBxdWV1ZWRDb21wb25lbnRDYWxsYmFja3NfREVQUkVDQVRFRCB3aGVuIGRlbGV0aW5nIHVzZUludGVyZmFjZS5cblxuICAgICAgY29uc3Qgc3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuXG4gICAgICBpZiAoc3RhdGUubmV4dFRyZWUpIHtcbiAgICAgICAgc3RvcmUuZ2V0U3RhdGUoKS5xdWV1ZWRDb21wb25lbnRDYWxsYmFja3NfREVQUkVDQVRFRC5wdXNoKCgpID0+IHtcbiAgICAgICAgICB1cGRhdGVTdGF0ZShzdG9yZS5nZXRTdGF0ZSgpLCBrZXkpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVwZGF0ZVN0YXRlKHN0b3JlLmdldFN0YXRlKCksIGtleSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgUmVjb2lsX2RpZmZlcmVuY2VTZXRzKHByZXZpb3VzU3Vic2NyaXB0aW9ucy5jdXJyZW50LCByZWNvaWxWYWx1ZXNVc2VkLmN1cnJlbnQpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIHVuc3Vic2NyaWJlRnJvbShrZXkpO1xuICAgIH0pO1xuICAgIHByZXZpb3VzU3Vic2NyaXB0aW9ucy5jdXJyZW50ID0gcmVjb2lsVmFsdWVzVXNlZC5jdXJyZW50O1xuICB9KTsgLy8gRWZmZWN0IHRvIHVuc3Vic2NyaWJlIGZyb20gYWxsIHdoZW4gdW5tb3VudGluZ1xuXG4gIHVzZUVmZmVjdCQzKCgpID0+IHtcbiAgICBjb25zdCBjdXJyZW50U3Vic2NyaXB0aW9ucyA9IHN1YnNjcmlwdGlvbnMuY3VycmVudDsgLy8gUmVzdG9yZSBzdWJzY3JpcHRpb25zIHRoYXQgd2VyZSBjbGVhcmVkIGR1ZSB0byBTdHJpY3RNb2RlIHJ1bm5pbmcgdGhpcyBlZmZlY3QgdHdpY2VcblxuICAgIFJlY29pbF9kaWZmZXJlbmNlU2V0cyhyZWNvaWxWYWx1ZXNVc2VkLmN1cnJlbnQsIG5ldyBTZXQoY3VycmVudFN1YnNjcmlwdGlvbnMua2V5cygpKSkuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgY29uc3Qgc3ViID0gc3Vic2NyaWJlVG9SZWNvaWxWYWx1ZSQxKHN0b3JlUmVmLmN1cnJlbnQsIG5ldyBBYnN0cmFjdFJlY29pbFZhbHVlJDMoa2V5KSwgc3RhdGUgPT4gdXBkYXRlU3RhdGUoc3RhdGUsIGtleSksIGNvbXBvbmVudE5hbWUpO1xuICAgICAgY3VycmVudFN1YnNjcmlwdGlvbnMuc2V0KGtleSwgc3ViKTtcbiAgICB9KTtcbiAgICByZXR1cm4gKCkgPT4gY3VycmVudFN1YnNjcmlwdGlvbnMuZm9yRWFjaCgoXywga2V5KSA9PiB1bnN1YnNjcmliZUZyb20oa2V5KSk7XG4gIH0sIFtjb21wb25lbnROYW1lLCBzdG9yZVJlZiwgdW5zdWJzY3JpYmVGcm9tLCB1cGRhdGVTdGF0ZV0pO1xuICByZXR1cm4gdXNlTWVtbyQxKCgpID0+IHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2hhZG93XG4gICAgZnVuY3Rpb24gdXNlU2V0UmVjb2lsU3RhdGUocmVjb2lsU3RhdGUpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgdmFsaWRhdGVSZWNvaWxWYWx1ZShyZWNvaWxTdGF0ZSwgJ3VzZVNldFJlY29pbFN0YXRlJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXdWYWx1ZU9yVXBkYXRlciA9PiB7XG4gICAgICAgIHNldFJlY29pbFZhbHVlJDIoc3RvcmVSZWYuY3VycmVudCwgcmVjb2lsU3RhdGUsIG5ld1ZhbHVlT3JVcGRhdGVyKTtcbiAgICAgIH07XG4gICAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2hhZG93XG5cblxuICAgIGZ1bmN0aW9uIHVzZVJlc2V0UmVjb2lsU3RhdGUocmVjb2lsU3RhdGUpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgdmFsaWRhdGVSZWNvaWxWYWx1ZShyZWNvaWxTdGF0ZSwgJ3VzZVJlc2V0UmVjb2lsU3RhdGUnKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuICgpID0+IHNldFJlY29pbFZhbHVlJDIoc3RvcmVSZWYuY3VycmVudCwgcmVjb2lsU3RhdGUsIERFRkFVTFRfVkFMVUUkMik7XG4gICAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2hhZG93XG5cblxuICAgIGZ1bmN0aW9uIHVzZVJlY29pbFZhbHVlTG9hZGFibGUocmVjb2lsVmFsdWUpIHtcbiAgICAgIHZhciBfc3RvcmVTdGF0ZSRuZXh0VHJlZTtcblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICB2YWxpZGF0ZVJlY29pbFZhbHVlKHJlY29pbFZhbHVlLCAndXNlUmVjb2lsVmFsdWVMb2FkYWJsZScpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXJlY29pbFZhbHVlc1VzZWQuY3VycmVudC5oYXMocmVjb2lsVmFsdWUua2V5KSkge1xuICAgICAgICByZWNvaWxWYWx1ZXNVc2VkLmN1cnJlbnQgPSBzZXRCeUFkZGluZ1RvU2V0JDIocmVjb2lsVmFsdWVzVXNlZC5jdXJyZW50LCByZWNvaWxWYWx1ZS5rZXkpO1xuICAgICAgfSAvLyBUT0RPIFJlc3RvcmUgb3B0aW1pemF0aW9uIHRvIG1lbW9pemUgbG9va3VwXG5cblxuICAgICAgY29uc3Qgc3RvcmVTdGF0ZSA9IHN0b3JlUmVmLmN1cnJlbnQuZ2V0U3RhdGUoKTtcbiAgICAgIHJldHVybiBnZXRSZWNvaWxWYWx1ZUFzTG9hZGFibGUkMihzdG9yZVJlZi5jdXJyZW50LCByZWNvaWxWYWx1ZSwgcmVhY3RNb2RlJDMoKS5lYXJseSA/IChfc3RvcmVTdGF0ZSRuZXh0VHJlZSA9IHN0b3JlU3RhdGUubmV4dFRyZWUpICE9PSBudWxsICYmIF9zdG9yZVN0YXRlJG5leHRUcmVlICE9PSB2b2lkIDAgPyBfc3RvcmVTdGF0ZSRuZXh0VHJlZSA6IHN0b3JlU3RhdGUuY3VycmVudFRyZWUgOiBzdG9yZVN0YXRlLmN1cnJlbnRUcmVlKTtcbiAgICB9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zaGFkb3dcblxuXG4gICAgZnVuY3Rpb24gdXNlUmVjb2lsVmFsdWUocmVjb2lsVmFsdWUpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgdmFsaWRhdGVSZWNvaWxWYWx1ZShyZWNvaWxWYWx1ZSwgJ3VzZVJlY29pbFZhbHVlJyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGxvYWRhYmxlID0gdXNlUmVjb2lsVmFsdWVMb2FkYWJsZShyZWNvaWxWYWx1ZSk7XG4gICAgICByZXR1cm4gaGFuZGxlTG9hZGFibGUobG9hZGFibGUsIHJlY29pbFZhbHVlLCBzdG9yZVJlZik7XG4gICAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2hhZG93XG5cblxuICAgIGZ1bmN0aW9uIHVzZVJlY29pbFN0YXRlKHJlY29pbFN0YXRlKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgIHZhbGlkYXRlUmVjb2lsVmFsdWUocmVjb2lsU3RhdGUsICd1c2VSZWNvaWxTdGF0ZScpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gW3VzZVJlY29pbFZhbHVlKHJlY29pbFN0YXRlKSwgdXNlU2V0UmVjb2lsU3RhdGUocmVjb2lsU3RhdGUpXTtcbiAgICB9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zaGFkb3dcblxuXG4gICAgZnVuY3Rpb24gdXNlUmVjb2lsU3RhdGVMb2FkYWJsZShyZWNvaWxTdGF0ZSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICB2YWxpZGF0ZVJlY29pbFZhbHVlKHJlY29pbFN0YXRlLCAndXNlUmVjb2lsU3RhdGVMb2FkYWJsZScpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gW3VzZVJlY29pbFZhbHVlTG9hZGFibGUocmVjb2lsU3RhdGUpLCB1c2VTZXRSZWNvaWxTdGF0ZShyZWNvaWxTdGF0ZSldO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBnZXRSZWNvaWxWYWx1ZTogdXNlUmVjb2lsVmFsdWUsXG4gICAgICBnZXRSZWNvaWxWYWx1ZUxvYWRhYmxlOiB1c2VSZWNvaWxWYWx1ZUxvYWRhYmxlLFxuICAgICAgZ2V0UmVjb2lsU3RhdGU6IHVzZVJlY29pbFN0YXRlLFxuICAgICAgZ2V0UmVjb2lsU3RhdGVMb2FkYWJsZTogdXNlUmVjb2lsU3RhdGVMb2FkYWJsZSxcbiAgICAgIGdldFNldFJlY29pbFN0YXRlOiB1c2VTZXRSZWNvaWxTdGF0ZSxcbiAgICAgIGdldFJlc2V0UmVjb2lsU3RhdGU6IHVzZVJlc2V0UmVjb2lsU3RhdGVcbiAgICB9O1xuICB9LCBbcmVjb2lsVmFsdWVzVXNlZCwgc3RvcmVSZWZdKTtcbn1cblxuY29uc3QgcmVjb2lsQ29tcG9uZW50R2V0UmVjb2lsVmFsdWVDb3VudF9GT1JfVEVTVElORyA9IHtcbiAgY3VycmVudDogMFxufTtcblxuZnVuY3Rpb24gdXNlUmVjb2lsVmFsdWVMb2FkYWJsZV9TWU5DX0VYVEVSTkFMX1NUT1JFKHJlY29pbFZhbHVlKSB7XG4gIGNvbnN0IHN0b3JlUmVmID0gdXNlU3RvcmVSZWYkMigpO1xuICBjb25zdCBjb21wb25lbnROYW1lID0gUmVjb2lsX3VzZUNvbXBvbmVudE5hbWUoKTtcbiAgY29uc3QgZ2V0U25hcHNob3QgPSB1c2VDYWxsYmFjayQxKCgpID0+IHtcbiAgICB2YXIgX3N0b3JlU3RhdGUkbmV4dFRyZWUyO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgcmVjb2lsQ29tcG9uZW50R2V0UmVjb2lsVmFsdWVDb3VudF9GT1JfVEVTVElORy5jdXJyZW50Kys7XG4gICAgfVxuXG4gICAgY29uc3Qgc3RvcmUgPSBzdG9yZVJlZi5jdXJyZW50O1xuICAgIGNvbnN0IHN0b3JlU3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICAgIGNvbnN0IHRyZWVTdGF0ZSA9IHJlYWN0TW9kZSQzKCkuZWFybHkgPyAoX3N0b3JlU3RhdGUkbmV4dFRyZWUyID0gc3RvcmVTdGF0ZS5uZXh0VHJlZSkgIT09IG51bGwgJiYgX3N0b3JlU3RhdGUkbmV4dFRyZWUyICE9PSB2b2lkIDAgPyBfc3RvcmVTdGF0ZSRuZXh0VHJlZTIgOiBzdG9yZVN0YXRlLmN1cnJlbnRUcmVlIDogc3RvcmVTdGF0ZS5jdXJyZW50VHJlZTtcbiAgICBjb25zdCBsb2FkYWJsZSA9IGdldFJlY29pbFZhbHVlQXNMb2FkYWJsZSQyKHN0b3JlLCByZWNvaWxWYWx1ZSwgdHJlZVN0YXRlKTtcbiAgICByZXR1cm4ge1xuICAgICAgbG9hZGFibGUsXG4gICAgICBrZXk6IHJlY29pbFZhbHVlLmtleVxuICAgIH07XG4gIH0sIFtzdG9yZVJlZiwgcmVjb2lsVmFsdWVdKTsgLy8gTWVtb2l6ZSB0aGUgc3RhdGUgdG8gYXZvaWQgdW5uZWNlc3NhcnkgcmVyZW5kZXJzXG5cbiAgY29uc3QgbWVtb2l6ZVByZXZpb3VzU25hcHNob3QgPSB1c2VDYWxsYmFjayQxKGdldFN0YXRlID0+IHtcbiAgICBsZXQgcHJldlN0YXRlO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICB2YXIgX3ByZXZTdGF0ZSwgX3ByZXZTdGF0ZTI7XG5cbiAgICAgIGNvbnN0IG5leHRTdGF0ZSA9IGdldFN0YXRlKCk7XG5cbiAgICAgIGlmICgoX3ByZXZTdGF0ZSA9IHByZXZTdGF0ZSkgIT09IG51bGwgJiYgX3ByZXZTdGF0ZSAhPT0gdm9pZCAwICYmIF9wcmV2U3RhdGUubG9hZGFibGUuaXMobmV4dFN0YXRlLmxvYWRhYmxlKSAmJiAoKF9wcmV2U3RhdGUyID0gcHJldlN0YXRlKSA9PT0gbnVsbCB8fCBfcHJldlN0YXRlMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3ByZXZTdGF0ZTIua2V5KSA9PT0gbmV4dFN0YXRlLmtleSkge1xuICAgICAgICByZXR1cm4gcHJldlN0YXRlO1xuICAgICAgfVxuXG4gICAgICBwcmV2U3RhdGUgPSBuZXh0U3RhdGU7XG4gICAgICByZXR1cm4gbmV4dFN0YXRlO1xuICAgIH07XG4gIH0sIFtdKTtcbiAgY29uc3QgZ2V0TWVtb2l6ZWRTbmFwc2hvdCA9IHVzZU1lbW8kMSgoKSA9PiBtZW1vaXplUHJldmlvdXNTbmFwc2hvdChnZXRTbmFwc2hvdCksIFtnZXRTbmFwc2hvdCwgbWVtb2l6ZVByZXZpb3VzU25hcHNob3RdKTtcbiAgY29uc3Qgc3Vic2NyaWJlID0gdXNlQ2FsbGJhY2skMShub3RpZnkgPT4ge1xuICAgIGNvbnN0IHN0b3JlID0gc3RvcmVSZWYuY3VycmVudDtcbiAgICBjb25zdCBzdWJzY3JpcHRpb24gPSBzdWJzY3JpYmVUb1JlY29pbFZhbHVlJDEoc3RvcmUsIHJlY29pbFZhbHVlLCBub3RpZnksIGNvbXBvbmVudE5hbWUpO1xuICAgIHJldHVybiBzdWJzY3JpcHRpb24ucmVsZWFzZTtcbiAgfSwgW3N0b3JlUmVmLCByZWNvaWxWYWx1ZSwgY29tcG9uZW50TmFtZV0pO1xuICByZXR1cm4gdXNlU3luY0V4dGVybmFsU3RvcmUkMShzdWJzY3JpYmUsIGdldE1lbW9pemVkU25hcHNob3QsIC8vIGdldFNuYXBzaG90KClcbiAgZ2V0TWVtb2l6ZWRTbmFwc2hvdCAvLyBnZXRTZXJ2ZXJTbmFwc2hvdCgpIGZvciBTU1Igc3VwcG9ydFxuICApLmxvYWRhYmxlO1xufVxuXG5mdW5jdGlvbiB1c2VSZWNvaWxWYWx1ZUxvYWRhYmxlX01VVEFCTEVfU09VUkNFKHJlY29pbFZhbHVlKSB7XG4gIGNvbnN0IHN0b3JlUmVmID0gdXNlU3RvcmVSZWYkMigpO1xuICBjb25zdCBnZXRMb2FkYWJsZSA9IHVzZUNhbGxiYWNrJDEoKCkgPT4ge1xuICAgIHZhciBfc3RvcmVTdGF0ZSRuZXh0VHJlZTM7XG5cbiAgICBjb25zdCBzdG9yZSA9IHN0b3JlUmVmLmN1cnJlbnQ7XG4gICAgY29uc3Qgc3RvcmVTdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG4gICAgY29uc3QgdHJlZVN0YXRlID0gcmVhY3RNb2RlJDMoKS5lYXJseSA/IChfc3RvcmVTdGF0ZSRuZXh0VHJlZTMgPSBzdG9yZVN0YXRlLm5leHRUcmVlKSAhPT0gbnVsbCAmJiBfc3RvcmVTdGF0ZSRuZXh0VHJlZTMgIT09IHZvaWQgMCA/IF9zdG9yZVN0YXRlJG5leHRUcmVlMyA6IHN0b3JlU3RhdGUuY3VycmVudFRyZWUgOiBzdG9yZVN0YXRlLmN1cnJlbnRUcmVlO1xuICAgIHJldHVybiBnZXRSZWNvaWxWYWx1ZUFzTG9hZGFibGUkMihzdG9yZSwgcmVjb2lsVmFsdWUsIHRyZWVTdGF0ZSk7XG4gIH0sIFtzdG9yZVJlZiwgcmVjb2lsVmFsdWVdKTtcbiAgY29uc3QgZ2V0TG9hZGFibGVXaXRoVGVzdGluZyA9IHVzZUNhbGxiYWNrJDEoKCkgPT4ge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIHJlY29pbENvbXBvbmVudEdldFJlY29pbFZhbHVlQ291bnRfRk9SX1RFU1RJTkcuY3VycmVudCsrO1xuICAgIH1cblxuICAgIHJldHVybiBnZXRMb2FkYWJsZSgpO1xuICB9LCBbZ2V0TG9hZGFibGVdKTtcbiAgY29uc3QgY29tcG9uZW50TmFtZSA9IFJlY29pbF91c2VDb21wb25lbnROYW1lKCk7XG4gIGNvbnN0IHN1YnNjcmliZSA9IHVzZUNhbGxiYWNrJDEoKF9zdG9yZVN0YXRlLCBub3RpZnkpID0+IHtcbiAgICBjb25zdCBzdG9yZSA9IHN0b3JlUmVmLmN1cnJlbnQ7XG4gICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gc3Vic2NyaWJlVG9SZWNvaWxWYWx1ZSQxKHN0b3JlLCByZWNvaWxWYWx1ZSwgKCkgPT4ge1xuICAgICAgaWYgKCFSZWNvaWxfZ2t4KCdyZWNvaWxfc3VwcHJlc3NfcmVyZW5kZXJfaW5fY2FsbGJhY2snKSkge1xuICAgICAgICByZXR1cm4gbm90aWZ5KCk7XG4gICAgICB9IC8vIE9ubHkgcmUtcmVuZGVyIGlmIHRoZSB2YWx1ZSBoYXMgY2hhbmdlZC5cbiAgICAgIC8vIFRoaXMgd2lsbCBldmFsdWF0ZSB0aGUgYXRvbS9zZWxlY3RvciBub3cgYXMgd2VsbCBhcyB3aGVuIHRoZVxuICAgICAgLy8gY29tcG9uZW50IHJlbmRlcnMsIGJ1dCB0aGF0IG1heSBoZWxwIHdpdGggcHJlZmV0Y2hpbmcuXG5cblxuICAgICAgY29uc3QgbmV3TG9hZGFibGUgPSBnZXRMb2FkYWJsZSgpO1xuXG4gICAgICBpZiAoIXByZXZMb2FkYWJsZVJlZi5jdXJyZW50LmlzKG5ld0xvYWRhYmxlKSkge1xuICAgICAgICBub3RpZnkoKTtcbiAgICAgIH0gLy8gSWYgdGhlIGNvbXBvbmVudCBpcyBzdXNwZW5kZWQgdGhlbiB0aGUgZWZmZWN0IHNldHRpbmcgcHJldkxvYWRhYmxlUmVmXG4gICAgICAvLyB3aWxsIG5vdCBydW4uICBTbywgc2V0IHRoZSBwcmV2aW91cyB2YWx1ZSBoZXJlIHdoZW4gaXRzIHN1YnNjcmlwdGlvblxuICAgICAgLy8gaXMgZmlyZWQgdG8gd2FrZSBpdCB1cC4gIFdlIGNhbid0IGp1c3QgcmVseSBvbiB0aGlzLCB0aG91Z2gsIGJlY2F1c2VcbiAgICAgIC8vIHRoaXMgb25seSBleGVjdXRlcyB3aGVuIGFuIGF0b20vc2VsZWN0b3IgaXMgZGlydHkgYW5kIHRoZSBhdG9tL3NlbGVjdG9yXG4gICAgICAvLyBwYXNzZWQgdG8gdGhlIGhvb2sgY2FuIGR5bmFtaWNhbGx5IGNoYW5nZS5cblxuXG4gICAgICBwcmV2TG9hZGFibGVSZWYuY3VycmVudCA9IG5ld0xvYWRhYmxlO1xuICAgIH0sIGNvbXBvbmVudE5hbWUpO1xuICAgIHJldHVybiBzdWJzY3JpcHRpb24ucmVsZWFzZTtcbiAgfSwgW3N0b3JlUmVmLCByZWNvaWxWYWx1ZSwgY29tcG9uZW50TmFtZSwgZ2V0TG9hZGFibGVdKTtcbiAgY29uc3Qgc291cmNlID0gdXNlUmVjb2lsTXV0YWJsZVNvdXJjZSQxKCk7XG5cbiAgaWYgKHNvdXJjZSA9PSBudWxsKSB7XG4gICAgdGhyb3cgUmVjb2lsX2VycignUmVjb2lsIGhvb2tzIG11c3QgYmUgdXNlZCBpbiBjb21wb25lbnRzIGNvbnRhaW5lZCB3aXRoaW4gYSA8UmVjb2lsUm9vdD4gY29tcG9uZW50LicpO1xuICB9XG5cbiAgY29uc3QgbG9hZGFibGUgPSB1c2VNdXRhYmxlU291cmNlJDEoc291cmNlLCBnZXRMb2FkYWJsZVdpdGhUZXN0aW5nLCBzdWJzY3JpYmUpO1xuICBjb25zdCBwcmV2TG9hZGFibGVSZWYgPSB1c2VSZWYkNChsb2FkYWJsZSk7XG4gIHVzZUVmZmVjdCQzKCgpID0+IHtcbiAgICBwcmV2TG9hZGFibGVSZWYuY3VycmVudCA9IGxvYWRhYmxlO1xuICB9KTtcbiAgcmV0dXJuIGxvYWRhYmxlO1xufVxuXG5mdW5jdGlvbiB1c2VSZWNvaWxWYWx1ZUxvYWRhYmxlX1RSQU5TSVRJT05fU1VQUE9SVChyZWNvaWxWYWx1ZSkge1xuICBjb25zdCBzdG9yZVJlZiA9IHVzZVN0b3JlUmVmJDIoKTtcbiAgY29uc3QgY29tcG9uZW50TmFtZSA9IFJlY29pbF91c2VDb21wb25lbnROYW1lKCk7IC8vIEFjY2Vzc29ycyB0byBnZXQgdGhlIGN1cnJlbnQgc3RhdGVcblxuICBjb25zdCBnZXRMb2FkYWJsZSA9IHVzZUNhbGxiYWNrJDEoKCkgPT4ge1xuICAgIHZhciBfc3RvcmVTdGF0ZSRuZXh0VHJlZTQ7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICByZWNvaWxDb21wb25lbnRHZXRSZWNvaWxWYWx1ZUNvdW50X0ZPUl9URVNUSU5HLmN1cnJlbnQrKztcbiAgICB9XG5cbiAgICBjb25zdCBzdG9yZSA9IHN0b3JlUmVmLmN1cnJlbnQ7XG4gICAgY29uc3Qgc3RvcmVTdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG4gICAgY29uc3QgdHJlZVN0YXRlID0gcmVhY3RNb2RlJDMoKS5lYXJseSA/IChfc3RvcmVTdGF0ZSRuZXh0VHJlZTQgPSBzdG9yZVN0YXRlLm5leHRUcmVlKSAhPT0gbnVsbCAmJiBfc3RvcmVTdGF0ZSRuZXh0VHJlZTQgIT09IHZvaWQgMCA/IF9zdG9yZVN0YXRlJG5leHRUcmVlNCA6IHN0b3JlU3RhdGUuY3VycmVudFRyZWUgOiBzdG9yZVN0YXRlLmN1cnJlbnRUcmVlO1xuICAgIHJldHVybiBnZXRSZWNvaWxWYWx1ZUFzTG9hZGFibGUkMihzdG9yZSwgcmVjb2lsVmFsdWUsIHRyZWVTdGF0ZSk7XG4gIH0sIFtzdG9yZVJlZiwgcmVjb2lsVmFsdWVdKTtcbiAgY29uc3QgZ2V0U3RhdGUgPSB1c2VDYWxsYmFjayQxKCgpID0+ICh7XG4gICAgbG9hZGFibGU6IGdldExvYWRhYmxlKCksXG4gICAga2V5OiByZWNvaWxWYWx1ZS5rZXlcbiAgfSksIFtnZXRMb2FkYWJsZSwgcmVjb2lsVmFsdWUua2V5XSk7IC8vIE1lbW9pemUgc3RhdGUgc25hcHNob3RzXG5cbiAgY29uc3QgdXBkYXRlU3RhdGUgPSB1c2VDYWxsYmFjayQxKHByZXZTdGF0ZSA9PiB7XG4gICAgY29uc3QgbmV4dFN0YXRlID0gZ2V0U3RhdGUoKTtcbiAgICByZXR1cm4gcHJldlN0YXRlLmxvYWRhYmxlLmlzKG5leHRTdGF0ZS5sb2FkYWJsZSkgJiYgcHJldlN0YXRlLmtleSA9PT0gbmV4dFN0YXRlLmtleSA/IHByZXZTdGF0ZSA6IG5leHRTdGF0ZTtcbiAgfSwgW2dldFN0YXRlXSk7IC8vIFN1YnNjcmliZSB0byBSZWNvaWwgc3RhdGUgY2hhbmdlc1xuXG4gIHVzZUVmZmVjdCQzKCgpID0+IHtcbiAgICBjb25zdCBzdWJzY3JpcHRpb24gPSBzdWJzY3JpYmVUb1JlY29pbFZhbHVlJDEoc3RvcmVSZWYuY3VycmVudCwgcmVjb2lsVmFsdWUsIF9zdGF0ZSA9PiB7XG4gICAgICBzZXRTdGF0ZSh1cGRhdGVTdGF0ZSk7XG4gICAgfSwgY29tcG9uZW50TmFtZSk7IC8vIFVwZGF0ZSBzdGF0ZSBpbiBjYXNlIHdlIGFyZSB1c2luZyBhIGRpZmZlcmVudCBrZXlcblxuICAgIHNldFN0YXRlKHVwZGF0ZVN0YXRlKTtcbiAgICByZXR1cm4gc3Vic2NyaXB0aW9uLnJlbGVhc2U7XG4gIH0sIFtjb21wb25lbnROYW1lLCByZWNvaWxWYWx1ZSwgc3RvcmVSZWYsIHVwZGF0ZVN0YXRlXSk7IC8vIEdldCB0aGUgY3VycmVudCBzdGF0ZVxuXG4gIGNvbnN0IFtzdGF0ZSwgc2V0U3RhdGVdID0gdXNlU3RhdGUkMShnZXRTdGF0ZSk7IC8vIElmIHdlIGNoYW5nZWQga2V5cywgdGhlbiByZXR1cm4gdGhlIHN0YXRlIGZvciB0aGUgbmV3IGtleS5cbiAgLy8gVGhpcyBpcyBpbXBvcnRhbnQgaW4gY2FzZSB0aGUgb2xkIGtleSB3b3VsZCBjYXVzZSB0aGUgY29tcG9uZW50IHRvIHN1c3BlbmQuXG4gIC8vIFdlIGRvbid0IGhhdmUgdG8gc2V0IHRoZSBuZXcgc3RhdGUgaGVyZSBzaW5jZSB0aGUgc3Vic2NyaWJpbmcgZWZmZWN0IGFib3ZlXG4gIC8vIHdpbGwgZG8gdGhhdC5cblxuICByZXR1cm4gc3RhdGUua2V5ICE9PSByZWNvaWxWYWx1ZS5rZXkgPyBnZXRTdGF0ZSgpLmxvYWRhYmxlIDogc3RhdGUubG9hZGFibGU7XG59XG5cbmZ1bmN0aW9uIHVzZVJlY29pbFZhbHVlTG9hZGFibGVfTEVHQUNZKHJlY29pbFZhbHVlKSB7XG4gIGNvbnN0IHN0b3JlUmVmID0gdXNlU3RvcmVSZWYkMigpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZmItd3d3L3JlYWN0LW5vLXVudXNlZC1zdGF0ZS1ob29rXG5cbiAgY29uc3QgWywgZm9yY2VVcGRhdGVdID0gdXNlU3RhdGUkMShbXSk7XG4gIGNvbnN0IGNvbXBvbmVudE5hbWUgPSBSZWNvaWxfdXNlQ29tcG9uZW50TmFtZSgpO1xuICBjb25zdCBnZXRMb2FkYWJsZSA9IHVzZUNhbGxiYWNrJDEoKCkgPT4ge1xuICAgIHZhciBfc3RvcmVTdGF0ZSRuZXh0VHJlZTU7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICByZWNvaWxDb21wb25lbnRHZXRSZWNvaWxWYWx1ZUNvdW50X0ZPUl9URVNUSU5HLmN1cnJlbnQrKztcbiAgICB9XG5cbiAgICBjb25zdCBzdG9yZSA9IHN0b3JlUmVmLmN1cnJlbnQ7XG4gICAgY29uc3Qgc3RvcmVTdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG4gICAgY29uc3QgdHJlZVN0YXRlID0gcmVhY3RNb2RlJDMoKS5lYXJseSA/IChfc3RvcmVTdGF0ZSRuZXh0VHJlZTUgPSBzdG9yZVN0YXRlLm5leHRUcmVlKSAhPT0gbnVsbCAmJiBfc3RvcmVTdGF0ZSRuZXh0VHJlZTUgIT09IHZvaWQgMCA/IF9zdG9yZVN0YXRlJG5leHRUcmVlNSA6IHN0b3JlU3RhdGUuY3VycmVudFRyZWUgOiBzdG9yZVN0YXRlLmN1cnJlbnRUcmVlO1xuICAgIHJldHVybiBnZXRSZWNvaWxWYWx1ZUFzTG9hZGFibGUkMihzdG9yZSwgcmVjb2lsVmFsdWUsIHRyZWVTdGF0ZSk7XG4gIH0sIFtzdG9yZVJlZiwgcmVjb2lsVmFsdWVdKTtcbiAgY29uc3QgbG9hZGFibGUgPSBnZXRMb2FkYWJsZSgpO1xuICBjb25zdCBwcmV2TG9hZGFibGVSZWYgPSB1c2VSZWYkNChsb2FkYWJsZSk7XG4gIHVzZUVmZmVjdCQzKCgpID0+IHtcbiAgICBwcmV2TG9hZGFibGVSZWYuY3VycmVudCA9IGxvYWRhYmxlO1xuICB9KTtcbiAgdXNlRWZmZWN0JDMoKCkgPT4ge1xuICAgIGNvbnN0IHN0b3JlID0gc3RvcmVSZWYuY3VycmVudDtcbiAgICBjb25zdCBzdG9yZVN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICBjb25zdCBzdWJzY3JpcHRpb24gPSBzdWJzY3JpYmVUb1JlY29pbFZhbHVlJDEoc3RvcmUsIHJlY29pbFZhbHVlLCBfc3RhdGUgPT4ge1xuICAgICAgdmFyIF9wcmV2TG9hZGFibGVSZWYkY3VycjtcblxuICAgICAgaWYgKCFSZWNvaWxfZ2t4KCdyZWNvaWxfc3VwcHJlc3NfcmVyZW5kZXJfaW5fY2FsbGJhY2snKSkge1xuICAgICAgICByZXR1cm4gZm9yY2VVcGRhdGUoW10pO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBuZXdMb2FkYWJsZSA9IGdldExvYWRhYmxlKCk7XG5cbiAgICAgIGlmICghKChfcHJldkxvYWRhYmxlUmVmJGN1cnIgPSBwcmV2TG9hZGFibGVSZWYuY3VycmVudCkgIT09IG51bGwgJiYgX3ByZXZMb2FkYWJsZVJlZiRjdXJyICE9PSB2b2lkIDAgJiYgX3ByZXZMb2FkYWJsZVJlZiRjdXJyLmlzKG5ld0xvYWRhYmxlKSkpIHtcbiAgICAgICAgZm9yY2VVcGRhdGUobmV3TG9hZGFibGUpO1xuICAgICAgfVxuXG4gICAgICBwcmV2TG9hZGFibGVSZWYuY3VycmVudCA9IG5ld0xvYWRhYmxlO1xuICAgIH0sIGNvbXBvbmVudE5hbWUpO1xuICAgIC8qKlxuICAgICAqIFNpbmNlIHdlJ3JlIHN1YnNjcmliaW5nIGluIGFuIGVmZmVjdCB3ZSBuZWVkIHRvIHVwZGF0ZSB0byB0aGUgbGF0ZXN0XG4gICAgICogdmFsdWUgb2YgdGhlIGF0b20gc2luY2UgaXQgbWF5IGhhdmUgY2hhbmdlZCBzaW5jZSB3ZSByZW5kZXJlZC4gV2UgY2FuXG4gICAgICogZ28gYWhlYWQgYW5kIGRvIHRoYXQgbm93LCB1bmxlc3Mgd2UncmUgaW4gdGhlIG1pZGRsZSBvZiBhIGJhdGNoIC0tXG4gICAgICogaW4gd2hpY2ggY2FzZSB3ZSBzaG91bGQgZG8gaXQgYXQgdGhlIGVuZCBvZiB0aGUgYmF0Y2gsIGR1ZSB0byB0aGVcbiAgICAgKiBmb2xsb3dpbmcgZWRnZSBjYXNlOiBTdXBwb3NlIGFuIGF0b20gaXMgdXBkYXRlZCBpbiBhbm90aGVyIHVzZUVmZmVjdFxuICAgICAqIG9mIHRoaXMgc2FtZSBjb21wb25lbnQuIFRoZW4gdGhlIGZvbGxvd2luZyBzZXF1ZW5jZSBvZiBldmVudHMgb2NjdXI6XG4gICAgICogMS4gQXRvbSBpcyB1cGRhdGVkIGFuZCBzdWJzIGZpcmVkIChidXQgd2UgbWF5IG5vdCBiZSBzdWJzY3JpYmVkXG4gICAgICogICAgeWV0IGRlcGVuZGluZyBvbiBvcmRlciBvZiBlZmZlY3RzLCBzbyB3ZSBtaXNzIHRoaXMpIFVwZGF0ZWQgdmFsdWVcbiAgICAgKiAgICBpcyBub3cgaW4gbmV4dFRyZWUsIGJ1dCBub3QgY3VycmVudFRyZWUuXG4gICAgICogMi4gVGhpcyBlZmZlY3QgaGFwcGVucy4gV2Ugc3Vic2NyaWJlIGFuZCB1cGRhdGUuXG4gICAgICogMy4gRnJvbSB0aGUgdXBkYXRlIHdlIHJlLXJlbmRlciBhbmQgcmVhZCBjdXJyZW50VHJlZSwgd2l0aCBvbGQgdmFsdWUuXG4gICAgICogNC4gQmF0Y2hlcidzIGVmZmVjdCBzZXRzIGN1cnJlbnRUcmVlIHRvIG5leHRUcmVlLlxuICAgICAqIEluIHRoaXMgc2VxdWVuY2Ugd2UgbWlzcyB0aGUgdXBkYXRlLiBUbyBhdm9pZCB0aGF0LCBhZGQgdGhlIHVwZGF0ZVxuICAgICAqIHRvIHF1ZXVlZENvbXBvbmVudENhbGxiYWNrIGlmIGEgYmF0Y2ggaXMgaW4gcHJvZ3Jlc3MuXG4gICAgICovXG5cbiAgICBpZiAoc3RvcmVTdGF0ZS5uZXh0VHJlZSkge1xuICAgICAgc3RvcmUuZ2V0U3RhdGUoKS5xdWV1ZWRDb21wb25lbnRDYWxsYmFja3NfREVQUkVDQVRFRC5wdXNoKCgpID0+IHtcbiAgICAgICAgcHJldkxvYWRhYmxlUmVmLmN1cnJlbnQgPSBudWxsO1xuICAgICAgICBmb3JjZVVwZGF0ZShbXSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIF9wcmV2TG9hZGFibGVSZWYkY3VycjI7XG5cbiAgICAgIGlmICghUmVjb2lsX2dreCgncmVjb2lsX3N1cHByZXNzX3JlcmVuZGVyX2luX2NhbGxiYWNrJykpIHtcbiAgICAgICAgcmV0dXJuIGZvcmNlVXBkYXRlKFtdKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgbmV3TG9hZGFibGUgPSBnZXRMb2FkYWJsZSgpO1xuXG4gICAgICBpZiAoISgoX3ByZXZMb2FkYWJsZVJlZiRjdXJyMiA9IHByZXZMb2FkYWJsZVJlZi5jdXJyZW50KSAhPT0gbnVsbCAmJiBfcHJldkxvYWRhYmxlUmVmJGN1cnIyICE9PSB2b2lkIDAgJiYgX3ByZXZMb2FkYWJsZVJlZiRjdXJyMi5pcyhuZXdMb2FkYWJsZSkpKSB7XG4gICAgICAgIGZvcmNlVXBkYXRlKG5ld0xvYWRhYmxlKTtcbiAgICAgIH1cblxuICAgICAgcHJldkxvYWRhYmxlUmVmLmN1cnJlbnQgPSBuZXdMb2FkYWJsZTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3Vic2NyaXB0aW9uLnJlbGVhc2U7XG4gIH0sIFtjb21wb25lbnROYW1lLCBnZXRMb2FkYWJsZSwgcmVjb2lsVmFsdWUsIHN0b3JlUmVmXSk7XG4gIHJldHVybiBsb2FkYWJsZTtcbn1cbi8qKlxuICBMaWtlIHVzZVJlY29pbFZhbHVlKCksIGJ1dCBlaXRoZXIgcmV0dXJucyB0aGUgdmFsdWUgaWYgYXZhaWxhYmxlIG9yXG4gIGp1c3QgdW5kZWZpbmVkIGlmIG5vdCBhdmFpbGFibGUgZm9yIGFueSByZWFzb24sIHN1Y2ggYXMgcGVuZGluZyBvciBlcnJvci5cbiovXG5cblxuZnVuY3Rpb24gdXNlUmVjb2lsVmFsdWVMb2FkYWJsZShyZWNvaWxWYWx1ZSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgdmFsaWRhdGVSZWNvaWxWYWx1ZShyZWNvaWxWYWx1ZSwgJ3VzZVJlY29pbFZhbHVlTG9hZGFibGUnKTtcbiAgfVxuXG4gIGlmIChSZWNvaWxfZ2t4KCdyZWNvaWxfbWVtb3J5X21hbmFnYW1lbnRfMjAyMCcpKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZiLXd3dy9yZWFjdC1ob29rc1xuICAgIFJlY29pbF91c2VSZXRhaW4ocmVjb2lsVmFsdWUpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBUUkFOU0lUSU9OX1NVUFBPUlQ6IHVzZVJlY29pbFZhbHVlTG9hZGFibGVfVFJBTlNJVElPTl9TVVBQT1JULFxuICAgIC8vIFJlY29pbCB3aWxsIGF0dGVtcCB0byBkZXRlY3QgaWYgYHVzZVN5bmNFeHRlcm5hbFN0b3JlKClgIGlzIHN1cHBvcnRlZCB3aXRoXG4gICAgLy8gYHJlYWN0TW9kZSgpYCBiZWZvcmUgY2FsbGluZyBpdC4gIEhvd2V2ZXIsIHNvbWV0aW1lcyB0aGUgaG9zdCBSZWFjdFxuICAgIC8vIGVudmlyb25tZW50IHN1cHBvcnRzIGl0IGJ1dCB1c2VzIGFkZGl0aW9uYWwgUmVhY3QgcmVuZGVyZXJzIChzdWNoIGFzIHdpdGhcbiAgICAvLyBgcmVhY3QtdGhyZWUtZmliZXJgKSB3aGljaCBkbyBub3QuICBXaGlsZSB0aGlzIGlzIHRlY2huaWNhbGx5IGEgdXNlciBpc3N1ZVxuICAgIC8vIGJ5IHVzaW5nIGEgcmVuZGVyZXIgd2l0aCBSZWFjdCAxOCsgdGhhdCBkb2Vzbid0IGZ1bGx5IHN1cHBvcnQgUmVhY3QgMTggd2VcbiAgICAvLyBkb24ndCB3YW50IHRvIGJyZWFrIHVzZXJzIGlmIGl0IGNhbiBiZSBhdm9pZGVkLiBBcyB0aGUgY3VycmVudCByZW5kZXJlciBjYW5cbiAgICAvLyBjaGFuZ2UgYXQgcnVudGltZSwgd2UgbmVlZCB0byBkeW5hbWljYWxseSBjaGVjayBhbmQgZmFsbGJhY2sgaWYgbmVjZXNzYXJ5LlxuICAgIFNZTkNfRVhURVJOQUxfU1RPUkU6IGN1cnJlbnRSZW5kZXJlclN1cHBvcnRzVXNlU3luY0V4dGVybmFsU3RvcmUkMSgpID8gdXNlUmVjb2lsVmFsdWVMb2FkYWJsZV9TWU5DX0VYVEVSTkFMX1NUT1JFIDogdXNlUmVjb2lsVmFsdWVMb2FkYWJsZV9UUkFOU0lUSU9OX1NVUFBPUlQsXG4gICAgTVVUQUJMRV9TT1VSQ0U6IHVzZVJlY29pbFZhbHVlTG9hZGFibGVfTVVUQUJMRV9TT1VSQ0UsXG4gICAgTEVHQUNZOiB1c2VSZWNvaWxWYWx1ZUxvYWRhYmxlX0xFR0FDWVxuICB9W3JlYWN0TW9kZSQzKCkubW9kZV0ocmVjb2lsVmFsdWUpO1xufVxuLyoqXG4gIFJldHVybnMgdGhlIHZhbHVlIHJlcHJlc2VudGVkIGJ5IHRoZSBSZWNvaWxWYWx1ZS5cbiAgSWYgdGhlIHZhbHVlIGlzIHBlbmRpbmcsIGl0IHdpbGwgdGhyb3cgYSBQcm9taXNlIHRvIHN1c3BlbmQgdGhlIGNvbXBvbmVudCxcbiAgaWYgdGhlIHZhbHVlIGlzIGFuIGVycm9yIGl0IHdpbGwgdGhyb3cgaXQgZm9yIHRoZSBuZWFyZXN0IFJlYWN0IGVycm9yIGJvdW5kYXJ5LlxuICBUaGlzIHdpbGwgYWxzbyBzdWJzY3JpYmUgdGhlIGNvbXBvbmVudCBmb3IgYW55IHVwZGF0ZXMgaW4gdGhlIHZhbHVlLlxuICAqL1xuXG5cbmZ1bmN0aW9uIHVzZVJlY29pbFZhbHVlKHJlY29pbFZhbHVlKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICB2YWxpZGF0ZVJlY29pbFZhbHVlKHJlY29pbFZhbHVlLCAndXNlUmVjb2lsVmFsdWUnKTtcbiAgfVxuXG4gIGNvbnN0IHN0b3JlUmVmID0gdXNlU3RvcmVSZWYkMigpO1xuICBjb25zdCBsb2FkYWJsZSA9IHVzZVJlY29pbFZhbHVlTG9hZGFibGUocmVjb2lsVmFsdWUpO1xuICByZXR1cm4gaGFuZGxlTG9hZGFibGUobG9hZGFibGUsIHJlY29pbFZhbHVlLCBzdG9yZVJlZik7XG59XG4vKipcbiAgUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgYWxsb3dzIHRoZSB2YWx1ZSBvZiBhIFJlY29pbFN0YXRlIHRvIGJlIHVwZGF0ZWQsIGJ1dCBkb2VzXG4gIG5vdCBzdWJzY3JpYmUgdGhlIGNvbXBvbmVudCB0byBjaGFuZ2VzIHRvIHRoYXQgUmVjb2lsU3RhdGUuXG4qL1xuXG5cbmZ1bmN0aW9uIHVzZVNldFJlY29pbFN0YXRlKHJlY29pbFN0YXRlKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICB2YWxpZGF0ZVJlY29pbFZhbHVlKHJlY29pbFN0YXRlLCAndXNlU2V0UmVjb2lsU3RhdGUnKTtcbiAgfVxuXG4gIGNvbnN0IHN0b3JlUmVmID0gdXNlU3RvcmVSZWYkMigpO1xuICByZXR1cm4gdXNlQ2FsbGJhY2skMShuZXdWYWx1ZU9yVXBkYXRlciA9PiB7XG4gICAgc2V0UmVjb2lsVmFsdWUkMihzdG9yZVJlZi5jdXJyZW50LCByZWNvaWxTdGF0ZSwgbmV3VmFsdWVPclVwZGF0ZXIpO1xuICB9LCBbc3RvcmVSZWYsIHJlY29pbFN0YXRlXSk7XG59XG4vKipcbiAgUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgd2lsbCByZXNldCB0aGUgdmFsdWUgb2YgYSBSZWNvaWxTdGF0ZSB0byBpdHMgZGVmYXVsdFxuKi9cblxuXG5mdW5jdGlvbiB1c2VSZXNldFJlY29pbFN0YXRlKHJlY29pbFN0YXRlKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICB2YWxpZGF0ZVJlY29pbFZhbHVlKHJlY29pbFN0YXRlLCAndXNlUmVzZXRSZWNvaWxTdGF0ZScpO1xuICB9XG5cbiAgY29uc3Qgc3RvcmVSZWYgPSB1c2VTdG9yZVJlZiQyKCk7XG4gIHJldHVybiB1c2VDYWxsYmFjayQxKCgpID0+IHtcbiAgICBzZXRSZWNvaWxWYWx1ZSQyKHN0b3JlUmVmLmN1cnJlbnQsIHJlY29pbFN0YXRlLCBERUZBVUxUX1ZBTFVFJDIpO1xuICB9LCBbc3RvcmVSZWYsIHJlY29pbFN0YXRlXSk7XG59XG4vKipcbiAgRXF1aXZhbGVudCB0byB1c2VTdGF0ZSgpLiBBbGxvd3MgdGhlIHZhbHVlIG9mIHRoZSBSZWNvaWxTdGF0ZSB0byBiZSByZWFkIGFuZCB3cml0dGVuLlxuICBTdWJzZXF1ZW50IHVwZGF0ZXMgdG8gdGhlIFJlY29pbFN0YXRlIHdpbGwgY2F1c2UgdGhlIGNvbXBvbmVudCB0byByZS1yZW5kZXIuIElmIHRoZVxuICBSZWNvaWxTdGF0ZSBpcyBwZW5kaW5nLCB0aGlzIHdpbGwgc3VzcGVuZCB0aGUgY29tcG9uZW50IGFuZCBpbml0aWF0ZSB0aGVcbiAgcmV0cmlldmFsIG9mIHRoZSB2YWx1ZS4gSWYgZXZhbHVhdGluZyB0aGUgUmVjb2lsU3RhdGUgcmVzdWx0ZWQgaW4gYW4gZXJyb3IsIHRoaXMgd2lsbFxuICB0aHJvdyB0aGUgZXJyb3Igc28gdGhhdCB0aGUgbmVhcmVzdCBSZWFjdCBlcnJvciBib3VuZGFyeSBjYW4gY2F0Y2ggaXQuXG4qL1xuXG5cbmZ1bmN0aW9uIHVzZVJlY29pbFN0YXRlKHJlY29pbFN0YXRlKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICB2YWxpZGF0ZVJlY29pbFZhbHVlKHJlY29pbFN0YXRlLCAndXNlUmVjb2lsU3RhdGUnKTtcbiAgfVxuXG4gIHJldHVybiBbdXNlUmVjb2lsVmFsdWUocmVjb2lsU3RhdGUpLCB1c2VTZXRSZWNvaWxTdGF0ZShyZWNvaWxTdGF0ZSldO1xufVxuLyoqXG4gIExpa2UgdXNlUmVjb2lsU3RhdGUoKSwgYnV0IGRvZXMgbm90IGNhdXNlIFN1c3BlbnNlIG9yIFJlYWN0IGVycm9yIGhhbmRsaW5nLiBSZXR1cm5zXG4gIGFuIG9iamVjdCB0aGF0IGluZGljYXRlcyB3aGV0aGVyIHRoZSBSZWNvaWxTdGF0ZSBpcyBhdmFpbGFibGUsIHBlbmRpbmcsIG9yXG4gIHVuYXZhaWxhYmxlIGR1ZSB0byBhbiBlcnJvci5cbiovXG5cblxuZnVuY3Rpb24gdXNlUmVjb2lsU3RhdGVMb2FkYWJsZShyZWNvaWxTdGF0ZSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgdmFsaWRhdGVSZWNvaWxWYWx1ZShyZWNvaWxTdGF0ZSwgJ3VzZVJlY29pbFN0YXRlTG9hZGFibGUnKTtcbiAgfVxuXG4gIHJldHVybiBbdXNlUmVjb2lsVmFsdWVMb2FkYWJsZShyZWNvaWxTdGF0ZSksIHVzZVNldFJlY29pbFN0YXRlKHJlY29pbFN0YXRlKV07XG59XG5cbmZ1bmN0aW9uIHVzZVNldFVudmFsaWRhdGVkQXRvbVZhbHVlcygpIHtcbiAgY29uc3Qgc3RvcmVSZWYgPSB1c2VTdG9yZVJlZiQyKCk7XG4gIHJldHVybiAodmFsdWVzLCB0cmFuc2FjdGlvbk1ldGFkYXRhID0ge30pID0+IHtcbiAgICBiYXRjaFVwZGF0ZXMkMigoKSA9PiB7XG4gICAgICBzdG9yZVJlZi5jdXJyZW50LmFkZFRyYW5zYWN0aW9uTWV0YWRhdGEodHJhbnNhY3Rpb25NZXRhZGF0YSk7XG4gICAgICB2YWx1ZXMuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4gc2V0VW52YWxpZGF0ZWRSZWNvaWxWYWx1ZSQyKHN0b3JlUmVmLmN1cnJlbnQsIG5ldyBBYnN0cmFjdFJlY29pbFZhbHVlJDMoa2V5KSwgdmFsdWUpKTtcbiAgICB9KTtcbiAgfTtcbn1cbi8qKlxuICogRXhwZXJpbWVudGFsIHZhcmlhbnRzIG9mIGhvb2tzIHdpdGggc3VwcG9ydCBmb3IgdXNlVHJhbnNpdGlvbigpXG4gKi9cblxuXG5mdW5jdGlvbiB1c2VSZWNvaWxWYWx1ZUxvYWRhYmxlX1RSQU5TSVRJT05fU1VQUE9SVF9VTlNUQUJMRShyZWNvaWxWYWx1ZSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgdmFsaWRhdGVSZWNvaWxWYWx1ZShyZWNvaWxWYWx1ZSwgJ3VzZVJlY29pbFZhbHVlTG9hZGFibGVfVFJBTlNJVElPTl9TVVBQT1JUX1VOU1RBQkxFJyk7XG5cbiAgICBpZiAoIXJlYWN0TW9kZSQzKCkuZWFybHkpIHtcbiAgICAgIFJlY29pbF9yZWNvdmVyYWJsZVZpb2xhdGlvbignQXR0ZXBtdCB0byB1c2UgYSBob29rIHdpdGggVU5TVEFCTEVfVFJBTlNJVElPTl9TVVBQT1JUIGluIGEgcmVuZGVyaW5nIG1vZGUgaW5jb21wYXRpYmxlIHdpdGggY29uY3VycmVudCByZW5kZXJpbmcuICBUcnkgZW5hYmxpbmcgdGhlIHJlY29pbF9zeW5jX2V4dGVybmFsX3N0b3JlIG9yIHJlY29pbF90cmFuc2l0aW9uX3N1cHBvcnQgR0tzLicpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChSZWNvaWxfZ2t4KCdyZWNvaWxfbWVtb3J5X21hbmFnYW1lbnRfMjAyMCcpKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZiLXd3dy9yZWFjdC1ob29rc1xuICAgIFJlY29pbF91c2VSZXRhaW4ocmVjb2lsVmFsdWUpO1xuICB9XG5cbiAgcmV0dXJuIHVzZVJlY29pbFZhbHVlTG9hZGFibGVfVFJBTlNJVElPTl9TVVBQT1JUKHJlY29pbFZhbHVlKTtcbn1cblxuZnVuY3Rpb24gdXNlUmVjb2lsVmFsdWVfVFJBTlNJVElPTl9TVVBQT1JUX1VOU1RBQkxFKHJlY29pbFZhbHVlKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICB2YWxpZGF0ZVJlY29pbFZhbHVlKHJlY29pbFZhbHVlLCAndXNlUmVjb2lsVmFsdWVfVFJBTlNJVElPTl9TVVBQT1JUX1VOU1RBQkxFJyk7XG4gIH1cblxuICBjb25zdCBzdG9yZVJlZiA9IHVzZVN0b3JlUmVmJDIoKTtcbiAgY29uc3QgbG9hZGFibGUgPSB1c2VSZWNvaWxWYWx1ZUxvYWRhYmxlX1RSQU5TSVRJT05fU1VQUE9SVF9VTlNUQUJMRShyZWNvaWxWYWx1ZSk7XG4gIHJldHVybiBoYW5kbGVMb2FkYWJsZShsb2FkYWJsZSwgcmVjb2lsVmFsdWUsIHN0b3JlUmVmKTtcbn1cblxuZnVuY3Rpb24gdXNlUmVjb2lsU3RhdGVfVFJBTlNJVElPTl9TVVBQT1JUX1VOU1RBQkxFKHJlY29pbFN0YXRlKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICB2YWxpZGF0ZVJlY29pbFZhbHVlKHJlY29pbFN0YXRlLCAndXNlUmVjb2lsU3RhdGVfVFJBTlNJVElPTl9TVVBQT1JUX1VOU1RBQkxFJyk7XG4gIH1cblxuICByZXR1cm4gW3VzZVJlY29pbFZhbHVlX1RSQU5TSVRJT05fU1VQUE9SVF9VTlNUQUJMRShyZWNvaWxTdGF0ZSksIHVzZVNldFJlY29pbFN0YXRlKHJlY29pbFN0YXRlKV07XG59XG5cbnZhciBSZWNvaWxfSG9va3MgPSB7XG4gIHJlY29pbENvbXBvbmVudEdldFJlY29pbFZhbHVlQ291bnRfRk9SX1RFU1RJTkcsXG4gIHVzZVJlY29pbEludGVyZmFjZTogdXNlUmVjb2lsSW50ZXJmYWNlX0RFUFJFQ0FURUQsXG4gIHVzZVJlY29pbFN0YXRlLFxuICB1c2VSZWNvaWxTdGF0ZUxvYWRhYmxlLFxuICB1c2VSZWNvaWxWYWx1ZSxcbiAgdXNlUmVjb2lsVmFsdWVMb2FkYWJsZSxcbiAgdXNlUmVzZXRSZWNvaWxTdGF0ZSxcbiAgdXNlU2V0UmVjb2lsU3RhdGUsXG4gIHVzZVNldFVudmFsaWRhdGVkQXRvbVZhbHVlcyxcbiAgdXNlUmVjb2lsVmFsdWVMb2FkYWJsZV9UUkFOU0lUSU9OX1NVUFBPUlRfVU5TVEFCTEUsXG4gIHVzZVJlY29pbFZhbHVlX1RSQU5TSVRJT05fU1VQUE9SVF9VTlNUQUJMRSxcbiAgdXNlUmVjb2lsU3RhdGVfVFJBTlNJVElPTl9TVVBQT1JUX1VOU1RBQkxFXG59O1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICogQG9uY2FsbCByZWNvaWxcbiAqL1xuLyoqXG4gKiBSZXR1cm5zIGEgbWFwIGNvbnRhaW5pbmcgYWxsIG9mIHRoZSBrZXlzICsgdmFsdWVzIGZyb20gdGhlIG9yaWdpbmFsIG1hcCB3aGVyZVxuICogdGhlIGdpdmVuIGNhbGxiYWNrIHJldHVybmVkIHRydWUuXG4gKi9cblxuZnVuY3Rpb24gZmlsdGVyTWFwKG1hcCwgY2FsbGJhY2spIHtcbiAgY29uc3QgcmVzdWx0ID0gbmV3IE1hcCgpO1xuXG4gIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIG1hcCkge1xuICAgIGlmIChjYWxsYmFjayh2YWx1ZSwga2V5KSkge1xuICAgICAgcmVzdWx0LnNldChrZXksIHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG52YXIgUmVjb2lsX2ZpbHRlck1hcCA9IGZpbHRlck1hcDtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqIEBvbmNhbGwgcmVjb2lsXG4gKi9cbi8qKlxuICogUmV0dXJucyBhIHNldCBjb250YWluaW5nIGFsbCBvZiB0aGUgdmFsdWVzIGZyb20gdGhlIG9yaWdpbmFsIHNldCB3aGVyZVxuICogdGhlIGdpdmVuIGNhbGxiYWNrIHJldHVybmVkIHRydWUuXG4gKi9cblxuZnVuY3Rpb24gZmlsdGVyU2V0KHNldCwgY2FsbGJhY2spIHtcbiAgY29uc3QgcmVzdWx0ID0gbmV3IFNldCgpO1xuXG4gIGZvciAoY29uc3QgdmFsdWUgb2Ygc2V0KSB7XG4gICAgaWYgKGNhbGxiYWNrKHZhbHVlKSkge1xuICAgICAgcmVzdWx0LmFkZCh2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxudmFyIFJlY29pbF9maWx0ZXJTZXQgPSBmaWx0ZXJTZXQ7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKiBAb25jYWxsIHJlY29pbFxuICovXG5cbmZ1bmN0aW9uIG1lcmdlTWFwcyguLi5tYXBzKSB7XG4gIGNvbnN0IHJlc3VsdCA9IG5ldyBNYXAoKTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IG1hcHMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBpdGVyYXRvciA9IG1hcHNbaV0ua2V5cygpO1xuICAgIGxldCBuZXh0S2V5O1xuXG4gICAgd2hpbGUgKCEobmV4dEtleSA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuICAgICAgLy8gJEZsb3dJc3N1ZVtpbmNvbXBhdGlibGUtY2FsbF0gLSBtYXAvaXRlcmF0b3Iga25vd3Mgbm90aGluZyBhYm91dCBmbG93IHR5cGVzXG4gICAgICByZXN1bHQuc2V0KG5leHRLZXkudmFsdWUsIG1hcHNbaV0uZ2V0KG5leHRLZXkudmFsdWUpKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG52YXIgUmVjb2lsX21lcmdlTWFwcyA9IG1lcmdlTWFwcztcblxuY29uc3Qge1xuICBiYXRjaFVwZGF0ZXM6IGJhdGNoVXBkYXRlcyQzXG59ID0gUmVjb2lsX0JhdGNoaW5nO1xuXG5jb25zdCB7XG4gIERFRkFVTFRfVkFMVUU6IERFRkFVTFRfVkFMVUUkMyxcbiAgZ2V0Tm9kZTogZ2V0Tm9kZSQ0LFxuICBub2Rlczogbm9kZXMkMVxufSA9IFJlY29pbF9Ob2RlO1xuXG5jb25zdCB7XG4gIHVzZVN0b3JlUmVmOiB1c2VTdG9yZVJlZiQzXG59ID0gUmVjb2lsX1JlY29pbFJvb3Q7XG5cbmNvbnN0IHtcbiAgQWJzdHJhY3RSZWNvaWxWYWx1ZTogQWJzdHJhY3RSZWNvaWxWYWx1ZSQ0LFxuICBzZXRSZWNvaWxWYWx1ZUxvYWRhYmxlOiBzZXRSZWNvaWxWYWx1ZUxvYWRhYmxlJDFcbn0gPSBSZWNvaWxfUmVjb2lsVmFsdWVJbnRlcmZhY2U7XG5cbmNvbnN0IHtcbiAgU1VTUEVOU0VfVElNRU9VVF9NUzogU1VTUEVOU0VfVElNRU9VVF9NUyQyXG59ID0gUmVjb2lsX1JldGVudGlvbjtcblxuY29uc3Qge1xuICBjbG9uZVNuYXBzaG90OiBjbG9uZVNuYXBzaG90JDFcbn0gPSBSZWNvaWxfU25hcHNob3QkMTtcblxuY29uc3Qge1xuICB1c2VDYWxsYmFjazogdXNlQ2FsbGJhY2skMixcbiAgdXNlRWZmZWN0OiB1c2VFZmZlY3QkNCxcbiAgdXNlUmVmOiB1c2VSZWYkNSxcbiAgdXNlU3RhdGU6IHVzZVN0YXRlJDJcbn0gPSByZWFjdDtcblxuY29uc3Qge1xuICBpc1NTUjogaXNTU1IkM1xufSA9IFJlY29pbF9FbnZpcm9ubWVudDtcblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbmZ1bmN0aW9uIHVzZVRyYW5zYWN0aW9uU3Vic2NyaXB0aW9uKGNhbGxiYWNrKSB7XG4gIGNvbnN0IHN0b3JlUmVmID0gdXNlU3RvcmVSZWYkMygpO1xuICB1c2VFZmZlY3QkNCgoKSA9PiB7XG4gICAgY29uc3Qgc3ViID0gc3RvcmVSZWYuY3VycmVudC5zdWJzY3JpYmVUb1RyYW5zYWN0aW9ucyhjYWxsYmFjayk7XG4gICAgcmV0dXJuIHN1Yi5yZWxlYXNlO1xuICB9LCBbY2FsbGJhY2ssIHN0b3JlUmVmXSk7XG59XG5cbmZ1bmN0aW9uIGV4dGVybmFsbHlWaXNpYmxlQXRvbVZhbHVlc0luU3RhdGUoc3RhdGUpIHtcbiAgY29uc3QgYXRvbVZhbHVlcyA9IHN0YXRlLmF0b21WYWx1ZXMudG9NYXAoKTtcbiAgY29uc3QgcGVyc2lzdGVkQXRvbUNvbnRlbnRzVmFsdWVzID0gUmVjb2lsX21hcE1hcChSZWNvaWxfZmlsdGVyTWFwKGF0b21WYWx1ZXMsICh2LCBrKSA9PiB7XG4gICAgY29uc3Qgbm9kZSA9IGdldE5vZGUkNChrKTtcbiAgICBjb25zdCBwZXJzaXN0ZW5jZSA9IG5vZGUucGVyc2lzdGVuY2VfVU5TVEFCTEU7XG4gICAgcmV0dXJuIHBlcnNpc3RlbmNlICE9IG51bGwgJiYgcGVyc2lzdGVuY2UudHlwZSAhPT0gJ25vbmUnICYmIHYuc3RhdGUgPT09ICdoYXNWYWx1ZSc7XG4gIH0pLCB2ID0+IHYuY29udGVudHMpOyAvLyBNZXJnZSBpbiBub252YWxpZGF0ZWQgYXRvbXM7IHdlIG1heSBub3QgaGF2ZSBkZWZzIGZvciB0aGVtIGJ1dCB0aGV5IHdpbGxcbiAgLy8gYWxsIGhhdmUgcGVyc2lzdGVuY2Ugb24gb3IgdGhleSB3b3VsZG4ndCBiZSB0aGVyZSBpbiB0aGUgZmlyc3QgcGxhY2UuXG5cbiAgcmV0dXJuIFJlY29pbF9tZXJnZU1hcHMoc3RhdGUubm9udmFsaWRhdGVkQXRvbXMudG9NYXAoKSwgcGVyc2lzdGVkQXRvbUNvbnRlbnRzVmFsdWVzKTtcbn1cblxuLyoqXG4gIENhbGxzIHRoZSBnaXZlbiBjYWxsYmFjayBhZnRlciBhbnkgYXRvbXMgaGF2ZSBiZWVuIG1vZGlmaWVkIGFuZCB0aGUgY29uc2VxdWVudFxuICBjb21wb25lbnQgcmUtcmVuZGVycyBoYXZlIGJlZW4gY29tbWl0dGVkLiBUaGlzIGlzIGludGVuZGVkIGZvciBwZXJzaXN0aW5nXG4gIHRoZSB2YWx1ZXMgb2YgdGhlIGF0b21zIHRvIHN0b3JhZ2UuIFRoZSBzdG9yZWQgdmFsdWVzIGNhbiB0aGVuIGJlIHJlc3RvcmVkXG4gIHVzaW5nIHRoZSB1c2VTZXRVbnZhbGlkYXRlZEF0b21WYWx1ZXMgaG9vay5cblxuICBUaGUgY2FsbGJhY2sgcmVjZWl2ZXMgdGhlIGZvbGxvd2luZyBpbmZvOlxuXG4gIGF0b21WYWx1ZXM6IFRoZSBjdXJyZW50IHZhbHVlIG9mIGV2ZXJ5IGF0b20gdGhhdCBpcyBib3RoIHBlcnNpc3RhYmxlIChwZXJzaXN0ZW5jZVxuICAgICAgICAgICAgICB0eXBlIG5vdCBzZXQgdG8gJ25vbmUnKSBhbmQgd2hvc2UgdmFsdWUgaXMgYXZhaWxhYmxlIChub3QgaW4gYW5cbiAgICAgICAgICAgICAgZXJyb3Igb3IgbG9hZGluZyBzdGF0ZSkuXG5cbiAgcHJldmlvdXNBdG9tVmFsdWVzOiBUaGUgdmFsdWUgb2YgZXZlcnkgcGVyc2lzdGFibGUgYW5kIGF2YWlsYWJsZSBhdG9tIGJlZm9yZVxuICAgICAgICAgICAgICAgdGhlIHRyYW5zYWN0aW9uIGJlZ2FuLlxuXG4gIGF0b21JbmZvOiBBIG1hcCBjb250YWluaW5nIHRoZSBwZXJzaXN0ZW5jZSBzZXR0aW5ncyBmb3IgZWFjaCBhdG9tLiBFdmVyeSBrZXlcbiAgICAgICAgICAgIHRoYXQgZXhpc3RzIGluIGF0b21WYWx1ZXMgd2lsbCBhbHNvIGV4aXN0IGluIGF0b21JbmZvLlxuXG4gIG1vZGlmaWVkQXRvbXM6IFRoZSBzZXQgb2YgYXRvbXMgdGhhdCB3ZXJlIHdyaXR0ZW4gdG8gZHVyaW5nIHRoZSB0cmFuc2FjdGlvbi5cblxuICB0cmFuc2FjdGlvbk1ldGFkYXRhOiBBcmJpdHJhcnkgaW5mb3JtYXRpb24gdGhhdCB3YXMgYWRkZWQgdmlhIHRoZVxuICAgICAgICAgIHVzZVNldFVudmFsaWRhdGVkQXRvbVZhbHVlcyBob29rLiBVc2VmdWwgZm9yIGlnbm9yaW5nIHRoZSB1c2VTZXRVbnZhbGlkYXRlZEF0b21WYWx1ZXNcbiAgICAgICAgICB0cmFuc2FjdGlvbiwgdG8gYXZvaWQgbG9vcHMuXG4qL1xuZnVuY3Rpb24gdXNlVHJhbnNhY3Rpb25PYnNlcnZhdGlvbl9ERVBSRUNBVEVEKGNhbGxiYWNrKSB7XG4gIHVzZVRyYW5zYWN0aW9uU3Vic2NyaXB0aW9uKHVzZUNhbGxiYWNrJDIoc3RvcmUgPT4ge1xuICAgIGxldCBwcmV2aW91c1RyZWUgPSBzdG9yZS5nZXRTdGF0ZSgpLnByZXZpb3VzVHJlZTtcbiAgICBjb25zdCBjdXJyZW50VHJlZSA9IHN0b3JlLmdldFN0YXRlKCkuY3VycmVudFRyZWU7XG5cbiAgICBpZiAoIXByZXZpb3VzVHJlZSkge1xuICAgICAgUmVjb2lsX3JlY292ZXJhYmxlVmlvbGF0aW9uKCdUcmFuc2FjdGlvbiBzdWJzY3JpYmVycyBub3RpZmllZCB3aXRob3V0IGEgcHJldmlvdXMgdHJlZSBiZWluZyBwcmVzZW50IC0tIHRoaXMgaXMgYSBidWcgaW4gUmVjb2lsJyk7XG4gICAgICBwcmV2aW91c1RyZWUgPSBzdG9yZS5nZXRTdGF0ZSgpLmN1cnJlbnRUcmVlOyAvLyBhdHRlbXB0IHRvIHRydW5kbGUgb25cbiAgICB9XG5cbiAgICBjb25zdCBhdG9tVmFsdWVzID0gZXh0ZXJuYWxseVZpc2libGVBdG9tVmFsdWVzSW5TdGF0ZShjdXJyZW50VHJlZSk7XG4gICAgY29uc3QgcHJldmlvdXNBdG9tVmFsdWVzID0gZXh0ZXJuYWxseVZpc2libGVBdG9tVmFsdWVzSW5TdGF0ZShwcmV2aW91c1RyZWUpO1xuICAgIGNvbnN0IGF0b21JbmZvID0gUmVjb2lsX21hcE1hcChub2RlcyQxLCBub2RlID0+IHtcbiAgICAgIHZhciBfbm9kZSRwZXJzaXN0ZW5jZV9VTlMsIF9ub2RlJHBlcnNpc3RlbmNlX1VOUzIsIF9ub2RlJHBlcnNpc3RlbmNlX1VOUzMsIF9ub2RlJHBlcnNpc3RlbmNlX1VOUzQ7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBlcnNpc3RlbmNlX1VOU1RBQkxFOiB7XG4gICAgICAgICAgdHlwZTogKF9ub2RlJHBlcnNpc3RlbmNlX1VOUyA9IChfbm9kZSRwZXJzaXN0ZW5jZV9VTlMyID0gbm9kZS5wZXJzaXN0ZW5jZV9VTlNUQUJMRSkgPT09IG51bGwgfHwgX25vZGUkcGVyc2lzdGVuY2VfVU5TMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX25vZGUkcGVyc2lzdGVuY2VfVU5TMi50eXBlKSAhPT0gbnVsbCAmJiBfbm9kZSRwZXJzaXN0ZW5jZV9VTlMgIT09IHZvaWQgMCA/IF9ub2RlJHBlcnNpc3RlbmNlX1VOUyA6ICdub25lJyxcbiAgICAgICAgICBiYWNrQnV0dG9uOiAoX25vZGUkcGVyc2lzdGVuY2VfVU5TMyA9IChfbm9kZSRwZXJzaXN0ZW5jZV9VTlM0ID0gbm9kZS5wZXJzaXN0ZW5jZV9VTlNUQUJMRSkgPT09IG51bGwgfHwgX25vZGUkcGVyc2lzdGVuY2VfVU5TNCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX25vZGUkcGVyc2lzdGVuY2VfVU5TNC5iYWNrQnV0dG9uKSAhPT0gbnVsbCAmJiBfbm9kZSRwZXJzaXN0ZW5jZV9VTlMzICE9PSB2b2lkIDAgPyBfbm9kZSRwZXJzaXN0ZW5jZV9VTlMzIDogZmFsc2VcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KTsgLy8gRmlsdGVyIG9uIGV4aXN0YW5jZSBpbiBhdG9tVmFsdWVzIHNvIHRoYXQgZXh0ZXJuYWxseS12aXNpYmxlIHJ1bGVzXG4gICAgLy8gYXJlIGFsc28gYXBwbGllZCB0byBtb2RpZmllZCBhdG9tcyAoc3BlY2lmaWNhbGx5IGV4Y2x1ZGUgc2VsZWN0b3JzKTpcblxuICAgIGNvbnN0IG1vZGlmaWVkQXRvbXMgPSBSZWNvaWxfZmlsdGVyU2V0KGN1cnJlbnRUcmVlLmRpcnR5QXRvbXMsIGsgPT4gYXRvbVZhbHVlcy5oYXMoaykgfHwgcHJldmlvdXNBdG9tVmFsdWVzLmhhcyhrKSk7XG4gICAgY2FsbGJhY2soe1xuICAgICAgYXRvbVZhbHVlcyxcbiAgICAgIHByZXZpb3VzQXRvbVZhbHVlcyxcbiAgICAgIGF0b21JbmZvLFxuICAgICAgbW9kaWZpZWRBdG9tcyxcbiAgICAgIHRyYW5zYWN0aW9uTWV0YWRhdGE6IHsgLi4uY3VycmVudFRyZWUudHJhbnNhY3Rpb25NZXRhZGF0YVxuICAgICAgfVxuICAgIH0pO1xuICB9LCBbY2FsbGJhY2tdKSk7XG59XG5cbmZ1bmN0aW9uIHVzZVJlY29pbFRyYW5zYWN0aW9uT2JzZXJ2ZXIoY2FsbGJhY2spIHtcbiAgdXNlVHJhbnNhY3Rpb25TdWJzY3JpcHRpb24odXNlQ2FsbGJhY2skMihzdG9yZSA9PiB7XG4gICAgY29uc3Qgc25hcHNob3QgPSBjbG9uZVNuYXBzaG90JDEoc3RvcmUsICdsYXRlc3QnKTtcbiAgICBjb25zdCBwcmV2aW91c1NuYXBzaG90ID0gY2xvbmVTbmFwc2hvdCQxKHN0b3JlLCAncHJldmlvdXMnKTtcbiAgICBjYWxsYmFjayh7XG4gICAgICBzbmFwc2hvdCxcbiAgICAgIHByZXZpb3VzU25hcHNob3RcbiAgICB9KTtcbiAgfSwgW2NhbGxiYWNrXSkpO1xufSAvLyBSZXR1cm4gYSBzbmFwc2hvdCBvZiB0aGUgY3VycmVudCBzdGF0ZSBhbmQgc3Vic2NyaWJlIHRvIGFsbCBzdGF0ZSBjaGFuZ2VzXG5cblxuZnVuY3Rpb24gdXNlUmVjb2lsU25hcHNob3QoKSB7XG4gIGNvbnN0IHN0b3JlUmVmID0gdXNlU3RvcmVSZWYkMygpO1xuICBjb25zdCBbc25hcHNob3QsIHNldFNuYXBzaG90XSA9IHVzZVN0YXRlJDIoKCkgPT4gY2xvbmVTbmFwc2hvdCQxKHN0b3JlUmVmLmN1cnJlbnQpKTtcbiAgY29uc3QgcHJldmlvdXNTbmFwc2hvdCA9IFJlY29pbF91c2VQcmV2aW91cyhzbmFwc2hvdCk7XG4gIGNvbnN0IHRpbWVvdXRJRCA9IHVzZVJlZiQ1KCk7XG4gIGNvbnN0IHJlbGVhc2VSZWYgPSB1c2VSZWYkNSgpO1xuICB1c2VUcmFuc2FjdGlvblN1YnNjcmlwdGlvbih1c2VDYWxsYmFjayQyKHN0b3JlID0+IHNldFNuYXBzaG90KGNsb25lU25hcHNob3QkMShzdG9yZSkpLCBbXSkpOyAvLyBSZXRhaW4gc25hcHNob3QgZm9yIGR1cmF0aW9uIGNvbXBvbmVudCBpcyBtb3VudGVkXG5cbiAgdXNlRWZmZWN0JDQoKCkgPT4ge1xuICAgIGNvbnN0IHJlbGVhc2UgPSBzbmFwc2hvdC5yZXRhaW4oKTsgLy8gUmVsZWFzZSB0aGUgcmV0YWluIGZyb20gdGhlIHJlbmRlcmluZyBjYWxsXG5cbiAgICBpZiAodGltZW91dElELmN1cnJlbnQgJiYgIWlzU1NSJDMpIHtcbiAgICAgIHZhciBfcmVsZWFzZVJlZiRjdXJyZW50O1xuXG4gICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHRpbWVvdXRJRC5jdXJyZW50KTtcbiAgICAgIHRpbWVvdXRJRC5jdXJyZW50ID0gbnVsbDtcbiAgICAgIChfcmVsZWFzZVJlZiRjdXJyZW50ID0gcmVsZWFzZVJlZi5jdXJyZW50KSA9PT0gbnVsbCB8fCBfcmVsZWFzZVJlZiRjdXJyZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfcmVsZWFzZVJlZiRjdXJyZW50LmNhbGwocmVsZWFzZVJlZik7XG4gICAgICByZWxlYXNlUmVmLmN1cnJlbnQgPSBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAvLyBEZWZlciB0aGUgcmVsZWFzZS4gIElmIFwiRmFzdCBSZWZyZXNoXCJcIiBpcyB1c2VkIHRoZW4gdGhlIGNvbXBvbmVudCBtYXlcbiAgICAgIC8vIHJlLXJlbmRlciB3aXRoIHRoZSBzYW1lIHN0YXRlLiAgVGhlIHByZXZpb3VzIGNsZWFudXAgd2lsbCB0aGVuIHJ1biBhbmRcbiAgICAgIC8vIHRoZW4gdGhlIG5ldyBlZmZlY3Qgd2lsbCBydW4uIFdlIGRvbid0IHdhbnQgdGhlIHNuYXBzaG90IHRvIGJlIHJlbGVhc2VkXG4gICAgICAvLyBieSB0aGF0IGNsZWFudXAgYmVmb3JlIHRoZSBuZXcgZWZmZWN0IGhhcyBhIGNoYW5jZSB0byByZXRhaW4gaXQgYWdhaW4uXG4gICAgICAvLyBVc2UgdGltZW91dCBvZiAxMCB0byB3b3JrYXJvdW5kIEZpcmVmb3ggaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9va2V4cGVyaW1lbnRhbC9SZWNvaWwvaXNzdWVzLzE5MzZcbiAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KHJlbGVhc2UsIDEwKTtcbiAgICB9O1xuICB9LCBbc25hcHNob3RdKTsgLy8gUmV0YWluIHNuYXBzaG90IHVudGlsIGFib3ZlIGVmZmVjdCBpcyBydW4uXG4gIC8vIFJlbGVhc2UgYWZ0ZXIgYSB0aHJlc2hvbGQgaW4gY2FzZSBjb21wb25lbnQgaXMgc3VzcGVuZGVkLlxuXG4gIGlmIChwcmV2aW91c1NuYXBzaG90ICE9PSBzbmFwc2hvdCAmJiAhaXNTU1IkMykge1xuICAgIC8vIFJlbGVhc2UgdGhlIHByZXZpb3VzIHNuYXBzaG90XG4gICAgaWYgKHRpbWVvdXRJRC5jdXJyZW50KSB7XG4gICAgICB2YXIgX3JlbGVhc2VSZWYkY3VycmVudDI7XG5cbiAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQodGltZW91dElELmN1cnJlbnQpO1xuICAgICAgdGltZW91dElELmN1cnJlbnQgPSBudWxsO1xuICAgICAgKF9yZWxlYXNlUmVmJGN1cnJlbnQyID0gcmVsZWFzZVJlZi5jdXJyZW50KSA9PT0gbnVsbCB8fCBfcmVsZWFzZVJlZiRjdXJyZW50MiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3JlbGVhc2VSZWYkY3VycmVudDIuY2FsbChyZWxlYXNlUmVmKTtcbiAgICAgIHJlbGVhc2VSZWYuY3VycmVudCA9IG51bGw7XG4gICAgfVxuXG4gICAgcmVsZWFzZVJlZi5jdXJyZW50ID0gc25hcHNob3QucmV0YWluKCk7XG4gICAgdGltZW91dElELmN1cnJlbnQgPSB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB2YXIgX3JlbGVhc2VSZWYkY3VycmVudDM7XG5cbiAgICAgIHRpbWVvdXRJRC5jdXJyZW50ID0gbnVsbDtcbiAgICAgIChfcmVsZWFzZVJlZiRjdXJyZW50MyA9IHJlbGVhc2VSZWYuY3VycmVudCkgPT09IG51bGwgfHwgX3JlbGVhc2VSZWYkY3VycmVudDMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9yZWxlYXNlUmVmJGN1cnJlbnQzLmNhbGwocmVsZWFzZVJlZik7XG4gICAgICByZWxlYXNlUmVmLmN1cnJlbnQgPSBudWxsO1xuICAgIH0sIFNVU1BFTlNFX1RJTUVPVVRfTVMkMik7XG4gIH1cblxuICByZXR1cm4gc25hcHNob3Q7XG59XG5cbmZ1bmN0aW9uIGdvdG9TbmFwc2hvdChzdG9yZSwgc25hcHNob3QpIHtcbiAgdmFyIF9zdG9yZVN0YXRlJG5leHRUcmVlO1xuXG4gIGNvbnN0IHN0b3JlU3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICBjb25zdCBwcmV2ID0gKF9zdG9yZVN0YXRlJG5leHRUcmVlID0gc3RvcmVTdGF0ZS5uZXh0VHJlZSkgIT09IG51bGwgJiYgX3N0b3JlU3RhdGUkbmV4dFRyZWUgIT09IHZvaWQgMCA/IF9zdG9yZVN0YXRlJG5leHRUcmVlIDogc3RvcmVTdGF0ZS5jdXJyZW50VHJlZTtcbiAgY29uc3QgbmV4dCA9IHNuYXBzaG90LmdldFN0b3JlX0lOVEVSTkFMKCkuZ2V0U3RhdGUoKS5jdXJyZW50VHJlZTtcbiAgYmF0Y2hVcGRhdGVzJDMoKCkgPT4ge1xuICAgIGNvbnN0IGtleXNUb1VwZGF0ZSA9IG5ldyBTZXQoKTtcblxuICAgIGZvciAoY29uc3Qga2V5cyBvZiBbcHJldi5hdG9tVmFsdWVzLmtleXMoKSwgbmV4dC5hdG9tVmFsdWVzLmtleXMoKV0pIHtcbiAgICAgIGZvciAoY29uc3Qga2V5IG9mIGtleXMpIHtcbiAgICAgICAgdmFyIF9wcmV2JGF0b21WYWx1ZXMkZ2V0LCBfbmV4dCRhdG9tVmFsdWVzJGdldDtcblxuICAgICAgICBpZiAoKChfcHJldiRhdG9tVmFsdWVzJGdldCA9IHByZXYuYXRvbVZhbHVlcy5nZXQoa2V5KSkgPT09IG51bGwgfHwgX3ByZXYkYXRvbVZhbHVlcyRnZXQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9wcmV2JGF0b21WYWx1ZXMkZ2V0LmNvbnRlbnRzKSAhPT0gKChfbmV4dCRhdG9tVmFsdWVzJGdldCA9IG5leHQuYXRvbVZhbHVlcy5nZXQoa2V5KSkgPT09IG51bGwgfHwgX25leHQkYXRvbVZhbHVlcyRnZXQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9uZXh0JGF0b21WYWx1ZXMkZ2V0LmNvbnRlbnRzKSAmJiBnZXROb2RlJDQoa2V5KS5zaG91bGRSZXN0b3JlRnJvbVNuYXBzaG90cykge1xuICAgICAgICAgIGtleXNUb1VwZGF0ZS5hZGQoa2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGtleXNUb1VwZGF0ZS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICBzZXRSZWNvaWxWYWx1ZUxvYWRhYmxlJDEoc3RvcmUsIG5ldyBBYnN0cmFjdFJlY29pbFZhbHVlJDQoa2V5KSwgbmV4dC5hdG9tVmFsdWVzLmhhcyhrZXkpID8gUmVjb2lsX251bGx0aHJvd3MobmV4dC5hdG9tVmFsdWVzLmdldChrZXkpKSA6IERFRkFVTFRfVkFMVUUkMyk7XG4gICAgfSk7XG4gICAgc3RvcmUucmVwbGFjZVN0YXRlKHN0YXRlID0+ICh7IC4uLnN0YXRlLFxuICAgICAgc3RhdGVJRDogc25hcHNob3QuZ2V0SUQoKVxuICAgIH0pKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHVzZUdvdG9SZWNvaWxTbmFwc2hvdCgpIHtcbiAgY29uc3Qgc3RvcmVSZWYgPSB1c2VTdG9yZVJlZiQzKCk7XG4gIHJldHVybiB1c2VDYWxsYmFjayQyKHNuYXBzaG90ID0+IGdvdG9TbmFwc2hvdChzdG9yZVJlZi5jdXJyZW50LCBzbmFwc2hvdCksIFtzdG9yZVJlZl0pO1xufVxuXG52YXIgUmVjb2lsX1NuYXBzaG90SG9va3MgPSB7XG4gIHVzZVJlY29pbFNuYXBzaG90LFxuICBnb3RvU25hcHNob3QsXG4gIHVzZUdvdG9SZWNvaWxTbmFwc2hvdCxcbiAgdXNlUmVjb2lsVHJhbnNhY3Rpb25PYnNlcnZlcixcbiAgdXNlVHJhbnNhY3Rpb25PYnNlcnZhdGlvbl9ERVBSRUNBVEVELFxuICB1c2VUcmFuc2FjdGlvblN1YnNjcmlwdGlvbl9ERVBSRUNBVEVEOiB1c2VUcmFuc2FjdGlvblN1YnNjcmlwdGlvblxufTtcblxuY29uc3Qge1xuICBwZWVrTm9kZUluZm86IHBlZWtOb2RlSW5mbyQyXG59ID0gUmVjb2lsX0Z1bmN0aW9uYWxDb3JlO1xuXG5jb25zdCB7XG4gIHVzZVN0b3JlUmVmOiB1c2VTdG9yZVJlZiQ0XG59ID0gUmVjb2lsX1JlY29pbFJvb3Q7XG5cbmZ1bmN0aW9uIHVzZUdldFJlY29pbFZhbHVlSW5mbygpIHtcbiAgY29uc3Qgc3RvcmVSZWYgPSB1c2VTdG9yZVJlZiQ0KCk7XG4gIHJldHVybiAoe1xuICAgIGtleVxuICB9KSA9PiBwZWVrTm9kZUluZm8kMihzdG9yZVJlZi5jdXJyZW50LCBzdG9yZVJlZi5jdXJyZW50LmdldFN0YXRlKCkuY3VycmVudFRyZWUsIGtleSk7XG59XG5cbnZhciBSZWNvaWxfdXNlR2V0UmVjb2lsVmFsdWVJbmZvID0gdXNlR2V0UmVjb2lsVmFsdWVJbmZvO1xuXG5jb25zdCB7XG4gIHJlYWN0TW9kZTogcmVhY3RNb2RlJDRcbn0gPSBSZWNvaWxfUmVhY3RNb2RlO1xuXG5jb25zdCB7XG4gIFJlY29pbFJvb3Q6IFJlY29pbFJvb3QkMSxcbiAgdXNlU3RvcmVSZWY6IHVzZVN0b3JlUmVmJDVcbn0gPSBSZWNvaWxfUmVjb2lsUm9vdDtcblxuXG5cbmNvbnN0IHtcbiAgdXNlTWVtbzogdXNlTWVtbyQyXG59ID0gcmVhY3Q7XG5cbmZ1bmN0aW9uIHVzZVJlY29pbEJyaWRnZUFjcm9zc1JlYWN0Um9vdHMoKSB7XG4gIC8vIFRoZSB0ZXN0IGZhaWxzIHdoZW4gdXNpbmcgdXNlTXV0YWJsZVNvdXJjZSgpLCBidXQgb25seSBpZiBhY3QoKSBpcyB1c2VkXG4gIC8vIGZvciB0aGUgbmVzdGVkIHJvb3QuICBTbywgdGhpcyBtYXkgb25seSBiZSBhIHRlc3RpbmcgZW52aXJvbm1lbnQgaXNzdWUuXG4gIGlmIChyZWFjdE1vZGUkNCgpLm1vZGUgPT09ICdNVVRBQkxFX1NPVVJDRScpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZmItd3d3L25vLWNvbnNvbGVcbiAgICBjb25zb2xlLndhcm4oJ1dhcm5pbmc6IFRoZXJlIGFyZSBrbm93biBpc3N1ZXMgdXNpbmcgdXNlUmVjb2lsQnJpZGdlQWNyb3NzUmVhY3RSb290cygpIGluIHJlY29pbF9tdXRhYmxlX3NvdXJjZSByZW5kZXJpbmcgbW9kZS4gIFBsZWFzZSBjb25zaWRlciB1cGdyYWRpbmcgdG8gcmVjb2lsX3N5bmNfZXh0ZXJuYWxfc3RvcmUgbW9kZS4nKTtcbiAgfVxuXG4gIGNvbnN0IHN0b3JlID0gdXNlU3RvcmVSZWYkNSgpLmN1cnJlbnQ7XG4gIHJldHVybiB1c2VNZW1vJDIoKCkgPT4ge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zaGFkb3dcbiAgICBmdW5jdGlvbiBSZWNvaWxCcmlkZ2Uoe1xuICAgICAgY2hpbGRyZW5cbiAgICB9KSB7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL3JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVjb2lsUm9vdCQxLCB7XG4gICAgICAgIHN0b3JlX0lOVEVSTkFMOiBzdG9yZVxuICAgICAgfSwgY2hpbGRyZW4pO1xuICAgIH1cblxuICAgIHJldHVybiBSZWNvaWxCcmlkZ2U7XG4gIH0sIFtzdG9yZV0pO1xufVxuXG52YXIgUmVjb2lsX3VzZVJlY29pbEJyaWRnZUFjcm9zc1JlYWN0Um9vdHMgPSB1c2VSZWNvaWxCcmlkZ2VBY3Jvc3NSZWFjdFJvb3RzO1xuXG5jb25zdCB7XG4gIGxvYWRhYmxlV2l0aFZhbHVlOiBsb2FkYWJsZVdpdGhWYWx1ZSQxXG59ID0gUmVjb2lsX0xvYWRhYmxlJDE7XG5cbmNvbnN0IHtcbiAgaW5pdGlhbGl6ZU5vZGU6IGluaXRpYWxpemVOb2RlJDNcbn0gPSBSZWNvaWxfRnVuY3Rpb25hbENvcmU7XG5cbmNvbnN0IHtcbiAgREVGQVVMVF9WQUxVRTogREVGQVVMVF9WQUxVRSQ0LFxuICBnZXROb2RlOiBnZXROb2RlJDVcbn0gPSBSZWNvaWxfTm9kZTtcblxuY29uc3Qge1xuICBjb3B5VHJlZVN0YXRlOiBjb3B5VHJlZVN0YXRlJDEsXG4gIGdldFJlY29pbFZhbHVlQXNMb2FkYWJsZTogZ2V0UmVjb2lsVmFsdWVBc0xvYWRhYmxlJDMsXG4gIGludmFsaWRhdGVEb3duc3RyZWFtczogaW52YWxpZGF0ZURvd25zdHJlYW1zJDEsXG4gIHdyaXRlTG9hZGFibGVUb1RyZWVTdGF0ZTogd3JpdGVMb2FkYWJsZVRvVHJlZVN0YXRlJDFcbn0gPSBSZWNvaWxfUmVjb2lsVmFsdWVJbnRlcmZhY2U7XG5cblxuXG5mdW5jdGlvbiBpc0F0b20ocmVjb2lsVmFsdWUpIHtcbiAgcmV0dXJuIGdldE5vZGUkNShyZWNvaWxWYWx1ZS5rZXkpLm5vZGVUeXBlID09PSAnYXRvbSc7XG59XG5cbmNsYXNzIFRyYW5zYWN0aW9uSW50ZXJmYWNlSW1wbCB7XG4gIGNvbnN0cnVjdG9yKHN0b3JlLCB0cmVlU3RhdGUpIHtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJfc3RvcmVcIiwgdm9pZCAwKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIl90cmVlU3RhdGVcIiwgdm9pZCAwKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIl9jaGFuZ2VzXCIsIHZvaWQgMCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJnZXRcIiwgcmVjb2lsVmFsdWUgPT4ge1xuICAgICAgaWYgKHRoaXMuX2NoYW5nZXMuaGFzKHJlY29pbFZhbHVlLmtleSkpIHtcbiAgICAgICAgLy8gJEZsb3dJc3N1ZVtpbmNvbXBhdGlibGUtcmV0dXJuXVxuICAgICAgICByZXR1cm4gdGhpcy5fY2hhbmdlcy5nZXQocmVjb2lsVmFsdWUua2V5KTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc0F0b20ocmVjb2lsVmFsdWUpKSB7XG4gICAgICAgIHRocm93IFJlY29pbF9lcnIoJ1JlYWRpbmcgc2VsZWN0b3JzIHdpdGhpbiBhdG9taWNVcGRhdGUgaXMgbm90IHN1cHBvcnRlZCcpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBsb2FkYWJsZSA9IGdldFJlY29pbFZhbHVlQXNMb2FkYWJsZSQzKHRoaXMuX3N0b3JlLCByZWNvaWxWYWx1ZSwgdGhpcy5fdHJlZVN0YXRlKTtcblxuICAgICAgaWYgKGxvYWRhYmxlLnN0YXRlID09PSAnaGFzVmFsdWUnKSB7XG4gICAgICAgIHJldHVybiBsb2FkYWJsZS5jb250ZW50cztcbiAgICAgIH0gZWxzZSBpZiAobG9hZGFibGUuc3RhdGUgPT09ICdoYXNFcnJvcicpIHtcbiAgICAgICAgdGhyb3cgbG9hZGFibGUuY29udGVudHM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBSZWNvaWxfZXJyKGBFeHBlY3RlZCBSZWNvaWwgYXRvbSAke3JlY29pbFZhbHVlLmtleX0gdG8gaGF2ZSBhIHZhbHVlLCBidXQgaXQgaXMgaW4gYSBsb2FkaW5nIHN0YXRlLmApO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwic2V0XCIsIChyZWNvaWxTdGF0ZSwgdmFsdWVPclVwZGF0ZXIpID0+IHtcbiAgICAgIGlmICghaXNBdG9tKHJlY29pbFN0YXRlKSkge1xuICAgICAgICB0aHJvdyBSZWNvaWxfZXJyKCdTZXR0aW5nIHNlbGVjdG9ycyB3aXRoaW4gYXRvbWljVXBkYXRlIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZU9yVXBkYXRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBjb25zdCBjdXJyZW50ID0gdGhpcy5nZXQocmVjb2lsU3RhdGUpO1xuXG4gICAgICAgIHRoaXMuX2NoYW5nZXMuc2V0KHJlY29pbFN0YXRlLmtleSwgdmFsdWVPclVwZGF0ZXIoY3VycmVudCkpOyAvLyBmbG93bGludC1saW5lIHVuY2xlYXItdHlwZTpvZmZcblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gSW5pdGlhbGl6ZSBhdG9tIGFuZCBydW4gZWZmZWN0cyBpZiBub3QgaW5pdGlhbGl6ZWQgeWV0XG4gICAgICAgIGluaXRpYWxpemVOb2RlJDModGhpcy5fc3RvcmUsIHJlY29pbFN0YXRlLmtleSwgJ3NldCcpO1xuXG4gICAgICAgIHRoaXMuX2NoYW5nZXMuc2V0KHJlY29pbFN0YXRlLmtleSwgdmFsdWVPclVwZGF0ZXIpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwicmVzZXRcIiwgcmVjb2lsU3RhdGUgPT4ge1xuICAgICAgdGhpcy5zZXQocmVjb2lsU3RhdGUsIERFRkFVTFRfVkFMVUUkNCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLl9zdG9yZSA9IHN0b3JlO1xuICAgIHRoaXMuX3RyZWVTdGF0ZSA9IHRyZWVTdGF0ZTtcbiAgICB0aGlzLl9jaGFuZ2VzID0gbmV3IE1hcCgpO1xuICB9IC8vIEFsbG93IGRlc3RydWN0aW5nXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmYi13d3cvZXh0cmEtYXJyb3ctaW5pdGlhbGl6ZXJcblxuXG4gIG5ld1RyZWVTdGF0ZV9JTlRFUk5BTCgpIHtcbiAgICBpZiAodGhpcy5fY2hhbmdlcy5zaXplID09PSAwKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdHJlZVN0YXRlO1xuICAgIH1cblxuICAgIGNvbnN0IG5ld1N0YXRlID0gY29weVRyZWVTdGF0ZSQxKHRoaXMuX3RyZWVTdGF0ZSk7XG5cbiAgICBmb3IgKGNvbnN0IFtrLCB2XSBvZiB0aGlzLl9jaGFuZ2VzKSB7XG4gICAgICB3cml0ZUxvYWRhYmxlVG9UcmVlU3RhdGUkMShuZXdTdGF0ZSwgaywgbG9hZGFibGVXaXRoVmFsdWUkMSh2KSk7XG4gICAgfVxuXG4gICAgaW52YWxpZGF0ZURvd25zdHJlYW1zJDEodGhpcy5fc3RvcmUsIG5ld1N0YXRlKTtcbiAgICByZXR1cm4gbmV3U3RhdGU7XG4gIH1cblxufVxuXG5mdW5jdGlvbiBhdG9taWNVcGRhdGVyKHN0b3JlKSB7XG4gIHJldHVybiBmbiA9PiB7XG4gICAgc3RvcmUucmVwbGFjZVN0YXRlKHRyZWVTdGF0ZSA9PiB7XG4gICAgICBjb25zdCBjaGFuZ2VzZXQgPSBuZXcgVHJhbnNhY3Rpb25JbnRlcmZhY2VJbXBsKHN0b3JlLCB0cmVlU3RhdGUpO1xuICAgICAgZm4oY2hhbmdlc2V0KTtcbiAgICAgIHJldHVybiBjaGFuZ2VzZXQubmV3VHJlZVN0YXRlX0lOVEVSTkFMKCk7XG4gICAgfSk7XG4gIH07XG59XG5cbnZhciBSZWNvaWxfQXRvbWljVXBkYXRlcyA9IHtcbiAgYXRvbWljVXBkYXRlclxufTtcblxudmFyIFJlY29pbF9BdG9taWNVcGRhdGVzXzEgPSBSZWNvaWxfQXRvbWljVXBkYXRlcy5hdG9taWNVcGRhdGVyO1xuXG52YXIgUmVjb2lsX0F0b21pY1VwZGF0ZXMkMSA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbiAgX19wcm90b19fOiBudWxsLFxuICBhdG9taWNVcGRhdGVyOiBSZWNvaWxfQXRvbWljVXBkYXRlc18xXG59KTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICogQG9uY2FsbCByZWNvaWxcbiAqL1xuXG5mdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLCBtZXNzYWdlKSB7XG4gIGlmICghY29uZGl0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICB9XG59XG5cbnZhciBpbnZhcmlhbnRfMSA9IGludmFyaWFudDtcblxuLy8gQG9zcy1vbmx5XG5cblxudmFyIFJlY29pbF9pbnZhcmlhbnQgPSBpbnZhcmlhbnRfMTtcblxuY29uc3Qge1xuICBhdG9taWNVcGRhdGVyOiBhdG9taWNVcGRhdGVyJDFcbn0gPSBSZWNvaWxfQXRvbWljVXBkYXRlcyQxO1xuXG5jb25zdCB7XG4gIGJhdGNoVXBkYXRlczogYmF0Y2hVcGRhdGVzJDRcbn0gPSBSZWNvaWxfQmF0Y2hpbmc7XG5cbmNvbnN0IHtcbiAgREVGQVVMVF9WQUxVRTogREVGQVVMVF9WQUxVRSQ1XG59ID0gUmVjb2lsX05vZGU7XG5cbmNvbnN0IHtcbiAgdXNlU3RvcmVSZWY6IHVzZVN0b3JlUmVmJDZcbn0gPSBSZWNvaWxfUmVjb2lsUm9vdDtcblxuY29uc3Qge1xuICByZWZyZXNoUmVjb2lsVmFsdWU6IHJlZnJlc2hSZWNvaWxWYWx1ZSQxLFxuICBzZXRSZWNvaWxWYWx1ZTogc2V0UmVjb2lsVmFsdWUkM1xufSA9IFJlY29pbF9SZWNvaWxWYWx1ZUludGVyZmFjZTtcblxuY29uc3Qge1xuICBjbG9uZVNuYXBzaG90OiBjbG9uZVNuYXBzaG90JDJcbn0gPSBSZWNvaWxfU25hcHNob3QkMTtcblxuY29uc3Qge1xuICBnb3RvU25hcHNob3Q6IGdvdG9TbmFwc2hvdCQxXG59ID0gUmVjb2lsX1NuYXBzaG90SG9va3M7XG5cbmNvbnN0IHtcbiAgdXNlQ2FsbGJhY2s6IHVzZUNhbGxiYWNrJDNcbn0gPSByZWFjdDtcblxuXG5cblxuXG5cblxuXG5cbmNsYXNzIFNlbnRpbmVsIHt9XG5cbmNvbnN0IFNFTlRJTkVMID0gbmV3IFNlbnRpbmVsKCk7XG5cbmZ1bmN0aW9uIHJlY29pbENhbGxiYWNrKHN0b3JlLCBmbiwgYXJncywgZXh0cmFJbnRlcmZhY2UpIHtcbiAgbGV0IHJldCA9IFNFTlRJTkVMO1xuICBsZXQgcmVsZWFzZVNuYXBzaG90O1xuICBiYXRjaFVwZGF0ZXMkNCgoKSA9PiB7XG4gICAgY29uc3QgZXJyTXNnID0gJ3VzZVJlY29pbENhbGxiYWNrKCkgZXhwZWN0cyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIGZ1bmN0aW9uOiAnICsgJ2l0IGFjY2VwdHMgYSBmdW5jdGlvbiBvZiB0aGUgdHlwZSAoUmVjb2lsSW50ZXJmYWNlKSA9PiAoQXJncykgPT4gUmV0dXJuVHlwZSAnICsgJ2FuZCByZXR1cm5zIGEgY2FsbGJhY2sgZnVuY3Rpb24gKEFyZ3MpID0+IFJldHVyblR5cGUsIHdoZXJlIFJlY29pbEludGVyZmFjZSBpcyAnICsgJ2FuIG9iamVjdCB7c25hcHNob3QsIHNldCwgLi4ufSBhbmQgQXJncyBhbmQgUmV0dXJuVHlwZSBhcmUgdGhlIGFyZ3VtZW50IGFuZCByZXR1cm4gJyArICd0eXBlcyBvZiB0aGUgY2FsbGJhY2sgeW91IHdhbnQgdG8gY3JlYXRlLiAgUGxlYXNlIHNlZSB0aGUgZG9jcyAnICsgJ2F0IHJlY29pbGpzLm9yZyBmb3IgZGV0YWlscy4nO1xuXG4gICAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgUmVjb2lsX2VycihlcnJNc2cpO1xuICAgIH0gLy8gQ2xvbmUgdGhlIHNuYXBzaG90IGxhemlseSB0byBhdm9pZCBvdmVyaGVhZCBpZiB0aGUgY2FsbGJhY2sgZG9lcyBub3QgdXNlIGl0LlxuICAgIC8vIE5vdGUgdGhhdCB0aGlzIG1lYW5zIHRoZSBzbmFwc2hvdCBtYXkgcmVwcmVzZW50IGxhdGVyIHN0YXRlIGZyb20gd2hlblxuICAgIC8vIHRoZSBjYWxsYmFjayB3YXMgY2FsbGVkIGlmIGl0IGZpcnN0IGFjY2Vzc2VzIHRoZSBzbmFwc2hvdCBhc3luY2hyb25vdXNseS5cblxuXG4gICAgY29uc3QgY2FsbGJhY2tJbnRlcmZhY2UgPSBSZWNvaWxfbGF6eVByb3h5KHsgLi4uKGV4dHJhSW50ZXJmYWNlICE9PSBudWxsICYmIGV4dHJhSW50ZXJmYWNlICE9PSB2b2lkIDAgPyBleHRyYUludGVyZmFjZSA6IHt9KSxcbiAgICAgIC8vIGZsb3dsaW50LWxpbmUgdW5jbGVhci10eXBlOm9mZlxuICAgICAgc2V0OiAobm9kZSwgbmV3VmFsdWUpID0+IHNldFJlY29pbFZhbHVlJDMoc3RvcmUsIG5vZGUsIG5ld1ZhbHVlKSxcbiAgICAgIHJlc2V0OiBub2RlID0+IHNldFJlY29pbFZhbHVlJDMoc3RvcmUsIG5vZGUsIERFRkFVTFRfVkFMVUUkNSksXG4gICAgICByZWZyZXNoOiBub2RlID0+IHJlZnJlc2hSZWNvaWxWYWx1ZSQxKHN0b3JlLCBub2RlKSxcbiAgICAgIGdvdG9TbmFwc2hvdDogc25hcHNob3QgPT4gZ290b1NuYXBzaG90JDEoc3RvcmUsIHNuYXBzaG90KSxcbiAgICAgIHRyYW5zYWN0X1VOU1RBQkxFOiB0cmFuc2FjdGlvbiA9PiBhdG9taWNVcGRhdGVyJDEoc3RvcmUpKHRyYW5zYWN0aW9uKVxuICAgIH0sIHtcbiAgICAgIHNuYXBzaG90OiAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHNuYXBzaG90ID0gY2xvbmVTbmFwc2hvdCQyKHN0b3JlKTtcbiAgICAgICAgcmVsZWFzZVNuYXBzaG90ID0gc25hcHNob3QucmV0YWluKCk7XG4gICAgICAgIHJldHVybiBzbmFwc2hvdDtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBjb25zdCBjYWxsYmFjayA9IGZuKGNhbGxiYWNrSW50ZXJmYWNlKTtcblxuICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IFJlY29pbF9lcnIoZXJyTXNnKTtcbiAgICB9XG5cbiAgICByZXQgPSBjYWxsYmFjayguLi5hcmdzKTtcbiAgfSk7XG4gICEhKHJldCBpbnN0YW5jZW9mIFNlbnRpbmVsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFJlY29pbF9pbnZhcmlhbnQoZmFsc2UsICdiYXRjaFVwZGF0ZXMgc2hvdWxkIHJldHVybiBpbW1lZGlhdGVseScpIDogUmVjb2lsX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG5cbiAgaWYgKFJlY29pbF9pc1Byb21pc2UocmV0KSkge1xuICAgIHJldC5maW5hbGx5KCgpID0+IHtcbiAgICAgIHZhciBfcmVsZWFzZVNuYXBzaG90O1xuXG4gICAgICAoX3JlbGVhc2VTbmFwc2hvdCA9IHJlbGVhc2VTbmFwc2hvdCkgPT09IG51bGwgfHwgX3JlbGVhc2VTbmFwc2hvdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3JlbGVhc2VTbmFwc2hvdCgpO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHZhciBfcmVsZWFzZVNuYXBzaG90MjtcblxuICAgIChfcmVsZWFzZVNuYXBzaG90MiA9IHJlbGVhc2VTbmFwc2hvdCkgPT09IG51bGwgfHwgX3JlbGVhc2VTbmFwc2hvdDIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9yZWxlYXNlU25hcHNob3QyKCk7XG4gIH1cblxuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiB1c2VSZWNvaWxDYWxsYmFjayhmbiwgZGVwcykge1xuICBjb25zdCBzdG9yZVJlZiA9IHVzZVN0b3JlUmVmJDYoKTtcbiAgcmV0dXJuIHVzZUNhbGxiYWNrJDMoIC8vICRGbG93SXNzdWVbaW5jb21wYXRpYmxlLWNhbGxdXG4gICguLi5hcmdzKSA9PiB7XG4gICAgcmV0dXJuIHJlY29pbENhbGxiYWNrKHN0b3JlUmVmLmN1cnJlbnQsIGZuLCBhcmdzKTtcbiAgfSwgZGVwcyAhPSBudWxsID8gWy4uLmRlcHMsIHN0b3JlUmVmXSA6IHVuZGVmaW5lZCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGZiLXd3dy9yZWFjdC1ob29rcy1kZXBzXG4gICk7XG59XG5cbnZhciBSZWNvaWxfdXNlUmVjb2lsQ2FsbGJhY2sgPSB7XG4gIHJlY29pbENhbGxiYWNrLFxuICB1c2VSZWNvaWxDYWxsYmFja1xufTtcblxuY29uc3Qge1xuICB1c2VTdG9yZVJlZjogdXNlU3RvcmVSZWYkN1xufSA9IFJlY29pbF9SZWNvaWxSb290O1xuXG5jb25zdCB7XG4gIHJlZnJlc2hSZWNvaWxWYWx1ZTogcmVmcmVzaFJlY29pbFZhbHVlJDJcbn0gPSBSZWNvaWxfUmVjb2lsVmFsdWVJbnRlcmZhY2U7XG5cbmNvbnN0IHtcbiAgdXNlQ2FsbGJhY2s6IHVzZUNhbGxiYWNrJDRcbn0gPSByZWFjdDtcblxuZnVuY3Rpb24gdXNlUmVjb2lsUmVmcmVzaGVyKHJlY29pbFZhbHVlKSB7XG4gIGNvbnN0IHN0b3JlUmVmID0gdXNlU3RvcmVSZWYkNygpO1xuICByZXR1cm4gdXNlQ2FsbGJhY2skNCgoKSA9PiB7XG4gICAgY29uc3Qgc3RvcmUgPSBzdG9yZVJlZi5jdXJyZW50O1xuICAgIHJlZnJlc2hSZWNvaWxWYWx1ZSQyKHN0b3JlLCByZWNvaWxWYWx1ZSk7XG4gIH0sIFtyZWNvaWxWYWx1ZSwgc3RvcmVSZWZdKTtcbn1cblxudmFyIFJlY29pbF91c2VSZWNvaWxSZWZyZXNoZXIgPSB1c2VSZWNvaWxSZWZyZXNoZXI7XG5cbmNvbnN0IHtcbiAgYXRvbWljVXBkYXRlcjogYXRvbWljVXBkYXRlciQyXG59ID0gUmVjb2lsX0F0b21pY1VwZGF0ZXMkMTtcblxuY29uc3Qge1xuICB1c2VTdG9yZVJlZjogdXNlU3RvcmVSZWYkOFxufSA9IFJlY29pbF9SZWNvaWxSb290O1xuXG5jb25zdCB7XG4gIHVzZU1lbW86IHVzZU1lbW8kM1xufSA9IHJlYWN0O1xuXG5mdW5jdGlvbiB1c2VSZWNvaWxUcmFuc2FjdGlvbihmbiwgZGVwcykge1xuICBjb25zdCBzdG9yZVJlZiA9IHVzZVN0b3JlUmVmJDgoKTtcbiAgcmV0dXJuIHVzZU1lbW8kMygoKSA9PiAoLi4uYXJncykgPT4ge1xuICAgIGNvbnN0IGF0b21pY1VwZGF0ZSA9IGF0b21pY1VwZGF0ZXIkMihzdG9yZVJlZi5jdXJyZW50KTtcbiAgICBhdG9taWNVcGRhdGUodHJhbnNhY3Rpb25JbnRlcmZhY2UgPT4ge1xuICAgICAgZm4odHJhbnNhY3Rpb25JbnRlcmZhY2UpKC4uLmFyZ3MpO1xuICAgIH0pO1xuICB9LCBkZXBzICE9IG51bGwgPyBbLi4uZGVwcywgc3RvcmVSZWZdIDogdW5kZWZpbmVkIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZmItd3d3L3JlYWN0LWhvb2tzLWRlcHNcbiAgKTtcbn1cblxudmFyIFJlY29pbF91c2VSZWNvaWxUcmFuc2FjdGlvbiA9IHVzZVJlY29pbFRyYW5zYWN0aW9uO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICogQG9uY2FsbCByZWNvaWxcbiAqL1xuXG5jbGFzcyBXcmFwcGVkVmFsdWUge1xuICBjb25zdHJ1Y3Rvcih2YWx1ZSkge1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInZhbHVlXCIsIHZvaWQgMCk7XG5cbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gIH1cblxufVxuXG52YXIgUmVjb2lsX1dyYXBwZXIgPSB7XG4gIFdyYXBwZWRWYWx1ZVxufTtcblxudmFyIFJlY29pbF9XcmFwcGVyXzEgPSBSZWNvaWxfV3JhcHBlci5XcmFwcGVkVmFsdWU7XG5cbnZhciBSZWNvaWxfV3JhcHBlciQxID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuICBfX3Byb3RvX186IG51bGwsXG4gIFdyYXBwZWRWYWx1ZTogUmVjb2lsX1dyYXBwZXJfMVxufSk7XG5cbmNvbnN0IHtcbiAgaXNGYXN0UmVmcmVzaEVuYWJsZWQ6IGlzRmFzdFJlZnJlc2hFbmFibGVkJDJcbn0gPSBSZWNvaWxfUmVhY3RNb2RlO1xuXG5cblxuY2xhc3MgQ2hhbmdlZFBhdGhFcnJvciBleHRlbmRzIEVycm9yIHt9XG5cbmNsYXNzIFRyZWVDYWNoZSB7XG4gIC8vICRGbG93SXNzdWVbdW5jbGVhci10eXBlXVxuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgdmFyIF9vcHRpb25zJG9uSGl0LCBfb3B0aW9ucyRvblNldCwgX29wdGlvbnMkbWFwTm9kZVZhbHVlO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiX25hbWVcIiwgdm9pZCAwKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIl9udW1MZWFmc1wiLCB2b2lkIDApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiX3Jvb3RcIiwgdm9pZCAwKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIl9vbkhpdFwiLCB2b2lkIDApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiX29uU2V0XCIsIHZvaWQgMCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJfbWFwTm9kZVZhbHVlXCIsIHZvaWQgMCk7XG5cbiAgICB0aGlzLl9uYW1lID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLm5hbWU7XG4gICAgdGhpcy5fbnVtTGVhZnMgPSAwO1xuICAgIHRoaXMuX3Jvb3QgPSBudWxsO1xuICAgIHRoaXMuX29uSGl0ID0gKF9vcHRpb25zJG9uSGl0ID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLm9uSGl0KSAhPT0gbnVsbCAmJiBfb3B0aW9ucyRvbkhpdCAhPT0gdm9pZCAwID8gX29wdGlvbnMkb25IaXQgOiAoKSA9PiB7fTtcbiAgICB0aGlzLl9vblNldCA9IChfb3B0aW9ucyRvblNldCA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5vblNldCkgIT09IG51bGwgJiYgX29wdGlvbnMkb25TZXQgIT09IHZvaWQgMCA/IF9vcHRpb25zJG9uU2V0IDogKCkgPT4ge307XG4gICAgdGhpcy5fbWFwTm9kZVZhbHVlID0gKF9vcHRpb25zJG1hcE5vZGVWYWx1ZSA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5tYXBOb2RlVmFsdWUpICE9PSBudWxsICYmIF9vcHRpb25zJG1hcE5vZGVWYWx1ZSAhPT0gdm9pZCAwID8gX29wdGlvbnMkbWFwTm9kZVZhbHVlIDogdmFsID0+IHZhbDtcbiAgfVxuXG4gIHNpemUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX251bUxlYWZzO1xuICB9IC8vICRGbG93SXNzdWVbdW5jbGVhci10eXBlXVxuXG5cbiAgcm9vdCgpIHtcbiAgICByZXR1cm4gdGhpcy5fcm9vdDtcbiAgfVxuXG4gIGdldChnZXROb2RlVmFsdWUsIGhhbmRsZXJzKSB7XG4gICAgdmFyIF90aGlzJGdldExlYWZOb2RlO1xuXG4gICAgcmV0dXJuIChfdGhpcyRnZXRMZWFmTm9kZSA9IHRoaXMuZ2V0TGVhZk5vZGUoZ2V0Tm9kZVZhbHVlLCBoYW5kbGVycykpID09PSBudWxsIHx8IF90aGlzJGdldExlYWZOb2RlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdGhpcyRnZXRMZWFmTm9kZS52YWx1ZTtcbiAgfVxuXG4gIGdldExlYWZOb2RlKGdldE5vZGVWYWx1ZSwgaGFuZGxlcnMpIHtcbiAgICBpZiAodGhpcy5fcm9vdCA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH0gLy8gSXRlcmF0ZSBkb3duIHRoZSB0cmVlIGJhc2VkIG9uIHRoZSBjdXJyZW50IG5vZGUgdmFsdWVzIHVudGlsIHdlIGhpdCBhIGxlYWZcbiAgICAvLyAkRmxvd0lzc3VlW3VuY2xlYXItdHlwZV1cblxuXG4gICAgbGV0IG5vZGUgPSB0aGlzLl9yb290O1xuXG4gICAgd2hpbGUgKG5vZGUpIHtcbiAgICAgIGhhbmRsZXJzID09PSBudWxsIHx8IGhhbmRsZXJzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBoYW5kbGVycy5vbk5vZGVWaXNpdChub2RlKTtcblxuICAgICAgaWYgKG5vZGUudHlwZSA9PT0gJ2xlYWYnKSB7XG4gICAgICAgIHRoaXMuX29uSGl0KG5vZGUpO1xuXG4gICAgICAgIHJldHVybiBub2RlO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBub2RlVmFsdWUgPSB0aGlzLl9tYXBOb2RlVmFsdWUoZ2V0Tm9kZVZhbHVlKG5vZGUubm9kZUtleSkpO1xuXG4gICAgICBub2RlID0gbm9kZS5icmFuY2hlcy5nZXQobm9kZVZhbHVlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgc2V0KHJvdXRlLCB2YWx1ZSwgaGFuZGxlcnMpIHtcbiAgICBjb25zdCBhZGRMZWFmID0gKCkgPT4ge1xuICAgICAgdmFyIF9ub2RlMiwgX25vZGUzLCBfdGhpcyRfcm9vdDIsIF9oYW5kbGVycyRvbk5vZGVWaXNpdDI7XG5cbiAgICAgIC8vIEZpcnN0LCBzZXR1cCB0aGUgYnJhbmNoIG5vZGVzIGZvciB0aGUgcm91dGU6XG4gICAgICAvLyBJdGVyYXRlIGRvd24gdGhlIHRyZWUgdG8gZmluZCBvciBhZGQgYnJhbmNoIG5vZGVzIGZvbGxvd2luZyB0aGUgcm91dGVcbiAgICAgIGxldCBub2RlO1xuICAgICAgbGV0IGJyYW5jaEtleTtcblxuICAgICAgZm9yIChjb25zdCBbbm9kZUtleSwgbm9kZVZhbHVlXSBvZiByb3V0ZSkge1xuICAgICAgICB2YXIgX25vZGUsIF9oYW5kbGVycyRvbk5vZGVWaXNpdCwgX3RoaXMkX3Jvb3Q7XG5cbiAgICAgICAgLy8gSWYgdGhlIHByZXZpb3VzIHJvb3Qgd2FzIGEgbGVhZiwgd2hpbGUgd2Ugbm90IGhhdmUgYSBnZXQoKSwgaXQgbWVhbnNcbiAgICAgICAgLy8gdGhlIHNlbGVjdG9yIGhhcyBpbmNvbnNpc3RlbnQgdmFsdWVzIG9yIGltcGxlbWVudGF0aW9uIGNoYW5nZWQuXG4gICAgICAgIGNvbnN0IHJvb3QgPSB0aGlzLl9yb290O1xuXG4gICAgICAgIGlmICgocm9vdCA9PT0gbnVsbCB8fCByb290ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByb290LnR5cGUpID09PSAnbGVhZicpIHtcbiAgICAgICAgICB0aHJvdyB0aGlzLmludmFsaWRDYWNoZUVycm9yKCk7XG4gICAgICAgIH0gLy8gbm9kZSBub3cgcmVmZXJzIHRvIHRoZSBuZXh0IG5vZGUgZG93biBpbiB0aGUgdHJlZVxuXG5cbiAgICAgICAgY29uc3QgcGFyZW50ID0gbm9kZTsgLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG4gICAgICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXR5cGVdXG5cbiAgICAgICAgbm9kZSA9IHBhcmVudCA/IHBhcmVudC5icmFuY2hlcy5nZXQoYnJhbmNoS2V5KSA6IHJvb3Q7IC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuICAgICAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS10eXBlXVxuXG4gICAgICAgIG5vZGUgPSAoX25vZGUgPSBub2RlKSAhPT0gbnVsbCAmJiBfbm9kZSAhPT0gdm9pZCAwID8gX25vZGUgOiB7XG4gICAgICAgICAgdHlwZTogJ2JyYW5jaCcsXG4gICAgICAgICAgbm9kZUtleSxcbiAgICAgICAgICBwYXJlbnQsXG4gICAgICAgICAgYnJhbmNoZXM6IG5ldyBNYXAoKSxcbiAgICAgICAgICBicmFuY2hLZXlcbiAgICAgICAgfTsgLy8gSWYgd2UgZm91bmQgYW4gZXhpc3Rpbmcgbm9kZSwgY29uZmlybSBpdCBoYXMgYSBjb25zaXN0ZW50IHZhbHVlXG5cbiAgICAgICAgaWYgKG5vZGUudHlwZSAhPT0gJ2JyYW5jaCcgfHwgbm9kZS5ub2RlS2V5ICE9PSBub2RlS2V5KSB7XG4gICAgICAgICAgdGhyb3cgdGhpcy5pbnZhbGlkQ2FjaGVFcnJvcigpO1xuICAgICAgICB9IC8vIEFkZCB0aGUgYnJhbmNoIG5vZGUgdG8gdGhlIHRyZWVcblxuXG4gICAgICAgIHBhcmVudCA9PT0gbnVsbCB8fCBwYXJlbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhcmVudC5icmFuY2hlcy5zZXQoYnJhbmNoS2V5LCBub2RlKTtcbiAgICAgICAgaGFuZGxlcnMgPT09IG51bGwgfHwgaGFuZGxlcnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfaGFuZGxlcnMkb25Ob2RlVmlzaXQgPSBoYW5kbGVycy5vbk5vZGVWaXNpdCkgPT09IG51bGwgfHwgX2hhbmRsZXJzJG9uTm9kZVZpc2l0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfaGFuZGxlcnMkb25Ob2RlVmlzaXQuY2FsbChoYW5kbGVycywgbm9kZSk7IC8vIFByZXBhcmUgZm9yIG5leHQgaXRlcmF0aW9uIGFuZCBpbnN0YWxsIHJvb3QgaWYgaXQgaXMgbmV3LlxuXG4gICAgICAgIGJyYW5jaEtleSA9IHRoaXMuX21hcE5vZGVWYWx1ZShub2RlVmFsdWUpO1xuICAgICAgICB0aGlzLl9yb290ID0gKF90aGlzJF9yb290ID0gdGhpcy5fcm9vdCkgIT09IG51bGwgJiYgX3RoaXMkX3Jvb3QgIT09IHZvaWQgMCA/IF90aGlzJF9yb290IDogbm9kZTtcbiAgICAgIH0gLy8gU2Vjb25kLCBzZXR1cCB0aGUgbGVhZiBub2RlOlxuICAgICAgLy8gSWYgdGhlcmUgaXMgYW4gZXhpc3RpbmcgbGVhZiBmb3IgdGhpcyByb3V0ZSBjb25maXJtIGl0IGlzIGNvbnNpc3RlbnRcblxuXG4gICAgICBjb25zdCBvbGRMZWFmID0gbm9kZSA/IChfbm9kZTIgPSBub2RlKSA9PT0gbnVsbCB8fCBfbm9kZTIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9ub2RlMi5icmFuY2hlcy5nZXQoYnJhbmNoS2V5KSA6IHRoaXMuX3Jvb3Q7XG5cbiAgICAgIGlmIChvbGRMZWFmICE9IG51bGwgJiYgKG9sZExlYWYudHlwZSAhPT0gJ2xlYWYnIHx8IG9sZExlYWYuYnJhbmNoS2V5ICE9PSBicmFuY2hLZXkpKSB7XG4gICAgICAgIHRocm93IHRoaXMuaW52YWxpZENhY2hlRXJyb3IoKTtcbiAgICAgIH0gLy8gQ3JlYXRlIGEgbmV3IG9yIHJlcGxhY2VtZW50IGxlYWYuXG5cblxuICAgICAgY29uc3QgbGVhZk5vZGUgPSB7XG4gICAgICAgIHR5cGU6ICdsZWFmJyxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIHBhcmVudDogbm9kZSxcbiAgICAgICAgYnJhbmNoS2V5XG4gICAgICB9OyAvLyBJbnN0YWxsIHRoZSBsZWFmIGFuZCBjYWxsIGhhbmRsZXJzXG5cbiAgICAgIChfbm9kZTMgPSBub2RlKSA9PT0gbnVsbCB8fCBfbm9kZTMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9ub2RlMy5icmFuY2hlcy5zZXQoYnJhbmNoS2V5LCBsZWFmTm9kZSk7XG4gICAgICB0aGlzLl9yb290ID0gKF90aGlzJF9yb290MiA9IHRoaXMuX3Jvb3QpICE9PSBudWxsICYmIF90aGlzJF9yb290MiAhPT0gdm9pZCAwID8gX3RoaXMkX3Jvb3QyIDogbGVhZk5vZGU7XG4gICAgICB0aGlzLl9udW1MZWFmcysrO1xuXG4gICAgICB0aGlzLl9vblNldChsZWFmTm9kZSk7XG5cbiAgICAgIGhhbmRsZXJzID09PSBudWxsIHx8IGhhbmRsZXJzID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX2hhbmRsZXJzJG9uTm9kZVZpc2l0MiA9IGhhbmRsZXJzLm9uTm9kZVZpc2l0KSA9PT0gbnVsbCB8fCBfaGFuZGxlcnMkb25Ob2RlVmlzaXQyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfaGFuZGxlcnMkb25Ob2RlVmlzaXQyLmNhbGwoaGFuZGxlcnMsIGxlYWZOb2RlKTtcbiAgICB9O1xuXG4gICAgdHJ5IHtcbiAgICAgIGFkZExlYWYoKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgLy8gSWYgdGhlIGNhY2hlIHdhcyBzdGFsZSBvciBvYnNlcnZlZCBpbmNvbnNpc3RlbnQgdmFsdWVzLCBzdWNoIGFzIHdpdGhcbiAgICAgIC8vIEZhc3QgUmVmcmVzaCwgdGhlbiBjbGVhciBpdCBhbmQgcmVidWlsZCB3aXRoIHRoZSBuZXcgdmFsdWVzLlxuICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgQ2hhbmdlZFBhdGhFcnJvcikge1xuICAgICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICAgIGFkZExlYWYoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuICAgIH1cbiAgfSAvLyBSZXR1cm5zIHRydWUgaWYgbGVhZiB3YXMgYWN0dWFsbHkgZGVsZXRlZCBmcm9tIHRoZSB0cmVlXG5cblxuICBkZWxldGUobGVhZikge1xuICAgIGNvbnN0IHJvb3QgPSB0aGlzLnJvb3QoKTtcblxuICAgIGlmICghcm9vdCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChsZWFmID09PSByb290KSB7XG4gICAgICB0aGlzLl9yb290ID0gbnVsbDtcbiAgICAgIHRoaXMuX251bUxlYWZzID0gMDtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gLy8gSXRlcmF0ZSB1cCBmcm9tIHRoZSBsZWFmIGRlbGV0ZWluZyBpdCBmcm9tIGl0J3MgcGFyZW50J3MgYnJhbmNoZXMuXG5cblxuICAgIGxldCBub2RlID0gbGVhZi5wYXJlbnQ7XG4gICAgbGV0IGJyYW5jaEtleSA9IGxlYWYuYnJhbmNoS2V5O1xuXG4gICAgd2hpbGUgKG5vZGUpIHtcbiAgICAgIHZhciBfbm9kZTQ7XG5cbiAgICAgIG5vZGUuYnJhbmNoZXMuZGVsZXRlKGJyYW5jaEtleSk7IC8vIFN0b3AgaXRlcmF0aW5nIGlmIHdlIGhpdCB0aGUgcm9vdC5cblxuICAgICAgaWYgKG5vZGUgPT09IHJvb3QpIHtcbiAgICAgICAgaWYgKG5vZGUuYnJhbmNoZXMuc2l6ZSA9PT0gMCkge1xuICAgICAgICAgIHRoaXMuX3Jvb3QgPSBudWxsO1xuICAgICAgICAgIHRoaXMuX251bUxlYWZzID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLl9udW1MZWFmcy0tO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IC8vIFN0b3AgaXRlcmF0aW5nIGlmIHRoZXJlIGFyZSBvdGhlciBicmFuY2hlcyBzaW5jZSB3ZSBkb24ndCBuZWVkIHRvXG4gICAgICAvLyByZW1vdmUgYW55IG1vcmUgbm9kZXMuXG5cblxuICAgICAgaWYgKG5vZGUuYnJhbmNoZXMuc2l6ZSA+IDApIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9IC8vIEl0ZXJhdGUgdXAgdG8gb3VyIHBhcmVudFxuXG5cbiAgICAgIGJyYW5jaEtleSA9IChfbm9kZTQgPSBub2RlKSA9PT0gbnVsbCB8fCBfbm9kZTQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9ub2RlNC5icmFuY2hLZXk7XG4gICAgICBub2RlID0gbm9kZS5wYXJlbnQ7XG4gICAgfSAvLyBDb25maXJtIHRoYXQgdGhlIGxlYWYgd2UgYXJlIGRlbGV0aW5nIGlzIGFjdHVhbGx5IGF0dGFjaGVkIHRvIG91ciB0cmVlXG5cblxuICAgIGZvciAoOyBub2RlICE9PSByb290OyBub2RlID0gbm9kZS5wYXJlbnQpIHtcbiAgICAgIGlmIChub2RlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX251bUxlYWZzLS07XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBjbGVhcigpIHtcbiAgICB0aGlzLl9udW1MZWFmcyA9IDA7XG4gICAgdGhpcy5fcm9vdCA9IG51bGw7XG4gIH1cblxuICBpbnZhbGlkQ2FjaGVFcnJvcigpIHtcbiAgICBjb25zdCBDSEFOR0VEX1BBVEhfRVJST1JfTUVTU0FHRSA9IGlzRmFzdFJlZnJlc2hFbmFibGVkJDIoKSA/ICdQb3NzaWJsZSBGYXN0IFJlZnJlc2ggbW9kdWxlIHJlbG9hZCBkZXRlY3RlZC4gICcgKyAnVGhpcyBtYXkgYWxzbyBiZSBjYXVzZWQgYnkgYW4gc2VsZWN0b3IgcmV0dXJuaW5nIGluY29uc2lzdGVudCB2YWx1ZXMuICcgKyAnUmVzZXR0aW5nIGNhY2hlLicgOiAnSW52YWxpZCBjYWNoZSB2YWx1ZXMuICBUaGlzIGhhcHBlbnMgd2hlbiBzZWxlY3RvcnMgZG8gbm90IHJldHVybiAnICsgJ2NvbnNpc3RlbnQgdmFsdWVzIGZvciB0aGUgc2FtZSBpbnB1dCBkZXBlbmRlbmN5IHZhbHVlcy4gIFRoYXQgbWF5IGFsc28gJyArICdiZSBjYXVzZWQgd2hlbiB1c2luZyBGYXN0IFJlZnJlc2ggdG8gY2hhbmdlIGEgc2VsZWN0b3IgaW1wbGVtZW50YXRpb24uICAnICsgJ1Jlc2V0dGluZyBjYWNoZS4nO1xuICAgIFJlY29pbF9yZWNvdmVyYWJsZVZpb2xhdGlvbihDSEFOR0VEX1BBVEhfRVJST1JfTUVTU0FHRSArICh0aGlzLl9uYW1lICE9IG51bGwgPyBgIC0gJHt0aGlzLl9uYW1lfWAgOiAnJykpO1xuICAgIHRocm93IG5ldyBDaGFuZ2VkUGF0aEVycm9yKCk7XG4gIH1cblxufVxuXG52YXIgUmVjb2lsX1RyZWVDYWNoZSA9IHtcbiAgVHJlZUNhY2hlXG59O1xuXG52YXIgUmVjb2lsX1RyZWVDYWNoZV8xID0gUmVjb2lsX1RyZWVDYWNoZS5UcmVlQ2FjaGU7XG5cbnZhciBSZWNvaWxfVHJlZUNhY2hlJDEgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG4gIF9fcHJvdG9fXzogbnVsbCxcbiAgVHJlZUNhY2hlOiBSZWNvaWxfVHJlZUNhY2hlXzFcbn0pO1xuXG5jbGFzcyBMUlVDYWNoZSB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICB2YXIgX29wdGlvbnMkbWFwS2V5O1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiX21heFNpemVcIiwgdm9pZCAwKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIl9zaXplXCIsIHZvaWQgMCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJfaGVhZFwiLCB2b2lkIDApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiX3RhaWxcIiwgdm9pZCAwKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIl9tYXBcIiwgdm9pZCAwKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIl9rZXlNYXBwZXJcIiwgdm9pZCAwKTtcblxuICAgIHRoaXMuX21heFNpemUgPSBvcHRpb25zLm1heFNpemU7XG4gICAgdGhpcy5fc2l6ZSA9IDA7XG4gICAgdGhpcy5faGVhZCA9IG51bGw7XG4gICAgdGhpcy5fdGFpbCA9IG51bGw7XG4gICAgdGhpcy5fbWFwID0gbmV3IE1hcCgpO1xuICAgIHRoaXMuX2tleU1hcHBlciA9IChfb3B0aW9ucyRtYXBLZXkgPSBvcHRpb25zLm1hcEtleSkgIT09IG51bGwgJiYgX29wdGlvbnMkbWFwS2V5ICE9PSB2b2lkIDAgPyBfb3B0aW9ucyRtYXBLZXkgOiB2ID0+IHY7XG4gIH1cblxuICBoZWFkKCkge1xuICAgIHJldHVybiB0aGlzLl9oZWFkO1xuICB9XG5cbiAgdGFpbCgpIHtcbiAgICByZXR1cm4gdGhpcy5fdGFpbDtcbiAgfVxuXG4gIHNpemUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NpemU7XG4gIH1cblxuICBtYXhTaXplKCkge1xuICAgIHJldHVybiB0aGlzLl9tYXhTaXplO1xuICB9XG5cbiAgaGFzKGtleSkge1xuICAgIHJldHVybiB0aGlzLl9tYXAuaGFzKHRoaXMuX2tleU1hcHBlcihrZXkpKTtcbiAgfVxuXG4gIGdldChrZXkpIHtcbiAgICBjb25zdCBtYXBwZWRLZXkgPSB0aGlzLl9rZXlNYXBwZXIoa2V5KTtcblxuICAgIGNvbnN0IG5vZGUgPSB0aGlzLl9tYXAuZ2V0KG1hcHBlZEtleSk7XG5cbiAgICBpZiAoIW5vZGUpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgdGhpcy5zZXQoa2V5LCBub2RlLnZhbHVlKTtcbiAgICByZXR1cm4gbm9kZS52YWx1ZTtcbiAgfVxuXG4gIHNldChrZXksIHZhbCkge1xuICAgIGNvbnN0IG1hcHBlZEtleSA9IHRoaXMuX2tleU1hcHBlcihrZXkpO1xuXG4gICAgY29uc3QgZXhpc3RpbmdOb2RlID0gdGhpcy5fbWFwLmdldChtYXBwZWRLZXkpO1xuXG4gICAgaWYgKGV4aXN0aW5nTm9kZSkge1xuICAgICAgdGhpcy5kZWxldGUoa2V5KTtcbiAgICB9XG5cbiAgICBjb25zdCBoZWFkID0gdGhpcy5oZWFkKCk7XG4gICAgY29uc3Qgbm9kZSA9IHtcbiAgICAgIGtleSxcbiAgICAgIHJpZ2h0OiBoZWFkLFxuICAgICAgbGVmdDogbnVsbCxcbiAgICAgIHZhbHVlOiB2YWxcbiAgICB9O1xuXG4gICAgaWYgKGhlYWQpIHtcbiAgICAgIGhlYWQubGVmdCA9IG5vZGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3RhaWwgPSBub2RlO1xuICAgIH1cblxuICAgIHRoaXMuX21hcC5zZXQobWFwcGVkS2V5LCBub2RlKTtcblxuICAgIHRoaXMuX2hlYWQgPSBub2RlO1xuICAgIHRoaXMuX3NpemUrKztcblxuICAgIHRoaXMuX21heWJlRGVsZXRlTFJVKCk7XG4gIH1cblxuICBfbWF5YmVEZWxldGVMUlUoKSB7XG4gICAgaWYgKHRoaXMuc2l6ZSgpID4gdGhpcy5tYXhTaXplKCkpIHtcbiAgICAgIHRoaXMuZGVsZXRlTHJ1KCk7XG4gICAgfVxuICB9XG5cbiAgZGVsZXRlTHJ1KCkge1xuICAgIGNvbnN0IHRhaWwgPSB0aGlzLnRhaWwoKTtcblxuICAgIGlmICh0YWlsKSB7XG4gICAgICB0aGlzLmRlbGV0ZSh0YWlsLmtleSk7XG4gICAgfVxuICB9XG5cbiAgZGVsZXRlKGtleSkge1xuICAgIGNvbnN0IG1hcHBlZEtleSA9IHRoaXMuX2tleU1hcHBlcihrZXkpO1xuXG4gICAgaWYgKCF0aGlzLl9zaXplIHx8ICF0aGlzLl9tYXAuaGFzKG1hcHBlZEtleSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBub2RlID0gUmVjb2lsX251bGx0aHJvd3ModGhpcy5fbWFwLmdldChtYXBwZWRLZXkpKTtcbiAgICBjb25zdCByaWdodCA9IG5vZGUucmlnaHQ7XG4gICAgY29uc3QgbGVmdCA9IG5vZGUubGVmdDtcblxuICAgIGlmIChyaWdodCkge1xuICAgICAgcmlnaHQubGVmdCA9IG5vZGUubGVmdDtcbiAgICB9XG5cbiAgICBpZiAobGVmdCkge1xuICAgICAgbGVmdC5yaWdodCA9IG5vZGUucmlnaHQ7XG4gICAgfVxuXG4gICAgaWYgKG5vZGUgPT09IHRoaXMuaGVhZCgpKSB7XG4gICAgICB0aGlzLl9oZWFkID0gcmlnaHQ7XG4gICAgfVxuXG4gICAgaWYgKG5vZGUgPT09IHRoaXMudGFpbCgpKSB7XG4gICAgICB0aGlzLl90YWlsID0gbGVmdDtcbiAgICB9XG5cbiAgICB0aGlzLl9tYXAuZGVsZXRlKG1hcHBlZEtleSk7XG5cbiAgICB0aGlzLl9zaXplLS07XG4gIH1cblxuICBjbGVhcigpIHtcbiAgICB0aGlzLl9zaXplID0gMDtcbiAgICB0aGlzLl9oZWFkID0gbnVsbDtcbiAgICB0aGlzLl90YWlsID0gbnVsbDtcbiAgICB0aGlzLl9tYXAgPSBuZXcgTWFwKCk7XG4gIH1cblxufVxuXG52YXIgUmVjb2lsX0xSVUNhY2hlID0ge1xuICBMUlVDYWNoZVxufTtcblxudmFyIFJlY29pbF9MUlVDYWNoZV8xID0gUmVjb2lsX0xSVUNhY2hlLkxSVUNhY2hlO1xuXG52YXIgUmVjb2lsX0xSVUNhY2hlJDEgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG4gIF9fcHJvdG9fXzogbnVsbCxcbiAgTFJVQ2FjaGU6IFJlY29pbF9MUlVDYWNoZV8xXG59KTtcblxuY29uc3Qge1xuICBMUlVDYWNoZTogTFJVQ2FjaGUkMVxufSA9IFJlY29pbF9MUlVDYWNoZSQxO1xuXG5jb25zdCB7XG4gIFRyZWVDYWNoZTogVHJlZUNhY2hlJDFcbn0gPSBSZWNvaWxfVHJlZUNhY2hlJDE7XG5cbmZ1bmN0aW9uIHRyZWVDYWNoZUxSVSh7XG4gIG5hbWUsXG4gIG1heFNpemUsXG4gIG1hcE5vZGVWYWx1ZSA9IHYgPT4gdlxufSkge1xuICBjb25zdCBscnVDYWNoZSA9IG5ldyBMUlVDYWNoZSQxKHtcbiAgICBtYXhTaXplXG4gIH0pO1xuICBjb25zdCBjYWNoZSA9IG5ldyBUcmVlQ2FjaGUkMSh7XG4gICAgbmFtZSxcbiAgICBtYXBOb2RlVmFsdWUsXG4gICAgb25IaXQ6IG5vZGUgPT4ge1xuICAgICAgbHJ1Q2FjaGUuc2V0KG5vZGUsIHRydWUpO1xuICAgIH0sXG4gICAgb25TZXQ6IG5vZGUgPT4ge1xuICAgICAgY29uc3QgbHJ1Tm9kZSA9IGxydUNhY2hlLnRhaWwoKTtcbiAgICAgIGxydUNhY2hlLnNldChub2RlLCB0cnVlKTtcblxuICAgICAgaWYgKGxydU5vZGUgJiYgY2FjaGUuc2l6ZSgpID4gbWF4U2l6ZSkge1xuICAgICAgICBjYWNoZS5kZWxldGUobHJ1Tm9kZS5rZXkpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIHJldHVybiBjYWNoZTtcbn1cblxudmFyIFJlY29pbF90cmVlQ2FjaGVMUlUgPSB0cmVlQ2FjaGVMUlU7XG5cbmNvbnN0IFRJTUVfV0FSTklOR19USFJFU0hPTERfTVMgPSAxNTtcblxuZnVuY3Rpb24gc3RyaW5naWZ5KHgsIG9wdCwga2V5KSB7XG4gIC8vIEEgb3B0aW1pemF0aW9uIHRvIGF2b2lkIHRoZSBtb3JlIGV4cGVuc2l2ZSBKU09OLnN0cmluZ2lmeSgpIGZvciBzaW1wbGUgc3RyaW5nc1xuICAvLyBUaGlzIG1heSBsb3NlIHByb3RlY3Rpb24gZm9yIHUyMDI4IGFuZCB1MjAyOSwgdGhvdWdoLlxuICBpZiAodHlwZW9mIHggPT09ICdzdHJpbmcnICYmICF4LmluY2x1ZGVzKCdcIicpICYmICF4LmluY2x1ZGVzKCdcXFxcJykpIHtcbiAgICByZXR1cm4gYFwiJHt4fVwiYDtcbiAgfSAvLyBIYW5kbGUgcHJpbWl0aXZlIHR5cGVzXG5cblxuICBzd2l0Y2ggKHR5cGVvZiB4KSB7XG4gICAgY2FzZSAndW5kZWZpbmVkJzpcbiAgICAgIHJldHVybiAnJztcbiAgICAvLyBKU09OLnN0cmluZ2lmeSh1bmRlZmluZWQpIHJldHVybnMgdW5kZWZpbmVkLCBidXQgd2UgYWx3YXlzIHdhbnQgdG8gcmV0dXJuIGEgc3RyaW5nXG5cbiAgICBjYXNlICdib29sZWFuJzpcbiAgICAgIHJldHVybiB4ID8gJ3RydWUnIDogJ2ZhbHNlJztcblxuICAgIGNhc2UgJ251bWJlcic6XG4gICAgY2FzZSAnc3ltYm9sJzpcbiAgICAgIC8vIGNhc2UgJ2JpZ2ludCc6IC8vIEJpZ0ludCBpcyBub3Qgc3VwcG9ydGVkIGluIHd3d1xuICAgICAgcmV0dXJuIFN0cmluZyh4KTtcblxuICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAvLyBBZGQgc3Vycm91bmRpbmcgcXVvdGVzIGFuZCBlc2NhcGUgaW50ZXJuYWwgcXVvdGVzXG4gICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoeCk7XG5cbiAgICBjYXNlICdmdW5jdGlvbic6XG4gICAgICBpZiAoKG9wdCA9PT0gbnVsbCB8fCBvcHQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdC5hbGxvd0Z1bmN0aW9ucykgIT09IHRydWUpIHtcbiAgICAgICAgdGhyb3cgUmVjb2lsX2VycignQXR0ZW1wdCB0byBzZXJpYWxpemUgZnVuY3Rpb24gaW4gYSBSZWNvaWwgY2FjaGUga2V5Jyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBgX19GVU5DVElPTigke3gubmFtZX0pX19gO1xuICB9XG5cbiAgaWYgKHggPT09IG51bGwpIHtcbiAgICByZXR1cm4gJ251bGwnO1xuICB9IC8vIEZhbGxiYWNrIGNhc2UgZm9yIHVua25vd24gdHlwZXNcblxuXG4gIGlmICh0eXBlb2YgeCAhPT0gJ29iamVjdCcpIHtcbiAgICB2YXIgX0pTT04kc3RyaW5naWZ5O1xuXG4gICAgcmV0dXJuIChfSlNPTiRzdHJpbmdpZnkgPSBKU09OLnN0cmluZ2lmeSh4KSkgIT09IG51bGwgJiYgX0pTT04kc3RyaW5naWZ5ICE9PSB2b2lkIDAgPyBfSlNPTiRzdHJpbmdpZnkgOiAnJztcbiAgfSAvLyBEZWFsIHdpdGggYWxsIHByb21pc2VzIGFzIGVxdWl2YWxlbnQgZm9yIG5vdy5cblxuXG4gIGlmIChSZWNvaWxfaXNQcm9taXNlKHgpKSB7XG4gICAgcmV0dXJuICdfX1BST01JU0VfXyc7XG4gIH0gLy8gQXJyYXlzIGhhbmRsZSByZWN1cnNpdmUgc3RyaW5naWZpY2F0aW9uXG5cblxuICBpZiAoQXJyYXkuaXNBcnJheSh4KSkge1xuICAgIHJldHVybiBgWyR7eC5tYXAoKHYsIGkpID0+IHN0cmluZ2lmeSh2LCBvcHQsIGkudG9TdHJpbmcoKSkpfV1gO1xuICB9IC8vIElmIGFuIG9iamVjdCBkZWZpbmVzIGEgdG9KU09OKCkgbWV0aG9kLCB0aGVuIHVzZSB0aGF0IHRvIG92ZXJyaWRlIHRoZVxuICAvLyBzZXJpYWxpemF0aW9uLiAgVGhpcyBtYXRjaGVzIHRoZSBiZWhhdmlvciBvZiBKU09OLnN0cmluZ2lmeSgpLlxuICAvLyBQYXNzIHRoZSBrZXkgZm9yIGNvbXBhdGliaWxpdHkuXG4gIC8vIEltbXV0YWJsZS5qcyBjb2xsZWN0aW9ucyBkZWZpbmUgdGhpcyBtZXRob2QgdG8gYWxsb3cgdXMgdG8gc2VyaWFsaXplIHRoZW0uXG5cblxuICBpZiAodHlwZW9mIHgudG9KU09OID09PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gZmxvd2xpbnQtbmV4dC1saW5lIHVuY2xlYXItdHlwZTogb2ZmXG4gICAgcmV0dXJuIHN0cmluZ2lmeSh4LnRvSlNPTihrZXkpLCBvcHQsIGtleSk7XG4gIH0gLy8gRm9yIGJ1aWx0LWluIE1hcHMsIHNvcnQgdGhlIGtleXMgaW4gYSBzdGFibGUgb3JkZXIgaW5zdGVhZCBvZiB0aGVcbiAgLy8gZGVmYXVsdCBpbnNlcnRpb24gb3JkZXIuICBTdXBwb3J0IG5vbi1zdHJpbmcga2V5cy5cblxuXG4gIGlmICh4IGluc3RhbmNlb2YgTWFwKSB7XG4gICAgY29uc3Qgb2JqID0ge307XG5cbiAgICBmb3IgKGNvbnN0IFtrLCB2XSBvZiB4KSB7XG4gICAgICAvLyBTdHJpbmdpZnkgd2lsbCBlc2NhcGUgYW55IG5lc3RlZCBxdW90ZXNcbiAgICAgIG9ialt0eXBlb2YgayA9PT0gJ3N0cmluZycgPyBrIDogc3RyaW5naWZ5KGssIG9wdCldID0gdjtcbiAgICB9XG5cbiAgICByZXR1cm4gc3RyaW5naWZ5KG9iaiwgb3B0LCBrZXkpO1xuICB9IC8vIEZvciBidWlsdC1pbiBTZXRzLCBzb3J0IHRoZSBrZXlzIGluIGEgc3RhYmxlIG9yZGVyIGluc3RlYWQgb2YgdGhlXG4gIC8vIGRlZmF1bHQgaW5zZXJ0aW9uIG9yZGVyLlxuXG5cbiAgaWYgKHggaW5zdGFuY2VvZiBTZXQpIHtcbiAgICByZXR1cm4gc3RyaW5naWZ5KEFycmF5LmZyb20oeCkuc29ydCgoYSwgYikgPT4gc3RyaW5naWZ5KGEsIG9wdCkubG9jYWxlQ29tcGFyZShzdHJpbmdpZnkoYiwgb3B0KSkpLCBvcHQsIGtleSk7XG4gIH0gLy8gQW55dGhpbmcgZWxzZSB0aGF0IGlzIGl0ZXJhYmxlIHNlcmlhbGl6ZSBhcyBhbiBBcnJheS5cblxuXG4gIGlmIChTeW1ib2wgIT09IHVuZGVmaW5lZCAmJiB4W1N5bWJvbC5pdGVyYXRvcl0gIT0gbnVsbCAmJiB0eXBlb2YgeFtTeW1ib2wuaXRlcmF0b3JdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gZmxvd2xpbnQtbmV4dC1saW5lIHVuY2xlYXItdHlwZTogb2ZmXG4gICAgcmV0dXJuIHN0cmluZ2lmeShBcnJheS5mcm9tKHgpLCBvcHQsIGtleSk7XG4gIH0gLy8gRm9yIGFsbCBvdGhlciBPYmplY3RzLCBzb3J0IHRoZSBrZXlzIGluIGEgc3RhYmxlIG9yZGVyLlxuXG5cbiAgcmV0dXJuIGB7JHtPYmplY3Qua2V5cyh4KS5maWx0ZXIoayA9PiB4W2tdICE9PSB1bmRlZmluZWQpLnNvcnQoKSAvLyBzdHJpbmdpZnkgdGhlIGtleSB0byBhZGQgcXVvdGVzIGFuZCBlc2NhcGUgYW55IG5lc3RlZCBzbGFzaGVzIG9yIHF1b3Rlcy5cbiAgLm1hcChrID0+IGAke3N0cmluZ2lmeShrLCBvcHQpfToke3N0cmluZ2lmeSh4W2tdLCBvcHQsIGspfWApLmpvaW4oJywnKX19YDtcbn0gLy8gVXRpbGl0eSBzaW1pbGFyIHRvIEpTT04uc3RyaW5naWZ5KCkgZXhjZXB0OlxuLy8gKiBTZXJpYWxpemUgYnVpbHQtaW4gU2V0cyBhcyBhbiBBcnJheVxuLy8gKiBTZXJpYWxpemUgYnVpbHQtaW4gTWFwcyBhcyBhbiBPYmplY3QuICBTdXBwb3J0cyBub24tc3RyaW5nIGtleXMuXG4vLyAqIFNlcmlhbGl6ZSBvdGhlciBpdGVyYWJsZXMgYXMgYXJyYXlzXG4vLyAqIFNvcnQgdGhlIGtleXMgb2YgT2JqZWN0cyBhbmQgTWFwcyB0byBoYXZlIGEgc3RhYmxlIG9yZGVyIGJhc2VkIG9uIHN0cmluZyBjb252ZXJzaW9uLlxuLy8gICAgVGhpcyBvdmVycmlkZXMgdGhlaXIgZGVmYXVsdCBpbnNlcnRpb24gb3JkZXIuXG4vLyAqIFN0aWxsIHVzZXMgdG9KU09OKCkgb2YgYW55IG9iamVjdCB0byBvdmVycmlkZSBzZXJpYWxpemF0aW9uXG4vLyAqIFN1cHBvcnQgU3ltYm9scyAodGhvdWdoIGRvbid0IGd1YXJhbnRlZSB1bmlxdWVuZXNzKVxuLy8gKiBXZSBjb3VsZCBzdXBwb3J0IEJpZ0ludCwgYnV0IEZsb3cgZG9lc24ndCBzZWVtIHRvIGxpa2UgaXQuXG4vLyBTZWUgUmVjb2lsX3N0YWJsZVN0cmluZ2lmeS10ZXN0LmpzIGZvciBleGFtcGxlc1xuXG5cbmZ1bmN0aW9uIHN0YWJsZVN0cmluZ2lmeSh4LCBvcHQgPSB7XG4gIGFsbG93RnVuY3Rpb25zOiBmYWxzZVxufSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25zdCBzdGFydFRpbWUgPSB3aW5kb3cucGVyZm9ybWFuY2UgPyB3aW5kb3cucGVyZm9ybWFuY2Uubm93KCkgOiAwO1xuICAgICAgY29uc3Qgc3RyID0gc3RyaW5naWZ5KHgsIG9wdCk7XG4gICAgICBjb25zdCBlbmRUaW1lID0gd2luZG93LnBlcmZvcm1hbmNlID8gd2luZG93LnBlcmZvcm1hbmNlLm5vdygpIDogMDtcblxuICAgICAgaWYgKGVuZFRpbWUgLSBzdGFydFRpbWUgPiBUSU1FX1dBUk5JTkdfVEhSRVNIT0xEX01TKSB7XG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlIGZiLXd3dy9uby1jb25zb2xlICovXG4gICAgICAgIGNvbnNvbGUuZ3JvdXBDb2xsYXBzZWQoYFJlY29pbDogU3BlbnQgJHtlbmRUaW1lIC0gc3RhcnRUaW1lfW1zIGNvbXB1dGluZyBhIGNhY2hlIGtleWApO1xuICAgICAgICBjb25zb2xlLndhcm4oeCwgc3RyKTtcbiAgICAgICAgY29uc29sZS5ncm91cEVuZCgpO1xuICAgICAgICAvKiBlc2xpbnQtZW5hYmxlIGZiLXd3dy9uby1jb25zb2xlICovXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN0cmluZ2lmeSh4LCBvcHQpO1xufVxuXG52YXIgUmVjb2lsX3N0YWJsZVN0cmluZ2lmeSA9IHN0YWJsZVN0cmluZ2lmeTtcblxuY29uc3Qge1xuICBUcmVlQ2FjaGU6IFRyZWVDYWNoZSQyXG59ID0gUmVjb2lsX1RyZWVDYWNoZSQxO1xuXG5cblxuXG5cblxuXG5cblxuY29uc3QgZGVmYXVsdFBvbGljeSA9IHtcbiAgZXF1YWxpdHk6ICdyZWZlcmVuY2UnLFxuICBldmljdGlvbjogJ2tlZXAtYWxsJyxcbiAgbWF4U2l6ZTogSW5maW5pdHlcbn07XG5cbmZ1bmN0aW9uIHRyZWVDYWNoZUZyb21Qb2xpY3koe1xuICBlcXVhbGl0eSA9IGRlZmF1bHRQb2xpY3kuZXF1YWxpdHksXG4gIGV2aWN0aW9uID0gZGVmYXVsdFBvbGljeS5ldmljdGlvbixcbiAgbWF4U2l6ZSA9IGRlZmF1bHRQb2xpY3kubWF4U2l6ZVxufSA9IGRlZmF1bHRQb2xpY3ksIG5hbWUpIHtcbiAgY29uc3QgdmFsdWVNYXBwZXIgPSBnZXRWYWx1ZU1hcHBlcihlcXVhbGl0eSk7XG4gIHJldHVybiBnZXRUcmVlQ2FjaGUoZXZpY3Rpb24sIG1heFNpemUsIHZhbHVlTWFwcGVyLCBuYW1lKTtcbn1cblxuZnVuY3Rpb24gZ2V0VmFsdWVNYXBwZXIoZXF1YWxpdHkpIHtcbiAgc3dpdGNoIChlcXVhbGl0eSkge1xuICAgIGNhc2UgJ3JlZmVyZW5jZSc6XG4gICAgICByZXR1cm4gdmFsID0+IHZhbDtcblxuICAgIGNhc2UgJ3ZhbHVlJzpcbiAgICAgIHJldHVybiB2YWwgPT4gUmVjb2lsX3N0YWJsZVN0cmluZ2lmeSh2YWwpO1xuICB9XG5cbiAgdGhyb3cgUmVjb2lsX2VycihgVW5yZWNvZ25pemVkIGVxdWFsaXR5IHBvbGljeSAke2VxdWFsaXR5fWApO1xufVxuXG5mdW5jdGlvbiBnZXRUcmVlQ2FjaGUoZXZpY3Rpb24sIG1heFNpemUsIG1hcE5vZGVWYWx1ZSwgbmFtZSkge1xuICBzd2l0Y2ggKGV2aWN0aW9uKSB7XG4gICAgY2FzZSAna2VlcC1hbGwnOlxuICAgICAgcmV0dXJuIG5ldyBUcmVlQ2FjaGUkMih7XG4gICAgICAgIG5hbWUsXG4gICAgICAgIG1hcE5vZGVWYWx1ZVxuICAgICAgfSk7XG5cbiAgICBjYXNlICdscnUnOlxuICAgICAgcmV0dXJuIFJlY29pbF90cmVlQ2FjaGVMUlUoe1xuICAgICAgICBuYW1lLFxuICAgICAgICBtYXhTaXplOiBSZWNvaWxfbnVsbHRocm93cyhtYXhTaXplKSxcbiAgICAgICAgbWFwTm9kZVZhbHVlXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ21vc3QtcmVjZW50JzpcbiAgICAgIHJldHVybiBSZWNvaWxfdHJlZUNhY2hlTFJVKHtcbiAgICAgICAgbmFtZSxcbiAgICAgICAgbWF4U2l6ZTogMSxcbiAgICAgICAgbWFwTm9kZVZhbHVlXG4gICAgICB9KTtcbiAgfVxuXG4gIHRocm93IFJlY29pbF9lcnIoYFVucmVjb2duaXplZCBldmljdGlvbiBwb2xpY3kgJHtldmljdGlvbn1gKTtcbn1cblxudmFyIFJlY29pbF90cmVlQ2FjaGVGcm9tUG9saWN5ID0gdHJlZUNhY2hlRnJvbVBvbGljeTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqIEBvbmNhbGwgcmVjb2lsXG4gKi9cblxuZnVuY3Rpb24gaXNOb2RlKG9iamVjdCkge1xuICB2YXIgX293bmVyRG9jdW1lbnQsIF9kb2MkZGVmYXVsdFZpZXc7XG5cbiAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29uc3QgZG9jID0gb2JqZWN0ICE9IG51bGwgPyAoX293bmVyRG9jdW1lbnQgPSBvYmplY3Qub3duZXJEb2N1bWVudCkgIT09IG51bGwgJiYgX293bmVyRG9jdW1lbnQgIT09IHZvaWQgMCA/IF9vd25lckRvY3VtZW50IDogb2JqZWN0IDogZG9jdW1lbnQ7XG4gIGNvbnN0IGRlZmF1bHRWaWV3ID0gKF9kb2MkZGVmYXVsdFZpZXcgPSBkb2MuZGVmYXVsdFZpZXcpICE9PSBudWxsICYmIF9kb2MkZGVmYXVsdFZpZXcgIT09IHZvaWQgMCA/IF9kb2MkZGVmYXVsdFZpZXcgOiB3aW5kb3c7XG4gIHJldHVybiAhIShvYmplY3QgIT0gbnVsbCAmJiAodHlwZW9mIGRlZmF1bHRWaWV3Lk5vZGUgPT09ICdmdW5jdGlvbicgPyBvYmplY3QgaW5zdGFuY2VvZiBkZWZhdWx0Vmlldy5Ob2RlIDogdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG9iamVjdC5ub2RlVHlwZSA9PT0gJ251bWJlcicgJiYgdHlwZW9mIG9iamVjdC5ub2RlTmFtZSA9PT0gJ3N0cmluZycpKTtcbn1cblxudmFyIFJlY29pbF9pc05vZGUgPSBpc05vZGU7XG5cbmNvbnN0IHtcbiAgaXNSZWFjdE5hdGl2ZTogaXNSZWFjdE5hdGl2ZSQxLFxuICBpc1dpbmRvdzogaXNXaW5kb3ckMVxufSA9IFJlY29pbF9FbnZpcm9ubWVudDtcblxuXG5cblxuXG5mdW5jdGlvbiBzaG91bGROb3RCZUZyb3plbih2YWx1ZSkge1xuICAvLyBQcmltaXRpdmVzIGFuZCBmdW5jdGlvbnM6XG4gIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gLy8gUmVhY3QgZWxlbWVudHM6XG5cblxuICBzd2l0Y2ggKHR5cGVvZiB2YWx1ZS4kJHR5cGVvZikge1xuICAgIGNhc2UgJ3N5bWJvbCc6XG4gICAgICByZXR1cm4gdHJ1ZTtcblxuICAgIGNhc2UgJ251bWJlcic6XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgfSAvLyBJbW11dGFibGUgc3RydWN0dXJlczpcblxuXG4gIGlmICh2YWx1ZVsnQEBfX0lNTVVUQUJMRV9JVEVSQUJMRV9fQEAnXSAhPSBudWxsIHx8IHZhbHVlWydAQF9fSU1NVVRBQkxFX0tFWUVEX19AQCddICE9IG51bGwgfHwgdmFsdWVbJ0BAX19JTU1VVEFCTEVfSU5ERVhFRF9fQEAnXSAhPSBudWxsIHx8IHZhbHVlWydAQF9fSU1NVVRBQkxFX09SREVSRURfX0BAJ10gIT0gbnVsbCB8fCB2YWx1ZVsnQEBfX0lNTVVUQUJMRV9SRUNPUkRfX0BAJ10gIT0gbnVsbCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IC8vIERPTSBub2RlczpcblxuXG4gIGlmIChSZWNvaWxfaXNOb2RlKHZhbHVlKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKFJlY29pbF9pc1Byb21pc2UodmFsdWUpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAodmFsdWUgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKEFycmF5QnVmZmVyLmlzVmlldyh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSAvLyBTb21lIGVudmlyb25tZW50cywganVzdCBhcyBKZXN0LCBkb24ndCB3b3JrIHdpdGggdGhlIGluc3RhbmNlb2YgY2hlY2tcblxuXG4gIGlmICghaXNSZWFjdE5hdGl2ZSQxICYmIGlzV2luZG93JDEodmFsdWUpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59IC8vIFJlY3Vyc2l2ZWx5IGZyZWV6ZSBhIHZhbHVlIHRvIGVuZm9yY2UgaXQgaXMgcmVhZC1vbmx5LlxuLy8gVGhpcyBtYXkgYWxzbyBoYXZlIG1pbmltYWwgcGVyZm9ybWFuY2UgaW1wcm92ZW1lbnRzIGZvciBlbnVtZXJhdGluZ1xuLy8gb2JqZWN0cyAoYmFzZWQgb24gYnJvd3NlciBpbXBsZW1lbnRhdGlvbnMsIG9mIGNvdXJzZSlcblxuXG5mdW5jdGlvbiBkZWVwRnJlZXplVmFsdWUodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcgfHwgc2hvdWxkTm90QmVGcm96ZW4odmFsdWUpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgT2JqZWN0LmZyZWV6ZSh2YWx1ZSk7IC8vIE1ha2UgYWxsIHByb3BlcnRpZXMgcmVhZC1vbmx5XG5cbiAgZm9yIChjb25zdCBrZXkgaW4gdmFsdWUpIHtcbiAgICAvLyAkRmxvd0lzc3VlW21ldGhvZC11bmJpbmRpbmddIGFkZGVkIHdoZW4gaW1wcm92aW5nIHR5cGluZyBmb3IgdGhpcyBwYXJhbWV0ZXJzXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwga2V5KSkge1xuICAgICAgY29uc3QgcHJvcCA9IHZhbHVlW2tleV07IC8vIFByZXZlbnQgaW5maW5pdGUgcmVjdXJzc2lvbiBmb3IgY2lyY3VsYXIgcmVmZXJlbmNlcy5cblxuICAgICAgaWYgKHR5cGVvZiBwcm9wID09PSAnb2JqZWN0JyAmJiBwcm9wICE9IG51bGwgJiYgIU9iamVjdC5pc0Zyb3plbihwcm9wKSkge1xuICAgICAgICBkZWVwRnJlZXplVmFsdWUocHJvcCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LnNlYWwodmFsdWUpOyAvLyBUaGlzIGFsc28gbWFrZXMgZXhpc3RpbmcgcHJvcGVydGllcyBub24tY29uZmlndXJhYmxlLlxufVxuXG52YXIgUmVjb2lsX2RlZXBGcmVlemVWYWx1ZSA9IGRlZXBGcmVlemVWYWx1ZTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBUaGlzIGlzIGEgc3R1YiBmb3Igc29tZSBpbnRlZ3JhdGlvbiBpbnRvIEZCIGludGVybmFsIHN0dWZmXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKiBAb25jYWxsIHJlY29pbFxuICovXG5mdW5jdGlvbiBzdGFydFBlcmZCbG9jayhfaWQpIHtcbiAgcmV0dXJuICgpID0+IG51bGw7XG59XG5cbnZhciBSZWNvaWxfUGVyZm9ybWFuY2VUaW1pbmdzID0ge1xuICBzdGFydFBlcmZCbG9ja1xufTtcblxuY29uc3Qge1xuICBpc0xvYWRhYmxlOiBpc0xvYWRhYmxlJDEsXG4gIGxvYWRhYmxlV2l0aEVycm9yOiBsb2FkYWJsZVdpdGhFcnJvciQxLFxuICBsb2FkYWJsZVdpdGhQcm9taXNlOiBsb2FkYWJsZVdpdGhQcm9taXNlJDEsXG4gIGxvYWRhYmxlV2l0aFZhbHVlOiBsb2FkYWJsZVdpdGhWYWx1ZSQyXG59ID0gUmVjb2lsX0xvYWRhYmxlJDE7XG5cbmNvbnN0IHtcbiAgV3JhcHBlZFZhbHVlOiBXcmFwcGVkVmFsdWUkMVxufSA9IFJlY29pbF9XcmFwcGVyJDE7XG5cblxuXG5jb25zdCB7XG4gIGdldE5vZGVMb2FkYWJsZTogZ2V0Tm9kZUxvYWRhYmxlJDIsXG4gIHBlZWtOb2RlTG9hZGFibGU6IHBlZWtOb2RlTG9hZGFibGUkMSxcbiAgc2V0Tm9kZVZhbHVlOiBzZXROb2RlVmFsdWUkM1xufSA9IFJlY29pbF9GdW5jdGlvbmFsQ29yZTtcblxuY29uc3Qge1xuICBzYXZlRGVwc1RvU3RvcmU6IHNhdmVEZXBzVG9TdG9yZSQxXG59ID0gUmVjb2lsX0dyYXBoO1xuXG5jb25zdCB7XG4gIERFRkFVTFRfVkFMVUU6IERFRkFVTFRfVkFMVUUkNixcbiAgZ2V0Q29uZmlnRGVsZXRpb25IYW5kbGVyOiBnZXRDb25maWdEZWxldGlvbkhhbmRsZXIkMSxcbiAgZ2V0Tm9kZTogZ2V0Tm9kZSQ2LFxuICByZWdpc3Rlck5vZGU6IHJlZ2lzdGVyTm9kZSQxXG59ID0gUmVjb2lsX05vZGU7XG5cbmNvbnN0IHtcbiAgaXNSZWNvaWxWYWx1ZTogaXNSZWNvaWxWYWx1ZSQzXG59ID0gUmVjb2lsX1JlY29pbFZhbHVlJDE7XG5cbmNvbnN0IHtcbiAgbWFya1JlY29pbFZhbHVlTW9kaWZpZWQ6IG1hcmtSZWNvaWxWYWx1ZU1vZGlmaWVkJDFcbn0gPSBSZWNvaWxfUmVjb2lsVmFsdWVJbnRlcmZhY2U7XG5cbmNvbnN0IHtcbiAgcmV0YWluZWRCeU9wdGlvbldpdGhEZWZhdWx0OiByZXRhaW5lZEJ5T3B0aW9uV2l0aERlZmF1bHQkMVxufSA9IFJlY29pbF9SZXRlbnRpb247XG5cbmNvbnN0IHtcbiAgcmVjb2lsQ2FsbGJhY2s6IHJlY29pbENhbGxiYWNrJDFcbn0gPSBSZWNvaWxfdXNlUmVjb2lsQ2FsbGJhY2s7XG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbmNvbnN0IHtcbiAgc3RhcnRQZXJmQmxvY2s6IHN0YXJ0UGVyZkJsb2NrJDFcbn0gPSBSZWNvaWxfUGVyZm9ybWFuY2VUaW1pbmdzO1xuXG5cblxuY2xhc3MgQ2FuY2VsZWQge31cblxuY29uc3QgQ0FOQ0VMRUQgPSBuZXcgQ2FuY2VsZWQoKTtcbi8qKlxuICogQW4gRXhlY3V0aW9uSUQgaXMgYW4gYXJiaXRyYXJ5IElEIHRoYXQgbGV0cyB1cyBkaXN0aW5ndWlzaCBleGVjdXRpb25zIGZyb21cbiAqIGVhY2ggb3RoZXIuIFRoaXMgaXMgbmVjZXNzYXJ5IGFzIHdlIG5lZWQgYSB3YXkgb2Ygc29sdmluZyB0aGlzIHByb2JsZW06XG4gKiBcImdpdmVuIDMgYXN5bmMgZXhlY3V0aW9ucywgb25seSB1cGRhdGUgc3RhdGUgZm9yIHRoZSAnbGF0ZXN0JyBleGVjdXRpb24gd2hlblxuICogaXQgZmluaXNoZXMgcnVubmluZyByZWdhcmRsZXNzIG9mIHdoZW4gdGhlIG90aGVyIDIgZmluaXNoXCIuIEV4ZWN1dGlvbklEc1xuICogcHJvdmlkZSBhIGNvbnZlbmllbnQgd2F5IG9mIGlkZW50aWZ5aW5nIGV4ZWN1dGlvbnMgc28gdGhhdCB3ZSBjYW4gdHJhY2sgYW5kXG4gKiBtYW5hZ2UgdGhlbSBvdmVyIHRpbWUuXG4gKi9cblxuY29uc3QgZGVwZW5kZW5jeVN0YWNrID0gW107IC8vIGZvciBkZXRlY3RpbmcgY2lyY3VsYXIgZGVwZW5kZW5jaWVzLlxuXG5jb25zdCB3YWl0aW5nU3RvcmVzID0gbmV3IE1hcCgpO1xuXG5jb25zdCBnZXROZXdFeGVjdXRpb25JRCA9ICgoKSA9PiB7XG4gIGxldCBleGVjdXRpb25JRCA9IDA7XG4gIHJldHVybiAoKSA9PiBleGVjdXRpb25JRCsrO1xufSkoKTtcbi8qIGVzbGludC1kaXNhYmxlIG5vLXJlZGVjbGFyZSAqL1xuXG5cbmZ1bmN0aW9uIHNlbGVjdG9yKG9wdGlvbnMpIHtcbiAgbGV0IHJlY29pbFZhbHVlID0gbnVsbDtcbiAgY29uc3Qge1xuICAgIGtleSxcbiAgICBnZXQsXG4gICAgY2FjaGVQb2xpY3lfVU5TVEFCTEU6IGNhY2hlUG9saWN5XG4gIH0gPSBvcHRpb25zO1xuICBjb25zdCBzZXQgPSBvcHRpb25zLnNldCAhPSBudWxsID8gb3B0aW9ucy5zZXQgOiB1bmRlZmluZWQ7IC8vIGZsb3dcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgaWYgKHR5cGVvZiBrZXkgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBSZWNvaWxfZXJyKCdBIGtleSBvcHRpb24gd2l0aCBhIHVuaXF1ZSBzdHJpbmcgdmFsdWUgbXVzdCBiZSBwcm92aWRlZCB3aGVuIGNyZWF0aW5nIGEgc2VsZWN0b3IuJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBnZXQgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IFJlY29pbF9lcnIoJ1NlbGVjdG9ycyBtdXN0IHNwZWNpZnkgYSBnZXQgY2FsbGJhY2sgb3B0aW9uIHRvIGdldCB0aGUgc2VsZWN0b3IgdmFsdWUuJyk7XG4gICAgfVxuICB9IC8vIFRoaXMgaXMgZXZlcnkgZGlzY292ZXJlZCBkZXBlbmRlbmN5IGFjcm9zcyBhbGwgZXhlY3V0aW9uc1xuXG5cbiAgY29uc3QgZGlzY292ZXJlZERlcGVuZGVuY3lOb2RlS2V5cyA9IG5ldyBTZXQoKTtcbiAgY29uc3QgY2FjaGUgPSBSZWNvaWxfdHJlZUNhY2hlRnJvbVBvbGljeShjYWNoZVBvbGljeSAhPT0gbnVsbCAmJiBjYWNoZVBvbGljeSAhPT0gdm9pZCAwID8gY2FjaGVQb2xpY3kgOiB7XG4gICAgZXF1YWxpdHk6ICdyZWZlcmVuY2UnLFxuICAgIGV2aWN0aW9uOiAna2VlcC1hbGwnXG4gIH0sIGtleSk7XG4gIGNvbnN0IHJldGFpbmVkQnkgPSByZXRhaW5lZEJ5T3B0aW9uV2l0aERlZmF1bHQkMShvcHRpb25zLnJldGFpbmVkQnlfVU5TVEFCTEUpO1xuICBjb25zdCBleGVjdXRpb25JbmZvTWFwID0gbmV3IE1hcCgpO1xuICBsZXQgbGl2ZVN0b3Jlc0NvdW50ID0gMDtcblxuICBmdW5jdGlvbiBzZWxlY3RvcklzTGl2ZSgpIHtcbiAgICByZXR1cm4gIVJlY29pbF9na3goJ3JlY29pbF9tZW1vcnlfbWFuYWdhbWVudF8yMDIwJykgfHwgbGl2ZVN0b3Jlc0NvdW50ID4gMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNlbGVjdG9ySW5pdChzdG9yZSkge1xuICAgIHN0b3JlLmdldFN0YXRlKCkua25vd25TZWxlY3RvcnMuYWRkKGtleSk7XG4gICAgbGl2ZVN0b3Jlc0NvdW50Kys7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGxpdmVTdG9yZXNDb3VudC0tO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBzZWxlY3RvclNob3VsZERlbGV0ZUNvbmZpZ09uUmVsZWFzZSgpIHtcbiAgICByZXR1cm4gZ2V0Q29uZmlnRGVsZXRpb25IYW5kbGVyJDEoa2V5KSAhPT0gdW5kZWZpbmVkICYmICFzZWxlY3RvcklzTGl2ZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzb2x2ZUFzeW5jKHN0b3JlLCBzdGF0ZSwgZXhlY3V0aW9uSUQsIGxvYWRhYmxlLCBkZXBWYWx1ZXMpIHtcbiAgICBzZXRDYWNoZShzdGF0ZSwgbG9hZGFibGUsIGRlcFZhbHVlcyk7XG4gICAgbm90aWZ5U3RvcmVzT2ZSZXNvbHZlZEFzeW5jKHN0b3JlLCBleGVjdXRpb25JRCk7XG4gIH1cblxuICBmdW5jdGlvbiBub3RpZnlTdG9yZXNPZlJlc29sdmVkQXN5bmMoc3RvcmUsIGV4ZWN1dGlvbklEKSB7XG4gICAgaWYgKGlzTGF0ZXN0RXhlY3V0aW9uKHN0b3JlLCBleGVjdXRpb25JRCkpIHtcbiAgICAgIGNsZWFyRXhlY3V0aW9uSW5mbyhzdG9yZSk7XG4gICAgfVxuXG4gICAgbm90aWZ5V2FpdGluZ1N0b3JlcyhleGVjdXRpb25JRCwgdHJ1ZSk7XG4gIH1cbiAgLyoqXG4gICAqIE5vdGlmeSBzdG9yZXMgdG8gcHVsbCB0aGUgc2VsZWN0b3IgYWdhaW4gaWYgYSBuZXcgYXN5bmMgZGVwIHdhcyBkaXNjb3ZlcmVkLlxuICAgKiAxKSBBc3luYyBzZWxlY3RvciBhZGRzIGEgbmV3IGRlcCBidXQgZG9lc24ndCByZXNvbHZlIHlldC5cbiAgICogICAgTm90ZSB0aGF0IGRlcHMgZm9yIGFuIGFzeW5jIHNlbGVjdG9yIGFyZSBiYXNlZCBvbiB0aGUgc3RhdGUgd2hlbiB0aGVcbiAgICogICAgZXZhbHVhdGlvbiBzdGFydGVkLCBpbiBvcmRlciB0byBwcm92aWRlIGEgY29uc2lzdGVudCBwaWN0dXJlIG9mIHN0YXRlLlxuICAgKiAyKSBCdXQsIG5ldyB2YWx1ZSBvZiBkZXAgYmFzZWQgb24gdGhlIGN1cnJlbnQgc3RhdGUgbWlnaHQgY2F1c2UgdGhlIHNlbGVjdG9yXG4gICAqICAgIHRvIHJlc29sdmUgb3IgcmVzb2x2ZSBkaWZmZXJlbnRseS5cbiAgICogMykgVGhlcmVmb3JlLCB0aGlzIG5vdGlmaWNhdGlvbiB3aWxsIHB1bGwgdGhlIHNlbGVjdG9yIGJhc2VkIG9uIHRoZSBjdXJyZW50XG4gICAqICAgIHN0YXRlIGZvciB0aGUgY29tcG9uZW50c1xuICAgKi9cblxuXG4gIGZ1bmN0aW9uIG5vdGlmeVN0b3Jlc09mTmV3QXN5bmNEZXAoc3RvcmUsIGV4ZWN1dGlvbklEKSB7XG4gICAgaWYgKGlzTGF0ZXN0RXhlY3V0aW9uKHN0b3JlLCBleGVjdXRpb25JRCkpIHtcbiAgICAgIGNvbnN0IGV4ZWN1dGlvbkluZm8gPSBSZWNvaWxfbnVsbHRocm93cyhnZXRFeGVjdXRpb25JbmZvKHN0b3JlKSk7XG4gICAgICBleGVjdXRpb25JbmZvLnN0YXRlVmVyc2lvbnMuY2xlYXIoKTtcbiAgICAgIG5vdGlmeVdhaXRpbmdTdG9yZXMoZXhlY3V0aW9uSUQsIGZhbHNlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBub3RpZnlXYWl0aW5nU3RvcmVzKGV4ZWN1dGlvbklELCBjbGVhcldhaXRsaXN0KSB7XG4gICAgY29uc3Qgc3RvcmVzID0gd2FpdGluZ1N0b3Jlcy5nZXQoZXhlY3V0aW9uSUQpO1xuXG4gICAgaWYgKHN0b3JlcyAhPSBudWxsKSB7XG4gICAgICBmb3IgKGNvbnN0IHdhaXRpbmdTdG9yZSBvZiBzdG9yZXMpIHtcbiAgICAgICAgbWFya1JlY29pbFZhbHVlTW9kaWZpZWQkMSh3YWl0aW5nU3RvcmUsIFJlY29pbF9udWxsdGhyb3dzKHJlY29pbFZhbHVlKSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjbGVhcldhaXRsaXN0KSB7XG4gICAgICAgIHdhaXRpbmdTdG9yZXMuZGVsZXRlKGV4ZWN1dGlvbklEKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBtYXJrU3RvcmVXYWl0aW5nRm9yUmVzb2x2ZWRBc3luYyhzdG9yZSwgZXhlY3V0aW9uSUQpIHtcbiAgICBsZXQgc3RvcmVzID0gd2FpdGluZ1N0b3Jlcy5nZXQoZXhlY3V0aW9uSUQpO1xuXG4gICAgaWYgKHN0b3JlcyA9PSBudWxsKSB7XG4gICAgICB3YWl0aW5nU3RvcmVzLnNldChleGVjdXRpb25JRCwgc3RvcmVzID0gbmV3IFNldCgpKTtcbiAgICB9XG5cbiAgICBzdG9yZXMuYWRkKHN0b3JlKTtcbiAgfVxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiBhdHRhY2hlcyBhIHRoZW4oKSBhbmQgYSBjYXRjaCgpIHRvIGEgcHJvbWlzZSB0aGF0IHdhc1xuICAgKiByZXR1cm5lZCBmcm9tIGEgc2VsZWN0b3IncyBnZXQoKSAoZWl0aGVyIGV4cGxpY2l0bHkgb3IgaW1wbGljaXRseSBieVxuICAgKiBydW5uaW5nIGEgZnVuY3Rpb24gdGhhdCB1c2VzIHRoZSBcImFzeW5jXCIga2V5d29yZCkuIElmIGEgc2VsZWN0b3IncyBnZXQoKVxuICAgKiByZXR1cm5zIGEgcHJvbWlzZSwgd2UgaGF2ZSB0d28gcG9zc2liaWxpdGllczpcbiAgICpcbiAgICogMS4gVGhlIHByb21pc2Ugd2lsbCByZXNvbHZlLCBpbiB3aGljaCBjYXNlIGl0IHdpbGwgaGF2ZSBjb21wbGV0ZWx5IGZpbmlzaGVkXG4gICAqICAgIGV4ZWN1dGluZyB3aXRob3V0IGFueSByZW1haW5pbmcgcGVuZGluZyBkZXBlbmRlbmNpZXMuIE5vIG1vcmUgcmV0cmllc1xuICAgKiAgICBhcmUgbmVlZGVkIGFuZCB3ZSBjYW4gcHJvY2VlZCB3aXRoIHVwZGF0aW5nIHRoZSBjYWNoZSBhbmQgbm90aWZ5aW5nXG4gICAqICAgIHN1YnNjcmliZXJzIChpZiBpdCBpcyB0aGUgbGF0ZXN0IGV4ZWN1dGlvbiwgb3RoZXJ3aXNlIG9ubHkgdGhlIGNhY2hlXG4gICAqICAgIHdpbGwgYmUgdXBkYXRlZCBhbmQgc3Vic2NyaXB0aW9ucyB3aWxsIG5vdCBiZSBmaXJlZCkuIFRoaXMgaXMgdGhlIGNhc2VcbiAgICogICAgaGFuZGxlZCBieSB0aGUgYXR0YWNoZWQgdGhlbigpIGhhbmRsZXIuXG4gICAqXG4gICAqIDIuIFRoZSBwcm9taXNlIHdpbGwgdGhyb3cgYmVjYXVzZSBpdCBlaXRoZXIgaGFzIGFuIGVycm9yIG9yIGl0IGNhbWUgYWNyb3NzXG4gICAqICAgIGFuIGFzeW5jIGRlcGVuZGVuY3kgdGhhdCBoYXMgbm90IHlldCByZXNvbHZlZCwgaW4gd2hpY2ggY2FzZSB3ZSB3aWxsXG4gICAqICAgIGNhbGwgd3JhcERlcGRlbmN5UHJvbWlzZSgpLCB3aG9zZSByZXNwb25zaWJpbGl0eSBpcyB0byBoYW5kbGUgZGVwZW5kZW5jeVxuICAgKiAgICBwcm9taXNlcy4gVGhpcyBjYXNlIGlzIGhhbmRsZWQgYnkgdGhlIGF0dGFjaGVkIGNhdGNoKCkgaGFuZGxlci5cbiAgICpcbiAgICogQm90aCBicmFuY2hlcyB3aWxsIGV2ZW50dWFsbHkgcmVzb2x2ZSB0byB0aGUgZmluYWwgcmVzdWx0IG9mIHRoZSBzZWxlY3RvclxuICAgKiAob3IgYW4gZXJyb3IgaWYgYSByZWFsIGVycm9yIG9jY3VycmVkKS5cbiAgICpcbiAgICogVGhlIGV4ZWN1dGlvbiB3aWxsIHJ1biB0byBjb21wbGV0aW9uIGV2ZW4gaWYgaXQgaXMgc3RhbGUsIGFuZCBpdHMgdmFsdWVcbiAgICogd2lsbCBiZSBjYWNoZWQuIEJ1dCBzdGFsZSBleGVjdXRpb25zIHdpbGwgbm90IHVwZGF0ZSBnbG9iYWwgc3RhdGUgb3IgdXBkYXRlXG4gICAqIGV4ZWN1dGlvbkluZm8gYXMgdGhhdCBpcyB0aGUgcmVzcG9uc2liaWxpdHkgb2YgdGhlICdsYXRlc3QnIGV4ZWN1dGlvbi5cbiAgICpcbiAgICogTm90ZSB0aGlzIGZ1bmN0aW9uIHNob3VsZCBub3QgYmUgcGFzc2VkIGEgcHJvbWlzZSB0aGF0IHdhcyB0aHJvd24tLUFLQSBhXG4gICAqIGRlcGVuZGVuY3kgcHJvbWlzZS4gRGVwZW5kZW5jeSBwcm9taXNlcyBzaG91bGQgYmUgcGFzc2VkIHRvXG4gICAqIHdyYXBQZW5kaW5nRGVwZW5kZW5jeVByb21pc2UoKSkuXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gd3JhcFJlc3VsdFByb21pc2Uoc3RvcmUsIHByb21pc2UsIHN0YXRlLCBkZXBWYWx1ZXMsIGV4ZWN1dGlvbklELCBsb2FkaW5nRGVwc1N0YXRlKSB7XG4gICAgcmV0dXJuIHByb21pc2UudGhlbih2YWx1ZSA9PiB7XG4gICAgICBpZiAoIXNlbGVjdG9ySXNMaXZlKCkpIHtcbiAgICAgICAgLy8gVGhlIHNlbGVjdG9yIHdhcyByZWxlYXNlZCBzaW5jZSB0aGUgcmVxdWVzdCBiZWdhbjsgaWdub3JlIHRoZSByZXNwb25zZS5cbiAgICAgICAgY2xlYXJFeGVjdXRpb25JbmZvKHN0b3JlKTtcbiAgICAgICAgdGhyb3cgQ0FOQ0VMRUQ7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGxvYWRhYmxlID0gbG9hZGFibGVXaXRoVmFsdWUkMih2YWx1ZSk7XG4gICAgICByZXNvbHZlQXN5bmMoc3RvcmUsIHN0YXRlLCBleGVjdXRpb25JRCwgbG9hZGFibGUsIGRlcFZhbHVlcyk7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSkuY2F0Y2goZXJyb3JPclByb21pc2UgPT4ge1xuICAgICAgaWYgKCFzZWxlY3RvcklzTGl2ZSgpKSB7XG4gICAgICAgIC8vIFRoZSBzZWxlY3RvciB3YXMgcmVsZWFzZWQgc2luY2UgdGhlIHJlcXVlc3QgYmVnYW47IGlnbm9yZSB0aGUgcmVzcG9uc2UuXG4gICAgICAgIGNsZWFyRXhlY3V0aW9uSW5mbyhzdG9yZSk7XG4gICAgICAgIHRocm93IENBTkNFTEVEO1xuICAgICAgfVxuXG4gICAgICBpZiAoUmVjb2lsX2lzUHJvbWlzZShlcnJvck9yUHJvbWlzZSkpIHtcbiAgICAgICAgcmV0dXJuIHdyYXBQZW5kaW5nRGVwZW5kZW5jeVByb21pc2Uoc3RvcmUsIGVycm9yT3JQcm9taXNlLCBzdGF0ZSwgZGVwVmFsdWVzLCBleGVjdXRpb25JRCwgbG9hZGluZ0RlcHNTdGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGxvYWRhYmxlID0gbG9hZGFibGVXaXRoRXJyb3IkMShlcnJvck9yUHJvbWlzZSk7XG4gICAgICByZXNvbHZlQXN5bmMoc3RvcmUsIHN0YXRlLCBleGVjdXRpb25JRCwgbG9hZGFibGUsIGRlcFZhbHVlcyk7XG4gICAgICB0aHJvdyBlcnJvck9yUHJvbWlzZTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiBhdHRhY2hlcyBhIHRoZW4oKSBhbmQgYSBjYXRjaCgpIHRvIGEgcHJvbWlzZSB0aGF0IHdhc1xuICAgKiB0aHJvd24gZnJvbSBhIHNlbGVjdG9yJ3MgZ2V0KCkuIElmIGEgc2VsZWN0b3IncyBnZXQoKSB0aHJvd3MgYSBwcm9taXNlLFxuICAgKiB3ZSBoYXZlIHR3byBwb3NzaWJpbGl0aWVzOlxuICAgKlxuICAgKiAxLiBUaGUgcHJvbWlzZSB3aWxsIHJlc29sdmUsIG1lYW5pbmcgb25lIG9mIG91ciBzZWxlY3RvcidzIGRlcGVuZGVuY2llcyBpc1xuICAgKiAgICBub3cgYXZhaWxhYmxlIGFuZCB3ZSBzaG91bGQgXCJyZXRyeVwiIG91ciBnZXQoKSBieSBydW5uaW5nIGl0IGFnYWluLiBUaGlzXG4gICAqICAgIGlzIHRoZSBjYXNlIGhhbmRsZWQgYnkgdGhlIGF0dGFjaGVkIHRoZW4oKSBoYW5kbGVyLlxuICAgKlxuICAgKiAyLiBUaGUgcHJvbWlzZSB3aWxsIHRocm93IGJlY2F1c2Ugc29tZXRoaW5nIHdlbnQgd3Jvbmcgd2l0aCB0aGUgZGVwZW5kZW5jeVxuICAgKiAgICBwcm9taXNlIChpbiBvdGhlciB3b3JkcyBhIHJlYWwgZXJyb3Igb2NjdXJyZWQpLiBUaGlzIGNhc2UgaXMgaGFuZGxlZCBieVxuICAgKiAgICB0aGUgYXR0YWNoZWQgY2F0Y2goKSBoYW5kbGVyLiBJZiB0aGUgZGVwZW5kZW5jeSBwcm9taXNlIHRocm93cywgaXQgaXNcbiAgICogICAgX2Fsd2F5c18gYSByZWFsIGVycm9yIGFuZCBub3QgYW5vdGhlciBkZXBlbmRlbmN5IHByb21pc2UgKGFueSBkZXBlbmRlbmN5XG4gICAqICAgIHByb21pc2VzIHdvdWxkIGhhdmUgYmVlbiBoYW5kbGVkIHVwc3RyZWFtKS5cbiAgICpcbiAgICogVGhlIHRoZW4oKSBicmFuY2ggd2lsbCBldmVudHVhbGx5IHJlc29sdmUgdG8gdGhlIGZpbmFsIHJlc3VsdCBvZiB0aGVcbiAgICogc2VsZWN0b3IgKG9yIGFuIGVycm9yIGlmIGEgcmVhbCBlcnJvciBvY2N1cnMpLCBhbmQgdGhlIGNhdGNoKCkgd2lsbCBhbHdheXNcbiAgICogcmVzb2x2ZSB0byBhbiBlcnJvciBiZWNhdXNlIHRoZSBkZXBlbmRlbmN5IHByb21pc2UgaXMgYSBwcm9taXNlIHRoYXQgd2FzXG4gICAqIHdyYXBwZWQgdXBzdHJlYW0sIG1lYW5pbmcgaXQgd2lsbCBvbmx5IHJlc29sdmUgdG8gaXRzIHJlYWwgdmFsdWUgb3IgdG8gYVxuICAgKiByZWFsIGVycm9yLlxuICAgKlxuICAgKiBUaGUgZXhlY3V0aW9uIHdpbGwgcnVuIHRvIGNvbXBsZXRpb24gZXZlbiBpZiBpdCBpcyBzdGFsZSwgYW5kIGl0cyB2YWx1ZVxuICAgKiB3aWxsIGJlIGNhY2hlZC4gQnV0IHN0YWxlIGV4ZWN1dGlvbnMgd2lsbCBub3QgdXBkYXRlIGdsb2JhbCBzdGF0ZSBvciB1cGRhdGVcbiAgICogZXhlY3V0aW9uSW5mbyBhcyB0aGF0IGlzIHRoZSByZXNwb25zaWJpbGl0eSBvZiB0aGUgJ2xhdGVzdCcgZXhlY3V0aW9uLlxuICAgKlxuICAgKiBOb3RlIHRoaXMgZnVuY3Rpb24gc2hvdWxkIG5vdCBiZSBwYXNzZWQgYSBwcm9taXNlIHRoYXQgd2FzIHJldHVybmVkIGZyb21cbiAgICogZ2V0KCkuIFRoZSBpbnRlbnRpb24gaXMgdGhhdCB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgcGFzc2VkIHByb21pc2VzIHRoYXRcbiAgICogd2VyZSB0aHJvd24gZHVlIHRvIGEgcGVuZGluZyBkZXBlbmRlbmN5LiBQcm9taXNlcyByZXR1cm5lZCBieSBnZXQoKSBzaG91bGRcbiAgICogYmUgcGFzc2VkIHRvIHdyYXBSZXN1bHRQcm9taXNlKCkgaW5zdGVhZC5cbiAgICovXG5cblxuICBmdW5jdGlvbiB3cmFwUGVuZGluZ0RlcGVuZGVuY3lQcm9taXNlKHN0b3JlLCBwcm9taXNlLCBzdGF0ZSwgZXhpc3RpbmdEZXBzLCBleGVjdXRpb25JRCwgbG9hZGluZ0RlcHNTdGF0ZSkge1xuICAgIHJldHVybiBwcm9taXNlLnRoZW4ocmVzb2x2ZWREZXAgPT4ge1xuICAgICAgaWYgKCFzZWxlY3RvcklzTGl2ZSgpKSB7XG4gICAgICAgIC8vIFRoZSBzZWxlY3RvciB3YXMgcmVsZWFzZWQgc2luY2UgdGhlIHJlcXVlc3QgYmVnYW47IGlnbm9yZSB0aGUgcmVzcG9uc2UuXG4gICAgICAgIGNsZWFyRXhlY3V0aW9uSW5mbyhzdG9yZSk7XG4gICAgICAgIHRocm93IENBTkNFTEVEO1xuICAgICAgfSAvLyBDaGVjayBpZiB3ZSBhcmUgaGFuZGxpbmcgYSBwZW5kaW5nIFJlY29pbCBkZXBlbmRlbmN5IG9yIGlmIHRoZSB1c2VyXG4gICAgICAvLyB0aHJldyB0aGVpciBvd24gUHJvbWlzZSB0byBcInN1c3BlbmRcIiBhIHNlbGVjdG9yIGV2YWx1YXRpb24uICBXZSBuZWVkXG4gICAgICAvLyB0byBjaGVjayB0aGF0IHRoZSBsb2FkaW5nRGVwUHJvbWlzZSBhY3R1YWxseSBtYXRjaGVzIHRoZSBwcm9taXNlIHRoYXRcbiAgICAgIC8vIHdlIGNhdWdodCBpbiBjYXNlIHRoZSBzZWxlY3RvciBoYXBwZW5lZCB0byBjYXRjaCB0aGUgcHJvbWlzZSB3ZSB0aHJld1xuICAgICAgLy8gZm9yIGEgcGVuZGluZyBSZWNvaWwgZGVwZW5kZW5jeSBmcm9tIGBnZXRSZWNvaWxWYWx1ZSgpYCBhbmQgdGhyZXdcbiAgICAgIC8vIHRoZWlyIG93biBwcm9taXNlIGluc3RlYWQuXG5cblxuICAgICAgaWYgKGxvYWRpbmdEZXBzU3RhdGUubG9hZGluZ0RlcEtleSAhPSBudWxsICYmIGxvYWRpbmdEZXBzU3RhdGUubG9hZGluZ0RlcFByb21pc2UgPT09IHByb21pc2UpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIE5vdGUgZm9yIGFzeW5jIGF0b21zLCB0aGlzIG1lYW5zIHdlIGFyZSBjaGFuZ2luZyB0aGUgYXRvbSdzIHZhbHVlXG4gICAgICAgICAqIGluIHRoZSBzdG9yZSBmb3IgdGhlIGdpdmVuIHZlcnNpb24uIFRoaXMgc2hvdWxkIGJlIGFscmlnaHQgYmVjYXVzZVxuICAgICAgICAgKiB0aGUgdmVyc2lvbiBvZiBzdGF0ZSBpcyBub3cgc3RhbGUgYW5kIGEgbmV3IHZlcnNpb24gd2lsbCBoYXZlXG4gICAgICAgICAqIGFscmVhZHkgYmVlbiB0cmlnZ2VyZWQgYnkgdGhlIGF0b20gYmVpbmcgcmVzb2x2ZWQgKHNlZSB0aGlzIGxvZ2ljXG4gICAgICAgICAqIGluIFJlY29pbF9hdG9tLmpzKVxuICAgICAgICAgKi9cbiAgICAgICAgc3RhdGUuYXRvbVZhbHVlcy5zZXQobG9hZGluZ0RlcHNTdGF0ZS5sb2FkaW5nRGVwS2V5LCBsb2FkYWJsZVdpdGhWYWx1ZSQyKHJlc29sdmVkRGVwKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvKipcbiAgICAgICAgICogSWYgcmVzb2x2ZWREZXBLZXkgaXMgbm90IGRlZmluZWQsIHRoZSBwcm9taXNlIHdhcyBhIHVzZXItdGhyb3duXG4gICAgICAgICAqIHByb21pc2UuIFVzZXItdGhyb3duIHByb21pc2VzIGFyZSBhbiBhZHZhbmNlZCBmZWF0dXJlIGFuZCB0aGV5XG4gICAgICAgICAqIHNob3VsZCBiZSBhdm9pZGVkIGluIGFsbW9zdCBhbGwgY2FzZXMuIFVzaW5nIGBsb2FkYWJsZS5tYXAoKWAgaW5zaWRlXG4gICAgICAgICAqIG9mIHNlbGVjdG9ycyBmb3IgbG9hZGluZyBsb2FkYWJsZXMgYW5kIHRoZW4gdGhyb3dpbmcgdGhhdCBtYXBwZWRcbiAgICAgICAgICogbG9hZGFibGUncyBwcm9taXNlIGlzIGFuIGV4YW1wbGUgb2YgYSB1c2VyLXRocm93biBwcm9taXNlLlxuICAgICAgICAgKlxuICAgICAgICAgKiBXaGVuIHdlIGhpdCBhIHVzZXItdGhyb3duIHByb21pc2UsIHdlIGhhdmUgdG8gYmFpbCBvdXQgb2YgYW4gb3B0aW1pemF0aW9uXG4gICAgICAgICAqIHdoZXJlIHdlIGJ5cGFzcyBjYWxjdWxhdGluZyBzZWxlY3RvciBjYWNoZSBrZXlzIGZvciBzZWxlY3RvcnMgdGhhdFxuICAgICAgICAgKiBoYXZlIGJlZW4gcHJldmlvdXNseSBzZWVuIGZvciBhIGdpdmVuIHN0YXRlICh0aGVzZSBzZWxlY3RvcnMgYXJlIHNhdmVkIGluXG4gICAgICAgICAqIHN0YXRlLmF0b21WYWx1ZXMpIHRvIGF2b2lkIHN0YWxlIHN0YXRlIGFzIHdlIGhhdmUgbm8gd2F5IG9mIGtub3dpbmdcbiAgICAgICAgICogd2hhdCBzdGF0ZSBjaGFuZ2VzIGhhcHBlbmVkIChpZiBhbnkpIGluIHJlc3VsdCB0byB0aGUgcHJvbWlzZSByZXNvbHZpbmcuXG4gICAgICAgICAqXG4gICAgICAgICAqIElkZWFsbHkgd2Ugd291bGQgb25seSBiYWlsIG91dCBzZWxlY3RvcnMgdGhhdCBhcmUgaW4gdGhlIGNoYWluIG9mXG4gICAgICAgICAqIGRlcGVuZGVuY2llcyBmb3IgdGhpcyBzZWxlY3RvciwgYnV0IHRoZXJlJ3MgY3VycmVudGx5IG5vIHdheSB0byBnZXRcbiAgICAgICAgICogYSBmdWxsIGxpc3Qgb2YgYSBzZWxlY3RvcidzIGRvd25zdHJlYW0gbm9kZXMgYmVjYXVzZSB0aGUgc3RhdGUgdGhhdFxuICAgICAgICAgKiBpcyBleGVjdXRpbmcgbWF5IGJlIGEgZGlzY2FyZGVkIHRyZWUgKHNvIHN0b3JlLmdldEdyYXBoKHN0YXRlLnZlcnNpb24pXG4gICAgICAgICAqIHdpbGwgYmUgZW1wdHkpLCBhbmQgdGhlIGZ1bGwgZGVwIHRyZWUgbWF5IG5vdCBiZSBpbiB0aGUgc2VsZWN0b3JcbiAgICAgICAgICogY2FjaGVzIGluIHRoZSBjYXNlIHdoZXJlIHRoZSBzZWxlY3RvcidzIGNhY2hlIHdhcyBjbGVhcmVkLiBUbyBzb2x2ZVxuICAgICAgICAgKiBmb3IgdGhpcyB3ZSB3b3VsZCBoYXZlIHRvIGtlZXAgdHJhY2sgb2YgYWxsIHJ1bm5pbmcgc2VsZWN0b3JcbiAgICAgICAgICogZXhlY3V0aW9ucyBhbmQgdGhlaXIgZG93bnN0cmVhbSBkZXBzLiBCZWNhdXNlIHRoaXMgb25seSBjb3ZlcnMgZWRnZVxuICAgICAgICAgKiBjYXNlcywgdGhhdCBjb21wbGV4aXR5IG1pZ2h0IG5vdCBiZSBqdXN0aWZ5YWJsZS5cbiAgICAgICAgICovXG4gICAgICAgIHN0b3JlLmdldFN0YXRlKCkua25vd25TZWxlY3RvcnMuZm9yRWFjaChub2RlS2V5ID0+IHtcbiAgICAgICAgICBzdGF0ZS5hdG9tVmFsdWVzLmRlbGV0ZShub2RlS2V5KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICAvKipcbiAgICAgICAqIE9wdGltaXphdGlvbjogTm93IHRoYXQgdGhlIGRlcGVuZGVuY3kgaGFzIHJlc29sdmVkLCBsZXQncyB0cnkgaGl0dGluZ1xuICAgICAgICogdGhlIGNhY2hlIGluIGNhc2UgdGhlIGRlcCByZXNvbHZlZCB0byBhIHZhbHVlIHdlIGhhdmUgcHJldmlvdXNseSBzZWVuLlxuICAgICAgICpcbiAgICAgICAqIFRPRE86XG4gICAgICAgKiBOb3RlIHRoaXMgb3B0aW1pemF0aW9uIGlzIG5vdCBwZXJmZWN0IGJlY2F1c2UgaXQgb25seSBwcmV2ZW50cyByZS1leGVjdXRpb25zXG4gICAgICAgKiBfYWZ0ZXJfIHRoZSBwb2ludCB3aGVyZSBhbiBhc3luYyBkZXBlbmRlbmN5IGlzIGZvdW5kLiBBbnkgY29kZSBsZWFkaW5nXG4gICAgICAgKiB1cCB0byB0aGUgYXN5bmMgZGVwZW5kZW5jeSBtYXkgaGF2ZSBydW4gdW5uZWNlc3NhcmlseS4gVGhlIGlkZWFsIGNhc2VcbiAgICAgICAqIHdvdWxkIGJlIHRvIHdhaXQgZm9yIHRoZSBhc3luYyBkZXBlbmRlbmN5IHRvIHJlc29sdmUgZmlyc3QsIGNoZWNrIHRoZVxuICAgICAgICogY2FjaGUsIGFuZCBwcmV2ZW50IF9hbnlfIGV4ZWN1dGlvbiBvZiB0aGUgc2VsZWN0b3IgaWYgdGhlIHJlc3VsdGluZ1xuICAgICAgICogdmFsdWUgb2YgdGhlIGRlcGVuZGVuY3kgbGVhZHMgdG8gYSBwYXRoIHRoYXQgaXMgZm91bmQgaW4gdGhlIGNhY2hlLlxuICAgICAgICogVGhlIGlkZWFsIGNhc2UgaXMgbW9yZSBkaWZmaWN1bHQgdG8gaW1wbGVtZW50IGFzIGl0IHdvdWxkIHJlcXVpcmUgdGhhdFxuICAgICAgICogd2UgY2FwdHVyZSBhbmQgd2FpdCBmb3IgdGhlIHRoZSBhc3luYyBkZXBlbmRlbmN5IHJpZ2h0IGFmdGVyIGNoZWNraW5nXG4gICAgICAgKiB0aGUgY2FjaGUuIFRoZSBjdXJyZW50IGFwcHJvYWNoIHRha2VzIGFkdmFudGFnZSBvZiB0aGUgZmFjdCB0aGF0IHJ1bm5pbmdcbiAgICAgICAqIHRoZSBzZWxlY3RvciBhbHJlYWR5IGhhcyBhIGNvZGUgcGF0aCB0aGF0IGxldHMgdXMgZXhpdCBlYXJseSB3aGVuXG4gICAgICAgKiBhbiBhc3luYyBkZXAgcmVzb2x2ZXMuXG4gICAgICAgKi9cblxuXG4gICAgICBjb25zdCBjYWNoZWRMb2FkYWJsZSA9IGdldExvYWRhYmxlRnJvbUNhY2hlQW5kVXBkYXRlRGVwcyhzdG9yZSwgc3RhdGUpO1xuXG4gICAgICBpZiAoY2FjaGVkTG9hZGFibGUgJiYgY2FjaGVkTG9hZGFibGUuc3RhdGUgIT09ICdsb2FkaW5nJykge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhpcyBoYXMgdG8gbm90aWZ5IHN0b3JlcyBvZiBhIHJlc29sdmVkIGFzeW5jLCBldmVuIGlmIHRoZXJlIGlzIG5vXG4gICAgICAgICAqIGN1cnJlbnQgcGVuZGluZyBleGVjdXRpb24gZm9yIHRoZSBmb2xsb3dpbmcgY2FzZTpcbiAgICAgICAgICogMSkgQSBjb21wb25lbnQgcmVuZGVycyB3aXRoIHRoaXMgcGVuZGluZyBsb2FkYWJsZS5cbiAgICAgICAgICogMikgVGhlIHVwc3RyZWFtIGRlcGVuZGVuY3kgcmVzb2x2ZXMuXG4gICAgICAgICAqIDMpIFdoaWxlIHByb2Nlc3Npbmcgc29tZSBvdGhlciBzZWxlY3RvciBpdCByZWFkcyB0aGlzIG9uZSwgc3VjaCBhc1xuICAgICAgICAgKiAgICB3aGlsZSB0cmF2ZXJzaW5nIGl0cyBkZXBlbmRlbmNpZXMuICBBdCB0aGlzIHBvaW50IGl0IGdldHMgdGhlXG4gICAgICAgICAqICAgIG5ldyByZXNvbHZlZCB2YWx1ZSBzeW5jaHJvbm91c2x5IGFuZCBjbGVhcnMgdGhlIGN1cnJlbnRcbiAgICAgICAgICogICAgZXhlY3V0aW9uIElELiAgVGhlIGNvbXBvbmVudCB3YXNuJ3QgZ2V0dGluZyB0aGUgdmFsdWUgaXRzZWxmLFxuICAgICAgICAgKiAgICB0aG91Z2gsIHNvIGl0IHN0aWxsIGhhcyB0aGUgcGVuZGluZyBsb2FkYWJsZS5cbiAgICAgICAgICogNCkgV2hlbiB0aGlzIGNvZGUgZXhlY3V0ZXMgdGhlIGN1cnJlbnQgZXhlY3V0aW9uIGlkIHdhcyBjbGVhcmVkXG4gICAgICAgICAqICAgIGFuZCBpdCB3b3VsZG4ndCBub3RpZnkgdGhlIGNvbXBvbmVudCBvZiB0aGUgbmV3IHZhbHVlLlxuICAgICAgICAgKlxuICAgICAgICAgKiBJIHRoaW5rIHRoaXMgaXMgb25seSBhbiBpc3N1ZSB3aXRoIFwiZWFybHlcIiByZW5kZXJpbmcgc2luY2UgdGhlXG4gICAgICAgICAqIGNvbXBvbmVudHMgZ290IHRoZWlyIHZhbHVlIHVzaW5nIHRoZSBpbi1wcm9ncmVzcyBleGVjdXRpb24uXG4gICAgICAgICAqIFdlIGRvbid0IGhhdmUgYSB1bml0IHRlc3QgZm9yIHRoaXMgY2FzZSB5ZXQuICBJJ20gbm90IHN1cmUgaXQgaXNcbiAgICAgICAgICogbmVjZXNzYXJ5IHdpdGggcmVjb2lsX3RyYW5zaXRpb25fc3VwcG9ydCBtb2RlLlxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKGlzTGF0ZXN0RXhlY3V0aW9uKHN0b3JlLCBleGVjdXRpb25JRCkgfHwgZ2V0RXhlY3V0aW9uSW5mbyhzdG9yZSkgPT0gbnVsbCkge1xuICAgICAgICAgIG5vdGlmeVN0b3Jlc09mUmVzb2x2ZWRBc3luYyhzdG9yZSwgZXhlY3V0aW9uSUQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNhY2hlZExvYWRhYmxlLnN0YXRlID09PSAnaGFzVmFsdWUnKSB7XG4gICAgICAgICAgcmV0dXJuIGNhY2hlZExvYWRhYmxlLmNvbnRlbnRzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IGNhY2hlZExvYWRhYmxlLmNvbnRlbnRzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvKipcbiAgICAgICAqIElmIHRoaXMgZXhlY3V0aW9uIGlzIHN0YWxlLCBsZXQncyBjaGVjayB0byBzZWUgaWYgdGhlcmUgaXMgc29tZSBpblxuICAgICAgICogcHJvZ3Jlc3MgZXhlY3V0aW9uIHdpdGggYSBtYXRjaGluZyBzdGF0ZS4gSWYgd2UgZmluZCBhIG1hdGNoLCB0aGVuXG4gICAgICAgKiB3ZSBjYW4gdGFrZSB0aGUgdmFsdWUgZnJvbSB0aGF0IGluLXByb2dyZXNzIGV4ZWN1dGlvbi4gTm90ZSB0aGlzIG1heVxuICAgICAgICogc291bmQgbGlrZSBhbiBlZGdlIGNhc2UsIGJ1dCBtYXkgYmUgdmVyeSBjb21tb24gaW4gY2FzZXMgd2hlcmUgYVxuICAgICAgICogbG9hZGluZyBkZXBlbmRlbmN5IHJlc29sdmVzIGZyb20gbG9hZGluZyB0byBoYXZpbmcgYSB2YWx1ZSAodGh1c1xuICAgICAgICogcG9zc2libHkgdHJpZ2dlcmluZyBhIHJlLXJlbmRlciksIGFuZCBSZWFjdCByZS1yZW5kZXJzIGJlZm9yZSB0aGVcbiAgICAgICAqIGNoYWluZWQgLnRoZW4oKSBmdW5jdGlvbnMgcnVuLCB0aHVzIHN0YXJ0aW5nIGEgbmV3IGV4ZWN1dGlvbiBhcyB0aGVcbiAgICAgICAqIGRlcCBoYXMgY2hhbmdlZCB2YWx1ZS4gV2l0aG91dCB0aGlzIGNoZWNrIHdlIHdpbGwgcnVuIHRoZSBzZWxlY3RvclxuICAgICAgICogdHdpY2UgKG9uY2UgaW4gdGhlIG5ldyBleGVjdXRpb24gYW5kIG9uY2UgYWdhaW4gaW4gdGhpcyAudGhlbigpLCBzb1xuICAgICAgICogdGhpcyBjaGVjayBpcyBuZWNlc3NhcnkgdG8ga2VlcCB1bm5lY2Vzc2FyeSByZS1leGVjdXRpb25zIHRvIGFcbiAgICAgICAqIG1pbmltdW0pLlxuICAgICAgICpcbiAgICAgICAqIEFsc28gbm90ZSB0aGlzIGNvZGUgZG9lcyBub3QgY2hlY2sgYWNyb3NzIGFsbCBleGVjdXRpb25zIHRoYXQgbWF5IGJlXG4gICAgICAgKiBydW5uaW5nLiBJdCBvbmx5IG9wdGltaXplcyBmb3IgdGhlIF9sYXRlc3RfIGV4ZWN1dGlvbiBwZXIgc3RvcmUgYXNcbiAgICAgICAqIHdlIGN1cnJlbnRseSBkbyBub3QgbWFpbnRhaW4gYSBsaXN0IG9mIGFsbCBjdXJyZW50bHkgcnVubmluZyBleGVjdXRpb25zLlxuICAgICAgICogVGhpcyBtZWFucyBpbiBzb21lIGNhc2VzIHdlIG1heSBydW4gc2VsZWN0b3JzIG1vcmUgdGhhbiBzdHJpY3RseVxuICAgICAgICogbmVjZXNzYXJ5IHdoZW4gdGhlcmUgYXJlIG11bHRpcGxlIGV4ZWN1dGlvbnMgcnVubmluZyBmb3IgdGhlIHNhbWVcbiAgICAgICAqIHNlbGVjdG9yLiBUaGlzIG1heSBiZSBhIHZhbGlkIHRyYWRlb2ZmIGFzIGNoZWNraW5nIGZvciBkZXAgY2hhbmdlc1xuICAgICAgICogYWNyb3NzIGFsbCBpbi1wcm9ncmVzcyBleGVjdXRpb25zIG1heSB0YWtlIGxvbmdlciB0aGFuIGp1c3RcbiAgICAgICAqIHJlLXJ1bm5pbmcgdGhlIHNlbGVjdG9yLiBUaGlzIHdpbGwgYmUgYXBwLWRlcGVuZGVudCwgYW5kIG1heWJlIGluIHRoZVxuICAgICAgICogZnV0dXJlIHdlIGNhbiBtYWtlIHRoZSBiZWhhdmlvciBjb25maWd1cmFibGUuIEFuIGlkZWFsIGZpeCBtYXkgYmVcbiAgICAgICAqIHRvIGV4dGVuZCB0aGUgdHJlZSBjYWNoZSB0byBzdXBwb3J0IGNhY2hpbmcgbG9hZGluZyBzdGF0ZXMuXG4gICAgICAgKi9cblxuXG4gICAgICBpZiAoIWlzTGF0ZXN0RXhlY3V0aW9uKHN0b3JlLCBleGVjdXRpb25JRCkpIHtcbiAgICAgICAgY29uc3QgZXhlY3V0aW9uSW5mbyA9IGdldEluUHJvZ3Jlc3NFeGVjdXRpb25JbmZvKHN0b3JlLCBzdGF0ZSk7XG5cbiAgICAgICAgaWYgKGV4ZWN1dGlvbkluZm8gIT0gbnVsbCkge1xuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIFJldHVybmluZyBwcm9taXNlIGhlcmUgd2l0aG91dCB3cmFwcGluZyBhcyB0aGUgd3JhcHBlciBsb2dpYyB3YXNcbiAgICAgICAgICAgKiBhbHJlYWR5IGRvbmUgdXBzdHJlYW0gd2hlbiB0aGlzIHByb21pc2Ugd2FzIGdlbmVyYXRlZC5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICByZXR1cm4gZXhlY3V0aW9uSW5mby5sb2FkaW5nTG9hZGFibGUuY29udGVudHM7XG4gICAgICAgIH1cbiAgICAgIH0gLy8gUmV0cnkgdGhlIHNlbGVjdG9yIGV2YWx1YXRpb24gbm93IHRoYXQgdGhlIGRlcGVuZGVuY3kgaGFzIHJlc29sdmVkXG5cblxuICAgICAgY29uc3QgW2xvYWRhYmxlLCBkZXBWYWx1ZXNdID0gZXZhbHVhdGVTZWxlY3RvckdldHRlcihzdG9yZSwgc3RhdGUsIGV4ZWN1dGlvbklEKTtcblxuICAgICAgaWYgKGxvYWRhYmxlLnN0YXRlICE9PSAnbG9hZGluZycpIHtcbiAgICAgICAgcmVzb2x2ZUFzeW5jKHN0b3JlLCBzdGF0ZSwgZXhlY3V0aW9uSUQsIGxvYWRhYmxlLCBkZXBWYWx1ZXMpO1xuICAgICAgfVxuXG4gICAgICBpZiAobG9hZGFibGUuc3RhdGUgPT09ICdoYXNFcnJvcicpIHtcbiAgICAgICAgdGhyb3cgbG9hZGFibGUuY29udGVudHM7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBsb2FkYWJsZS5jb250ZW50cztcbiAgICB9KS5jYXRjaChlcnJvciA9PiB7XG4gICAgICAvLyBUaGUgc2VsZWN0b3Igd2FzIHJlbGVhc2VkIHNpbmNlIHRoZSByZXF1ZXN0IGJlZ2FuOyBpZ25vcmUgdGhlIHJlc3BvbnNlLlxuICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgQ2FuY2VsZWQpIHtcbiAgICAgICAgdGhyb3cgQ0FOQ0VMRUQ7XG4gICAgICB9XG5cbiAgICAgIGlmICghc2VsZWN0b3JJc0xpdmUoKSkge1xuICAgICAgICBjbGVhckV4ZWN1dGlvbkluZm8oc3RvcmUpO1xuICAgICAgICB0aHJvdyBDQU5DRUxFRDtcbiAgICAgIH1cblxuICAgICAgY29uc3QgbG9hZGFibGUgPSBsb2FkYWJsZVdpdGhFcnJvciQxKGVycm9yKTtcbiAgICAgIHJlc29sdmVBc3luYyhzdG9yZSwgc3RhdGUsIGV4ZWN1dGlvbklELCBsb2FkYWJsZSwgZXhpc3RpbmdEZXBzKTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlRGVwcyhzdG9yZSwgc3RhdGUsIGRlcHMsIGV4ZWN1dGlvbklEKSB7XG4gICAgdmFyIF9zdG9yZSRnZXRTdGF0ZSwgX3N0b3JlJGdldFN0YXRlJGN1cnJlLCBfc3RvcmUkZ2V0U3RhdGUyLCBfc3RvcmUkZ2V0U3RhdGUyJG5leHQ7XG5cbiAgICBpZiAoaXNMYXRlc3RFeGVjdXRpb24oc3RvcmUsIGV4ZWN1dGlvbklEKSB8fCBzdGF0ZS52ZXJzaW9uID09PSAoKF9zdG9yZSRnZXRTdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCkpID09PSBudWxsIHx8IF9zdG9yZSRnZXRTdGF0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9zdG9yZSRnZXRTdGF0ZSRjdXJyZSA9IF9zdG9yZSRnZXRTdGF0ZS5jdXJyZW50VHJlZSkgPT09IG51bGwgfHwgX3N0b3JlJGdldFN0YXRlJGN1cnJlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfc3RvcmUkZ2V0U3RhdGUkY3VycmUudmVyc2lvbikgfHwgc3RhdGUudmVyc2lvbiA9PT0gKChfc3RvcmUkZ2V0U3RhdGUyID0gc3RvcmUuZ2V0U3RhdGUoKSkgPT09IG51bGwgfHwgX3N0b3JlJGdldFN0YXRlMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9zdG9yZSRnZXRTdGF0ZTIkbmV4dCA9IF9zdG9yZSRnZXRTdGF0ZTIubmV4dFRyZWUpID09PSBudWxsIHx8IF9zdG9yZSRnZXRTdGF0ZTIkbmV4dCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3N0b3JlJGdldFN0YXRlMiRuZXh0LnZlcnNpb24pKSB7XG4gICAgICB2YXIgX3N0b3JlJGdldFN0YXRlJG5leHRULCBfc3RvcmUkZ2V0U3RhdGUzLCBfc3RvcmUkZ2V0U3RhdGUzJG5leHQ7XG5cbiAgICAgIHNhdmVEZXBzVG9TdG9yZSQxKGtleSwgZGVwcywgc3RvcmUsIChfc3RvcmUkZ2V0U3RhdGUkbmV4dFQgPSAoX3N0b3JlJGdldFN0YXRlMyA9IHN0b3JlLmdldFN0YXRlKCkpID09PSBudWxsIHx8IF9zdG9yZSRnZXRTdGF0ZTMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfc3RvcmUkZ2V0U3RhdGUzJG5leHQgPSBfc3RvcmUkZ2V0U3RhdGUzLm5leHRUcmVlKSA9PT0gbnVsbCB8fCBfc3RvcmUkZ2V0U3RhdGUzJG5leHQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9zdG9yZSRnZXRTdGF0ZTMkbmV4dC52ZXJzaW9uKSAhPT0gbnVsbCAmJiBfc3RvcmUkZ2V0U3RhdGUkbmV4dFQgIT09IHZvaWQgMCA/IF9zdG9yZSRnZXRTdGF0ZSRuZXh0VCA6IHN0b3JlLmdldFN0YXRlKCkuY3VycmVudFRyZWUudmVyc2lvbik7XG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBub2RlS2V5IG9mIGRlcHMpIHtcbiAgICAgIGRpc2NvdmVyZWREZXBlbmRlbmN5Tm9kZUtleXMuYWRkKG5vZGVLZXkpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGV2YWx1YXRlU2VsZWN0b3JHZXR0ZXIoc3RvcmUsIHN0YXRlLCBleGVjdXRpb25JRCkge1xuICAgIGNvbnN0IGVuZFBlcmZCbG9jayA9IHN0YXJ0UGVyZkJsb2NrJDEoa2V5KTsgLy8gVE9ETyBUNjM5NjU4NjY6IHVzZSBleGVjdXRpb24gSUQgaGVyZVxuXG4gICAgbGV0IGR1cmluZ1N5bmNocm9ub3VzRXhlY3V0aW9uID0gdHJ1ZTtcbiAgICBsZXQgZHVyaW5nQXN5bmNocm9ub3VzRXhlY3V0aW9uID0gdHJ1ZTtcblxuICAgIGNvbnN0IGZpbmlzaEV2YWx1YXRpb24gPSAoKSA9PiB7XG4gICAgICBlbmRQZXJmQmxvY2soKTtcbiAgICAgIGR1cmluZ0FzeW5jaHJvbm91c0V4ZWN1dGlvbiA9IGZhbHNlO1xuICAgIH07XG5cbiAgICBsZXQgcmVzdWx0O1xuICAgIGxldCByZXN1bHRJc0Vycm9yID0gZmFsc2U7XG4gICAgbGV0IGxvYWRhYmxlO1xuICAgIGNvbnN0IGxvYWRpbmdEZXBzU3RhdGUgPSB7XG4gICAgICBsb2FkaW5nRGVwS2V5OiBudWxsLFxuICAgICAgbG9hZGluZ0RlcFByb21pc2U6IG51bGxcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFN0YXJ0aW5nIGEgZnJlc2ggc2V0IG9mIGRlcHMgdGhhdCB3ZSdsbCBiZSB1c2luZyB0byB1cGRhdGUgc3RhdGUuIFdlJ3JlXG4gICAgICogc3RhcnRpbmcgYSBuZXcgc2V0IHZlcnN1cyBhZGRpbmcgaXQgaW4gZXhpc3Rpbmcgc3RhdGUgZGVwcyBiZWNhdXNlXG4gICAgICogdGhlIHZlcnNpb24gb2Ygc3RhdGUgdGhhdCB3ZSB1cGRhdGUgZGVwcyBmb3IgbWF5IGJlIGEgbW9yZSByZWNlbnQgdmVyc2lvblxuICAgICAqIHRoYW4gdGhlIHZlcnNpb24gdGhlIHNlbGVjdG9yIHdhcyBjYWxsZWQgd2l0aC4gVGhpcyBpcyBiZWNhdXNlIHRoZSBsYXRlc3RcbiAgICAgKiBleGVjdXRpb24gd2lsbCB1cGRhdGUgdGhlIGRlcHMgb2YgdGhlIGN1cnJlbnQvbGF0ZXN0IHZlcnNpb24gb2Ygc3RhdGVcbiAgICAgKiAoVGhpcyBpcyBzYWZlIHRvIGRvIGJlY2F1c2UgdGhlIGZhY3QgdGhhdCB0aGUgc2VsZWN0b3IgaXMgdGhlIGxhdGVzdFxuICAgICAqIGV4ZWN1dGlvbiBtZWFucyB0aGUgZGVwcyB3ZSBkaXNjb3ZlciBiZWxvdyBhcmUgb3VyIGJlc3QgZ3Vlc3MgYXQgdGhlXG4gICAgICogZGVwcyBmb3IgdGhlIGN1cnJlbnQvbGF0ZXN0IHN0YXRlIGluIHRoZSBzdG9yZSlcbiAgICAgKi9cblxuICAgIGNvbnN0IGRlcFZhbHVlcyA9IG5ldyBNYXAoKTtcblxuICAgIGZ1bmN0aW9uIGdldFJlY29pbFZhbHVlKHtcbiAgICAgIGtleTogZGVwS2V5XG4gICAgfSkge1xuICAgICAgY29uc3QgZGVwTG9hZGFibGUgPSBnZXROb2RlTG9hZGFibGUkMihzdG9yZSwgc3RhdGUsIGRlcEtleSk7XG4gICAgICBkZXBWYWx1ZXMuc2V0KGRlcEtleSwgZGVwTG9hZGFibGUpOyAvLyBXZSBuZWVkIHRvIHVwZGF0ZSBhc3luY2hyb25vdXMgZGVwZW5kZW5jaWVzIGFzIHdlIGdvIHNvIHRoZSBzZWxlY3RvclxuICAgICAgLy8ga25vd3MgaWYgaXQgaGFzIHRvIHJlc3RhcnQgZXZhbHVhdGlvbiBpZiBvbmUgb2YgdGhlbSBpcyB1cGRhdGVkIGJlZm9yZVxuICAgICAgLy8gdGhlIGFzeW5jaHJvbm91cyBzZWxlY3RvciBjb21wbGV0ZWx5IHJlc29sdmVzLlxuXG4gICAgICBpZiAoIWR1cmluZ1N5bmNocm9ub3VzRXhlY3V0aW9uKSB7XG4gICAgICAgIHVwZGF0ZURlcHMoc3RvcmUsIHN0YXRlLCBuZXcgU2V0KGRlcFZhbHVlcy5rZXlzKCkpLCBleGVjdXRpb25JRCk7XG4gICAgICAgIG5vdGlmeVN0b3Jlc09mTmV3QXN5bmNEZXAoc3RvcmUsIGV4ZWN1dGlvbklEKTtcbiAgICAgIH1cblxuICAgICAgc3dpdGNoIChkZXBMb2FkYWJsZS5zdGF0ZSkge1xuICAgICAgICBjYXNlICdoYXNWYWx1ZSc6XG4gICAgICAgICAgcmV0dXJuIGRlcExvYWRhYmxlLmNvbnRlbnRzO1xuXG4gICAgICAgIGNhc2UgJ2hhc0Vycm9yJzpcbiAgICAgICAgICB0aHJvdyBkZXBMb2FkYWJsZS5jb250ZW50cztcblxuICAgICAgICBjYXNlICdsb2FkaW5nJzpcbiAgICAgICAgICBsb2FkaW5nRGVwc1N0YXRlLmxvYWRpbmdEZXBLZXkgPSBkZXBLZXk7XG4gICAgICAgICAgbG9hZGluZ0RlcHNTdGF0ZS5sb2FkaW5nRGVwUHJvbWlzZSA9IGRlcExvYWRhYmxlLmNvbnRlbnRzO1xuICAgICAgICAgIHRocm93IGRlcExvYWRhYmxlLmNvbnRlbnRzO1xuICAgICAgfVxuXG4gICAgICB0aHJvdyBSZWNvaWxfZXJyKCdJbnZhbGlkIExvYWRhYmxlIHN0YXRlJyk7XG4gICAgfVxuXG4gICAgY29uc3QgZ2V0Q2FsbGJhY2sgPSBmbiA9PiB7XG4gICAgICByZXR1cm4gKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgaWYgKGR1cmluZ0FzeW5jaHJvbm91c0V4ZWN1dGlvbikge1xuICAgICAgICAgIHRocm93IFJlY29pbF9lcnIoJ0NhbGxiYWNrcyBmcm9tIGdldENhbGxiYWNrKCkgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIGFzeW5jaHJvbm91c2x5IGFmdGVyIHRoZSBzZWxlY3RvciBpcyBldmFsdXRhdGVkLiAgSXQgY2FuIGJlIHVzZWQgZm9yIHNlbGVjdG9ycyB0byByZXR1cm4gb2JqZWN0cyB3aXRoIGNhbGxiYWNrcyB0aGF0IGNhbiB3b3JrIHdpdGggUmVjb2lsIHN0YXRlIHdpdGhvdXQgYSBzdWJzY3JpcHRpb24uJyk7XG4gICAgICAgIH1cblxuICAgICAgICAhKHJlY29pbFZhbHVlICE9IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gUmVjb2lsX2ludmFyaWFudChmYWxzZSwgJ1JlY29pbCBWYWx1ZSBjYW4gbmV2ZXIgYmUgbnVsbCcpIDogUmVjb2lsX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgIHJldHVybiByZWNvaWxDYWxsYmFjayQxKHN0b3JlLCBmbiwgYXJncywge1xuICAgICAgICAgIG5vZGU6IHJlY29pbFZhbHVlXG4gICAgICAgIH0gLy8gZmxvd2xpbnQtbGluZSB1bmNsZWFyLXR5cGU6b2ZmXG4gICAgICAgICk7XG4gICAgICB9O1xuICAgIH07XG5cbiAgICB0cnkge1xuICAgICAgcmVzdWx0ID0gZ2V0KHtcbiAgICAgICAgZ2V0OiBnZXRSZWNvaWxWYWx1ZSxcbiAgICAgICAgZ2V0Q2FsbGJhY2tcbiAgICAgIH0pO1xuICAgICAgcmVzdWx0ID0gaXNSZWNvaWxWYWx1ZSQzKHJlc3VsdCkgPyBnZXRSZWNvaWxWYWx1ZShyZXN1bHQpIDogcmVzdWx0O1xuXG4gICAgICBpZiAoaXNMb2FkYWJsZSQxKHJlc3VsdCkpIHtcbiAgICAgICAgaWYgKHJlc3VsdC5zdGF0ZSA9PT0gJ2hhc0Vycm9yJykge1xuICAgICAgICAgIHJlc3VsdElzRXJyb3IgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0LmNvbnRlbnRzO1xuICAgICAgfVxuXG4gICAgICBpZiAoUmVjb2lsX2lzUHJvbWlzZShyZXN1bHQpKSB7XG4gICAgICAgIHJlc3VsdCA9IHdyYXBSZXN1bHRQcm9taXNlKHN0b3JlLCByZXN1bHQsIHN0YXRlLCBkZXBWYWx1ZXMsIGV4ZWN1dGlvbklELCBsb2FkaW5nRGVwc1N0YXRlKS5maW5hbGx5KGZpbmlzaEV2YWx1YXRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmluaXNoRXZhbHVhdGlvbigpO1xuICAgICAgfVxuXG4gICAgICByZXN1bHQgPSByZXN1bHQgaW5zdGFuY2VvZiBXcmFwcGVkVmFsdWUkMSA/IHJlc3VsdC52YWx1ZSA6IHJlc3VsdDtcbiAgICB9IGNhdGNoIChlcnJvck9yRGVwUHJvbWlzZSkge1xuICAgICAgcmVzdWx0ID0gZXJyb3JPckRlcFByb21pc2U7XG5cbiAgICAgIGlmIChSZWNvaWxfaXNQcm9taXNlKHJlc3VsdCkpIHtcbiAgICAgICAgcmVzdWx0ID0gd3JhcFBlbmRpbmdEZXBlbmRlbmN5UHJvbWlzZShzdG9yZSwgcmVzdWx0LCBzdGF0ZSwgZGVwVmFsdWVzLCBleGVjdXRpb25JRCwgbG9hZGluZ0RlcHNTdGF0ZSkuZmluYWxseShmaW5pc2hFdmFsdWF0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdElzRXJyb3IgPSB0cnVlO1xuICAgICAgICBmaW5pc2hFdmFsdWF0aW9uKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHJlc3VsdElzRXJyb3IpIHtcbiAgICAgIGxvYWRhYmxlID0gbG9hZGFibGVXaXRoRXJyb3IkMShyZXN1bHQpO1xuICAgIH0gZWxzZSBpZiAoUmVjb2lsX2lzUHJvbWlzZShyZXN1bHQpKSB7XG4gICAgICBsb2FkYWJsZSA9IGxvYWRhYmxlV2l0aFByb21pc2UkMShyZXN1bHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2FkYWJsZSA9IGxvYWRhYmxlV2l0aFZhbHVlJDIocmVzdWx0KTtcbiAgICB9XG5cbiAgICBkdXJpbmdTeW5jaHJvbm91c0V4ZWN1dGlvbiA9IGZhbHNlO1xuICAgIHVwZGF0ZUV4ZWN1dGlvbkluZm9EZXBWYWx1ZXMoc3RvcmUsIGV4ZWN1dGlvbklELCBkZXBWYWx1ZXMpO1xuICAgIHVwZGF0ZURlcHMoc3RvcmUsIHN0YXRlLCBuZXcgU2V0KGRlcFZhbHVlcy5rZXlzKCkpLCBleGVjdXRpb25JRCk7XG4gICAgcmV0dXJuIFtsb2FkYWJsZSwgZGVwVmFsdWVzXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldExvYWRhYmxlRnJvbUNhY2hlQW5kVXBkYXRlRGVwcyhzdG9yZSwgc3RhdGUpIHtcbiAgICAvLyBGaXJzdCwgbG9vayB1cCBpbiB0aGUgc3RhdGUgY2FjaGVcbiAgICAvLyBJZiBpdCdzIGhlcmUsIHRoZW4gdGhlIGRlcHMgaW4gdGhlIHN0b3JlIHNob3VsZCBhbHJlYWR5IGJlIHZhbGlkLlxuICAgIGxldCBjYWNoZWRMb2FkYWJsZSA9IHN0YXRlLmF0b21WYWx1ZXMuZ2V0KGtleSk7XG5cbiAgICBpZiAoY2FjaGVkTG9hZGFibGUgIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGNhY2hlZExvYWRhYmxlO1xuICAgIH0gLy8gU2Vjb25kLCBsb29rIHVwIGluIHRoZSBzZWxlY3RvciBjYWNoZSBhbmQgdXBkYXRlIHRoZSBkZXBzIGluIHRoZSBzdG9yZVxuXG5cbiAgICBjb25zdCBkZXBzQWZ0ZXJDYWNoZUxvb2t1cCA9IG5ldyBTZXQoKTtcblxuICAgIHRyeSB7XG4gICAgICBjYWNoZWRMb2FkYWJsZSA9IGNhY2hlLmdldChub2RlS2V5ID0+IHtcbiAgICAgICAgISh0eXBlb2Ygbm9kZUtleSA9PT0gJ3N0cmluZycpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gUmVjb2lsX2ludmFyaWFudChmYWxzZSwgJ0NhY2hlIG5vZGVLZXkgaXMgdHlwZSBzdHJpbmcnKSA6IFJlY29pbF9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgICByZXR1cm4gZ2V0Tm9kZUxvYWRhYmxlJDIoc3RvcmUsIHN0YXRlLCBub2RlS2V5KS5jb250ZW50cztcbiAgICAgIH0sIHtcbiAgICAgICAgb25Ob2RlVmlzaXQ6IG5vZGUgPT4ge1xuICAgICAgICAgIGlmIChub2RlLnR5cGUgPT09ICdicmFuY2gnICYmIG5vZGUubm9kZUtleSAhPT0ga2V5KSB7XG4gICAgICAgICAgICBkZXBzQWZ0ZXJDYWNoZUxvb2t1cC5hZGQobm9kZS5ub2RlS2V5KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aHJvdyBSZWNvaWxfZXJyKGBQcm9ibGVtIHdpdGggY2FjaGUgbG9va3VwIGZvciBzZWxlY3RvciBcIiR7a2V5fVwiOiAke2Vycm9yLm1lc3NhZ2V9YCk7XG4gICAgfVxuXG4gICAgaWYgKGNhY2hlZExvYWRhYmxlKSB7XG4gICAgICB2YXIgX2dldEV4ZWN1dGlvbkluZm87XG5cbiAgICAgIC8vIENhY2hlIHRoZSByZXN1bHRzIGluIHRoZSBzdGF0ZSB0byBhbGxvdyBmb3IgY2hlYXBlciBsb29rdXAgdGhhblxuICAgICAgLy8gaXRlcmF0aW5nIHRoZSB0cmVlIGNhY2hlIG9mIGRlcGVuZGVuY2llcy5cbiAgICAgIHN0YXRlLmF0b21WYWx1ZXMuc2V0KGtleSwgY2FjaGVkTG9hZGFibGUpO1xuICAgICAgLyoqXG4gICAgICAgKiBFbnN1cmUgc3RvcmUgY29udGFpbnMgY29ycmVjdCBkZXBlbmRlbmNpZXMgaWYgd2UgaGl0IHRoZSBjYWNoZSBzbyB0aGF0XG4gICAgICAgKiB0aGUgc3RvcmUgZGVwcyBhbmQgY2FjaGUgYXJlIGluIHN5bmMgZm9yIGEgZ2l2ZW4gc3RhdGUuIFRoaXMgaXMgaW1wb3J0YW50XG4gICAgICAgKiBiZWNhdXNlIHN0b3JlIGRlcHMgYXJlIG5vcm1hbGx5IHVwZGF0ZWQgd2hlbiBuZXcgZXhlY3V0aW9ucyBhcmUgY3JlYXRlZCxcbiAgICAgICAqIGJ1dCBjYWNoZSBoaXRzIGRvbid0IHRyaWdnZXIgbmV3IGV4ZWN1dGlvbnMgYnV0IHRoZXkgc3RpbGwgX21heV8gc2lnbmlmeVxuICAgICAgICogYSBjaGFuZ2UgaW4gZGVwcyBpbiB0aGUgc3RvcmUgaWYgdGhlIHN0b3JlIGRlcHMgZm9yIHRoaXMgc3RhdGUgYXJlIGVtcHR5XG4gICAgICAgKiBvciBzdGFsZS5cbiAgICAgICAqL1xuXG4gICAgICB1cGRhdGVEZXBzKHN0b3JlLCBzdGF0ZSwgZGVwc0FmdGVyQ2FjaGVMb29rdXAsIChfZ2V0RXhlY3V0aW9uSW5mbyA9IGdldEV4ZWN1dGlvbkluZm8oc3RvcmUpKSA9PT0gbnVsbCB8fCBfZ2V0RXhlY3V0aW9uSW5mbyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2dldEV4ZWN1dGlvbkluZm8uZXhlY3V0aW9uSUQpO1xuICAgIH1cblxuICAgIHJldHVybiBjYWNoZWRMb2FkYWJsZTtcbiAgfVxuICAvKipcbiAgICogR2l2ZW4gYSB0cmVlIHN0YXRlLCB0aGlzIGZ1bmN0aW9uIHJldHVybnMgYSBMb2FkYWJsZSBvZiB0aGUgY3VycmVudCBzdGF0ZS5cbiAgICpcbiAgICogVGhlIHNlbGVjdG9yJ3MgZ2V0KCkgZnVuY3Rpb24gd2lsbCBvbmx5IGJlIHJlLWV2YWx1YXRlZCBpZiBfYm90aF8gb2YgdGhlXG4gICAqIGZvbGxvd2luZyBzdGF0ZW1lbnRzIGFyZSB0cnVlOlxuICAgKlxuICAgKiAxLiBUaGUgY3VycmVudCBkZXAgdmFsdWVzIGZyb20gdGhlIGdpdmVuIHN0YXRlIHByb2R1Y2VkIGEgY2FjaGUga2V5IHRoYXRcbiAgICogICAgd2FzIG5vdCBmb3VuZCBpbiB0aGUgY2FjaGUuXG4gICAqIDIuIFRoZXJlIGlzIG5vIGN1cnJlbnRseSBydW5uaW5nIGFzeW5jIGV4ZWN1dGlvbiBPUiB0aGVyZSBpcyBhblxuICAgKiAgICBhc3luYyBleGVjdXRpb24gdGhhdCBpcyBydW5uaW5nLCBidXQgYWZ0ZXIgY29tcGFyaW5nIHRoZSBkZXAgdmFsdWVzIGluXG4gICAqICAgIHRoZSBnaXZlbiBzdGF0ZSB3aXRoIHRoZSBkZXAgdmFsdWVzIHRoYXQgdGhlIGV4ZWN1dGlvbiBoYXMgZGlzY292ZXJlZCBzb1xuICAgKiAgICBmYXIgd2UgZmluZCB0aGF0IGF0IGxlYXN0IG9uZSBkZXAgdmFsdWUgaGFzIGNoYW5nZWQsIGluIHdoaWNoIGNhc2Ugd2VcbiAgICogICAgc3RhcnQgYSBuZXcgZXhlY3V0aW9uICh0aGUgcHJldmlvdXNseSBydW5uaW5nIGV4ZWN1dGlvbiB3aWxsIGNvbnRpbnVlIHRvXG4gICAqICAgIHJ1biB0byBjb21wbGV0aW9uLCBidXQgb25seSB0aGUgbmV3IGV4ZWN1dGlvbiB3aWxsIGJlIGRlZW1lZCB0aGVcbiAgICogICAgJ2xhdGVzdCcgZXhlY3V0aW9uLCBtZWFuaW5nIGl0IHdpbGwgYmUgdGhlIG9ubHkgZXhlY3V0aW9uIHRoYXQgd2lsbFxuICAgKiAgICB1cGRhdGUgZ2xvYmFsIHN0YXRlIHdoZW4gaXQgaXMgZmluaXNoZWQuIEFueSBub24tbGF0ZXN0IGV4ZWN1dGlvbnMgd2lsbFxuICAgKiAgICBydW4gdG8gY29tcGxldGlvbiBhbmQgdXBkYXRlIHRoZSBzZWxlY3RvciBjYWNoZSBidXQgbm90IGdsb2JhbCBzdGF0ZSkuXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZ2V0U2VsZWN0b3JMb2FkYWJsZUFuZFVwZGF0ZURlcHMoc3RvcmUsIHN0YXRlKSB7XG4gICAgLy8gRmlyc3QsIHNlZSBpZiBvdXIgY3VycmVudCBzdGF0ZSBpcyBjYWNoZWRcbiAgICBjb25zdCBjYWNoZWRWYWwgPSBnZXRMb2FkYWJsZUZyb21DYWNoZUFuZFVwZGF0ZURlcHMoc3RvcmUsIHN0YXRlKTtcblxuICAgIGlmIChjYWNoZWRWYWwgIT0gbnVsbCkge1xuICAgICAgY2xlYXJFeGVjdXRpb25JbmZvKHN0b3JlKTtcbiAgICAgIHJldHVybiBjYWNoZWRWYWw7XG4gICAgfSAvLyBTZWNvbmQsIGNoZWNrIGlmIHRoZXJlIGlzIGFscmVhZHkgYW4gb25nb2luZyBleGVjdXRpb24gYmFzZWQgb24gdGhlIGN1cnJlbnQgc3RhdGVcblxuXG4gICAgY29uc3QgaW5Qcm9ncmVzc0V4ZWN1dGlvbkluZm8gPSBnZXRJblByb2dyZXNzRXhlY3V0aW9uSW5mbyhzdG9yZSwgc3RhdGUpO1xuXG4gICAgaWYgKGluUHJvZ3Jlc3NFeGVjdXRpb25JbmZvICE9IG51bGwpIHtcbiAgICAgIHZhciBfaW5Qcm9ncmVzc0V4ZWN1dGlvbkk7XG5cbiAgICAgIGlmICgoKF9pblByb2dyZXNzRXhlY3V0aW9uSSA9IGluUHJvZ3Jlc3NFeGVjdXRpb25JbmZvLmxvYWRpbmdMb2FkYWJsZSkgPT09IG51bGwgfHwgX2luUHJvZ3Jlc3NFeGVjdXRpb25JID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfaW5Qcm9ncmVzc0V4ZWN1dGlvbkkuc3RhdGUpID09PSAnbG9hZGluZycpIHtcbiAgICAgICAgbWFya1N0b3JlV2FpdGluZ0ZvclJlc29sdmVkQXN5bmMoc3RvcmUsIGluUHJvZ3Jlc3NFeGVjdXRpb25JbmZvLmV4ZWN1dGlvbklEKTtcbiAgICAgIH0gLy8gRklYTUU6IGNoZWNrIGFmdGVyIHRoZSBmYWN0IHRvIHNlZSBpZiB3ZSBtYWRlIHRoZSByaWdodCBjaG9pY2UgYnkgd2FpdGluZ1xuXG5cbiAgICAgIHJldHVybiBpblByb2dyZXNzRXhlY3V0aW9uSW5mby5sb2FkaW5nTG9hZGFibGU7XG4gICAgfSAvLyBUaGlyZCwgc3RhcnQgYSBuZXcgZXZhbHVhdGlvbiBvZiB0aGUgc2VsZWN0b3JcblxuXG4gICAgY29uc3QgbmV3RXhlY3V0aW9uSUQgPSBnZXROZXdFeGVjdXRpb25JRCgpO1xuICAgIGNvbnN0IFtsb2FkYWJsZSwgbmV3RGVwVmFsdWVzXSA9IGV2YWx1YXRlU2VsZWN0b3JHZXR0ZXIoc3RvcmUsIHN0YXRlLCBuZXdFeGVjdXRpb25JRCk7XG4gICAgLyoqXG4gICAgICogQ29uZGl0aW9uYWxseSB1cGRhdGVzIHRoZSBjYWNoZSB3aXRoIGEgZ2l2ZW4gbG9hZGFibGUuXG4gICAgICpcbiAgICAgKiBXZSBvbmx5IGNhY2hlIGxvYWRhYmxlcyB0aGF0IGFyZSBub3QgbG9hZGluZyBiZWNhdXNlIG91ciBjYWNoZSBrZXlzIGFyZVxuICAgICAqIGJhc2VkIG9uIGRlcCB2YWx1ZXMsIHdoaWNoIGFyZSBpbiBhbiB1bmZpbmlzaGVkIHN0YXRlIGZvciBsb2FkYWJsZXMgdGhhdFxuICAgICAqIGhhdmUgYSAnbG9hZGluZycgc3RhdGUgKG5ldyBkZXBzIG1heSBiZSBkaXNjb3ZlcmVkIHdoaWxlIHRoZSBzZWxlY3RvclxuICAgICAqIHJ1bnMgaXRzIGFzeW5jIGNvZGUpLiBXZSBuZXZlciB3YW50IHRvIGNhY2hlIHBhcnRpYWwgZGVwZW5kZW5jaWVzIGIvYyBpdFxuICAgICAqIGNvdWxkIGxlYWQgdG8gZXJyb3JzLCBzdWNoIGFzIHByZW1hdHVyZWx5IHJldHVybmluZyB0aGUgcmVzdWx0IGJhc2VkIG9uIGFcbiAgICAgKiBwYXJ0aWFsIGxpc3Qgb2YgZGVwcy0tIHdlIG5lZWQgdGhlIGZ1bGwgbGlzdCBvZiBkZXBzIHRvIGVuc3VyZSB0aGF0IHdlXG4gICAgICogYXJlIHJldHVybmluZyB0aGUgY29ycmVjdCByZXN1bHQgZnJvbSBjYWNoZS5cbiAgICAgKi9cblxuICAgIGlmIChsb2FkYWJsZS5zdGF0ZSA9PT0gJ2xvYWRpbmcnKSB7XG4gICAgICBzZXRFeGVjdXRpb25JbmZvKHN0b3JlLCBuZXdFeGVjdXRpb25JRCwgbG9hZGFibGUsIG5ld0RlcFZhbHVlcywgc3RhdGUpO1xuICAgICAgbWFya1N0b3JlV2FpdGluZ0ZvclJlc29sdmVkQXN5bmMoc3RvcmUsIG5ld0V4ZWN1dGlvbklEKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2xlYXJFeGVjdXRpb25JbmZvKHN0b3JlKTtcbiAgICAgIHNldENhY2hlKHN0YXRlLCBsb2FkYWJsZSwgbmV3RGVwVmFsdWVzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbG9hZGFibGU7XG4gIH1cbiAgLyoqXG4gICAqIFNlYXJjaGVzIGV4ZWN1dGlvbiBpbmZvIGFjcm9zcyBhbGwgc3RvcmVzIHRvIHNlZSBpZiB0aGVyZSBpcyBhbiBpbi1wcm9ncmVzc1xuICAgKiBleGVjdXRpb24gd2hvc2UgZGVwZW5kZW5jeSB2YWx1ZXMgbWF0Y2ggdGhlIHZhbHVlcyBvZiB0aGUgcmVxdWVzdGluZyBzdG9yZS5cbiAgICovXG5cblxuICBmdW5jdGlvbiBnZXRJblByb2dyZXNzRXhlY3V0aW9uSW5mbyhzdG9yZSwgc3RhdGUpIHtcbiAgICAvLyBTb3J0IHRoZSBwZW5kaW5nIGV4ZWN1dGlvbnMgc28gdGhhdCBvdXIgY3VycmVudCBzdG9yZSBpcyBjaGVja2VkIGZpcnN0LlxuICAgIGNvbnN0IHBlbmRpbmdFeGVjdXRpb25zID0gUmVjb2lsX2NvbmNhdEl0ZXJhYmxlcyhbZXhlY3V0aW9uSW5mb01hcC5oYXMoc3RvcmUpID8gW1JlY29pbF9udWxsdGhyb3dzKGV4ZWN1dGlvbkluZm9NYXAuZ2V0KHN0b3JlKSldIDogW10sIFJlY29pbF9tYXBJdGVyYWJsZShSZWNvaWxfZmlsdGVySXRlcmFibGUoZXhlY3V0aW9uSW5mb01hcCwgKFtzXSkgPT4gcyAhPT0gc3RvcmUpLCAoWywgZXhlY0luZm9dKSA9PiBleGVjSW5mbyldKTtcblxuICAgIGZ1bmN0aW9uIGFueURlcENoYW5nZWQoZXhlY0RlcFZhbHVlcykge1xuICAgICAgZm9yIChjb25zdCBbZGVwS2V5LCBleGVjTG9hZGFibGVdIG9mIGV4ZWNEZXBWYWx1ZXMpIHtcbiAgICAgICAgaWYgKCFnZXROb2RlTG9hZGFibGUkMihzdG9yZSwgc3RhdGUsIGRlcEtleSkuaXMoZXhlY0xvYWRhYmxlKSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IGV4ZWNJbmZvIG9mIHBlbmRpbmdFeGVjdXRpb25zKSB7XG4gICAgICBpZiAoIC8vIElmIHRoaXMgZXhlY3V0aW9uIHdhcyBhbHJlYWR5IGNoZWNrZWQgdG8gYmUgdmFsaWQgd2l0aCB0aGlzIHZlcnNpb25cbiAgICAgIC8vIG9mIHN0YXRlLCB0aGVuIGxldCdzIHVzZSBpdCFcbiAgICAgIGV4ZWNJbmZvLnN0YXRlVmVyc2lvbnMuZ2V0KHN0YXRlLnZlcnNpb24pIHx8IC8vIElmIHRoZSBkZXBzIGZvciB0aGUgZXhlY3V0aW9uIG1hdGNoIG91ciBjdXJyZW50IHN0YXRlLCB0aGVuIGl0J3MgdmFsaWRcbiAgICAgICFhbnlEZXBDaGFuZ2VkKGV4ZWNJbmZvLmRlcFZhbHVlc0Rpc2NvdmVyZWRTb0ZhckR1cmluZ0FzeW5jV29yaykpIHtcbiAgICAgICAgZXhlY0luZm8uc3RhdGVWZXJzaW9ucy5zZXQoc3RhdGUudmVyc2lvbiwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiBleGVjSW5mbztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGV4ZWNJbmZvLnN0YXRlVmVyc2lvbnMuc2V0KHN0YXRlLnZlcnNpb24sIGZhbHNlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0RXhlY3V0aW9uSW5mbyhzdG9yZSkge1xuICAgIHJldHVybiBleGVjdXRpb25JbmZvTWFwLmdldChzdG9yZSk7XG4gIH1cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gd2lsbCB1cGRhdGUgdGhlIHNlbGVjdG9yJ3MgZXhlY3V0aW9uIGluZm8gd2hlbiB0aGUgc2VsZWN0b3JcbiAgICogaGFzIGVpdGhlciBmaW5pc2hlZCBydW5uaW5nIGFuIGV4ZWN1dGlvbiBvciBoYXMgc3RhcnRlZCBhIG5ldyBleGVjdXRpb24uIElmXG4gICAqIHRoZSBnaXZlbiBsb2FkYWJsZSBpcyBpbiBhICdsb2FkaW5nJyBzdGF0ZSwgdGhlIGludGVudGlvbiBpcyB0aGF0IGEgbmV3XG4gICAqIGV4ZWN1dGlvbiBoYXMgc3RhcnRlZC4gT3RoZXJ3aXNlLCB0aGUgaW50ZW50aW9uIGlzIHRoYXQgYW4gZXhlY3V0aW9uIGhhc1xuICAgKiBqdXN0IGZpbmlzaGVkLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHNldEV4ZWN1dGlvbkluZm8oc3RvcmUsIG5ld0V4ZWN1dGlvbklELCBsb2FkYWJsZSwgZGVwVmFsdWVzLCBzdGF0ZSkge1xuICAgIGV4ZWN1dGlvbkluZm9NYXAuc2V0KHN0b3JlLCB7XG4gICAgICBkZXBWYWx1ZXNEaXNjb3ZlcmVkU29GYXJEdXJpbmdBc3luY1dvcms6IGRlcFZhbHVlcyxcbiAgICAgIGV4ZWN1dGlvbklEOiBuZXdFeGVjdXRpb25JRCxcbiAgICAgIGxvYWRpbmdMb2FkYWJsZTogbG9hZGFibGUsXG4gICAgICBzdGF0ZVZlcnNpb25zOiBuZXcgTWFwKFtbc3RhdGUudmVyc2lvbiwgdHJ1ZV1dKVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlRXhlY3V0aW9uSW5mb0RlcFZhbHVlcyhzdG9yZSwgZXhlY3V0aW9uSUQsIGRlcFZhbHVlcykge1xuICAgIC8vIFdlIG9ubHkgbmVlZCB0byBib3RoZXIgdXBkYXRpbmcgdGhlIGRlcHMgZm9yIHRoZSBsYXRlc3QgZXhlY3V0aW9uIGJlY2F1c2VcbiAgICAvLyB0aGF0J3MgYWxsIGdldEluUHJvZ3Jlc3NFeGVjdXRpb25JbmZvKCkgd2lsbCBiZSBsb29raW5nIGZvci5cbiAgICBpZiAoaXNMYXRlc3RFeGVjdXRpb24oc3RvcmUsIGV4ZWN1dGlvbklEKSkge1xuICAgICAgY29uc3QgZXhlY3V0aW9uSW5mbyA9IGdldEV4ZWN1dGlvbkluZm8oc3RvcmUpO1xuXG4gICAgICBpZiAoZXhlY3V0aW9uSW5mbyAhPSBudWxsKSB7XG4gICAgICAgIGV4ZWN1dGlvbkluZm8uZGVwVmFsdWVzRGlzY292ZXJlZFNvRmFyRHVyaW5nQXN5bmNXb3JrID0gZGVwVmFsdWVzO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNsZWFyRXhlY3V0aW9uSW5mbyhzdG9yZSkge1xuICAgIGV4ZWN1dGlvbkluZm9NYXAuZGVsZXRlKHN0b3JlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzTGF0ZXN0RXhlY3V0aW9uKHN0b3JlLCBleGVjdXRpb25JRCkge1xuICAgIHZhciBfZ2V0RXhlY3V0aW9uSW5mbzI7XG5cbiAgICByZXR1cm4gZXhlY3V0aW9uSUQgPT09ICgoX2dldEV4ZWN1dGlvbkluZm8yID0gZ2V0RXhlY3V0aW9uSW5mbyhzdG9yZSkpID09PSBudWxsIHx8IF9nZXRFeGVjdXRpb25JbmZvMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2dldEV4ZWN1dGlvbkluZm8yLmV4ZWN1dGlvbklEKTtcbiAgfVxuICAvKipcbiAgICogRklYTUU6IGRlcCBrZXlzIHNob3VsZCB0YWtlIGludG8gYWNjb3VudCB0aGUgc3RhdGUgb2YgdGhlIGxvYWRhYmxlIHRvXG4gICAqIHByZXZlbnQgdGhlIGVkZ2UgY2FzZSB3aGVyZSBhIGxvYWRhYmxlIHdpdGggYW4gZXJyb3IgYW5kIGEgbG9hZGFibGUgd2l0aFxuICAgKiBhbiBlcnJvciBhcyBhIHZhbHVlIGFyZSB0cmVhdGVkIGFzIHRoZSBzYW1lIHRoaW5nIGluY29ycmVjdGx5LiBGb3IgZXhhbXBsZVxuICAgKiB0aGVzZSB0d28gc2hvdWxkIGJlIHRyZWF0ZWQgZGlmZmVyZW50bHk6XG4gICAqXG4gICAqIHNlbGVjdG9yKHtrZXk6ICcnLCBnZXQ6ICgpID0+IG5ldyBFcnJvcignaGknKX0pO1xuICAgKiBzZWxlY3Rvcih7a2V5OiAnJywgZ2V0ICgpID0+IHt0aHJvdyBuZXcgRXJyb3IoJ2hpJyl9fSk7XG4gICAqXG4gICAqIFdpdGggY3VycmVudCBpbXBsZW1lbnRhdGlvbiB0aGV5IGFyZSB0cmVhdGVkIHRoZSBzYW1lXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZGVwVmFsdWVzVG9EZXBSb3V0ZShkZXBWYWx1ZXMpIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbShkZXBWYWx1ZXMuZW50cmllcygpKS5tYXAoKFtkZXBLZXksIHZhbExvYWRhYmxlXSkgPT4gW2RlcEtleSwgdmFsTG9hZGFibGUuY29udGVudHNdKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldENhY2hlKHN0YXRlLCBsb2FkYWJsZSwgZGVwVmFsdWVzKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgaWYgKGxvYWRhYmxlLnN0YXRlICE9PSAnbG9hZGluZycgJiYgQm9vbGVhbihvcHRpb25zLmRhbmdlcm91c2x5QWxsb3dNdXRhYmlsaXR5KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgUmVjb2lsX2RlZXBGcmVlemVWYWx1ZShsb2FkYWJsZS5jb250ZW50cyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGUuYXRvbVZhbHVlcy5zZXQoa2V5LCBsb2FkYWJsZSk7XG5cbiAgICB0cnkge1xuICAgICAgY2FjaGUuc2V0KGRlcFZhbHVlc1RvRGVwUm91dGUoZGVwVmFsdWVzKSwgbG9hZGFibGUpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aHJvdyBSZWNvaWxfZXJyKGBQcm9ibGVtIHdpdGggc2V0dGluZyBjYWNoZSBmb3Igc2VsZWN0b3IgXCIke2tleX1cIjogJHtlcnJvci5tZXNzYWdlfWApO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGRldGVjdENpcmN1bGFyRGVwZW5kZW5jaWVzKGZuKSB7XG4gICAgaWYgKGRlcGVuZGVuY3lTdGFjay5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICBjb25zdCBtZXNzYWdlID0gYFJlY29pbCBzZWxlY3RvciBoYXMgY2lyY3VsYXIgZGVwZW5kZW5jaWVzOiAke2RlcGVuZGVuY3lTdGFjay5zbGljZShkZXBlbmRlbmN5U3RhY2suaW5kZXhPZihrZXkpKS5qb2luKCcgXFx1MjE5MiAnKX1gO1xuICAgICAgcmV0dXJuIGxvYWRhYmxlV2l0aEVycm9yJDEoUmVjb2lsX2VycihtZXNzYWdlKSk7XG4gICAgfVxuXG4gICAgZGVwZW5kZW5jeVN0YWNrLnB1c2goa2V5KTtcblxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZm4oKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgZGVwZW5kZW5jeVN0YWNrLnBvcCgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNlbGVjdG9yUGVlayhzdG9yZSwgc3RhdGUpIHtcbiAgICBjb25zdCBjYWNoZWRMb2FkYWJsZSA9IHN0YXRlLmF0b21WYWx1ZXMuZ2V0KGtleSk7XG5cbiAgICBpZiAoY2FjaGVkTG9hZGFibGUgIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGNhY2hlZExvYWRhYmxlO1xuICAgIH1cblxuICAgIHJldHVybiBjYWNoZS5nZXQobm9kZUtleSA9PiB7XG4gICAgICB2YXIgX3BlZWtOb2RlTG9hZGFibGU7XG5cbiAgICAgICEodHlwZW9mIG5vZGVLZXkgPT09ICdzdHJpbmcnKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFJlY29pbF9pbnZhcmlhbnQoZmFsc2UsICdDYWNoZSBub2RlS2V5IGlzIHR5cGUgc3RyaW5nJykgOiBSZWNvaWxfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHJldHVybiAoX3BlZWtOb2RlTG9hZGFibGUgPSBwZWVrTm9kZUxvYWRhYmxlJDEoc3RvcmUsIHN0YXRlLCBub2RlS2V5KSkgPT09IG51bGwgfHwgX3BlZWtOb2RlTG9hZGFibGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9wZWVrTm9kZUxvYWRhYmxlLmNvbnRlbnRzO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gc2VsZWN0b3JHZXQoc3RvcmUsIHN0YXRlKSB7XG4gICAgcmV0dXJuIGRldGVjdENpcmN1bGFyRGVwZW5kZW5jaWVzKCgpID0+IGdldFNlbGVjdG9yTG9hZGFibGVBbmRVcGRhdGVEZXBzKHN0b3JlLCBzdGF0ZSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gaW52YWxpZGF0ZVNlbGVjdG9yKHN0YXRlKSB7XG4gICAgc3RhdGUuYXRvbVZhbHVlcy5kZWxldGUoa2V5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNsZWFyU2VsZWN0b3JDYWNoZShzdG9yZSwgdHJlZVN0YXRlKSB7XG4gICAgIShyZWNvaWxWYWx1ZSAhPSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFJlY29pbF9pbnZhcmlhbnQoZmFsc2UsICdSZWNvaWwgVmFsdWUgY2FuIG5ldmVyIGJlIG51bGwnKSA6IFJlY29pbF9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuXG4gICAgZm9yIChjb25zdCBub2RlS2V5IG9mIGRpc2NvdmVyZWREZXBlbmRlbmN5Tm9kZUtleXMpIHtcbiAgICAgIHZhciBfbm9kZSRjbGVhckNhY2hlO1xuXG4gICAgICBjb25zdCBub2RlID0gZ2V0Tm9kZSQ2KG5vZGVLZXkpO1xuICAgICAgKF9ub2RlJGNsZWFyQ2FjaGUgPSBub2RlLmNsZWFyQ2FjaGUpID09PSBudWxsIHx8IF9ub2RlJGNsZWFyQ2FjaGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9ub2RlJGNsZWFyQ2FjaGUuY2FsbChub2RlLCBzdG9yZSwgdHJlZVN0YXRlKTtcbiAgICB9XG5cbiAgICBkaXNjb3ZlcmVkRGVwZW5kZW5jeU5vZGVLZXlzLmNsZWFyKCk7XG4gICAgaW52YWxpZGF0ZVNlbGVjdG9yKHRyZWVTdGF0ZSk7XG4gICAgY2FjaGUuY2xlYXIoKTtcbiAgICBtYXJrUmVjb2lsVmFsdWVNb2RpZmllZCQxKHN0b3JlLCByZWNvaWxWYWx1ZSk7XG4gIH1cblxuICBpZiAoc2V0ICE9IG51bGwpIHtcbiAgICAvKipcbiAgICAgKiBFUzUgc3RyaWN0IG1vZGUgcHJvaGliaXRzIGRlZmluaW5nIG5vbi10b3AtbGV2ZWwgZnVuY3Rpb24gZGVjbGFyYXRpb25zLFxuICAgICAqIHNvIGRvbid0IHVzZSBmdW5jdGlvbiBkZWNsYXJhdGlvbiBzeW50YXggaGVyZVxuICAgICAqL1xuICAgIGNvbnN0IHNlbGVjdG9yU2V0ID0gKHN0b3JlLCBzdGF0ZSwgbmV3VmFsdWUpID0+IHtcbiAgICAgIGxldCBzeW5jU2VsZWN0b3JTZXRGaW5pc2hlZCA9IGZhbHNlO1xuICAgICAgY29uc3Qgd3JpdGVzID0gbmV3IE1hcCgpO1xuXG4gICAgICBmdW5jdGlvbiBnZXRSZWNvaWxWYWx1ZSh7XG4gICAgICAgIGtleTogZGVwS2V5XG4gICAgICB9KSB7XG4gICAgICAgIGlmIChzeW5jU2VsZWN0b3JTZXRGaW5pc2hlZCkge1xuICAgICAgICAgIHRocm93IFJlY29pbF9lcnIoJ1JlY29pbDogQXN5bmMgc2VsZWN0b3Igc2V0cyBhcmUgbm90IGN1cnJlbnRseSBzdXBwb3J0ZWQuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBsb2FkYWJsZSA9IGdldE5vZGVMb2FkYWJsZSQyKHN0b3JlLCBzdGF0ZSwgZGVwS2V5KTtcblxuICAgICAgICBpZiAobG9hZGFibGUuc3RhdGUgPT09ICdoYXNWYWx1ZScpIHtcbiAgICAgICAgICByZXR1cm4gbG9hZGFibGUuY29udGVudHM7XG4gICAgICAgIH0gZWxzZSBpZiAobG9hZGFibGUuc3RhdGUgPT09ICdsb2FkaW5nJykge1xuICAgICAgICAgIGNvbnN0IG1zZyA9IGBHZXR0aW5nIHZhbHVlIG9mIGFzeW5jaHJvbm91cyBhdG9tIG9yIHNlbGVjdG9yIFwiJHtkZXBLZXl9XCIgaW4gYSBwZW5kaW5nIHN0YXRlIHdoaWxlIHNldHRpbmcgc2VsZWN0b3IgXCIke2tleX1cIiBpcyBub3QgeWV0IHN1cHBvcnRlZC5gO1xuICAgICAgICAgIFJlY29pbF9yZWNvdmVyYWJsZVZpb2xhdGlvbihtc2cpO1xuICAgICAgICAgIHRocm93IFJlY29pbF9lcnIobXNnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBsb2FkYWJsZS5jb250ZW50cztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBzZXRSZWNvaWxTdGF0ZShyZWNvaWxTdGF0ZSwgdmFsdWVPclVwZGF0ZXIpIHtcbiAgICAgICAgaWYgKHN5bmNTZWxlY3RvclNldEZpbmlzaGVkKSB7XG4gICAgICAgICAgY29uc3QgbXNnID0gJ1JlY29pbDogQXN5bmMgc2VsZWN0b3Igc2V0cyBhcmUgbm90IGN1cnJlbnRseSBzdXBwb3J0ZWQuJztcbiAgICAgICAgICBSZWNvaWxfcmVjb3ZlcmFibGVWaW9sYXRpb24obXNnKTtcbiAgICAgICAgICB0aHJvdyBSZWNvaWxfZXJyKG1zZyk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzZXRWYWx1ZSA9IHR5cGVvZiB2YWx1ZU9yVXBkYXRlciA9PT0gJ2Z1bmN0aW9uJyA/IC8vIGNhc3QgdG8gYW55IGJlY2F1c2Ugd2UgY2FuJ3QgcmVzdHJpY3QgdHlwZSBTIGZyb20gYmVpbmcgYSBmdW5jdGlvbiBpdHNlbGYgd2l0aG91dCBsb3Npbmcgc3VwcG9ydCBmb3Igb3BhcXVlIHR5cGVzXG4gICAgICAgIC8vIGZsb3dsaW50LW5leHQtbGluZSB1bmNsZWFyLXR5cGU6b2ZmXG4gICAgICAgIHZhbHVlT3JVcGRhdGVyKGdldFJlY29pbFZhbHVlKHJlY29pbFN0YXRlKSkgOiB2YWx1ZU9yVXBkYXRlcjtcbiAgICAgICAgY29uc3QgdXBzdHJlYW1Xcml0ZXMgPSBzZXROb2RlVmFsdWUkMyhzdG9yZSwgc3RhdGUsIHJlY29pbFN0YXRlLmtleSwgc2V0VmFsdWUpO1xuICAgICAgICB1cHN0cmVhbVdyaXRlcy5mb3JFYWNoKCh2LCBrKSA9PiB3cml0ZXMuc2V0KGssIHYpKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gcmVzZXRSZWNvaWxTdGF0ZShyZWNvaWxTdGF0ZSkge1xuICAgICAgICBzZXRSZWNvaWxTdGF0ZShyZWNvaWxTdGF0ZSwgREVGQVVMVF9WQUxVRSQ2KTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgcmV0ID0gc2V0KHtcbiAgICAgICAgc2V0OiBzZXRSZWNvaWxTdGF0ZSxcbiAgICAgICAgZ2V0OiBnZXRSZWNvaWxWYWx1ZSxcbiAgICAgICAgcmVzZXQ6IHJlc2V0UmVjb2lsU3RhdGVcbiAgICAgIH0sIG5ld1ZhbHVlKTsgLy8gc2V0IHNob3VsZCBiZSBhIHZvaWQgbWV0aG9kLCBidXQgaWYgdGhlIHVzZXIgbWFrZXMgaXQgYGFzeW5jYCwgdGhlbiBpdFxuICAgICAgLy8gd2lsbCByZXR1cm4gYSBQcm9taXNlLCB3aGljaCB3ZSBkb24ndCBjdXJyZW50bHkgc3VwcG9ydC5cblxuICAgICAgaWYgKHJldCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRocm93IFJlY29pbF9pc1Byb21pc2UocmV0KSA/IFJlY29pbF9lcnIoJ1JlY29pbDogQXN5bmMgc2VsZWN0b3Igc2V0cyBhcmUgbm90IGN1cnJlbnRseSBzdXBwb3J0ZWQuJykgOiBSZWNvaWxfZXJyKCdSZWNvaWw6IHNlbGVjdG9yIHNldCBzaG91bGQgYmUgYSB2b2lkIGZ1bmN0aW9uLicpO1xuICAgICAgfVxuXG4gICAgICBzeW5jU2VsZWN0b3JTZXRGaW5pc2hlZCA9IHRydWU7XG4gICAgICByZXR1cm4gd3JpdGVzO1xuICAgIH07XG5cbiAgICByZXR1cm4gcmVjb2lsVmFsdWUgPSByZWdpc3Rlck5vZGUkMSh7XG4gICAgICBrZXksXG4gICAgICBub2RlVHlwZTogJ3NlbGVjdG9yJyxcbiAgICAgIHBlZWs6IHNlbGVjdG9yUGVlayxcbiAgICAgIGdldDogc2VsZWN0b3JHZXQsXG4gICAgICBzZXQ6IHNlbGVjdG9yU2V0LFxuICAgICAgaW5pdDogc2VsZWN0b3JJbml0LFxuICAgICAgaW52YWxpZGF0ZTogaW52YWxpZGF0ZVNlbGVjdG9yLFxuICAgICAgY2xlYXJDYWNoZTogY2xlYXJTZWxlY3RvckNhY2hlLFxuICAgICAgc2hvdWxkRGVsZXRlQ29uZmlnT25SZWxlYXNlOiBzZWxlY3RvclNob3VsZERlbGV0ZUNvbmZpZ09uUmVsZWFzZSxcbiAgICAgIGRhbmdlcm91c2x5QWxsb3dNdXRhYmlsaXR5OiBvcHRpb25zLmRhbmdlcm91c2x5QWxsb3dNdXRhYmlsaXR5LFxuICAgICAgc2hvdWxkUmVzdG9yZUZyb21TbmFwc2hvdHM6IGZhbHNlLFxuICAgICAgcmV0YWluZWRCeVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiByZWNvaWxWYWx1ZSA9IHJlZ2lzdGVyTm9kZSQxKHtcbiAgICAgIGtleSxcbiAgICAgIG5vZGVUeXBlOiAnc2VsZWN0b3InLFxuICAgICAgcGVlazogc2VsZWN0b3JQZWVrLFxuICAgICAgZ2V0OiBzZWxlY3RvckdldCxcbiAgICAgIGluaXQ6IHNlbGVjdG9ySW5pdCxcbiAgICAgIGludmFsaWRhdGU6IGludmFsaWRhdGVTZWxlY3RvcixcbiAgICAgIGNsZWFyQ2FjaGU6IGNsZWFyU2VsZWN0b3JDYWNoZSxcbiAgICAgIHNob3VsZERlbGV0ZUNvbmZpZ09uUmVsZWFzZTogc2VsZWN0b3JTaG91bGREZWxldGVDb25maWdPblJlbGVhc2UsXG4gICAgICBkYW5nZXJvdXNseUFsbG93TXV0YWJpbGl0eTogb3B0aW9ucy5kYW5nZXJvdXNseUFsbG93TXV0YWJpbGl0eSxcbiAgICAgIHNob3VsZFJlc3RvcmVGcm9tU25hcHNob3RzOiBmYWxzZSxcbiAgICAgIHJldGFpbmVkQnlcbiAgICB9KTtcbiAgfVxufVxuLyogZXNsaW50LWVuYWJsZSBuby1yZWRlY2xhcmUgKi9cbi8vICRGbG93SXNzdWVbaW5jb21wYXRpYmxlLXVzZV1cbi8vICRGbG93Rml4TWVbbWlzc2luZy1sb2NhbC1hbm5vdF1cblxuXG5zZWxlY3Rvci52YWx1ZSA9IHZhbHVlID0+IG5ldyBXcmFwcGVkVmFsdWUkMSh2YWx1ZSk7XG5cbnZhciBSZWNvaWxfc2VsZWN0b3IgPSBzZWxlY3RvcjtcblxuLy8gQGZiLW9ubHk6IGltcG9ydCB0eXBlIHtTY29wZVJ1bGVzfSBmcm9tICdSZWNvaWxfU2NvcGVkQXRvbSc7XG4vLyBAZmItb25seTogY29uc3Qge3Njb3BlZEF0b219ID0gcmVxdWlyZSgnUmVjb2lsX1Njb3BlZEF0b20nKTtcbmNvbnN0IHtcbiAgaXNMb2FkYWJsZTogaXNMb2FkYWJsZSQyLFxuICBsb2FkYWJsZVdpdGhFcnJvcjogbG9hZGFibGVXaXRoRXJyb3IkMixcbiAgbG9hZGFibGVXaXRoUHJvbWlzZTogbG9hZGFibGVXaXRoUHJvbWlzZSQyLFxuICBsb2FkYWJsZVdpdGhWYWx1ZTogbG9hZGFibGVXaXRoVmFsdWUkM1xufSA9IFJlY29pbF9Mb2FkYWJsZSQxO1xuXG5jb25zdCB7XG4gIFdyYXBwZWRWYWx1ZTogV3JhcHBlZFZhbHVlJDJcbn0gPSBSZWNvaWxfV3JhcHBlciQxO1xuXG5jb25zdCB7XG4gIHBlZWtOb2RlSW5mbzogcGVla05vZGVJbmZvJDNcbn0gPSBSZWNvaWxfRnVuY3Rpb25hbENvcmU7XG5cbmNvbnN0IHtcbiAgREVGQVVMVF9WQUxVRTogREVGQVVMVF9WQUxVRSQ3LFxuICBEZWZhdWx0VmFsdWU6IERlZmF1bHRWYWx1ZSQyLFxuICBnZXRDb25maWdEZWxldGlvbkhhbmRsZXI6IGdldENvbmZpZ0RlbGV0aW9uSGFuZGxlciQyLFxuICByZWdpc3Rlck5vZGU6IHJlZ2lzdGVyTm9kZSQyLFxuICBzZXRDb25maWdEZWxldGlvbkhhbmRsZXI6IHNldENvbmZpZ0RlbGV0aW9uSGFuZGxlciQxXG59ID0gUmVjb2lsX05vZGU7XG5cbmNvbnN0IHtcbiAgaXNSZWNvaWxWYWx1ZTogaXNSZWNvaWxWYWx1ZSQ0XG59ID0gUmVjb2lsX1JlY29pbFZhbHVlJDE7XG5cbmNvbnN0IHtcbiAgZ2V0UmVjb2lsVmFsdWVBc0xvYWRhYmxlOiBnZXRSZWNvaWxWYWx1ZUFzTG9hZGFibGUkNCxcbiAgbWFya1JlY29pbFZhbHVlTW9kaWZpZWQ6IG1hcmtSZWNvaWxWYWx1ZU1vZGlmaWVkJDIsXG4gIHNldFJlY29pbFZhbHVlOiBzZXRSZWNvaWxWYWx1ZSQ0LFxuICBzZXRSZWNvaWxWYWx1ZUxvYWRhYmxlOiBzZXRSZWNvaWxWYWx1ZUxvYWRhYmxlJDJcbn0gPSBSZWNvaWxfUmVjb2lsVmFsdWVJbnRlcmZhY2U7XG5cbmNvbnN0IHtcbiAgcmV0YWluZWRCeU9wdGlvbldpdGhEZWZhdWx0OiByZXRhaW5lZEJ5T3B0aW9uV2l0aERlZmF1bHQkMlxufSA9IFJlY29pbF9SZXRlbnRpb247XG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5jb25zdCB1bndyYXAgPSB4ID0+IHggaW5zdGFuY2VvZiBXcmFwcGVkVmFsdWUkMiA/IHgudmFsdWUgOiB4O1xuXG5mdW5jdGlvbiBiYXNlQXRvbShvcHRpb25zKSB7XG4gIGNvbnN0IHtcbiAgICBrZXksXG4gICAgcGVyc2lzdGVuY2VfVU5TVEFCTEU6IHBlcnNpc3RlbmNlXG4gIH0gPSBvcHRpb25zO1xuICBjb25zdCByZXRhaW5lZEJ5ID0gcmV0YWluZWRCeU9wdGlvbldpdGhEZWZhdWx0JDIob3B0aW9ucy5yZXRhaW5lZEJ5X1VOU1RBQkxFKTtcbiAgbGV0IGxpdmVTdG9yZXNDb3VudCA9IDA7XG5cbiAgZnVuY3Rpb24gdW53cmFwUHJvbWlzZShwcm9taXNlKSB7XG4gICAgcmV0dXJuIGxvYWRhYmxlV2l0aFByb21pc2UkMihwcm9taXNlLnRoZW4odmFsdWUgPT4ge1xuICAgICAgZGVmYXVsdExvYWRhYmxlID0gbG9hZGFibGVXaXRoVmFsdWUkMyh2YWx1ZSk7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSkuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgZGVmYXVsdExvYWRhYmxlID0gbG9hZGFibGVXaXRoRXJyb3IkMihlcnJvcik7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9KSk7XG4gIH1cblxuICBsZXQgZGVmYXVsdExvYWRhYmxlID0gUmVjb2lsX2lzUHJvbWlzZShvcHRpb25zLmRlZmF1bHQpID8gdW53cmFwUHJvbWlzZShvcHRpb25zLmRlZmF1bHQpIDogaXNMb2FkYWJsZSQyKG9wdGlvbnMuZGVmYXVsdCkgPyBvcHRpb25zLmRlZmF1bHQuc3RhdGUgPT09ICdsb2FkaW5nJyA/IHVud3JhcFByb21pc2Uob3B0aW9ucy5kZWZhdWx0LmNvbnRlbnRzKSA6IG9wdGlvbnMuZGVmYXVsdCA6IGxvYWRhYmxlV2l0aFZhbHVlJDModW53cmFwKG9wdGlvbnMuZGVmYXVsdCkpO1xuICBtYXliZUZyZWV6ZVZhbHVlT3JQcm9taXNlKGRlZmF1bHRMb2FkYWJsZS5jb250ZW50cyk7XG4gIGxldCBjYWNoZWRBbnN3ZXJGb3JVbnZhbGlkYXRlZFZhbHVlID0gdW5kZWZpbmVkOyAvLyBDbGVhbnVwIGhhbmRsZXJzIGZvciB0aGlzIGF0b21cbiAgLy8gUmVseSBvbiBzdGFibGUgcmVmZXJlbmNlIGVxdWFsaXR5IG9mIHRoZSBzdG9yZSB0byB1c2UgaXQgYXMgYSBrZXkgcGVyIDxSZWNvaWxSb290PlxuXG4gIGNvbnN0IGNsZWFudXBFZmZlY3RzQnlTdG9yZSA9IG5ldyBNYXAoKTtcblxuICBmdW5jdGlvbiBtYXliZUZyZWV6ZVZhbHVlT3JQcm9taXNlKHZhbHVlT3JQcm9taXNlKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgaWYgKG9wdGlvbnMuZGFuZ2Vyb3VzbHlBbGxvd011dGFiaWxpdHkgIT09IHRydWUpIHtcbiAgICAgICAgaWYgKFJlY29pbF9pc1Byb21pc2UodmFsdWVPclByb21pc2UpKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlT3JQcm9taXNlLnRoZW4odmFsdWUgPT4ge1xuICAgICAgICAgICAgUmVjb2lsX2RlZXBGcmVlemVWYWx1ZSh2YWx1ZSk7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgUmVjb2lsX2RlZXBGcmVlemVWYWx1ZSh2YWx1ZU9yUHJvbWlzZSk7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlT3JQcm9taXNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlT3JQcm9taXNlO1xuICB9XG5cbiAgZnVuY3Rpb24gd3JhcFBlbmRpbmdQcm9taXNlKHN0b3JlLCBwcm9taXNlKSB7XG4gICAgY29uc3Qgd3JhcHBlZFByb21pc2UgPSBwcm9taXNlLnRoZW4odmFsdWUgPT4ge1xuICAgICAgdmFyIF9zdG9yZSRnZXRTdGF0ZSRuZXh0VCwgX3N0YXRlJGF0b21WYWx1ZXMkZ2V0O1xuXG4gICAgICBjb25zdCBzdGF0ZSA9IChfc3RvcmUkZ2V0U3RhdGUkbmV4dFQgPSBzdG9yZS5nZXRTdGF0ZSgpLm5leHRUcmVlKSAhPT0gbnVsbCAmJiBfc3RvcmUkZ2V0U3RhdGUkbmV4dFQgIT09IHZvaWQgMCA/IF9zdG9yZSRnZXRTdGF0ZSRuZXh0VCA6IHN0b3JlLmdldFN0YXRlKCkuY3VycmVudFRyZWU7XG5cbiAgICAgIGlmICgoKF9zdGF0ZSRhdG9tVmFsdWVzJGdldCA9IHN0YXRlLmF0b21WYWx1ZXMuZ2V0KGtleSkpID09PSBudWxsIHx8IF9zdGF0ZSRhdG9tVmFsdWVzJGdldCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3N0YXRlJGF0b21WYWx1ZXMkZ2V0LmNvbnRlbnRzKSA9PT0gd3JhcHBlZFByb21pc2UpIHtcbiAgICAgICAgc2V0UmVjb2lsVmFsdWUkNChzdG9yZSwgbm9kZSwgdmFsdWUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSkuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgdmFyIF9zdG9yZSRnZXRTdGF0ZSRuZXh0VDIsIF9zdGF0ZSRhdG9tVmFsdWVzJGdldDI7XG5cbiAgICAgIGNvbnN0IHN0YXRlID0gKF9zdG9yZSRnZXRTdGF0ZSRuZXh0VDIgPSBzdG9yZS5nZXRTdGF0ZSgpLm5leHRUcmVlKSAhPT0gbnVsbCAmJiBfc3RvcmUkZ2V0U3RhdGUkbmV4dFQyICE9PSB2b2lkIDAgPyBfc3RvcmUkZ2V0U3RhdGUkbmV4dFQyIDogc3RvcmUuZ2V0U3RhdGUoKS5jdXJyZW50VHJlZTtcblxuICAgICAgaWYgKCgoX3N0YXRlJGF0b21WYWx1ZXMkZ2V0MiA9IHN0YXRlLmF0b21WYWx1ZXMuZ2V0KGtleSkpID09PSBudWxsIHx8IF9zdGF0ZSRhdG9tVmFsdWVzJGdldDIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9zdGF0ZSRhdG9tVmFsdWVzJGdldDIuY29udGVudHMpID09PSB3cmFwcGVkUHJvbWlzZSkge1xuICAgICAgICBzZXRSZWNvaWxWYWx1ZUxvYWRhYmxlJDIoc3RvcmUsIG5vZGUsIGxvYWRhYmxlV2l0aEVycm9yJDIoZXJyb3IpKTtcbiAgICAgIH1cblxuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfSk7XG4gICAgcmV0dXJuIHdyYXBwZWRQcm9taXNlO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5pdEF0b20oc3RvcmUsIGluaXRTdGF0ZSwgdHJpZ2dlcikge1xuICAgIHZhciBfb3B0aW9ucyRlZmZlY3RzO1xuXG4gICAgbGl2ZVN0b3Jlc0NvdW50Kys7XG5cbiAgICBjb25zdCBjbGVhbnVwQXRvbSA9ICgpID0+IHtcbiAgICAgIHZhciBfY2xlYW51cEVmZmVjdHNCeVN0b3I7XG5cbiAgICAgIGxpdmVTdG9yZXNDb3VudC0tO1xuICAgICAgKF9jbGVhbnVwRWZmZWN0c0J5U3RvciA9IGNsZWFudXBFZmZlY3RzQnlTdG9yZS5nZXQoc3RvcmUpKSA9PT0gbnVsbCB8fCBfY2xlYW51cEVmZmVjdHNCeVN0b3IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jbGVhbnVwRWZmZWN0c0J5U3Rvci5mb3JFYWNoKGNsZWFudXAgPT4gY2xlYW51cCgpKTtcbiAgICAgIGNsZWFudXBFZmZlY3RzQnlTdG9yZS5kZWxldGUoc3RvcmUpO1xuICAgIH07XG5cbiAgICBzdG9yZS5nZXRTdGF0ZSgpLmtub3duQXRvbXMuYWRkKGtleSk7IC8vIFNldHVwIGFzeW5jIGRlZmF1bHRzIHRvIG5vdGlmeSBzdWJzY3JpYmVycyB3aGVuIHRoZXkgcmVzb2x2ZVxuXG4gICAgaWYgKGRlZmF1bHRMb2FkYWJsZS5zdGF0ZSA9PT0gJ2xvYWRpbmcnKSB7XG4gICAgICBjb25zdCBub3RpZnlEZWZhdWx0U3Vic2NyaWJlcnMgPSAoKSA9PiB7XG4gICAgICAgIHZhciBfc3RvcmUkZ2V0U3RhdGUkbmV4dFQzO1xuXG4gICAgICAgIGNvbnN0IHN0YXRlID0gKF9zdG9yZSRnZXRTdGF0ZSRuZXh0VDMgPSBzdG9yZS5nZXRTdGF0ZSgpLm5leHRUcmVlKSAhPT0gbnVsbCAmJiBfc3RvcmUkZ2V0U3RhdGUkbmV4dFQzICE9PSB2b2lkIDAgPyBfc3RvcmUkZ2V0U3RhdGUkbmV4dFQzIDogc3RvcmUuZ2V0U3RhdGUoKS5jdXJyZW50VHJlZTtcblxuICAgICAgICBpZiAoIXN0YXRlLmF0b21WYWx1ZXMuaGFzKGtleSkpIHtcbiAgICAgICAgICBtYXJrUmVjb2lsVmFsdWVNb2RpZmllZCQyKHN0b3JlLCBub2RlKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgZGVmYXVsdExvYWRhYmxlLmNvbnRlbnRzLmZpbmFsbHkobm90aWZ5RGVmYXVsdFN1YnNjcmliZXJzKTtcbiAgICB9IC8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAvLyBSdW4gQXRvbSBFZmZlY3RzXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5cbiAgICBjb25zdCBlZmZlY3RzID0gKF9vcHRpb25zJGVmZmVjdHMgPSBvcHRpb25zLmVmZmVjdHMpICE9PSBudWxsICYmIF9vcHRpb25zJGVmZmVjdHMgIT09IHZvaWQgMCA/IF9vcHRpb25zJGVmZmVjdHMgOiBvcHRpb25zLmVmZmVjdHNfVU5TVEFCTEU7XG5cbiAgICBpZiAoZWZmZWN0cyAhPSBudWxsKSB7XG4gICAgICAvLyBUaGlzIHN0YXRlIGlzIHNjb3BlZCBieSBTdG9yZSwgc2luY2UgdGhpcyBpcyBpbiB0aGUgaW5pdEF0b20oKSBjbG9zdXJlXG4gICAgICBsZXQgaW5pdFZhbHVlID0gREVGQVVMVF9WQUxVRSQ3O1xuICAgICAgbGV0IGlzRHVyaW5nSW5pdCA9IHRydWU7XG4gICAgICBsZXQgaXNJbml0RXJyb3IgPSBmYWxzZTtcbiAgICAgIGxldCBwZW5kaW5nU2V0U2VsZiA9IG51bGw7XG5cbiAgICAgIGZ1bmN0aW9uIGdldExvYWRhYmxlKHJlY29pbFZhbHVlKSB7XG4gICAgICAgIC8vIE5vcm1hbGx5IHdlIGNhbiBqdXN0IGdldCB0aGUgY3VycmVudCB2YWx1ZSBvZiBhbm90aGVyIGF0b20uXG4gICAgICAgIC8vIEJ1dCBmb3Igb3VyIG93biB2YWx1ZSB3ZSBuZWVkIHRvIGNoZWNrIGlmIHRoZXJlIGlzIGEgcGVuZGluZ1xuICAgICAgICAvLyBpbml0aWFsaXplZCB2YWx1ZSBvciBnZXQgdGhlIGZhbGxiYWNrIGRlZmF1bHQgdmFsdWUuXG4gICAgICAgIGlmIChpc0R1cmluZ0luaXQgJiYgcmVjb2lsVmFsdWUua2V5ID09PSBrZXkpIHtcbiAgICAgICAgICAvLyBDYXN0IFQgdG8gU1xuICAgICAgICAgIGNvbnN0IHJldFZhbHVlID0gaW5pdFZhbHVlOyAvLyBmbG93bGludC1saW5lIHVuY2xlYXItdHlwZTpvZmZcblxuICAgICAgICAgIHJldHVybiByZXRWYWx1ZSBpbnN0YW5jZW9mIERlZmF1bHRWYWx1ZSQyID8gcGVla0F0b20oc3RvcmUsIGluaXRTdGF0ZSkgLy8gZmxvd2xpbnQtbGluZSB1bmNsZWFyLXR5cGU6b2ZmXG4gICAgICAgICAgOiBSZWNvaWxfaXNQcm9taXNlKHJldFZhbHVlKSA/IGxvYWRhYmxlV2l0aFByb21pc2UkMihyZXRWYWx1ZS50aGVuKHYgPT4gdiBpbnN0YW5jZW9mIERlZmF1bHRWYWx1ZSQyID8gLy8gQ2FzdCBUIHRvIFNcbiAgICAgICAgICBkZWZhdWx0TG9hZGFibGUudG9Qcm9taXNlKCkgLy8gZmxvd2xpbnQtbGluZSB1bmNsZWFyLXR5cGU6b2ZmXG4gICAgICAgICAgOiB2KSkgOiBsb2FkYWJsZVdpdGhWYWx1ZSQzKHJldFZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBnZXRSZWNvaWxWYWx1ZUFzTG9hZGFibGUkNChzdG9yZSwgcmVjb2lsVmFsdWUpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBnZXRQcm9taXNlKHJlY29pbFZhbHVlKSB7XG4gICAgICAgIHJldHVybiBnZXRMb2FkYWJsZShyZWNvaWxWYWx1ZSkudG9Qcm9taXNlKCk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGdldEluZm9fVU5TVEFCTEUocmVjb2lsVmFsdWUpIHtcbiAgICAgICAgdmFyIF9zdG9yZSRnZXRTdGF0ZSRuZXh0VDQ7XG5cbiAgICAgICAgY29uc3QgaW5mbyA9IHBlZWtOb2RlSW5mbyQzKHN0b3JlLCAoX3N0b3JlJGdldFN0YXRlJG5leHRUNCA9IHN0b3JlLmdldFN0YXRlKCkubmV4dFRyZWUpICE9PSBudWxsICYmIF9zdG9yZSRnZXRTdGF0ZSRuZXh0VDQgIT09IHZvaWQgMCA/IF9zdG9yZSRnZXRTdGF0ZSRuZXh0VDQgOiBzdG9yZS5nZXRTdGF0ZSgpLmN1cnJlbnRUcmVlLCByZWNvaWxWYWx1ZS5rZXkpO1xuICAgICAgICByZXR1cm4gaXNEdXJpbmdJbml0ICYmIHJlY29pbFZhbHVlLmtleSA9PT0ga2V5ICYmICEoaW5pdFZhbHVlIGluc3RhbmNlb2YgRGVmYXVsdFZhbHVlJDIpID8geyAuLi5pbmZvLFxuICAgICAgICAgIGlzU2V0OiB0cnVlLFxuICAgICAgICAgIGxvYWRhYmxlOiBnZXRMb2FkYWJsZShyZWNvaWxWYWx1ZSlcbiAgICAgICAgfSA6IGluZm87XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHNldFNlbGYgPSBlZmZlY3QgPT4gdmFsdWVPclVwZGF0ZXIgPT4ge1xuICAgICAgICBpZiAoaXNEdXJpbmdJbml0KSB7XG4gICAgICAgICAgY29uc3QgY3VycmVudExvYWRhYmxlID0gZ2V0TG9hZGFibGUobm9kZSk7XG4gICAgICAgICAgY29uc3QgY3VycmVudFZhbHVlID0gY3VycmVudExvYWRhYmxlLnN0YXRlID09PSAnaGFzVmFsdWUnID8gY3VycmVudExvYWRhYmxlLmNvbnRlbnRzIDogREVGQVVMVF9WQUxVRSQ3O1xuICAgICAgICAgIGluaXRWYWx1ZSA9IHR5cGVvZiB2YWx1ZU9yVXBkYXRlciA9PT0gJ2Z1bmN0aW9uJyA/IC8vIGNhc3QgdG8gYW55IGJlY2F1c2Ugd2UgY2FuJ3QgcmVzdHJpY3QgVCBmcm9tIGJlaW5nIGEgZnVuY3Rpb24gd2l0aG91dCBsb3Npbmcgc3VwcG9ydCBmb3Igb3BhcXVlIHR5cGVzXG4gICAgICAgICAgdmFsdWVPclVwZGF0ZXIoY3VycmVudFZhbHVlKSAvLyBmbG93bGludC1saW5lIHVuY2xlYXItdHlwZTpvZmZcbiAgICAgICAgICA6IHZhbHVlT3JVcGRhdGVyO1xuXG4gICAgICAgICAgaWYgKFJlY29pbF9pc1Byb21pc2UoaW5pdFZhbHVlKSkge1xuICAgICAgICAgICAgaW5pdFZhbHVlID0gaW5pdFZhbHVlLnRoZW4odmFsdWUgPT4ge1xuICAgICAgICAgICAgICAvLyBBdm9pZCBjYWxsaW5nIG9uU2V0KCkgd2hlbiBzZXRTZWxmKCkgaW5pdGlhbGl6ZXMgd2l0aCBhIFByb21pc2VcbiAgICAgICAgICAgICAgcGVuZGluZ1NldFNlbGYgPSB7XG4gICAgICAgICAgICAgICAgZWZmZWN0LFxuICAgICAgICAgICAgICAgIHZhbHVlXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoUmVjb2lsX2lzUHJvbWlzZSh2YWx1ZU9yVXBkYXRlcikpIHtcbiAgICAgICAgICAgIHRocm93IFJlY29pbF9lcnIoJ1NldHRpbmcgYXRvbXMgdG8gYXN5bmMgdmFsdWVzIGlzIG5vdCBpbXBsZW1lbnRlZC4nKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlT3JVcGRhdGVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBwZW5kaW5nU2V0U2VsZiA9IHtcbiAgICAgICAgICAgICAgZWZmZWN0LFxuICAgICAgICAgICAgICB2YWx1ZTogdW53cmFwKHZhbHVlT3JVcGRhdGVyKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzZXRSZWNvaWxWYWx1ZSQ0KHN0b3JlLCBub2RlLCB0eXBlb2YgdmFsdWVPclVwZGF0ZXIgPT09ICdmdW5jdGlvbicgPyBjdXJyZW50VmFsdWUgPT4ge1xuICAgICAgICAgICAgY29uc3QgbmV3VmFsdWUgPSB1bndyYXAoIC8vIGNhc3QgdG8gYW55IGJlY2F1c2Ugd2UgY2FuJ3QgcmVzdHJpY3QgVCBmcm9tIGJlaW5nIGEgZnVuY3Rpb24gd2l0aG91dCBsb3Npbmcgc3VwcG9ydCBmb3Igb3BhcXVlIHR5cGVzXG4gICAgICAgICAgICB2YWx1ZU9yVXBkYXRlcihjdXJyZW50VmFsdWUpIC8vIGZsb3dsaW50LWxpbmUgdW5jbGVhci10eXBlOm9mZlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHBlbmRpbmdTZXRTZWxmID0ge1xuICAgICAgICAgICAgICBlZmZlY3QsXG4gICAgICAgICAgICAgIHZhbHVlOiBuZXdWYWx1ZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBuZXdWYWx1ZTtcbiAgICAgICAgICB9IDogdW53cmFwKHZhbHVlT3JVcGRhdGVyKSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHJlc2V0U2VsZiA9IGVmZmVjdCA9PiAoKSA9PiBzZXRTZWxmKGVmZmVjdCkoREVGQVVMVF9WQUxVRSQ3KTtcblxuICAgICAgY29uc3Qgb25TZXQgPSBlZmZlY3QgPT4gaGFuZGxlciA9PiB7XG4gICAgICAgIHZhciBfY2xlYW51cEVmZmVjdHNCeVN0b3IyO1xuXG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICByZWxlYXNlXG4gICAgICAgIH0gPSBzdG9yZS5zdWJzY3JpYmVUb1RyYW5zYWN0aW9ucyhjdXJyZW50U3RvcmUgPT4ge1xuICAgICAgICAgIHZhciBfY3VycmVudFRyZWUkYXRvbVZhbHU7XG5cbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWNvbnN0XG4gICAgICAgICAgbGV0IHtcbiAgICAgICAgICAgIGN1cnJlbnRUcmVlLFxuICAgICAgICAgICAgcHJldmlvdXNUcmVlXG4gICAgICAgICAgfSA9IGN1cnJlbnRTdG9yZS5nZXRTdGF0ZSgpO1xuXG4gICAgICAgICAgaWYgKCFwcmV2aW91c1RyZWUpIHtcbiAgICAgICAgICAgIFJlY29pbF9yZWNvdmVyYWJsZVZpb2xhdGlvbignVHJhbnNhY3Rpb24gc3Vic2NyaWJlcnMgbm90aWZpZWQgd2l0aG91dCBhIG5leHQgdHJlZSBiZWluZyBwcmVzZW50IC0tIHRoaXMgaXMgYSBidWcgaW4gUmVjb2lsJyk7XG4gICAgICAgICAgICBwcmV2aW91c1RyZWUgPSBjdXJyZW50VHJlZTsgLy8gYXR0ZW1wdCB0byB0cnVuZGxlIG9uXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3QgbmV3TG9hZGFibGUgPSAoX2N1cnJlbnRUcmVlJGF0b21WYWx1ID0gY3VycmVudFRyZWUuYXRvbVZhbHVlcy5nZXQoa2V5KSkgIT09IG51bGwgJiYgX2N1cnJlbnRUcmVlJGF0b21WYWx1ICE9PSB2b2lkIDAgPyBfY3VycmVudFRyZWUkYXRvbVZhbHUgOiBkZWZhdWx0TG9hZGFibGU7XG5cbiAgICAgICAgICBpZiAobmV3TG9hZGFibGUuc3RhdGUgPT09ICdoYXNWYWx1ZScpIHtcbiAgICAgICAgICAgIHZhciBfcHJldmlvdXNUcmVlJGF0b21WYWwsIF9wZW5kaW5nU2V0U2VsZiwgX3BlbmRpbmdTZXRTZWxmMiwgX3BlbmRpbmdTZXRTZWxmMztcblxuICAgICAgICAgICAgY29uc3QgbmV3VmFsdWUgPSBuZXdMb2FkYWJsZS5jb250ZW50cztcbiAgICAgICAgICAgIGNvbnN0IG9sZExvYWRhYmxlID0gKF9wcmV2aW91c1RyZWUkYXRvbVZhbCA9IHByZXZpb3VzVHJlZS5hdG9tVmFsdWVzLmdldChrZXkpKSAhPT0gbnVsbCAmJiBfcHJldmlvdXNUcmVlJGF0b21WYWwgIT09IHZvaWQgMCA/IF9wcmV2aW91c1RyZWUkYXRvbVZhbCA6IGRlZmF1bHRMb2FkYWJsZTtcbiAgICAgICAgICAgIGNvbnN0IG9sZFZhbHVlID0gb2xkTG9hZGFibGUuc3RhdGUgPT09ICdoYXNWYWx1ZScgPyBvbGRMb2FkYWJsZS5jb250ZW50cyA6IERFRkFVTFRfVkFMVUUkNzsgLy8gVE9ETyBUaGlzIGlzbid0IGFjdHVhbGx5IHZhbGlkLCB1c2UgYXMgYSBwbGFjZWhvbGRlciBmb3Igbm93LlxuICAgICAgICAgICAgLy8gSWdub3JlIGF0b20gdmFsdWUgY2hhbmdlcyB0aGF0IHdlcmUgc2V0IHZpYSBzZXRTZWxmKCkgaW4gdGhlIHNhbWUgZWZmZWN0LlxuICAgICAgICAgICAgLy8gV2Ugd2lsbCBzdGlsbCBwcm9wZXJseSBjYWxsIHRoZSBoYW5kbGVyIGlmIHRoZXJlIHdhcyBhIHN1YnNlcXVlbnRcbiAgICAgICAgICAgIC8vIHNldCBmcm9tIHNvbWV0aGluZyBvdGhlciB0aGFuIGFuIGF0b20gZWZmZWN0IHdoaWNoIHdhcyBiYXRjaGVkXG4gICAgICAgICAgICAvLyB3aXRoIHRoZSBgc2V0U2VsZigpYCBjYWxsLiAgSG93ZXZlciwgd2UgbWF5IGluY29ycmVjdGx5IGlnbm9yZVxuICAgICAgICAgICAgLy8gdGhlIGhhbmRsZXIgaWYgdGhlIHN1YnNlcXVlbnQgYmF0Y2hlZCBjYWxsIGhhcHBlbnMgdG8gc2V0IHRoZVxuICAgICAgICAgICAgLy8gYXRvbSB0byB0aGUgZXhhY3Qgc2FtZSB2YWx1ZSBhcyB0aGUgYHNldFNlbGYoKWAuICAgQnV0LCBpbiB0aGF0XG4gICAgICAgICAgICAvLyBjYXNlLCBpdCB3YXMga2luZCBvZiBhIG5vb3AsIHNvIHRoZSBzZW1hbnRpY3MgYXJlIGRlYmF0YWJsZS4uXG5cbiAgICAgICAgICAgIGlmICgoKF9wZW5kaW5nU2V0U2VsZiA9IHBlbmRpbmdTZXRTZWxmKSA9PT0gbnVsbCB8fCBfcGVuZGluZ1NldFNlbGYgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9wZW5kaW5nU2V0U2VsZi5lZmZlY3QpICE9PSBlZmZlY3QgfHwgKChfcGVuZGluZ1NldFNlbGYyID0gcGVuZGluZ1NldFNlbGYpID09PSBudWxsIHx8IF9wZW5kaW5nU2V0U2VsZjIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9wZW5kaW5nU2V0U2VsZjIudmFsdWUpICE9PSBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgICBoYW5kbGVyKG5ld1ZhbHVlLCBvbGRWYWx1ZSwgIWN1cnJlbnRUcmVlLmF0b21WYWx1ZXMuaGFzKGtleSkpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICgoKF9wZW5kaW5nU2V0U2VsZjMgPSBwZW5kaW5nU2V0U2VsZikgPT09IG51bGwgfHwgX3BlbmRpbmdTZXRTZWxmMyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3BlbmRpbmdTZXRTZWxmMy5lZmZlY3QpID09PSBlZmZlY3QpIHtcbiAgICAgICAgICAgICAgcGVuZGluZ1NldFNlbGYgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSwga2V5KTtcbiAgICAgICAgY2xlYW51cEVmZmVjdHNCeVN0b3JlLnNldChzdG9yZSwgWy4uLigoX2NsZWFudXBFZmZlY3RzQnlTdG9yMiA9IGNsZWFudXBFZmZlY3RzQnlTdG9yZS5nZXQoc3RvcmUpKSAhPT0gbnVsbCAmJiBfY2xlYW51cEVmZmVjdHNCeVN0b3IyICE9PSB2b2lkIDAgPyBfY2xlYW51cEVmZmVjdHNCeVN0b3IyIDogW10pLCByZWxlYXNlXSk7XG4gICAgICB9O1xuXG4gICAgICBmb3IgKGNvbnN0IGVmZmVjdCBvZiBlZmZlY3RzKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgY2xlYW51cCA9IGVmZmVjdCh7XG4gICAgICAgICAgICBub2RlLFxuICAgICAgICAgICAgc3RvcmVJRDogc3RvcmUuc3RvcmVJRCxcbiAgICAgICAgICAgIHBhcmVudFN0b3JlSURfVU5TVEFCTEU6IHN0b3JlLnBhcmVudFN0b3JlSUQsXG4gICAgICAgICAgICB0cmlnZ2VyLFxuICAgICAgICAgICAgc2V0U2VsZjogc2V0U2VsZihlZmZlY3QpLFxuICAgICAgICAgICAgcmVzZXRTZWxmOiByZXNldFNlbGYoZWZmZWN0KSxcbiAgICAgICAgICAgIG9uU2V0OiBvblNldChlZmZlY3QpLFxuICAgICAgICAgICAgZ2V0UHJvbWlzZSxcbiAgICAgICAgICAgIGdldExvYWRhYmxlLFxuICAgICAgICAgICAgZ2V0SW5mb19VTlNUQUJMRVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaWYgKGNsZWFudXAgIT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIF9jbGVhbnVwRWZmZWN0c0J5U3RvcjM7XG5cbiAgICAgICAgICAgIGNsZWFudXBFZmZlY3RzQnlTdG9yZS5zZXQoc3RvcmUsIFsuLi4oKF9jbGVhbnVwRWZmZWN0c0J5U3RvcjMgPSBjbGVhbnVwRWZmZWN0c0J5U3RvcmUuZ2V0KHN0b3JlKSkgIT09IG51bGwgJiYgX2NsZWFudXBFZmZlY3RzQnlTdG9yMyAhPT0gdm9pZCAwID8gX2NsZWFudXBFZmZlY3RzQnlTdG9yMyA6IFtdKSwgY2xlYW51cF0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBpbml0VmFsdWUgPSBlcnJvcjtcbiAgICAgICAgICBpc0luaXRFcnJvciA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaXNEdXJpbmdJbml0ID0gZmFsc2U7IC8vIE11dGF0ZSBpbml0aWFsIHN0YXRlIGluIHBsYWNlIHNpbmNlIHdlIGtub3cgdGhlcmUgYXJlIG5vIG90aGVyIHN1YnNjcmliZXJzXG4gICAgICAvLyBzaW5jZSB3ZSBhcmUgdGhlIG9uZXMgaW5pdGlhbGl6aW5nIG9uIGZpcnN0IHVzZS5cblxuICAgICAgaWYgKCEoaW5pdFZhbHVlIGluc3RhbmNlb2YgRGVmYXVsdFZhbHVlJDIpKSB7XG4gICAgICAgIHZhciBfc3RvcmUkZ2V0U3RhdGUkbmV4dFQ1O1xuXG4gICAgICAgIGNvbnN0IGluaXRMb2FkYWJsZSA9IGlzSW5pdEVycm9yID8gbG9hZGFibGVXaXRoRXJyb3IkMihpbml0VmFsdWUpIDogUmVjb2lsX2lzUHJvbWlzZShpbml0VmFsdWUpID8gbG9hZGFibGVXaXRoUHJvbWlzZSQyKHdyYXBQZW5kaW5nUHJvbWlzZShzdG9yZSwgaW5pdFZhbHVlKSkgOiBsb2FkYWJsZVdpdGhWYWx1ZSQzKHVud3JhcChpbml0VmFsdWUpKTtcbiAgICAgICAgbWF5YmVGcmVlemVWYWx1ZU9yUHJvbWlzZShpbml0TG9hZGFibGUuY29udGVudHMpO1xuICAgICAgICBpbml0U3RhdGUuYXRvbVZhbHVlcy5zZXQoa2V5LCBpbml0TG9hZGFibGUpOyAvLyBJZiB0aGVyZSBpcyBhIHBlbmRpbmcgdHJhbnNhY3Rpb24sIHRoZW4gYWxzbyBtdXRhdGUgdGhlIG5leHQgc3RhdGUgdHJlZS5cbiAgICAgICAgLy8gVGhpcyBjb3VsZCBoYXBwZW4gaWYgdGhlIGF0b20gd2FzIGZpcnN0IGluaXRpYWxpemVkIGluIGFuIGFjdGlvbiB0aGF0XG4gICAgICAgIC8vIGFsc28gdXBkYXRlZCBzb21lIG90aGVyIGF0b20ncyBzdGF0ZS5cblxuICAgICAgICAoX3N0b3JlJGdldFN0YXRlJG5leHRUNSA9IHN0b3JlLmdldFN0YXRlKCkubmV4dFRyZWUpID09PSBudWxsIHx8IF9zdG9yZSRnZXRTdGF0ZSRuZXh0VDUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9zdG9yZSRnZXRTdGF0ZSRuZXh0VDUuYXRvbVZhbHVlcy5zZXQoa2V5LCBpbml0TG9hZGFibGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBjbGVhbnVwQXRvbTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZWtBdG9tKF9zdG9yZSwgc3RhdGUpIHtcbiAgICB2YXIgX3JlZiwgX3N0YXRlJGF0b21WYWx1ZXMkZ2V0MztcblxuICAgIHJldHVybiAoX3JlZiA9IChfc3RhdGUkYXRvbVZhbHVlcyRnZXQzID0gc3RhdGUuYXRvbVZhbHVlcy5nZXQoa2V5KSkgIT09IG51bGwgJiYgX3N0YXRlJGF0b21WYWx1ZXMkZ2V0MyAhPT0gdm9pZCAwID8gX3N0YXRlJGF0b21WYWx1ZXMkZ2V0MyA6IGNhY2hlZEFuc3dlckZvclVudmFsaWRhdGVkVmFsdWUpICE9PSBudWxsICYmIF9yZWYgIT09IHZvaWQgMCA/IF9yZWYgOiBkZWZhdWx0TG9hZGFibGU7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRBdG9tKF9zdG9yZSwgc3RhdGUpIHtcbiAgICBpZiAoc3RhdGUuYXRvbVZhbHVlcy5oYXMoa2V5KSkge1xuICAgICAgLy8gQXRvbSB2YWx1ZSBpcyBzdG9yZWQgaW4gc3RhdGU6XG4gICAgICByZXR1cm4gUmVjb2lsX251bGx0aHJvd3Moc3RhdGUuYXRvbVZhbHVlcy5nZXQoa2V5KSk7XG4gICAgfSBlbHNlIGlmIChzdGF0ZS5ub252YWxpZGF0ZWRBdG9tcy5oYXMoa2V5KSkge1xuICAgICAgLy8gQXRvbSB2YWx1ZSBpcyBzdG9yZWQgYnV0IG5lZWRzIHZhbGlkYXRpb24gYmVmb3JlIHVzZS5cbiAgICAgIC8vIFdlIG1pZ2h0IGhhdmUgYWxyZWFkeSB2YWxpZGF0ZWQgaXQgYW5kIGhhdmUgYSBjYWNoZWQgdmFsaWRhdGVkIHZhbHVlOlxuICAgICAgaWYgKGNhY2hlZEFuc3dlckZvclVudmFsaWRhdGVkVmFsdWUgIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gY2FjaGVkQW5zd2VyRm9yVW52YWxpZGF0ZWRWYWx1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHBlcnNpc3RlbmNlID09IG51bGwpIHtcbiAgICAgICAgUmVjb2lsX2V4cGVjdGF0aW9uVmlvbGF0aW9uKGBUcmllZCB0byByZXN0b3JlIGEgcGVyc2lzdGVkIHZhbHVlIGZvciBhdG9tICR7a2V5fSBidXQgaXQgaGFzIG5vIHBlcnNpc3RlbmNlIHNldHRpbmdzLmApO1xuICAgICAgICByZXR1cm4gZGVmYXVsdExvYWRhYmxlO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBub252YWxpZGF0ZWRWYWx1ZSA9IHN0YXRlLm5vbnZhbGlkYXRlZEF0b21zLmdldChrZXkpO1xuICAgICAgY29uc3QgdmFsaWRhdG9yUmVzdWx0ID0gcGVyc2lzdGVuY2UudmFsaWRhdG9yKG5vbnZhbGlkYXRlZFZhbHVlLCBERUZBVUxUX1ZBTFVFJDcpO1xuICAgICAgY29uc3QgdmFsaWRhdGVkVmFsdWVMb2FkYWJsZSA9IHZhbGlkYXRvclJlc3VsdCBpbnN0YW5jZW9mIERlZmF1bHRWYWx1ZSQyID8gZGVmYXVsdExvYWRhYmxlIDogbG9hZGFibGVXaXRoVmFsdWUkMyh2YWxpZGF0b3JSZXN1bHQpO1xuICAgICAgY2FjaGVkQW5zd2VyRm9yVW52YWxpZGF0ZWRWYWx1ZSA9IHZhbGlkYXRlZFZhbHVlTG9hZGFibGU7XG4gICAgICByZXR1cm4gY2FjaGVkQW5zd2VyRm9yVW52YWxpZGF0ZWRWYWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGRlZmF1bHRMb2FkYWJsZTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbnZhbGlkYXRlQXRvbSgpIHtcbiAgICBjYWNoZWRBbnN3ZXJGb3JVbnZhbGlkYXRlZFZhbHVlID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgZnVuY3Rpb24gc2V0QXRvbShfc3RvcmUsIHN0YXRlLCBuZXdWYWx1ZSkge1xuICAgIC8vIEJhaWwgb3V0IGlmIHdlJ3JlIGJlaW5nIHNldCB0byB0aGUgZXhpc3RpbmcgdmFsdWUsIG9yIGlmIHdlJ3JlIGJlaW5nXG4gICAgLy8gcmVzZXQgYnV0IGhhdmUgbm8gc3RvcmVkIHZhbHVlICh2YWxpZGF0ZWQgb3IgdW52YWxpZGF0ZWQpIHRvIHJlc2V0IGZyb206XG4gICAgaWYgKHN0YXRlLmF0b21WYWx1ZXMuaGFzKGtleSkpIHtcbiAgICAgIGNvbnN0IGV4aXN0aW5nID0gUmVjb2lsX251bGx0aHJvd3Moc3RhdGUuYXRvbVZhbHVlcy5nZXQoa2V5KSk7XG5cbiAgICAgIGlmIChleGlzdGluZy5zdGF0ZSA9PT0gJ2hhc1ZhbHVlJyAmJiBuZXdWYWx1ZSA9PT0gZXhpc3RpbmcuY29udGVudHMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBNYXAoKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFzdGF0ZS5ub252YWxpZGF0ZWRBdG9tcy5oYXMoa2V5KSAmJiBuZXdWYWx1ZSBpbnN0YW5jZW9mIERlZmF1bHRWYWx1ZSQyKSB7XG4gICAgICByZXR1cm4gbmV3IE1hcCgpO1xuICAgIH1cblxuICAgIG1heWJlRnJlZXplVmFsdWVPclByb21pc2UobmV3VmFsdWUpO1xuICAgIGNhY2hlZEFuc3dlckZvclVudmFsaWRhdGVkVmFsdWUgPSB1bmRlZmluZWQ7IC8vIGNhbiBiZSByZWxlYXNlZCBub3cgaWYgaXQgd2FzIHByZXZpb3VzbHkgaW4gdXNlXG5cbiAgICByZXR1cm4gbmV3IE1hcCgpLnNldChrZXksIGxvYWRhYmxlV2l0aFZhbHVlJDMobmV3VmFsdWUpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNob3VsZERlbGV0ZUNvbmZpZ09uUmVsZWFzZUF0b20oKSB7XG4gICAgcmV0dXJuIGdldENvbmZpZ0RlbGV0aW9uSGFuZGxlciQyKGtleSkgIT09IHVuZGVmaW5lZCAmJiBsaXZlU3RvcmVzQ291bnQgPD0gMDtcbiAgfVxuXG4gIGNvbnN0IG5vZGUgPSByZWdpc3Rlck5vZGUkMih7XG4gICAga2V5LFxuICAgIG5vZGVUeXBlOiAnYXRvbScsXG4gICAgcGVlazogcGVla0F0b20sXG4gICAgZ2V0OiBnZXRBdG9tLFxuICAgIHNldDogc2V0QXRvbSxcbiAgICBpbml0OiBpbml0QXRvbSxcbiAgICBpbnZhbGlkYXRlOiBpbnZhbGlkYXRlQXRvbSxcbiAgICBzaG91bGREZWxldGVDb25maWdPblJlbGVhc2U6IHNob3VsZERlbGV0ZUNvbmZpZ09uUmVsZWFzZUF0b20sXG4gICAgZGFuZ2Vyb3VzbHlBbGxvd011dGFiaWxpdHk6IG9wdGlvbnMuZGFuZ2Vyb3VzbHlBbGxvd011dGFiaWxpdHksXG4gICAgcGVyc2lzdGVuY2VfVU5TVEFCTEU6IG9wdGlvbnMucGVyc2lzdGVuY2VfVU5TVEFCTEUgPyB7XG4gICAgICB0eXBlOiBvcHRpb25zLnBlcnNpc3RlbmNlX1VOU1RBQkxFLnR5cGUsXG4gICAgICBiYWNrQnV0dG9uOiBvcHRpb25zLnBlcnNpc3RlbmNlX1VOU1RBQkxFLmJhY2tCdXR0b25cbiAgICB9IDogdW5kZWZpbmVkLFxuICAgIHNob3VsZFJlc3RvcmVGcm9tU25hcHNob3RzOiB0cnVlLFxuICAgIHJldGFpbmVkQnlcbiAgfSk7XG4gIHJldHVybiBub2RlO1xufSAvLyBwcmV0dGllci1pZ25vcmVcblxuXG5mdW5jdGlvbiBhdG9tKG9wdGlvbnMpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5rZXkgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBSZWNvaWxfZXJyKCdBIGtleSBvcHRpb24gd2l0aCBhIHVuaXF1ZSBzdHJpbmcgdmFsdWUgbXVzdCBiZSBwcm92aWRlZCB3aGVuIGNyZWF0aW5nIGFuIGF0b20uJyk7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgeyAvLyBAZmItb25seTogc2NvcGVSdWxlc19BUFBFTkRfT05MWV9SRUFEX1RIRV9ET0NTLFxuICAgIC4uLnJlc3RPcHRpb25zXG4gIH0gPSBvcHRpb25zO1xuICBjb25zdCBvcHRpb25zRGVmYXVsdCA9ICdkZWZhdWx0JyBpbiBvcHRpb25zID8gLy8gJEZsb3dJc3N1ZVtpbmNvbXBhdGlibGUtdHlwZV0gTm8gd2F5IHRvIHJlZmluZSBpbiBGbG93IHRoYXQgcHJvcGVydHkgaXMgbm90IGRlZmluZWRcbiAgb3B0aW9ucy5kZWZhdWx0IDogbmV3IFByb21pc2UoKCkgPT4ge30pO1xuXG4gIGlmIChpc1JlY29pbFZhbHVlJDQob3B0aW9uc0RlZmF1bHQpIC8vIENvbnRpbnVlIHRvIHVzZSBhdG9tV2l0aEZhbGxiYWNrIGZvciBwcm9taXNlIGRlZmF1bHRzIGZvciBzY29wZWQgYXRvbXNcbiAgLy8gZm9yIG5vdywgc2luY2Ugc2NvcGVkIGF0b21zIGRvbid0IHN1cHBvcnQgYXN5bmMgZGVmYXVsdHNcbiAgLy8gQGZiLW9ubHk6IHx8IChpc1Byb21pc2Uob3B0aW9uc0RlZmF1bHQpICYmIHNjb3BlUnVsZXNfQVBQRU5EX09OTFlfUkVBRF9USEVfRE9DUylcbiAgLy8gQGZiLW9ubHk6IHx8IChpc0xvYWRhYmxlKG9wdGlvbnNEZWZhdWx0KSAmJiBzY29wZVJ1bGVzX0FQUEVORF9PTkxZX1JFQURfVEhFX0RPQ1MpXG4gICkge1xuICAgIHJldHVybiBhdG9tV2l0aEZhbGxiYWNrKHsgLi4ucmVzdE9wdGlvbnMsXG4gICAgICBkZWZhdWx0OiBvcHRpb25zRGVmYXVsdCAvLyBAZmItb25seTogc2NvcGVSdWxlc19BUFBFTkRfT05MWV9SRUFEX1RIRV9ET0NTLFxuXG4gICAgfSk7IC8vIEBmYi1vbmx5OiB9IGVsc2UgaWYgKHNjb3BlUnVsZXNfQVBQRU5EX09OTFlfUkVBRF9USEVfRE9DU1xuICAgIC8vIEBmYi1vbmx5OiAmJiAhaXNQcm9taXNlKG9wdGlvbnNEZWZhdWx0KVxuICAgIC8vIEBmYi1vbmx5OiAmJiAhaXNMb2FkYWJsZShvcHRpb25zRGVmYXVsdClcbiAgICAvLyBAZmItb25seTogKSB7XG4gICAgLy8gQGZiLW9ubHk6IHJldHVybiBzY29wZWRBdG9tPFQ+KHtcbiAgICAvLyBAZmItb25seTogLi4ucmVzdE9wdGlvbnMsXG4gICAgLy8gQGZiLW9ubHk6IGRlZmF1bHQ6IHVud3JhcDxUPihvcHRpb25zRGVmYXVsdCksXG4gICAgLy8gQGZiLW9ubHk6IHNjb3BlUnVsZXNfQVBQRU5EX09OTFlfUkVBRF9USEVfRE9DUyxcbiAgICAvLyBAZmItb25seTogfSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJhc2VBdG9tKHsgLi4ucmVzdE9wdGlvbnMsXG4gICAgICBkZWZhdWx0OiBvcHRpb25zRGVmYXVsdFxuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGF0b21XaXRoRmFsbGJhY2sob3B0aW9ucykge1xuICBjb25zdCBiYXNlID0gYXRvbSh7IC4uLm9wdGlvbnMsXG4gICAgZGVmYXVsdDogREVGQVVMVF9WQUxVRSQ3LFxuICAgIHBlcnNpc3RlbmNlX1VOU1RBQkxFOiBvcHRpb25zLnBlcnNpc3RlbmNlX1VOU1RBQkxFID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiB7IC4uLm9wdGlvbnMucGVyc2lzdGVuY2VfVU5TVEFCTEUsXG4gICAgICB2YWxpZGF0b3I6IHN0b3JlZFZhbHVlID0+IHN0b3JlZFZhbHVlIGluc3RhbmNlb2YgRGVmYXVsdFZhbHVlJDIgPyBzdG9yZWRWYWx1ZSA6IFJlY29pbF9udWxsdGhyb3dzKG9wdGlvbnMucGVyc2lzdGVuY2VfVU5TVEFCTEUpLnZhbGlkYXRvcihzdG9yZWRWYWx1ZSwgREVGQVVMVF9WQUxVRSQ3KVxuICAgIH0sXG4gICAgLy8gVE9ETyBIYWNrIGZvciBub3cuXG4gICAgZWZmZWN0czogb3B0aW9ucy5lZmZlY3RzLFxuICAgIC8vIGZsb3dsaW50LWxpbmUgdW5jbGVhci10eXBlOiBvZmZcbiAgICBlZmZlY3RzX1VOU1RBQkxFOiBvcHRpb25zLmVmZmVjdHNfVU5TVEFCTEUgLy8gZmxvd2xpbnQtbGluZSB1bmNsZWFyLXR5cGU6IG9mZlxuXG4gIH0pO1xuICBjb25zdCBzZWwgPSBSZWNvaWxfc2VsZWN0b3Ioe1xuICAgIGtleTogYCR7b3B0aW9ucy5rZXl9X193aXRoRmFsbGJhY2tgLFxuICAgIGdldDogKHtcbiAgICAgIGdldFxuICAgIH0pID0+IHtcbiAgICAgIGNvbnN0IGJhc2VWYWx1ZSA9IGdldChiYXNlKTtcbiAgICAgIHJldHVybiBiYXNlVmFsdWUgaW5zdGFuY2VvZiBEZWZhdWx0VmFsdWUkMiA/IG9wdGlvbnMuZGVmYXVsdCA6IGJhc2VWYWx1ZTtcbiAgICB9LFxuICAgIHNldDogKHtcbiAgICAgIHNldFxuICAgIH0sIG5ld1ZhbHVlKSA9PiBzZXQoYmFzZSwgbmV3VmFsdWUpLFxuICAgIC8vIFRoaXMgc2VsZWN0b3IgZG9lcyBub3QgbmVlZCB0byBjYWNoZSBhcyBpdCBpcyBhIHdyYXBwZXIgc2VsZWN0b3JcbiAgICAvLyBhbmQgdGhlIHNlbGVjdG9yIHdpdGhpbiB0aGUgd3JhcHBlciBzZWxlY3RvciB3aWxsIGhhdmUgYSBjYWNoZVxuICAgIC8vIG9wdGlvbiBieSBkZWZhdWx0XG4gICAgY2FjaGVQb2xpY3lfVU5TVEFCTEU6IHtcbiAgICAgIGV2aWN0aW9uOiAnbW9zdC1yZWNlbnQnXG4gICAgfSxcbiAgICBkYW5nZXJvdXNseUFsbG93TXV0YWJpbGl0eTogb3B0aW9ucy5kYW5nZXJvdXNseUFsbG93TXV0YWJpbGl0eVxuICB9KTtcbiAgc2V0Q29uZmlnRGVsZXRpb25IYW5kbGVyJDEoc2VsLmtleSwgZ2V0Q29uZmlnRGVsZXRpb25IYW5kbGVyJDIob3B0aW9ucy5rZXkpKTtcbiAgcmV0dXJuIHNlbDtcbn0gLy8gJEZsb3dGaXhNZVttaXNzaW5nLWxvY2FsLWFubm90XVxuXG5cbmF0b20udmFsdWUgPSB2YWx1ZSA9PiBuZXcgV3JhcHBlZFZhbHVlJDIodmFsdWUpO1xuXG52YXIgUmVjb2lsX2F0b20gPSBhdG9tO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICogQG9uY2FsbCByZWNvaWxcbiAqL1xuXG5jbGFzcyBNYXBDYWNoZSB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICB2YXIgX29wdGlvbnMkbWFwS2V5O1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiX21hcFwiLCB2b2lkIDApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiX2tleU1hcHBlclwiLCB2b2lkIDApO1xuXG4gICAgdGhpcy5fbWFwID0gbmV3IE1hcCgpO1xuICAgIHRoaXMuX2tleU1hcHBlciA9IChfb3B0aW9ucyRtYXBLZXkgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMubWFwS2V5KSAhPT0gbnVsbCAmJiBfb3B0aW9ucyRtYXBLZXkgIT09IHZvaWQgMCA/IF9vcHRpb25zJG1hcEtleSA6IHYgPT4gdjtcbiAgfVxuXG4gIHNpemUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX21hcC5zaXplO1xuICB9XG5cbiAgaGFzKGtleSkge1xuICAgIHJldHVybiB0aGlzLl9tYXAuaGFzKHRoaXMuX2tleU1hcHBlcihrZXkpKTtcbiAgfVxuXG4gIGdldChrZXkpIHtcbiAgICByZXR1cm4gdGhpcy5fbWFwLmdldCh0aGlzLl9rZXlNYXBwZXIoa2V5KSk7XG4gIH1cblxuICBzZXQoa2V5LCB2YWwpIHtcbiAgICB0aGlzLl9tYXAuc2V0KHRoaXMuX2tleU1hcHBlcihrZXkpLCB2YWwpO1xuICB9XG5cbiAgZGVsZXRlKGtleSkge1xuICAgIHRoaXMuX21hcC5kZWxldGUodGhpcy5fa2V5TWFwcGVyKGtleSkpO1xuICB9XG5cbiAgY2xlYXIoKSB7XG4gICAgdGhpcy5fbWFwLmNsZWFyKCk7XG4gIH1cblxufVxuXG52YXIgUmVjb2lsX01hcENhY2hlID0ge1xuICBNYXBDYWNoZVxufTtcblxudmFyIFJlY29pbF9NYXBDYWNoZV8xID0gUmVjb2lsX01hcENhY2hlLk1hcENhY2hlO1xuXG52YXIgUmVjb2lsX01hcENhY2hlJDEgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG4gIF9fcHJvdG9fXzogbnVsbCxcbiAgTWFwQ2FjaGU6IFJlY29pbF9NYXBDYWNoZV8xXG59KTtcblxuY29uc3Qge1xuICBMUlVDYWNoZTogTFJVQ2FjaGUkMlxufSA9IFJlY29pbF9MUlVDYWNoZSQxO1xuXG5jb25zdCB7XG4gIE1hcENhY2hlOiBNYXBDYWNoZSQxXG59ID0gUmVjb2lsX01hcENhY2hlJDE7XG5cblxuXG5cblxuXG5cbmNvbnN0IGRlZmF1bHRQb2xpY3kkMSA9IHtcbiAgZXF1YWxpdHk6ICdyZWZlcmVuY2UnLFxuICBldmljdGlvbjogJ25vbmUnLFxuICBtYXhTaXplOiBJbmZpbml0eVxufTtcblxuZnVuY3Rpb24gY2FjaGVGcm9tUG9saWN5KHtcbiAgZXF1YWxpdHkgPSBkZWZhdWx0UG9saWN5JDEuZXF1YWxpdHksXG4gIGV2aWN0aW9uID0gZGVmYXVsdFBvbGljeSQxLmV2aWN0aW9uLFxuICBtYXhTaXplID0gZGVmYXVsdFBvbGljeSQxLm1heFNpemVcbn0gPSBkZWZhdWx0UG9saWN5JDEpIHtcbiAgY29uc3QgdmFsdWVNYXBwZXIgPSBnZXRWYWx1ZU1hcHBlciQxKGVxdWFsaXR5KTtcbiAgY29uc3QgY2FjaGUgPSBnZXRDYWNoZShldmljdGlvbiwgbWF4U2l6ZSwgdmFsdWVNYXBwZXIpO1xuICByZXR1cm4gY2FjaGU7XG59XG5cbmZ1bmN0aW9uIGdldFZhbHVlTWFwcGVyJDEoZXF1YWxpdHkpIHtcbiAgc3dpdGNoIChlcXVhbGl0eSkge1xuICAgIGNhc2UgJ3JlZmVyZW5jZSc6XG4gICAgICByZXR1cm4gdmFsID0+IHZhbDtcblxuICAgIGNhc2UgJ3ZhbHVlJzpcbiAgICAgIHJldHVybiB2YWwgPT4gUmVjb2lsX3N0YWJsZVN0cmluZ2lmeSh2YWwpO1xuICB9XG5cbiAgdGhyb3cgUmVjb2lsX2VycihgVW5yZWNvZ25pemVkIGVxdWFsaXR5IHBvbGljeSAke2VxdWFsaXR5fWApO1xufVxuXG5mdW5jdGlvbiBnZXRDYWNoZShldmljdGlvbiwgbWF4U2l6ZSwgbWFwS2V5KSB7XG4gIHN3aXRjaCAoZXZpY3Rpb24pIHtcbiAgICBjYXNlICdrZWVwLWFsbCc6XG4gICAgICByZXR1cm4gbmV3IE1hcENhY2hlJDEoe1xuICAgICAgICBtYXBLZXlcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAnbHJ1JzpcbiAgICAgIHJldHVybiBuZXcgTFJVQ2FjaGUkMih7XG4gICAgICAgIG1hcEtleSxcbiAgICAgICAgbWF4U2l6ZTogUmVjb2lsX251bGx0aHJvd3MobWF4U2l6ZSlcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAnbW9zdC1yZWNlbnQnOlxuICAgICAgcmV0dXJuIG5ldyBMUlVDYWNoZSQyKHtcbiAgICAgICAgbWFwS2V5LFxuICAgICAgICBtYXhTaXplOiAxXG4gICAgICB9KTtcbiAgfVxuXG4gIHRocm93IFJlY29pbF9lcnIoYFVucmVjb2duaXplZCBldmljdGlvbiBwb2xpY3kgJHtldmljdGlvbn1gKTtcbn1cblxudmFyIFJlY29pbF9jYWNoZUZyb21Qb2xpY3kgPSBjYWNoZUZyb21Qb2xpY3k7XG5cbi8vIEBmYi1vbmx5OiBpbXBvcnQgdHlwZSB7U2NvcGVSdWxlc30gZnJvbSAnUmVjb2lsX1Njb3BlZEF0b20nO1xuXG5cbmNvbnN0IHtcbiAgc2V0Q29uZmlnRGVsZXRpb25IYW5kbGVyOiBzZXRDb25maWdEZWxldGlvbkhhbmRsZXIkMlxufSA9IFJlY29pbF9Ob2RlO1xuXG5cblxuXG5cbi8vIFByb2Nlc3Mgc2NvcGVSdWxlcyB0byBoYW5kbGUgYW55IGVudHJpZXMgd2hpY2ggYXJlIGZ1bmN0aW9ucyB0YWtpbmcgcGFyYW1ldGVyc1xuLy8gcHJldHRpZXItaWdub3JlXG4vLyBAZmItb25seTogZnVuY3Rpb24gbWFwU2NvcGVSdWxlczxQPihcbi8vIEBmYi1vbmx5OiBzY29wZVJ1bGVzPzogUGFyYW1ldGVyaXplZFNjb3BlUnVsZXM8UD4sXG4vLyBAZmItb25seTogcGFyYW06IFAsXG4vLyBAZmItb25seTogKTogU2NvcGVSdWxlcyB8IHZvaWQge1xuLy8gQGZiLW9ubHk6IHJldHVybiBzY29wZVJ1bGVzPy5tYXAocnVsZSA9PlxuLy8gQGZiLW9ubHk6IEFycmF5LmlzQXJyYXkocnVsZSlcbi8vIEBmYi1vbmx5OiA/IHJ1bGUubWFwKGVudHJ5ID0+ICh0eXBlb2YgZW50cnkgPT09ICdmdW5jdGlvbicgPyBlbnRyeShwYXJhbSkgOiBlbnRyeSkpXG4vLyBAZmItb25seTogOiBydWxlLFxuLy8gQGZiLW9ubHk6ICk7XG4vLyBAZmItb25seTogfVxuXG4vKlxuQSBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGFuIGF0b20gYmFzZWQgb24gdGhlIGlucHV0IHBhcmFtZXRlci5cblxuRWFjaCB1bmlxdWUgcGFyYW1ldGVyIHJldHVybnMgYSB1bmlxdWUgYXRvbS4gRS5nLixcblxuICBjb25zdCBmID0gYXRvbUZhbWlseSguLi4pO1xuICBmKHthOiAxfSkgPT4gYW4gYXRvbVxuICBmKHthOiAyfSkgPT4gYSBkaWZmZXJlbnQgYXRvbVxuXG5UaGlzIGFsbG93cyBjb21wb25lbnRzIHRvIHBlcnNpc3QgbG9jYWwsIHByaXZhdGUgc3RhdGUgdXNpbmcgYXRvbXMuICBFYWNoXG5pbnN0YW5jZSBvZiB0aGUgY29tcG9uZW50IG1heSBoYXZlIGEgZGlmZmVyZW50IGtleSwgd2hpY2ggaXQgdXNlcyBhcyB0aGVcbnBhcmFtZXRlciBmb3IgYSBmYW1pbHkgb2YgYXRvbXM7IGluIHRoaXMgd2F5LCBlYWNoIGNvbXBvbmVudCB3aWxsIGhhdmVcbml0cyBvd24gYXRvbSBub3Qgc2hhcmVkIGJ5IG90aGVyIGluc3RhbmNlcy4gIFRoZXNlIHN0YXRlIGtleXMgbWF5IGJlIGNvbXBvc2VkXG5pbnRvIGNoaWxkcmVuJ3Mgc3RhdGUga2V5cyBhcyB3ZWxsLlxuKi9cbmZ1bmN0aW9uIGF0b21GYW1pbHkob3B0aW9ucykge1xuICB2YXIgX29wdGlvbnMkY2FjaGVQb2xpY3lGLCBfb3B0aW9ucyRjYWNoZVBvbGljeUYyO1xuXG4gIGNvbnN0IGF0b21DYWNoZSA9IFJlY29pbF9jYWNoZUZyb21Qb2xpY3koe1xuICAgIGVxdWFsaXR5OiAoX29wdGlvbnMkY2FjaGVQb2xpY3lGID0gKF9vcHRpb25zJGNhY2hlUG9saWN5RjIgPSBvcHRpb25zLmNhY2hlUG9saWN5Rm9yUGFyYW1zX1VOU1RBQkxFKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRjYWNoZVBvbGljeUYyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfb3B0aW9ucyRjYWNoZVBvbGljeUYyLmVxdWFsaXR5KSAhPT0gbnVsbCAmJiBfb3B0aW9ucyRjYWNoZVBvbGljeUYgIT09IHZvaWQgMCA/IF9vcHRpb25zJGNhY2hlUG9saWN5RiA6ICd2YWx1ZScsXG4gICAgZXZpY3Rpb246ICdrZWVwLWFsbCdcbiAgfSk7IC8vIFNpbXBsZSBhdG9tRmFtaWx5IGltcGxlbWVudGF0aW9uIHRvIGNhY2hlIGluZGl2aWR1YWwgYXRvbXMgYmFzZWRcbiAgLy8gb24gdGhlIHBhcmFtZXRlciB2YWx1ZSBlcXVhbGl0eS5cblxuICByZXR1cm4gcGFyYW1zID0+IHtcbiAgICB2YXIgX3N0YWJsZVN0cmluZ2lmeSwgX29wdGlvbnMkZWZmZWN0cztcblxuICAgIGNvbnN0IGNhY2hlZEF0b20gPSBhdG9tQ2FjaGUuZ2V0KHBhcmFtcyk7XG5cbiAgICBpZiAoY2FjaGVkQXRvbSAhPSBudWxsKSB7XG4gICAgICByZXR1cm4gY2FjaGVkQXRvbTtcbiAgICB9XG5cbiAgICBjb25zdCB7XG4gICAgICBjYWNoZVBvbGljeUZvclBhcmFtc19VTlNUQUJMRSxcbiAgICAgIC4uLmF0b21PcHRpb25zXG4gICAgfSA9IG9wdGlvbnM7XG4gICAgY29uc3Qgb3B0aW9uc0RlZmF1bHQgPSAnZGVmYXVsdCcgaW4gb3B0aW9ucyA/IC8vICRGbG93SXNzdWVbaW5jb21wYXRpYmxlLXR5cGVdIE5vIHdheSB0byByZWZpbmUgaW4gRmxvdyB0aGF0IHByb3BlcnR5IGlzIG5vdCBkZWZpbmVkXG4gICAgb3B0aW9ucy5kZWZhdWx0IDogbmV3IFByb21pc2UoKCkgPT4ge30pO1xuICAgIGNvbnN0IG5ld0F0b20gPSBSZWNvaWxfYXRvbSh7IC4uLmF0b21PcHRpb25zLFxuICAgICAga2V5OiBgJHtvcHRpb25zLmtleX1fXyR7KF9zdGFibGVTdHJpbmdpZnkgPSBSZWNvaWxfc3RhYmxlU3RyaW5naWZ5KHBhcmFtcykpICE9PSBudWxsICYmIF9zdGFibGVTdHJpbmdpZnkgIT09IHZvaWQgMCA/IF9zdGFibGVTdHJpbmdpZnkgOiAndm9pZCd9YCxcbiAgICAgIGRlZmF1bHQ6IHR5cGVvZiBvcHRpb25zRGVmYXVsdCA9PT0gJ2Z1bmN0aW9uJyA/IC8vIFRoZSBkZWZhdWx0IHdhcyBwYXJhbWV0ZXJpemVkXG4gICAgICAvLyBGbG93IGRvZXNuJ3Qga25vdyB0aGF0IFQgaXNuJ3QgYSBmdW5jdGlvbiwgc28gd2UgbmVlZCB0byBjYXNlIHRvIGFueVxuICAgICAgLy8gJEZsb3dJc3N1ZVtpbmNvbXBhdGlibGUtdXNlXVxuICAgICAgb3B0aW9uc0RlZmF1bHQocGFyYW1zKSA6IC8vIERlZmF1bHQgbWF5IGJlIGEgc3RhdGljIHZhbHVlLCBwcm9taXNlLCBvciBSZWNvaWxWYWx1ZVxuICAgICAgb3B0aW9uc0RlZmF1bHQsXG4gICAgICByZXRhaW5lZEJ5X1VOU1RBQkxFOiB0eXBlb2Ygb3B0aW9ucy5yZXRhaW5lZEJ5X1VOU1RBQkxFID09PSAnZnVuY3Rpb24nID8gb3B0aW9ucy5yZXRhaW5lZEJ5X1VOU1RBQkxFKHBhcmFtcykgOiBvcHRpb25zLnJldGFpbmVkQnlfVU5TVEFCTEUsXG4gICAgICBlZmZlY3RzOiB0eXBlb2Ygb3B0aW9ucy5lZmZlY3RzID09PSAnZnVuY3Rpb24nID8gb3B0aW9ucy5lZmZlY3RzKHBhcmFtcykgOiB0eXBlb2Ygb3B0aW9ucy5lZmZlY3RzX1VOU1RBQkxFID09PSAnZnVuY3Rpb24nID8gb3B0aW9ucy5lZmZlY3RzX1VOU1RBQkxFKHBhcmFtcykgOiAoX29wdGlvbnMkZWZmZWN0cyA9IG9wdGlvbnMuZWZmZWN0cykgIT09IG51bGwgJiYgX29wdGlvbnMkZWZmZWN0cyAhPT0gdm9pZCAwID8gX29wdGlvbnMkZWZmZWN0cyA6IG9wdGlvbnMuZWZmZWN0c19VTlNUQUJMRSAvLyBwcmV0dGllci1pZ25vcmVcbiAgICAgIC8vIEBmYi1vbmx5OiBzY29wZVJ1bGVzX0FQUEVORF9PTkxZX1JFQURfVEhFX0RPQ1M6IG1hcFNjb3BlUnVsZXMoXG4gICAgICAvLyBAZmItb25seTogb3B0aW9ucy5zY29wZVJ1bGVzX0FQUEVORF9PTkxZX1JFQURfVEhFX0RPQ1MsXG4gICAgICAvLyBAZmItb25seTogcGFyYW1zLFxuICAgICAgLy8gQGZiLW9ubHk6ICksXG5cbiAgICB9KTtcbiAgICBhdG9tQ2FjaGUuc2V0KHBhcmFtcywgbmV3QXRvbSk7XG4gICAgc2V0Q29uZmlnRGVsZXRpb25IYW5kbGVyJDIobmV3QXRvbS5rZXksICgpID0+IHtcbiAgICAgIGF0b21DYWNoZS5kZWxldGUocGFyYW1zKTtcbiAgICB9KTtcbiAgICByZXR1cm4gbmV3QXRvbTtcbiAgfTtcbn1cblxudmFyIFJlY29pbF9hdG9tRmFtaWx5ID0gYXRvbUZhbWlseTtcblxuY29uc3Qge1xuICBzZXRDb25maWdEZWxldGlvbkhhbmRsZXI6IHNldENvbmZpZ0RlbGV0aW9uSGFuZGxlciQzXG59ID0gUmVjb2lsX05vZGU7XG5cblxuXG5cblxuIC8vIEtlZXAgaW4gbWluZCB0aGUgcGFyYW1ldGVyIG5lZWRzIHRvIGJlIHNlcmlhbGl6YWJsZSBhcyBhIGNhaGNoZSBrZXlcbi8vIHVzaW5nIFJlY29pbF9zdGFibGVTdHJpbmdpZnlcblxuXG4vLyBBZGQgYSB1bmlxdWUgaW5kZXggdG8gZWFjaCBzZWxlY3RvciBpbiBjYXNlIHRoZSBjYWNoZSBpbXBsZW1lbnRhdGlvbiBhbGxvd3Ncbi8vIGR1cGxpY2F0ZSBrZXlzIGJhc2VkIG9uIGVxdWl2YWxlbnQgc3RyaW5naWZpZWQgcGFyYW1ldGVyc1xubGV0IG5leHRJbmRleCA9IDA7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby1yZWRlY2xhcmUgKi9cblxuLy8gUmV0dXJuIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIG1lbWJlcnMgb2YgYSBmYW1pbHkgb2Ygc2VsZWN0b3JzIG9mIHRoZSBzYW1lIHR5cGVcbi8vIEUuZy4sXG4vL1xuLy8gY29uc3QgcyA9IHNlbGVjdG9yRmFtaWx5KC4uLik7XG4vLyBzKHthOiAxfSkgPT4gYSBzZWxlY3RvclxuLy8gcyh7YTogMn0pID0+IGEgZGlmZmVyZW50IHNlbGVjdG9yXG4vL1xuLy8gQnkgZGVmYXVsdCwgdGhlIHNlbGVjdG9ycyBhcmUgZGlzdGluZ3Vpc2hlZCBieSBkaXN0aW5jdCB2YWx1ZXMgb2YgdGhlXG4vLyBwYXJhbWV0ZXIgYmFzZWQgb24gdmFsdWUgZXF1YWxpdHksIG5vdCByZWZlcmVuY2UgZXF1YWxpdHkuICBUaGlzIGFsbG93cyB1c2luZ1xuLy8gb2JqZWN0IGxpdGVyYWxzIG9yIG90aGVyIGVxdWl2YWxlbnQgb2JqZWN0cyBhdCBjYWxsc2l0ZXMgdG8gbm90IGNyZWF0ZVxuLy8gZHVwbGljYXRlIGNhY2hlIGVudHJpZXMuICBUaGlzIGJlaGF2aW9yIG1heSBiZSBvdmVycmlkZGVuIHdpdGggdGhlXG4vLyBjYWNoZUltcGxlbWVudGF0aW9uRm9yUGFyYW1zIG9wdGlvbi5cbmZ1bmN0aW9uIHNlbGVjdG9yRmFtaWx5KG9wdGlvbnMpIHtcbiAgdmFyIF9vcHRpb25zJGNhY2hlUG9saWN5RiwgX29wdGlvbnMkY2FjaGVQb2xpY3lGMjtcblxuICBjb25zdCBzZWxlY3RvckNhY2hlID0gUmVjb2lsX2NhY2hlRnJvbVBvbGljeSh7XG4gICAgZXF1YWxpdHk6IChfb3B0aW9ucyRjYWNoZVBvbGljeUYgPSAoX29wdGlvbnMkY2FjaGVQb2xpY3lGMiA9IG9wdGlvbnMuY2FjaGVQb2xpY3lGb3JQYXJhbXNfVU5TVEFCTEUpID09PSBudWxsIHx8IF9vcHRpb25zJGNhY2hlUG9saWN5RjIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9vcHRpb25zJGNhY2hlUG9saWN5RjIuZXF1YWxpdHkpICE9PSBudWxsICYmIF9vcHRpb25zJGNhY2hlUG9saWN5RiAhPT0gdm9pZCAwID8gX29wdGlvbnMkY2FjaGVQb2xpY3lGIDogJ3ZhbHVlJyxcbiAgICBldmljdGlvbjogJ2tlZXAtYWxsJ1xuICB9KTtcbiAgcmV0dXJuIHBhcmFtcyA9PiB7XG4gICAgdmFyIF9zdGFibGVTdHJpbmdpZnk7XG5cbiAgICAvLyBUaHJvdyBhbiBlcnJvciB3aXRoIHNlbGVjdG9yIGtleSBzbyB0aGF0IGl0IGlzIGNsZWFyIHdoaWNoXG4gICAgLy8gc2VsZWN0b3IgaXMgY2F1c2luZyBhbiBlcnJvclxuICAgIGxldCBjYWNoZWRTZWxlY3RvcjtcblxuICAgIHRyeSB7XG4gICAgICBjYWNoZWRTZWxlY3RvciA9IHNlbGVjdG9yQ2FjaGUuZ2V0KHBhcmFtcyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRocm93IFJlY29pbF9lcnIoYFByb2JsZW0gd2l0aCBjYWNoZSBsb29rdXAgZm9yIHNlbGVjdG9yICR7b3B0aW9ucy5rZXl9OiAke2Vycm9yLm1lc3NhZ2V9YCk7XG4gICAgfVxuXG4gICAgaWYgKGNhY2hlZFNlbGVjdG9yICE9IG51bGwpIHtcbiAgICAgIHJldHVybiBjYWNoZWRTZWxlY3RvcjtcbiAgICB9XG5cbiAgICBjb25zdCBteUtleSA9IGAke29wdGlvbnMua2V5fV9fc2VsZWN0b3JGYW1pbHkvJHsoX3N0YWJsZVN0cmluZ2lmeSA9IFJlY29pbF9zdGFibGVTdHJpbmdpZnkocGFyYW1zLCB7XG4gICAgICAvLyBJdCBpcyBwb3NzaWJsZSB0byB1c2UgZnVuY3Rpb25zIGluIHBhcmFtZXRlcnMgaWYgdGhlIHVzZXIgdXNlc1xuICAgICAgLy8gYSBjYWNoZSB3aXRoIHJlZmVyZW5jZSBlcXVhbGl0eSB0aGFua3MgdG8gdGhlIGluY3JlbWVudGluZyBpbmRleC5cbiAgICAgIGFsbG93RnVuY3Rpb25zOiB0cnVlXG4gICAgfSkpICE9PSBudWxsICYmIF9zdGFibGVTdHJpbmdpZnkgIT09IHZvaWQgMCA/IF9zdGFibGVTdHJpbmdpZnkgOiAndm9pZCd9LyR7bmV4dEluZGV4Kyt9YDsgLy8gQXBwZW5kIGluZGV4IGluIGNhc2UgdmFsdWVzIHNlcmlhbGl6ZSB0byB0aGUgc2FtZSBrZXkgc3RyaW5nXG5cbiAgICBjb25zdCBteUdldCA9IGNhbGxiYWNrcyA9PiBvcHRpb25zLmdldChwYXJhbXMpKGNhbGxiYWNrcyk7XG5cbiAgICBjb25zdCBteUNhY2hlUG9saWN5ID0gb3B0aW9ucy5jYWNoZVBvbGljeV9VTlNUQUJMRTtcbiAgICBjb25zdCByZXRhaW5lZEJ5ID0gdHlwZW9mIG9wdGlvbnMucmV0YWluZWRCeV9VTlNUQUJMRSA9PT0gJ2Z1bmN0aW9uJyA/IG9wdGlvbnMucmV0YWluZWRCeV9VTlNUQUJMRShwYXJhbXMpIDogb3B0aW9ucy5yZXRhaW5lZEJ5X1VOU1RBQkxFO1xuICAgIGxldCBuZXdTZWxlY3RvcjtcblxuICAgIGlmIChvcHRpb25zLnNldCAhPSBudWxsKSB7XG4gICAgICBjb25zdCBzZXQgPSBvcHRpb25zLnNldDtcblxuICAgICAgY29uc3QgbXlTZXQgPSAoY2FsbGJhY2tzLCBuZXdWYWx1ZSkgPT4gc2V0KHBhcmFtcykoY2FsbGJhY2tzLCBuZXdWYWx1ZSk7XG5cbiAgICAgIG5ld1NlbGVjdG9yID0gUmVjb2lsX3NlbGVjdG9yKHtcbiAgICAgICAga2V5OiBteUtleSxcbiAgICAgICAgZ2V0OiBteUdldCxcbiAgICAgICAgc2V0OiBteVNldCxcbiAgICAgICAgY2FjaGVQb2xpY3lfVU5TVEFCTEU6IG15Q2FjaGVQb2xpY3ksXG4gICAgICAgIGRhbmdlcm91c2x5QWxsb3dNdXRhYmlsaXR5OiBvcHRpb25zLmRhbmdlcm91c2x5QWxsb3dNdXRhYmlsaXR5LFxuICAgICAgICByZXRhaW5lZEJ5X1VOU1RBQkxFOiByZXRhaW5lZEJ5XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3U2VsZWN0b3IgPSBSZWNvaWxfc2VsZWN0b3Ioe1xuICAgICAgICBrZXk6IG15S2V5LFxuICAgICAgICBnZXQ6IG15R2V0LFxuICAgICAgICBjYWNoZVBvbGljeV9VTlNUQUJMRTogbXlDYWNoZVBvbGljeSxcbiAgICAgICAgZGFuZ2Vyb3VzbHlBbGxvd011dGFiaWxpdHk6IG9wdGlvbnMuZGFuZ2Vyb3VzbHlBbGxvd011dGFiaWxpdHksXG4gICAgICAgIHJldGFpbmVkQnlfVU5TVEFCTEU6IHJldGFpbmVkQnlcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHNlbGVjdG9yQ2FjaGUuc2V0KHBhcmFtcywgbmV3U2VsZWN0b3IpO1xuICAgIHNldENvbmZpZ0RlbGV0aW9uSGFuZGxlciQzKG5ld1NlbGVjdG9yLmtleSwgKCkgPT4ge1xuICAgICAgc2VsZWN0b3JDYWNoZS5kZWxldGUocGFyYW1zKTtcbiAgICB9KTtcbiAgICByZXR1cm4gbmV3U2VsZWN0b3I7XG4gIH07XG59XG4vKiBlc2xpbnQtZW5hYmxlIG5vLXJlZGVjbGFyZSAqL1xuXG5cbnZhciBSZWNvaWxfc2VsZWN0b3JGYW1pbHkgPSBzZWxlY3RvckZhbWlseTtcblxuLy8gZmxvd2xpbnQtbmV4dC1saW5lIHVuY2xlYXItdHlwZTpvZmZcblxuXG5jb25zdCBjb25zdGFudFNlbGVjdG9yID0gUmVjb2lsX3NlbGVjdG9yRmFtaWx5KHtcbiAga2V5OiAnX19jb25zdGFudCcsXG4gIGdldDogY29uc3RhbnQgPT4gKCkgPT4gY29uc3RhbnQsXG4gIGNhY2hlUG9saWN5Rm9yUGFyYW1zX1VOU1RBQkxFOiB7XG4gICAgZXF1YWxpdHk6ICdyZWZlcmVuY2UnXG4gIH1cbn0pOyAvLyBGdW5jdGlvbiB0aGF0IHJldHVybnMgYSBzZWxlY3RvciB3aGljaCBhbHdheXMgcHJvZHVjZXMgdGhlXG4vLyBzYW1lIGNvbnN0YW50IHZhbHVlLiAgSXQgbWF5IGJlIGNhbGxlZCBtdWx0aXBsZSB0aW1lcyB3aXRoIHRoZVxuLy8gc2FtZSB2YWx1ZSwgYmFzZWQgb24gcmVmZXJlbmNlIGVxdWFsaXR5LCBhbmQgd2lsbCBwcm92aWRlIHRoZVxuLy8gc2FtZSBzZWxlY3Rvci5cblxuZnVuY3Rpb24gY29uc3RTZWxlY3Rvcihjb25zdGFudCkge1xuICByZXR1cm4gY29uc3RhbnRTZWxlY3Rvcihjb25zdGFudCk7XG59XG5cbnZhciBSZWNvaWxfY29uc3RTZWxlY3RvciA9IGNvbnN0U2VsZWN0b3I7XG5cbi8vIGZsb3dsaW50LW5leHQtbGluZSB1bmNsZWFyLXR5cGU6b2ZmXG5cblxuY29uc3QgdGhyb3dpbmdTZWxlY3RvciA9IFJlY29pbF9zZWxlY3RvckZhbWlseSh7XG4gIGtleTogJ19fZXJyb3InLFxuICBnZXQ6IG1lc3NhZ2UgPT4gKCkgPT4ge1xuICAgIHRocm93IFJlY29pbF9lcnIobWVzc2FnZSk7XG4gIH0sXG4gIC8vIFRPRE8gV2h5P1xuICBjYWNoZVBvbGljeUZvclBhcmFtc19VTlNUQUJMRToge1xuICAgIGVxdWFsaXR5OiAncmVmZXJlbmNlJ1xuICB9XG59KTsgLy8gRnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgc2VsZWN0b3Igd2hpY2ggYWx3YXlzIHRocm93cyBhbiBlcnJvclxuLy8gd2l0aCB0aGUgcHJvdmlkZWQgbWVzc2FnZS5cblxuZnVuY3Rpb24gZXJyb3JTZWxlY3RvcihtZXNzYWdlKSB7XG4gIHJldHVybiB0aHJvd2luZ1NlbGVjdG9yKG1lc3NhZ2UpO1xufVxuXG52YXIgUmVjb2lsX2Vycm9yU2VsZWN0b3IgPSBlcnJvclNlbGVjdG9yO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFdyYXBzIGFub3RoZXIgcmVjb2lsIHZhbHVlIGFuZCBwcmV2ZW50cyB3cml0aW5nIHRvIGl0LlxuICpcbiAqIFxuICogQGZvcm1hdFxuICogQG9uY2FsbCByZWNvaWxcbiAqL1xuXG5mdW5jdGlvbiByZWFkT25seVNlbGVjdG9yKGF0b20pIHtcbiAgLy8gZmxvd2xpbnQtbmV4dC1saW5lIHVuY2xlYXItdHlwZTogb2ZmXG4gIHJldHVybiBhdG9tO1xufVxuXG52YXIgUmVjb2lsX3JlYWRPbmx5U2VsZWN0b3IgPSByZWFkT25seVNlbGVjdG9yO1xuXG5jb25zdCB7XG4gIGxvYWRhYmxlV2l0aEVycm9yOiBsb2FkYWJsZVdpdGhFcnJvciQzLFxuICBsb2FkYWJsZVdpdGhQcm9taXNlOiBsb2FkYWJsZVdpdGhQcm9taXNlJDMsXG4gIGxvYWRhYmxlV2l0aFZhbHVlOiBsb2FkYWJsZVdpdGhWYWx1ZSQ0XG59ID0gUmVjb2lsX0xvYWRhYmxlJDE7XG5cblxuXG5cblxuIC8vLy8vLy8vLy8vLy8vLy8vXG4vLyAgVFJVVEggVEFCTEVcbi8vLy8vLy8vLy8vLy8vLy8vXG4vLyBEZXBlbmRlbmNpZXMgICAgICAgIHdhaXRGb3JOb25lICAgICAgICAgd2FpdEZvckFueSAgICAgICAgd2FpdEZvckFsbCAgICAgICB3YWl0Rm9yQWxsU2V0dGxlZFxuLy8gIFtsb2FkaW5nLCBsb2FkaW5nXSAgW1Byb21pc2UsIFByb21pc2VdICBQcm9taXNlICAgICAgICAgICBQcm9taXNlICAgICAgICAgUHJvbWlzZVxuLy8gIFt2YWx1ZSwgbG9hZGluZ10gICAgW3ZhbHVlLCBQcm9taXNlXSAgICBbdmFsdWUsIFByb21pc2VdICBQcm9taXNlICAgICAgICAgUHJvbWlzZVxuLy8gIFt2YWx1ZSwgdmFsdWVdICAgICAgW3ZhbHVlLCB2YWx1ZV0gICAgICBbdmFsdWUsIHZhbHVlXSAgICBbdmFsdWUsIHZhbHVlXSAgW3ZhbHVlLCB2YWx1ZV1cbi8vXG4vLyAgW2Vycm9yLCBsb2FkaW5nXSAgICBbRXJyb3IsIFByb21pc2VdICAgIFtFcnJvciwgUHJvbWlzZV0gIEVycm9yICAgICAgICAgICBQcm9taXNlXG4vLyAgW2Vycm9yLCBlcnJvcl0gICAgICBbRXJyb3IsIEVycm9yXSAgICAgIFtFcnJvciwgRXJyb3JdICAgIEVycm9yICAgICAgICAgICBbZXJyb3IsIGVycm9yXVxuLy8gIFt2YWx1ZSwgZXJyb3JdICAgICAgW3ZhbHVlLCBFcnJvcl0gICAgICBbdmFsdWUsIEVycm9yXSAgICBFcnJvciAgICAgICAgICAgW3ZhbHVlLCBlcnJvcl1cbi8vIElzc3VlIHBhcmFsbGVsIHJlcXVlc3RzIGZvciBhbGwgZGVwZW5kZW5jaWVzIGFuZCByZXR1cm4gdGhlIGN1cnJlbnRcbi8vIHN0YXR1cyBpZiB0aGV5IGhhdmUgcmVzdWx0cywgaGF2ZSBzb21lIGVycm9yLCBvciBhcmUgc3RpbGwgcGVuZGluZy5cblxuXG5mdW5jdGlvbiBjb25jdXJyZW50UmVxdWVzdHMoZ2V0UmVjb2lsVmFsdWUsIGRlcHMpIHtcbiAgY29uc3QgcmVzdWx0cyA9IEFycmF5KGRlcHMubGVuZ3RoKS5maWxsKHVuZGVmaW5lZCk7XG4gIGNvbnN0IGV4Y2VwdGlvbnMgPSBBcnJheShkZXBzLmxlbmd0aCkuZmlsbCh1bmRlZmluZWQpO1xuXG4gIGZvciAoY29uc3QgW2ksIGRlcF0gb2YgZGVwcy5lbnRyaWVzKCkpIHtcbiAgICB0cnkge1xuICAgICAgcmVzdWx0c1tpXSA9IGdldFJlY29pbFZhbHVlKGRlcCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gZXhjZXB0aW9ucyBjYW4gZWl0aGVyIGJlIFByb21pc2VzIG9mIHBlbmRpbmcgcmVzdWx0cyBvciByZWFsIGVycm9yc1xuICAgICAgZXhjZXB0aW9uc1tpXSA9IGU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIFtyZXN1bHRzLCBleGNlcHRpb25zXTtcbn1cblxuZnVuY3Rpb24gaXNFcnJvcihleHApIHtcbiAgcmV0dXJuIGV4cCAhPSBudWxsICYmICFSZWNvaWxfaXNQcm9taXNlKGV4cCk7XG59XG5cbmZ1bmN0aW9uIHVud3JhcERlcGVuZGVuY2llcyhkZXBlbmRlbmNpZXMpIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoZGVwZW5kZW5jaWVzKSA/IGRlcGVuZGVuY2llcyA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGRlcGVuZGVuY2llcykubWFwKGtleSA9PiBkZXBlbmRlbmNpZXNba2V5XSk7XG59XG5cbmZ1bmN0aW9uIHdyYXBSZXN1bHRzKGRlcGVuZGVuY2llcyxcbi8qICRGbG93Rml4TWVbbWlzc2luZy1sb2NhbC1hbm5vdF0gVGhlIHR5cGUgYW5ub3RhdGlvbihzKSByZXF1aXJlZCBieSBGbG93J3NcbiAqIExUSSB1cGRhdGUgY291bGQgbm90IGJlIGFkZGVkIHZpYSBjb2RlbW9kICovXG5yZXN1bHRzKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGRlcGVuZGVuY2llcykgPyByZXN1bHRzIDogLy8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoKSBoYXMgY29uc2lzdGVudCBrZXkgb3JkZXJpbmcgd2l0aCBFUzZcbiAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZGVwZW5kZW5jaWVzKS5yZWR1Y2UoKG91dCwga2V5LCBpZHgpID0+ICh7IC4uLm91dCxcbiAgICBba2V5XTogcmVzdWx0c1tpZHhdXG4gIH0pLCB7fSk7XG59XG5cbmZ1bmN0aW9uIHdyYXBMb2FkYWJsZXMoZGVwZW5kZW5jaWVzLCByZXN1bHRzLCBleGNlcHRpb25zKSB7XG4gIGNvbnN0IG91dHB1dCA9IGV4Y2VwdGlvbnMubWFwKChleGNlcHRpb24sIGlkeCkgPT4gZXhjZXB0aW9uID09IG51bGwgPyBsb2FkYWJsZVdpdGhWYWx1ZSQ0KHJlc3VsdHNbaWR4XSkgOiBSZWNvaWxfaXNQcm9taXNlKGV4Y2VwdGlvbikgPyBsb2FkYWJsZVdpdGhQcm9taXNlJDMoZXhjZXB0aW9uKSA6IGxvYWRhYmxlV2l0aEVycm9yJDMoZXhjZXB0aW9uKSk7XG4gIHJldHVybiB3cmFwUmVzdWx0cyhkZXBlbmRlbmNpZXMsIG91dHB1dCk7XG59XG5cbmZ1bmN0aW9uIGNvbWJpbmVBc3luY1Jlc3VsdHNXaXRoU3luY1Jlc3VsdHMoc3luY1Jlc3VsdHMsIGFzeW5jUmVzdWx0cykge1xuICByZXR1cm4gYXN5bmNSZXN1bHRzLm1hcCgocmVzdWx0LCBpZHgpID0+XG4gIC8qKlxuICAgKiBpdCdzIGltcG9ydGFudCB3ZSB1c2UgPT09IHVuZGVmaW5lZCBhcyBvcHBvc2VkIHRvID09IG51bGwsIGJlY2F1c2UgdGhlXG4gICAqIHJlc29sdmVkIHZhbHVlIG9mIHRoZSBhc3luYyBwcm9taXNlIGNvdWxkIGJlIGBudWxsYCwgaW4gd2hpY2ggY2FzZSB3ZVxuICAgKiBkb24ndCB3YW50IHRvIHVzZSBzeW5jUmVzdWx0c1tpZHhdLCB3aGljaCB3b3VsZCBiZSB1bmRlZmluZWQuIElmIGFzeW5jXG4gICAqIHByb21pc2UgcmVzb2x2ZXMgdG8gYHVuZGVmaW5lZGAsIHRoYXQncyBvayBiZWNhdXNlIGBzeW5jUmVzdWx0c1tpZHhdYFxuICAgKiB3aWxsIGFsc28gYmUgYHVuZGVmaW5lZGAuIFRoYXQncyBhIGxpdHRsZSBoYWNreSwgYnV0IGl0IHdvcmtzLlxuICAgKi9cbiAgcmVzdWx0ID09PSB1bmRlZmluZWQgPyBzeW5jUmVzdWx0c1tpZHhdIDogcmVzdWx0KTtcbn0gLy8gU2VsZWN0b3IgdGhhdCByZXF1ZXN0cyBhbGwgZGVwZW5kZW5jaWVzIGluIHBhcmFsbGVsIGFuZCBpbW1lZGlhdGVseSByZXR1cm5zXG4vLyBjdXJyZW50IHJlc3VsdHMgd2l0aG91dCB3YWl0aW5nLlxuXG5cbmNvbnN0IHdhaXRGb3JOb25lID0gUmVjb2lsX3NlbGVjdG9yRmFtaWx5KHtcbiAga2V5OiAnX193YWl0Rm9yTm9uZScsXG4gIGdldDogZGVwZW5kZW5jaWVzID0+ICh7XG4gICAgZ2V0XG4gIH0pID0+IHtcbiAgICAvLyBJc3N1ZSByZXF1ZXN0cyBmb3IgYWxsIGRlcGVuZGVuY2llcyBpbiBwYXJhbGxlbC5cbiAgICBjb25zdCBkZXBzID0gdW53cmFwRGVwZW5kZW5jaWVzKGRlcGVuZGVuY2llcyk7XG4gICAgY29uc3QgW3Jlc3VsdHMsIGV4Y2VwdGlvbnNdID0gY29uY3VycmVudFJlcXVlc3RzKGdldCwgZGVwcyk7IC8vIEFsd2F5cyByZXR1cm4gdGhlIGN1cnJlbnQgc3RhdHVzIG9mIHRoZSByZXN1bHRzOyBuZXZlciBibG9jay5cblxuICAgIHJldHVybiB3cmFwTG9hZGFibGVzKGRlcGVuZGVuY2llcywgcmVzdWx0cywgZXhjZXB0aW9ucyk7XG4gIH0sXG4gIGRhbmdlcm91c2x5QWxsb3dNdXRhYmlsaXR5OiB0cnVlXG59KTsgLy8gU2VsZWN0b3IgdGhhdCByZXF1ZXN0cyBhbGwgZGVwZW5kZW5jaWVzIGluIHBhcmFsbGVsIGFuZCB3YWl0cyBmb3IgYXQgbGVhc3Rcbi8vIG9uZSB0byBiZSBhdmFpbGFibGUgYmVmb3JlIHJldHVybmluZyByZXN1bHRzLiAgSXQgd2lsbCBvbmx5IGVycm9yIGlmIGFsbFxuLy8gZGVwZW5kZW5jaWVzIGhhdmUgZXJyb3JzLlxuXG5jb25zdCB3YWl0Rm9yQW55ID0gUmVjb2lsX3NlbGVjdG9yRmFtaWx5KHtcbiAga2V5OiAnX193YWl0Rm9yQW55JyxcbiAgZ2V0OiBkZXBlbmRlbmNpZXMgPT4gKHtcbiAgICBnZXRcbiAgfSkgPT4ge1xuICAgIC8vIElzc3VlIHJlcXVlc3RzIGZvciBhbGwgZGVwZW5kZW5jaWVzIGluIHBhcmFsbGVsLlxuICAgIC8vIEV4Y2VwdGlvbnMgY2FuIGVpdGhlciBiZSBQcm9taXNlcyBvZiBwZW5kaW5nIHJlc3VsdHMgb3IgcmVhbCBlcnJvcnNcbiAgICBjb25zdCBkZXBzID0gdW53cmFwRGVwZW5kZW5jaWVzKGRlcGVuZGVuY2llcyk7XG4gICAgY29uc3QgW3Jlc3VsdHMsIGV4Y2VwdGlvbnNdID0gY29uY3VycmVudFJlcXVlc3RzKGdldCwgZGVwcyk7IC8vIElmIGFueSByZXN1bHRzIGFyZSBhdmFpbGFibGUsIHZhbHVlIG9yIGVycm9yLCByZXR1cm4gdGhlIGN1cnJlbnQgc3RhdHVzXG5cbiAgICBpZiAoZXhjZXB0aW9ucy5zb21lKGV4cCA9PiAhUmVjb2lsX2lzUHJvbWlzZShleHApKSkge1xuICAgICAgcmV0dXJuIHdyYXBMb2FkYWJsZXMoZGVwZW5kZW5jaWVzLCByZXN1bHRzLCBleGNlcHRpb25zKTtcbiAgICB9IC8vIE90aGVyd2lzZSwgcmV0dXJuIGEgcHJvbWlzZSB0aGF0IHdpbGwgcmVzb2x2ZSB3aGVuIHRoZSBuZXh0IHJlc3VsdCBpc1xuICAgIC8vIGF2YWlsYWJsZSwgd2hpY2hldmVyIG9uZSBoYXBwZW5zIHRvIGJlIG5leHQuICBCdXQsIGlmIGFsbCBwZW5kaW5nXG4gICAgLy8gZGVwZW5kZW5jaWVzIGVuZCB1cCB3aXRoIGVycm9ycywgdGhlbiByZWplY3QgdGhlIHByb21pc2UuXG5cblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgIGZvciAoY29uc3QgW2ksIGV4cF0gb2YgZXhjZXB0aW9ucy5lbnRyaWVzKCkpIHtcbiAgICAgICAgaWYgKFJlY29pbF9pc1Byb21pc2UoZXhwKSkge1xuICAgICAgICAgIGV4cC50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAgICAgICByZXN1bHRzW2ldID0gcmVzdWx0O1xuICAgICAgICAgICAgZXhjZXB0aW9uc1tpXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHJlc29sdmUod3JhcExvYWRhYmxlcyhkZXBlbmRlbmNpZXMsIHJlc3VsdHMsIGV4Y2VwdGlvbnMpKTtcbiAgICAgICAgICB9KS5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICAgICBleGNlcHRpb25zW2ldID0gZXJyb3I7XG4gICAgICAgICAgICByZXNvbHZlKHdyYXBMb2FkYWJsZXMoZGVwZW5kZW5jaWVzLCByZXN1bHRzLCBleGNlcHRpb25zKSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbiAgZGFuZ2Vyb3VzbHlBbGxvd011dGFiaWxpdHk6IHRydWVcbn0pOyAvLyBTZWxlY3RvciB0aGF0IHJlcXVlc3RzIGFsbCBkZXBlbmRlbmNpZXMgaW4gcGFyYWxsZWwgYW5kIHdhaXRzIGZvciBhbGwgdG8gYmVcbi8vIGF2YWlsYWJsZSBiZWZvcmUgcmV0dXJuaW5nIGEgdmFsdWUuICBJdCB3aWxsIGVycm9yIGlmIGFueSBkZXBlbmRlbmNpZXMgZXJyb3IuXG5cbmNvbnN0IHdhaXRGb3JBbGwgPSBSZWNvaWxfc2VsZWN0b3JGYW1pbHkoe1xuICBrZXk6ICdfX3dhaXRGb3JBbGwnLFxuICBnZXQ6IGRlcGVuZGVuY2llcyA9PiAoe1xuICAgIGdldFxuICB9KSA9PiB7XG4gICAgLy8gSXNzdWUgcmVxdWVzdHMgZm9yIGFsbCBkZXBlbmRlbmNpZXMgaW4gcGFyYWxsZWwuXG4gICAgLy8gRXhjZXB0aW9ucyBjYW4gZWl0aGVyIGJlIFByb21pc2VzIG9mIHBlbmRpbmcgcmVzdWx0cyBvciByZWFsIGVycm9yc1xuICAgIGNvbnN0IGRlcHMgPSB1bndyYXBEZXBlbmRlbmNpZXMoZGVwZW5kZW5jaWVzKTtcbiAgICBjb25zdCBbcmVzdWx0cywgZXhjZXB0aW9uc10gPSBjb25jdXJyZW50UmVxdWVzdHMoZ2V0LCBkZXBzKTsgLy8gSWYgYWxsIHJlc3VsdHMgYXJlIGF2YWlsYWJsZSwgcmV0dXJuIHRoZSByZXN1bHRzXG5cbiAgICBpZiAoZXhjZXB0aW9ucy5ldmVyeShleHAgPT4gZXhwID09IG51bGwpKSB7XG4gICAgICByZXR1cm4gd3JhcFJlc3VsdHMoZGVwZW5kZW5jaWVzLCByZXN1bHRzKTtcbiAgICB9IC8vIElmIHdlIGhhdmUgYW55IGVycm9ycywgdGhyb3cgdGhlIGZpcnN0IGVycm9yXG5cblxuICAgIGNvbnN0IGVycm9yID0gZXhjZXB0aW9ucy5maW5kKGlzRXJyb3IpO1xuXG4gICAgaWYgKGVycm9yICE9IG51bGwpIHtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH0gLy8gT3RoZXJ3aXNlLCByZXR1cm4gYSBwcm9taXNlIHRoYXQgd2lsbCByZXNvbHZlIHdoZW4gYWxsIHJlc3VsdHMgYXJlIGF2YWlsYWJsZVxuXG5cbiAgICByZXR1cm4gUHJvbWlzZS5hbGwoZXhjZXB0aW9ucykudGhlbihleGNlcHRpb25SZXN1bHRzID0+IHdyYXBSZXN1bHRzKGRlcGVuZGVuY2llcywgY29tYmluZUFzeW5jUmVzdWx0c1dpdGhTeW5jUmVzdWx0cyhyZXN1bHRzLCBleGNlcHRpb25SZXN1bHRzKSkpO1xuICB9LFxuICBkYW5nZXJvdXNseUFsbG93TXV0YWJpbGl0eTogdHJ1ZVxufSk7XG5jb25zdCB3YWl0Rm9yQWxsU2V0dGxlZCA9IFJlY29pbF9zZWxlY3RvckZhbWlseSh7XG4gIGtleTogJ19fd2FpdEZvckFsbFNldHRsZWQnLFxuICBnZXQ6IGRlcGVuZGVuY2llcyA9PiAoe1xuICAgIGdldFxuICB9KSA9PiB7XG4gICAgLy8gSXNzdWUgcmVxdWVzdHMgZm9yIGFsbCBkZXBlbmRlbmNpZXMgaW4gcGFyYWxsZWwuXG4gICAgLy8gRXhjZXB0aW9ucyBjYW4gZWl0aGVyIGJlIFByb21pc2VzIG9mIHBlbmRpbmcgcmVzdWx0cyBvciByZWFsIGVycm9yc1xuICAgIGNvbnN0IGRlcHMgPSB1bndyYXBEZXBlbmRlbmNpZXMoZGVwZW5kZW5jaWVzKTtcbiAgICBjb25zdCBbcmVzdWx0cywgZXhjZXB0aW9uc10gPSBjb25jdXJyZW50UmVxdWVzdHMoZ2V0LCBkZXBzKTsgLy8gSWYgYWxsIHJlc3VsdHMgYXJlIGF2YWlsYWJsZSwgcmV0dXJuIHRoZSByZXN1bHRzXG5cbiAgICBpZiAoZXhjZXB0aW9ucy5ldmVyeShleHAgPT4gIVJlY29pbF9pc1Byb21pc2UoZXhwKSkpIHtcbiAgICAgIHJldHVybiB3cmFwTG9hZGFibGVzKGRlcGVuZGVuY2llcywgcmVzdWx0cywgZXhjZXB0aW9ucyk7XG4gICAgfSAvLyBXYWl0IGZvciBhbGwgcmVzdWx0cyB0byBzZXR0bGVcblxuXG4gICAgcmV0dXJuIFByb21pc2UuYWxsKGV4Y2VwdGlvbnMubWFwKChleHAsIGkpID0+IFJlY29pbF9pc1Byb21pc2UoZXhwKSA/IGV4cC50aGVuKHJlc3VsdCA9PiB7XG4gICAgICByZXN1bHRzW2ldID0gcmVzdWx0O1xuICAgICAgZXhjZXB0aW9uc1tpXSA9IHVuZGVmaW5lZDtcbiAgICB9KS5jYXRjaChlcnJvciA9PiB7XG4gICAgICByZXN1bHRzW2ldID0gdW5kZWZpbmVkO1xuICAgICAgZXhjZXB0aW9uc1tpXSA9IGVycm9yO1xuICAgIH0pIDogbnVsbCkpIC8vIFRoZW4gd3JhcCB0aGVtIGFzIGxvYWRhYmxlc1xuICAgIC50aGVuKCgpID0+IHdyYXBMb2FkYWJsZXMoZGVwZW5kZW5jaWVzLCByZXN1bHRzLCBleGNlcHRpb25zKSk7XG4gIH0sXG4gIGRhbmdlcm91c2x5QWxsb3dNdXRhYmlsaXR5OiB0cnVlXG59KTtcbmNvbnN0IG5vV2FpdCA9IFJlY29pbF9zZWxlY3RvckZhbWlseSh7XG4gIGtleTogJ19fbm9XYWl0JyxcbiAgZ2V0OiBkZXBlbmRlbmN5ID0+ICh7XG4gICAgZ2V0XG4gIH0pID0+IHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIFJlY29pbF9zZWxlY3Rvci52YWx1ZShsb2FkYWJsZVdpdGhWYWx1ZSQ0KGdldChkZXBlbmRlbmN5KSkpO1xuICAgIH0gY2F0Y2ggKGV4Y2VwdGlvbikge1xuICAgICAgcmV0dXJuIFJlY29pbF9zZWxlY3Rvci52YWx1ZShSZWNvaWxfaXNQcm9taXNlKGV4Y2VwdGlvbikgPyBsb2FkYWJsZVdpdGhQcm9taXNlJDMoZXhjZXB0aW9uKSA6IGxvYWRhYmxlV2l0aEVycm9yJDMoZXhjZXB0aW9uKSk7XG4gICAgfVxuICB9LFxuICBkYW5nZXJvdXNseUFsbG93TXV0YWJpbGl0eTogdHJ1ZVxufSk7XG52YXIgUmVjb2lsX1dhaXRGb3IgPSB7XG4gIHdhaXRGb3JOb25lLFxuICB3YWl0Rm9yQW55LFxuICB3YWl0Rm9yQWxsLFxuICB3YWl0Rm9yQWxsU2V0dGxlZCxcbiAgbm9XYWl0XG59O1xuXG5jb25zdCB7XG4gIFJlY29pbExvYWRhYmxlXG59ID0gUmVjb2lsX0xvYWRhYmxlJDE7XG5cbmNvbnN0IHtcbiAgRGVmYXVsdFZhbHVlOiBEZWZhdWx0VmFsdWUkM1xufSA9IFJlY29pbF9Ob2RlO1xuXG5cblxuY29uc3Qge1xuICBSZWNvaWxSb290OiBSZWNvaWxSb290JDIsXG4gIHVzZVJlY29pbFN0b3JlSUQ6IHVzZVJlY29pbFN0b3JlSUQkMVxufSA9IFJlY29pbF9SZWNvaWxSb290O1xuXG5jb25zdCB7XG4gIGlzUmVjb2lsVmFsdWU6IGlzUmVjb2lsVmFsdWUkNVxufSA9IFJlY29pbF9SZWNvaWxWYWx1ZSQxO1xuXG5jb25zdCB7XG4gIHJldGVudGlvblpvbmU6IHJldGVudGlvblpvbmUkMVxufSA9IFJlY29pbF9SZXRlbnRpb25ab25lO1xuXG5jb25zdCB7XG4gIGZyZXNoU25hcHNob3Q6IGZyZXNoU25hcHNob3QkMlxufSA9IFJlY29pbF9TbmFwc2hvdCQxO1xuXG5jb25zdCB7XG4gIHVzZVJlY29pbFN0YXRlOiB1c2VSZWNvaWxTdGF0ZSQxLFxuICB1c2VSZWNvaWxTdGF0ZV9UUkFOU0lUSU9OX1NVUFBPUlRfVU5TVEFCTEU6IHVzZVJlY29pbFN0YXRlX1RSQU5TSVRJT05fU1VQUE9SVF9VTlNUQUJMRSQxLFxuICB1c2VSZWNvaWxTdGF0ZUxvYWRhYmxlOiB1c2VSZWNvaWxTdGF0ZUxvYWRhYmxlJDEsXG4gIHVzZVJlY29pbFZhbHVlOiB1c2VSZWNvaWxWYWx1ZSQxLFxuICB1c2VSZWNvaWxWYWx1ZV9UUkFOU0lUSU9OX1NVUFBPUlRfVU5TVEFCTEU6IHVzZVJlY29pbFZhbHVlX1RSQU5TSVRJT05fU1VQUE9SVF9VTlNUQUJMRSQxLFxuICB1c2VSZWNvaWxWYWx1ZUxvYWRhYmxlOiB1c2VSZWNvaWxWYWx1ZUxvYWRhYmxlJDEsXG4gIHVzZVJlY29pbFZhbHVlTG9hZGFibGVfVFJBTlNJVElPTl9TVVBQT1JUX1VOU1RBQkxFOiB1c2VSZWNvaWxWYWx1ZUxvYWRhYmxlX1RSQU5TSVRJT05fU1VQUE9SVF9VTlNUQUJMRSQxLFxuICB1c2VSZXNldFJlY29pbFN0YXRlOiB1c2VSZXNldFJlY29pbFN0YXRlJDEsXG4gIHVzZVNldFJlY29pbFN0YXRlOiB1c2VTZXRSZWNvaWxTdGF0ZSQxXG59ID0gUmVjb2lsX0hvb2tzO1xuXG5jb25zdCB7XG4gIHVzZUdvdG9SZWNvaWxTbmFwc2hvdDogdXNlR290b1JlY29pbFNuYXBzaG90JDEsXG4gIHVzZVJlY29pbFNuYXBzaG90OiB1c2VSZWNvaWxTbmFwc2hvdCQxLFxuICB1c2VSZWNvaWxUcmFuc2FjdGlvbk9ic2VydmVyOiB1c2VSZWNvaWxUcmFuc2FjdGlvbk9ic2VydmVyJDFcbn0gPSBSZWNvaWxfU25hcHNob3RIb29rcztcblxuXG5cblxuXG5jb25zdCB7XG4gIHVzZVJlY29pbENhbGxiYWNrOiB1c2VSZWNvaWxDYWxsYmFjayQxXG59ID0gUmVjb2lsX3VzZVJlY29pbENhbGxiYWNrO1xuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuY29uc3Qge1xuICBub1dhaXQ6IG5vV2FpdCQxLFxuICB3YWl0Rm9yQWxsOiB3YWl0Rm9yQWxsJDEsXG4gIHdhaXRGb3JBbGxTZXR0bGVkOiB3YWl0Rm9yQWxsU2V0dGxlZCQxLFxuICB3YWl0Rm9yQW55OiB3YWl0Rm9yQW55JDEsXG4gIHdhaXRGb3JOb25lOiB3YWl0Rm9yTm9uZSQxXG59ID0gUmVjb2lsX1dhaXRGb3I7XG5cbnZhciBSZWNvaWxfaW5kZXggPSB7XG4gIC8vIFR5cGVzXG4gIERlZmF1bHRWYWx1ZTogRGVmYXVsdFZhbHVlJDMsXG4gIGlzUmVjb2lsVmFsdWU6IGlzUmVjb2lsVmFsdWUkNSxcbiAgUmVjb2lsTG9hZGFibGUsXG4gIC8vIEdsb2JhbCBSZWNvaWwgZW52aXJvbm1lbnQgc2V0dGlvbmdzXG4gIFJlY29pbEVudjogUmVjb2lsX1JlY29pbEVudixcbiAgLy8gUmVjb2lsIFJvb3RcbiAgUmVjb2lsUm9vdDogUmVjb2lsUm9vdCQyLFxuICB1c2VSZWNvaWxTdG9yZUlEOiB1c2VSZWNvaWxTdG9yZUlEJDEsXG4gIHVzZVJlY29pbEJyaWRnZUFjcm9zc1JlYWN0Um9vdHNfVU5TVEFCTEU6IFJlY29pbF91c2VSZWNvaWxCcmlkZ2VBY3Jvc3NSZWFjdFJvb3RzLFxuICAvLyBBdG9tcy9TZWxlY3RvcnNcbiAgYXRvbTogUmVjb2lsX2F0b20sXG4gIHNlbGVjdG9yOiBSZWNvaWxfc2VsZWN0b3IsXG4gIC8vIENvbnZlbmllbmNlIEF0b21zL1NlbGVjdG9yc1xuICBhdG9tRmFtaWx5OiBSZWNvaWxfYXRvbUZhbWlseSxcbiAgc2VsZWN0b3JGYW1pbHk6IFJlY29pbF9zZWxlY3RvckZhbWlseSxcbiAgY29uc3RTZWxlY3RvcjogUmVjb2lsX2NvbnN0U2VsZWN0b3IsXG4gIGVycm9yU2VsZWN0b3I6IFJlY29pbF9lcnJvclNlbGVjdG9yLFxuICByZWFkT25seVNlbGVjdG9yOiBSZWNvaWxfcmVhZE9ubHlTZWxlY3RvcixcbiAgLy8gQ29uY3VycmVuY3kgSGVscGVycyBmb3IgQXRvbXMvU2VsZWN0b3JzXG4gIG5vV2FpdDogbm9XYWl0JDEsXG4gIHdhaXRGb3JOb25lOiB3YWl0Rm9yTm9uZSQxLFxuICB3YWl0Rm9yQW55OiB3YWl0Rm9yQW55JDEsXG4gIHdhaXRGb3JBbGw6IHdhaXRGb3JBbGwkMSxcbiAgd2FpdEZvckFsbFNldHRsZWQ6IHdhaXRGb3JBbGxTZXR0bGVkJDEsXG4gIC8vIEhvb2tzIGZvciBBdG9tcy9TZWxlY3RvcnNcbiAgdXNlUmVjb2lsVmFsdWU6IHVzZVJlY29pbFZhbHVlJDEsXG4gIHVzZVJlY29pbFZhbHVlTG9hZGFibGU6IHVzZVJlY29pbFZhbHVlTG9hZGFibGUkMSxcbiAgdXNlUmVjb2lsU3RhdGU6IHVzZVJlY29pbFN0YXRlJDEsXG4gIHVzZVJlY29pbFN0YXRlTG9hZGFibGU6IHVzZVJlY29pbFN0YXRlTG9hZGFibGUkMSxcbiAgdXNlU2V0UmVjb2lsU3RhdGU6IHVzZVNldFJlY29pbFN0YXRlJDEsXG4gIHVzZVJlc2V0UmVjb2lsU3RhdGU6IHVzZVJlc2V0UmVjb2lsU3RhdGUkMSxcbiAgdXNlR2V0UmVjb2lsVmFsdWVJbmZvX1VOU1RBQkxFOiBSZWNvaWxfdXNlR2V0UmVjb2lsVmFsdWVJbmZvLFxuICB1c2VSZWNvaWxSZWZyZXNoZXJfVU5TVEFCTEU6IFJlY29pbF91c2VSZWNvaWxSZWZyZXNoZXIsXG4gIHVzZVJlY29pbFZhbHVlTG9hZGFibGVfVFJBTlNJVElPTl9TVVBQT1JUX1VOU1RBQkxFOiB1c2VSZWNvaWxWYWx1ZUxvYWRhYmxlX1RSQU5TSVRJT05fU1VQUE9SVF9VTlNUQUJMRSQxLFxuICB1c2VSZWNvaWxWYWx1ZV9UUkFOU0lUSU9OX1NVUFBPUlRfVU5TVEFCTEU6IHVzZVJlY29pbFZhbHVlX1RSQU5TSVRJT05fU1VQUE9SVF9VTlNUQUJMRSQxLFxuICB1c2VSZWNvaWxTdGF0ZV9UUkFOU0lUSU9OX1NVUFBPUlRfVU5TVEFCTEU6IHVzZVJlY29pbFN0YXRlX1RSQU5TSVRJT05fU1VQUE9SVF9VTlNUQUJMRSQxLFxuICAvLyBIb29rcyBmb3IgY29tcGxleCBvcGVyYXRpb25zXG4gIHVzZVJlY29pbENhbGxiYWNrOiB1c2VSZWNvaWxDYWxsYmFjayQxLFxuICB1c2VSZWNvaWxUcmFuc2FjdGlvbl9VTlNUQUJMRTogUmVjb2lsX3VzZVJlY29pbFRyYW5zYWN0aW9uLFxuICAvLyBTbmFwc2hvdHNcbiAgdXNlR290b1JlY29pbFNuYXBzaG90OiB1c2VHb3RvUmVjb2lsU25hcHNob3QkMSxcbiAgdXNlUmVjb2lsU25hcHNob3Q6IHVzZVJlY29pbFNuYXBzaG90JDEsXG4gIHVzZVJlY29pbFRyYW5zYWN0aW9uT2JzZXJ2ZXJfVU5TVEFCTEU6IHVzZVJlY29pbFRyYW5zYWN0aW9uT2JzZXJ2ZXIkMSxcbiAgc25hcHNob3RfVU5TVEFCTEU6IGZyZXNoU25hcHNob3QkMixcbiAgLy8gTWVtb3J5IE1hbmFnZW1lbnRcbiAgdXNlUmV0YWluOiBSZWNvaWxfdXNlUmV0YWluLFxuICByZXRlbnRpb25ab25lOiByZXRlbnRpb25ab25lJDFcbn07XG52YXIgUmVjb2lsX2luZGV4XzEgPSBSZWNvaWxfaW5kZXguRGVmYXVsdFZhbHVlO1xudmFyIFJlY29pbF9pbmRleF8yID0gUmVjb2lsX2luZGV4LmlzUmVjb2lsVmFsdWU7XG52YXIgUmVjb2lsX2luZGV4XzMgPSBSZWNvaWxfaW5kZXguUmVjb2lsTG9hZGFibGU7XG52YXIgUmVjb2lsX2luZGV4XzQgPSBSZWNvaWxfaW5kZXguUmVjb2lsRW52O1xudmFyIFJlY29pbF9pbmRleF81ID0gUmVjb2lsX2luZGV4LlJlY29pbFJvb3Q7XG52YXIgUmVjb2lsX2luZGV4XzYgPSBSZWNvaWxfaW5kZXgudXNlUmVjb2lsU3RvcmVJRDtcbnZhciBSZWNvaWxfaW5kZXhfNyA9IFJlY29pbF9pbmRleC51c2VSZWNvaWxCcmlkZ2VBY3Jvc3NSZWFjdFJvb3RzX1VOU1RBQkxFO1xudmFyIFJlY29pbF9pbmRleF84ID0gUmVjb2lsX2luZGV4LmF0b207XG52YXIgUmVjb2lsX2luZGV4XzkgPSBSZWNvaWxfaW5kZXguc2VsZWN0b3I7XG52YXIgUmVjb2lsX2luZGV4XzEwID0gUmVjb2lsX2luZGV4LmF0b21GYW1pbHk7XG52YXIgUmVjb2lsX2luZGV4XzExID0gUmVjb2lsX2luZGV4LnNlbGVjdG9yRmFtaWx5O1xudmFyIFJlY29pbF9pbmRleF8xMiA9IFJlY29pbF9pbmRleC5jb25zdFNlbGVjdG9yO1xudmFyIFJlY29pbF9pbmRleF8xMyA9IFJlY29pbF9pbmRleC5lcnJvclNlbGVjdG9yO1xudmFyIFJlY29pbF9pbmRleF8xNCA9IFJlY29pbF9pbmRleC5yZWFkT25seVNlbGVjdG9yO1xudmFyIFJlY29pbF9pbmRleF8xNSA9IFJlY29pbF9pbmRleC5ub1dhaXQ7XG52YXIgUmVjb2lsX2luZGV4XzE2ID0gUmVjb2lsX2luZGV4LndhaXRGb3JOb25lO1xudmFyIFJlY29pbF9pbmRleF8xNyA9IFJlY29pbF9pbmRleC53YWl0Rm9yQW55O1xudmFyIFJlY29pbF9pbmRleF8xOCA9IFJlY29pbF9pbmRleC53YWl0Rm9yQWxsO1xudmFyIFJlY29pbF9pbmRleF8xOSA9IFJlY29pbF9pbmRleC53YWl0Rm9yQWxsU2V0dGxlZDtcbnZhciBSZWNvaWxfaW5kZXhfMjAgPSBSZWNvaWxfaW5kZXgudXNlUmVjb2lsVmFsdWU7XG52YXIgUmVjb2lsX2luZGV4XzIxID0gUmVjb2lsX2luZGV4LnVzZVJlY29pbFZhbHVlTG9hZGFibGU7XG52YXIgUmVjb2lsX2luZGV4XzIyID0gUmVjb2lsX2luZGV4LnVzZVJlY29pbFN0YXRlO1xudmFyIFJlY29pbF9pbmRleF8yMyA9IFJlY29pbF9pbmRleC51c2VSZWNvaWxTdGF0ZUxvYWRhYmxlO1xudmFyIFJlY29pbF9pbmRleF8yNCA9IFJlY29pbF9pbmRleC51c2VTZXRSZWNvaWxTdGF0ZTtcbnZhciBSZWNvaWxfaW5kZXhfMjUgPSBSZWNvaWxfaW5kZXgudXNlUmVzZXRSZWNvaWxTdGF0ZTtcbnZhciBSZWNvaWxfaW5kZXhfMjYgPSBSZWNvaWxfaW5kZXgudXNlR2V0UmVjb2lsVmFsdWVJbmZvX1VOU1RBQkxFO1xudmFyIFJlY29pbF9pbmRleF8yNyA9IFJlY29pbF9pbmRleC51c2VSZWNvaWxSZWZyZXNoZXJfVU5TVEFCTEU7XG52YXIgUmVjb2lsX2luZGV4XzI4ID0gUmVjb2lsX2luZGV4LnVzZVJlY29pbFZhbHVlTG9hZGFibGVfVFJBTlNJVElPTl9TVVBQT1JUX1VOU1RBQkxFO1xudmFyIFJlY29pbF9pbmRleF8yOSA9IFJlY29pbF9pbmRleC51c2VSZWNvaWxWYWx1ZV9UUkFOU0lUSU9OX1NVUFBPUlRfVU5TVEFCTEU7XG52YXIgUmVjb2lsX2luZGV4XzMwID0gUmVjb2lsX2luZGV4LnVzZVJlY29pbFN0YXRlX1RSQU5TSVRJT05fU1VQUE9SVF9VTlNUQUJMRTtcbnZhciBSZWNvaWxfaW5kZXhfMzEgPSBSZWNvaWxfaW5kZXgudXNlUmVjb2lsQ2FsbGJhY2s7XG52YXIgUmVjb2lsX2luZGV4XzMyID0gUmVjb2lsX2luZGV4LnVzZVJlY29pbFRyYW5zYWN0aW9uX1VOU1RBQkxFO1xudmFyIFJlY29pbF9pbmRleF8zMyA9IFJlY29pbF9pbmRleC51c2VHb3RvUmVjb2lsU25hcHNob3Q7XG52YXIgUmVjb2lsX2luZGV4XzM0ID0gUmVjb2lsX2luZGV4LnVzZVJlY29pbFNuYXBzaG90O1xudmFyIFJlY29pbF9pbmRleF8zNSA9IFJlY29pbF9pbmRleC51c2VSZWNvaWxUcmFuc2FjdGlvbk9ic2VydmVyX1VOU1RBQkxFO1xudmFyIFJlY29pbF9pbmRleF8zNiA9IFJlY29pbF9pbmRleC5zbmFwc2hvdF9VTlNUQUJMRTtcbnZhciBSZWNvaWxfaW5kZXhfMzcgPSBSZWNvaWxfaW5kZXgudXNlUmV0YWluO1xudmFyIFJlY29pbF9pbmRleF8zOCA9IFJlY29pbF9pbmRleC5yZXRlbnRpb25ab25lO1xuXG5leHBvcnQgZGVmYXVsdCBSZWNvaWxfaW5kZXg7XG5leHBvcnQgeyBSZWNvaWxfaW5kZXhfMSBhcyBEZWZhdWx0VmFsdWUsIFJlY29pbF9pbmRleF80IGFzIFJlY29pbEVudiwgUmVjb2lsX2luZGV4XzMgYXMgUmVjb2lsTG9hZGFibGUsIFJlY29pbF9pbmRleF81IGFzIFJlY29pbFJvb3QsIFJlY29pbF9pbmRleF84IGFzIGF0b20sIFJlY29pbF9pbmRleF8xMCBhcyBhdG9tRmFtaWx5LCBSZWNvaWxfaW5kZXhfMTIgYXMgY29uc3RTZWxlY3RvciwgUmVjb2lsX2luZGV4XzEzIGFzIGVycm9yU2VsZWN0b3IsIFJlY29pbF9pbmRleF8yIGFzIGlzUmVjb2lsVmFsdWUsIFJlY29pbF9pbmRleF8xNSBhcyBub1dhaXQsIFJlY29pbF9pbmRleF8xNCBhcyByZWFkT25seVNlbGVjdG9yLCBSZWNvaWxfaW5kZXhfMzggYXMgcmV0ZW50aW9uWm9uZSwgUmVjb2lsX2luZGV4XzkgYXMgc2VsZWN0b3IsIFJlY29pbF9pbmRleF8xMSBhcyBzZWxlY3RvckZhbWlseSwgUmVjb2lsX2luZGV4XzM2IGFzIHNuYXBzaG90X1VOU1RBQkxFLCBSZWNvaWxfaW5kZXhfMjYgYXMgdXNlR2V0UmVjb2lsVmFsdWVJbmZvX1VOU1RBQkxFLCBSZWNvaWxfaW5kZXhfMzMgYXMgdXNlR290b1JlY29pbFNuYXBzaG90LCBSZWNvaWxfaW5kZXhfNyBhcyB1c2VSZWNvaWxCcmlkZ2VBY3Jvc3NSZWFjdFJvb3RzX1VOU1RBQkxFLCBSZWNvaWxfaW5kZXhfMzEgYXMgdXNlUmVjb2lsQ2FsbGJhY2ssIFJlY29pbF9pbmRleF8yNyBhcyB1c2VSZWNvaWxSZWZyZXNoZXJfVU5TVEFCTEUsIFJlY29pbF9pbmRleF8zNCBhcyB1c2VSZWNvaWxTbmFwc2hvdCwgUmVjb2lsX2luZGV4XzIyIGFzIHVzZVJlY29pbFN0YXRlLCBSZWNvaWxfaW5kZXhfMjMgYXMgdXNlUmVjb2lsU3RhdGVMb2FkYWJsZSwgUmVjb2lsX2luZGV4XzMwIGFzIHVzZVJlY29pbFN0YXRlX1RSQU5TSVRJT05fU1VQUE9SVF9VTlNUQUJMRSwgUmVjb2lsX2luZGV4XzYgYXMgdXNlUmVjb2lsU3RvcmVJRCwgUmVjb2lsX2luZGV4XzM1IGFzIHVzZVJlY29pbFRyYW5zYWN0aW9uT2JzZXJ2ZXJfVU5TVEFCTEUsIFJlY29pbF9pbmRleF8zMiBhcyB1c2VSZWNvaWxUcmFuc2FjdGlvbl9VTlNUQUJMRSwgUmVjb2lsX2luZGV4XzIwIGFzIHVzZVJlY29pbFZhbHVlLCBSZWNvaWxfaW5kZXhfMjEgYXMgdXNlUmVjb2lsVmFsdWVMb2FkYWJsZSwgUmVjb2lsX2luZGV4XzI4IGFzIHVzZVJlY29pbFZhbHVlTG9hZGFibGVfVFJBTlNJVElPTl9TVVBQT1JUX1VOU1RBQkxFLCBSZWNvaWxfaW5kZXhfMjkgYXMgdXNlUmVjb2lsVmFsdWVfVFJBTlNJVElPTl9TVVBQT1JUX1VOU1RBQkxFLCBSZWNvaWxfaW5kZXhfMjUgYXMgdXNlUmVzZXRSZWNvaWxTdGF0ZSwgUmVjb2lsX2luZGV4XzM3IGFzIHVzZVJldGFpbiwgUmVjb2lsX2luZGV4XzI0IGFzIHVzZVNldFJlY29pbFN0YXRlLCBSZWNvaWxfaW5kZXhfMTggYXMgd2FpdEZvckFsbCwgUmVjb2lsX2luZGV4XzE5IGFzIHdhaXRGb3JBbGxTZXR0bGVkLCBSZWNvaWxfaW5kZXhfMTcgYXMgd2FpdEZvckFueSwgUmVjb2lsX2luZGV4XzE2IGFzIHdhaXRGb3JOb25lIH07XG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiBzY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO2Z1bmN0aW9uIGYoYSxiKXt2YXIgYz1hLmxlbmd0aDthLnB1c2goYik7YTpmb3IoOzA8Yzspe3ZhciBkPWMtMT4+PjEsZT1hW2RdO2lmKDA8ZyhlLGIpKWFbZF09YixhW2NdPWUsYz1kO2Vsc2UgYnJlYWsgYX19ZnVuY3Rpb24gaChhKXtyZXR1cm4gMD09PWEubGVuZ3RoP251bGw6YVswXX1mdW5jdGlvbiBrKGEpe2lmKDA9PT1hLmxlbmd0aClyZXR1cm4gbnVsbDt2YXIgYj1hWzBdLGM9YS5wb3AoKTtpZihjIT09Yil7YVswXT1jO2E6Zm9yKHZhciBkPTAsZT1hLmxlbmd0aCx3PWU+Pj4xO2Q8dzspe3ZhciBtPTIqKGQrMSktMSxDPWFbbV0sbj1tKzEseD1hW25dO2lmKDA+ZyhDLGMpKW48ZSYmMD5nKHgsQyk/KGFbZF09eCxhW25dPWMsZD1uKTooYVtkXT1DLGFbbV09YyxkPW0pO2Vsc2UgaWYobjxlJiYwPmcoeCxjKSlhW2RdPXgsYVtuXT1jLGQ9bjtlbHNlIGJyZWFrIGF9fXJldHVybiBifVxuZnVuY3Rpb24gZyhhLGIpe3ZhciBjPWEuc29ydEluZGV4LWIuc29ydEluZGV4O3JldHVybiAwIT09Yz9jOmEuaWQtYi5pZH1pZihcIm9iamVjdFwiPT09dHlwZW9mIHBlcmZvcm1hbmNlJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgcGVyZm9ybWFuY2Uubm93KXt2YXIgbD1wZXJmb3JtYW5jZTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBsLm5vdygpfX1lbHNle3ZhciBwPURhdGUscT1wLm5vdygpO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHAubm93KCktcX19dmFyIHI9W10sdD1bXSx1PTEsdj1udWxsLHk9Myx6PSExLEE9ITEsQj0hMSxEPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6bnVsbCxFPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0Om51bGwsRj1cInVuZGVmaW5lZFwiIT09dHlwZW9mIHNldEltbWVkaWF0ZT9zZXRJbW1lZGlhdGU6bnVsbDtcblwidW5kZWZpbmVkXCIhPT10eXBlb2YgbmF2aWdhdG9yJiZ2b2lkIDAhPT1uYXZpZ2F0b3Iuc2NoZWR1bGluZyYmdm9pZCAwIT09bmF2aWdhdG9yLnNjaGVkdWxpbmcuaXNJbnB1dFBlbmRpbmcmJm5hdmlnYXRvci5zY2hlZHVsaW5nLmlzSW5wdXRQZW5kaW5nLmJpbmQobmF2aWdhdG9yLnNjaGVkdWxpbmcpO2Z1bmN0aW9uIEcoYSl7Zm9yKHZhciBiPWgodCk7bnVsbCE9PWI7KXtpZihudWxsPT09Yi5jYWxsYmFjaylrKHQpO2Vsc2UgaWYoYi5zdGFydFRpbWU8PWEpayh0KSxiLnNvcnRJbmRleD1iLmV4cGlyYXRpb25UaW1lLGYocixiKTtlbHNlIGJyZWFrO2I9aCh0KX19ZnVuY3Rpb24gSChhKXtCPSExO0coYSk7aWYoIUEpaWYobnVsbCE9PWgocikpQT0hMCxJKEopO2Vsc2V7dmFyIGI9aCh0KTtudWxsIT09YiYmSyhILGIuc3RhcnRUaW1lLWEpfX1cbmZ1bmN0aW9uIEooYSxiKXtBPSExO0ImJihCPSExLEUoTCksTD0tMSk7ej0hMDt2YXIgYz15O3RyeXtHKGIpO2Zvcih2PWgocik7bnVsbCE9PXYmJighKHYuZXhwaXJhdGlvblRpbWU+Yil8fGEmJiFNKCkpOyl7dmFyIGQ9di5jYWxsYmFjaztpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7di5jYWxsYmFjaz1udWxsO3k9di5wcmlvcml0eUxldmVsO3ZhciBlPWQodi5leHBpcmF0aW9uVGltZTw9Yik7Yj1leHBvcnRzLnVuc3RhYmxlX25vdygpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlP3YuY2FsbGJhY2s9ZTp2PT09aChyKSYmayhyKTtHKGIpfWVsc2UgayhyKTt2PWgocil9aWYobnVsbCE9PXYpdmFyIHc9ITA7ZWxzZXt2YXIgbT1oKHQpO251bGwhPT1tJiZLKEgsbS5zdGFydFRpbWUtYik7dz0hMX1yZXR1cm4gd31maW5hbGx5e3Y9bnVsbCx5PWMsej0hMX19dmFyIE49ITEsTz1udWxsLEw9LTEsUD01LFE9LTE7XG5mdW5jdGlvbiBNKCl7cmV0dXJuIGV4cG9ydHMudW5zdGFibGVfbm93KCktUTxQPyExOiEwfWZ1bmN0aW9uIFIoKXtpZihudWxsIT09Tyl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtRPWE7dmFyIGI9ITA7dHJ5e2I9TyghMCxhKX1maW5hbGx5e2I/UygpOihOPSExLE89bnVsbCl9fWVsc2UgTj0hMX12YXIgUztpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgRilTPWZ1bmN0aW9uKCl7RihSKX07ZWxzZSBpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIE1lc3NhZ2VDaGFubmVsKXt2YXIgVD1uZXcgTWVzc2FnZUNoYW5uZWwsVT1ULnBvcnQyO1QucG9ydDEub25tZXNzYWdlPVI7Uz1mdW5jdGlvbigpe1UucG9zdE1lc3NhZ2UobnVsbCl9fWVsc2UgUz1mdW5jdGlvbigpe0QoUiwwKX07ZnVuY3Rpb24gSShhKXtPPWE7Tnx8KE49ITAsUygpKX1mdW5jdGlvbiBLKGEsYil7TD1EKGZ1bmN0aW9uKCl7YShleHBvcnRzLnVuc3RhYmxlX25vdygpKX0sYil9XG5leHBvcnRzLnVuc3RhYmxlX0lkbGVQcmlvcml0eT01O2V4cG9ydHMudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHk9MTtleHBvcnRzLnVuc3RhYmxlX0xvd1ByaW9yaXR5PTQ7ZXhwb3J0cy51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eT0zO2V4cG9ydHMudW5zdGFibGVfUHJvZmlsaW5nPW51bGw7ZXhwb3J0cy51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eT0yO2V4cG9ydHMudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7YS5jYWxsYmFjaz1udWxsfTtleHBvcnRzLnVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7QXx8enx8KEE9ITAsSShKKSl9O1xuZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbihhKXswPmF8fDEyNTxhP2NvbnNvbGUuZXJyb3IoXCJmb3JjZUZyYW1lUmF0ZSB0YWtlcyBhIHBvc2l0aXZlIGludCBiZXR3ZWVuIDAgYW5kIDEyNSwgZm9yY2luZyBmcmFtZSByYXRlcyBoaWdoZXIgdGhhbiAxMjUgZnBzIGlzIG5vdCBzdXBwb3J0ZWRcIik6UD0wPGE/TWF0aC5mbG9vcigxRTMvYSk6NX07ZXhwb3J0cy51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbD1mdW5jdGlvbigpe3JldHVybiB5fTtleHBvcnRzLnVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIGgocil9O2V4cG9ydHMudW5zdGFibGVfbmV4dD1mdW5jdGlvbihhKXtzd2l0Y2goeSl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6dmFyIGI9MzticmVhaztkZWZhdWx0OmI9eX12YXIgYz15O3k9Yjt0cnl7cmV0dXJuIGEoKX1maW5hbGx5e3k9Y319O2V4cG9ydHMudW5zdGFibGVfcGF1c2VFeGVjdXRpb249ZnVuY3Rpb24oKXt9O1xuZXhwb3J0cy51bnN0YWJsZV9yZXF1ZXN0UGFpbnQ9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5PWZ1bmN0aW9uKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOmNhc2UgNDpjYXNlIDU6YnJlYWs7ZGVmYXVsdDphPTN9dmFyIGM9eTt5PWE7dHJ5e3JldHVybiBiKCl9ZmluYWxseXt5PWN9fTtcbmV4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjaz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jPyhjPWMuZGVsYXksYz1cIm51bWJlclwiPT09dHlwZW9mIGMmJjA8Yz9kK2M6ZCk6Yz1kO3N3aXRjaChhKXtjYXNlIDE6dmFyIGU9LTE7YnJlYWs7Y2FzZSAyOmU9MjUwO2JyZWFrO2Nhc2UgNTplPTEwNzM3NDE4MjM7YnJlYWs7Y2FzZSA0OmU9MUU0O2JyZWFrO2RlZmF1bHQ6ZT01RTN9ZT1jK2U7YT17aWQ6dSsrLGNhbGxiYWNrOmIscHJpb3JpdHlMZXZlbDphLHN0YXJ0VGltZTpjLGV4cGlyYXRpb25UaW1lOmUsc29ydEluZGV4Oi0xfTtjPmQ/KGEuc29ydEluZGV4PWMsZih0LGEpLG51bGw9PT1oKHIpJiZhPT09aCh0KSYmKEI/KEUoTCksTD0tMSk6Qj0hMCxLKEgsYy1kKSkpOihhLnNvcnRJbmRleD1lLGYocixhKSxBfHx6fHwoQT0hMCxJKEopKSk7cmV0dXJuIGF9O1xuZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1NO2V4cG9ydHMudW5zdGFibGVfd3JhcENhbGxiYWNrPWZ1bmN0aW9uKGEpe3ZhciBiPXk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGM9eTt5PWI7dHJ5e3JldHVybiBhLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1maW5hbGx5e3k9Y319fTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgXG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzFdLnVzZVsyXSEuL2luZGV4LmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xub3B0aW9ucy5pbnNlcnQgPSAoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChlbGVtZW50KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfTtcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMV0udXNlWzJdIS4vaW5kZXguY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuXG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcblxuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG5cbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG5cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuXG4gIGNzcyArPSBvYmouY3NzO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCJpbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHRvYXN0IH0gZnJvbSAncmVhY3QtaG90LXRvYXN0JztcbmltcG9ydCB7IGRvd25sb2FkTm9TYXZlQ29udGVudHMsIGdldExvYWRlZFR3ZWV0cywgc2F2ZSwgfSBmcm9tICcuLi91dGlscy9zYXZlJztcbmltcG9ydCB7IHNjcm9sbEJvdHRvbVR3ZWV0IH0gZnJvbSAnLi4vdXRpbHMvc2Nyb2xsJztcbmltcG9ydCB7IHVzZURpYWxvZyB9IGZyb20gJy4vZGlhbG9nJztcblxuZGVjbGFyZSB2YXIgdW5zYWZlV2luZG93OiBXaW5kb3cgJiB7XG4gIHNob3dEaXJlY3RvcnlQaWNrZXI6IChvcHRpb25zOiB7IG1vZGU6ICdyZWFkJyB8ICdyZWFkd3JpdGUnIH0pID0+IFByb21pc2U8RmlsZVN5c3RlbURpcmVjdG9yeUhhbmRsZT47XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gQXBwKHt9OiB7fSkge1xuXG4gIGNvbnN0IFtkaXJlY3RvcnksIHNldERpcmVjdG9yeV0gPSB1c2VTdGF0ZTxGaWxlU3lzdGVtRGlyZWN0b3J5SGFuZGxlPigpO1xuICBjb25zdCBsb2FkRGlyZWN0b3J5ID0gdXNlQ2FsbGJhY2soYXN5bmMgKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zb2xlLmxvZygnbG9hZERpcmVjdG9yeScpO1xuICAgICAgY29uc3QgZGlyZWN0b3J5SGFuZGxlID0gYXdhaXQgdW5zYWZlV2luZG93LnNob3dEaXJlY3RvcnlQaWNrZXIoeyBtb2RlOiAncmVhZHdyaXRlJyB9KTtcbiAgICAgIHNldERpcmVjdG9yeShkaXJlY3RvcnlIYW5kbGUpO1xuICAgICAgY29uc29sZS5sb2coJ3NhdmUgZGlyZWN0b3J5Jyk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc29sZS5sb2coJ2NhdWdodCBlcnJvcicsIGUpO1xuICAgICAgdG9hc3QuZXJyb3IoJ2Vycm9yJyk7XG4gICAgICB0b2FzdC5lcnJvcihTdHJpbmcoZSkpO1xuICAgIH1cbiAgfSwgW3NldERpcmVjdG9yeV0pO1xuXG4gIGNvbnN0IGRpYWxvZyA9IHVzZURpYWxvZygyNTcpO1xuICBjb25zdCBzYXZlQWN0aW9uID0gdXNlQ2FsbGJhY2soYXN5bmMgKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBjaGVja092ZXJ3cml0ZSA9IChmaWxlbmFtZTogc3RyaW5nKSA9PiBuZXcgUHJvbWlzZTxib29sZWFuPigocmVzb2x2ZSkgPT4ge1xuICAgICAgICBkaWFsb2cuc2hvd01vZGFsKDxkaXYgY2xhc3NOYW1lPSdmbGV4IGZsZXgtY29sIGJnLXdoaXRlJz5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nYmctd2hpdGUnPmZpbGUgXCJ7ZmlsZW5hbWV9XCIgb3ZlcndyaXRlPzwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdmbGV4IGZsZXgtcm93IGJnLXdoaXRlIGp1c3RpZnktYXJvdW5kJz5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdzZWxlY3Qtbm9uZSBiZy1zbGF0ZS01MCBib3JkZXItMiBib3JkZXItYmxhY2sgcm91bmRlZC1sZydcbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICAgIGRpYWxvZy5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIHJlc29sdmUodHJ1ZSk7XG4gICAgICAgICAgICAgIH19PnllczwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J3NlbGVjdC1ub25lIGJnLXNsYXRlLTUwIGJvcmRlci0yIGJvcmRlci1ibGFjayByb3VuZGVkLWxnJ1xuICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgICAgZGlhbG9nLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShmYWxzZSk7XG4gICAgICAgICAgICAgIH19Pm5vPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2Pik7XG4gICAgICB9KTtcbiAgICAgIGNvbnN0IHR3ZWV0cyA9IGdldExvYWRlZFR3ZWV0cyh1bnNhZmVXaW5kb3cuZG9jdW1lbnQpO1xuXG4gICAgICBjb25zb2xlLmxvZygndHdlZXRzJywgdHdlZXRzKTtcbiAgICAgIGNvbnN0IHNhdmVkID0gYXdhaXQgZG93bmxvYWROb1NhdmVDb250ZW50cyhkaXJlY3RvcnkhLCBjaGVja092ZXJ3cml0ZSk7XG4gICAgICBpZiAoc2F2ZWQgPT09IDApIHtcbiAgICAgICAgc2Nyb2xsQm90dG9tVHdlZXQoKTtcbiAgICAgICAgdG9hc3Quc3VjY2VzcygnbG9hZCBuZXh0IHR3ZWV0cycpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdG9hc3Quc3VjY2Vzcygnc2F2ZSB0d2VldHMnKTtcbiAgICAgIH1cblxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRvYXN0LmVycm9yKFN0cmluZyhlKSk7XG4gICAgfVxuICB9LCBbZGlyZWN0b3J5LCBkaWFsb2ddKTtcblxuICBjb25zb2xlLmxvZygnY3VycmVudCBkaXJlY3RvcnknLCBkaXJlY3RvcnkpO1xuXG4gIHJldHVybiA8PjxkaXZcbiAgICBjbGFzc05hbWU9J3JvdW5kZWQtZnVsbCBiZy13aGl0ZSBzZWxlY3Qtbm9uZSB0ZXh0LWNlbnRlciBib3JkZXItMidcbiAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZygnZGlyZWN0b3J5JywgZGlyZWN0b3J5KTtcbiAgICAgIGlmIChkaXJlY3RvcnkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBsb2FkRGlyZWN0b3J5KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzYXZlQWN0aW9uKCk7XG4gICAgfX19XG4gID57ZGlyZWN0b3J5ID09PSB1bmRlZmluZWQgPyAn5L+d5a2Y44OH44Kj44Os44Kv44OI44Oq44Gu6Kit5a6aJyA6ICfjg63jg7zjg4nmuIjjgb/jg4TjgqTjg7zjg4jjga7kv53lrZgnfTwvZGl2PjwvPjtcbn1cbiIsImltcG9ydCB7IGNyZWF0ZVJlZiwgUmVhY3ROb2RlLCBSZWZPYmplY3QsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNyZWF0ZVJvb3QsIFJvb3QgfSBmcm9tICdyZWFjdC1kb20vY2xpZW50JztcblxuY29uc3QgZGlhbG9nTWFwID0gbmV3IE1hcDxudW1iZXIsIFJlZk9iamVjdDxIVE1MRGlhbG9nRWxlbWVudD4+KCk7XG5cbmNsYXNzIERpYWxvZ0NvbnRyb2xsZXIge1xuICBwcml2YXRlIHJvb3Q/OiBSb290O1xuXG4gIHByaXZhdGUgY3JlYXRlUm9vdCgpIHtcbiAgICBpZiAodGhpcy5yZWYuY3VycmVudCAhPSBudWxsKVxuICAgICAgdGhpcy5yb290ID0gY3JlYXRlUm9vdCh0aGlzLnJlZi5jdXJyZW50KTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVmOiBSZWZPYmplY3Q8SFRNTERpYWxvZ0VsZW1lbnQ+KSB7XG5cbiAgfVxuXG4gIHB1YmxpYyBzaG93TW9kYWwobm9kZTogUmVhY3ROb2RlKSB7XG5cbiAgICBpZiAodGhpcy5yb290ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuY3JlYXRlUm9vdCgpO1xuICAgIH1cbiAgICB0aGlzLnJvb3QhLnJlbmRlcig8Pntub2RlfTwvPik7XG4gICAgdGhpcy5yZWYuY3VycmVudCEuc2hvd01vZGFsKCk7XG4gIH1cblxuICBwdWJsaWMgY2xvc2UoKSB7XG4gICAgdGhpcy5yZWYuY3VycmVudCEuY2xvc2UoKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdXNlRGlhbG9nKGRpYWxvZ0lkOiBudW1iZXIpIHtcbiAgY29uc3QgcmVmID0gZGlhbG9nTWFwLmdldChkaWFsb2dJZCk7XG4gIGlmIChyZWYgPT09IHVuZGVmaW5lZCkge1xuICAgIHRocm93IG5ldyBFcnJvcihgZGlhbG9nSWQ6ICR7ZGlhbG9nSWR9IGlzIHVuZGVmaW5lZGApO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBEaWFsb2dDb250cm9sbGVyKHJlZik7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGlhbG9nUHJvcHMge1xuICBkaWFsb2dJZDogbnVtYmVyO1xufVxuZXhwb3J0IGZ1bmN0aW9uIERpYWxvZyh7IGRpYWxvZ0lkIH06IERpYWxvZ1Byb3BzKSB7XG5cbiAgY29uc3QgZGlhbG9nUmVmID0gY3JlYXRlUmVmPEhUTUxEaWFsb2dFbGVtZW50PigpO1xuICBkaWFsb2dNYXAuc2V0KGRpYWxvZ0lkLCBkaWFsb2dSZWYpO1xuICBjb25zb2xlLmxvZygnZGlhbG9nTWFwIHJlZ2lzdGVyZWQnLCBkaWFsb2dJZCk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgZGlhbG9nTWFwLmRlbGV0ZShkaWFsb2dJZCk7XG4gICAgfVxuICB9LCBbZGlhbG9nSWRdKTtcblxuICByZXR1cm4gPGRpYWxvZyByZWY9e2RpYWxvZ1JlZn0gY2xhc3NOYW1lPSdiZy13aGl0ZSc+XG4gIDwvZGlhbG9nPlxufVxuIiwiaW1wb3J0IHsgR3JhcGhEYXRhIGFzIEdyYXBoLCBEYXRhLCBFbnRyeSwgSXRlbUNvbnRlbnQgfSBmcm9tICcuLi90eXBlcy9ncmFwaHFsJztcbmltcG9ydCB7IFR3ZWV0LCBUd2VldE1lZGlhIH0gZnJvbSAnLi4vdHlwZXMvdHdlZXRzJztcblxuZnVuY3Rpb24gZ2V0SXRlbUNvbnRlbnQoZW50cnk6IEVudHJ5KTogQXJyYXk8SXRlbUNvbnRlbnQ+IHtcbiAgY29uc3QgcmVzdWx0OiBBcnJheTxJdGVtQ29udGVudD4gPSBbXTtcblxuICBpZiAoZW50cnkuY29udGVudC5pdGVtQ29udGVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmVzdWx0LnB1c2goZW50cnkuY29udGVudC5pdGVtQ29udGVudCk7XG4gIH0gZWxzZSBpZiAoZW50cnkuY29udGVudC5pdGVtcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZW50cnkuY29udGVudC5pdGVtcy5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICByZXN1bHQucHVzaChpdGVtLml0ZW0uaXRlbUNvbnRlbnQpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gcGFyc2VFbnRyeShlbnRyeTogRW50cnkpOiBBcnJheTxUd2VldD4ge1xuXG4gIGNvbnN0IHJlc3VsdDogQXJyYXk8VHdlZXQ+ID0gW107XG4gIGNvbnN0IGl0ZW1Db250ZW50cyA9IGdldEl0ZW1Db250ZW50KGVudHJ5KTtcbiAgaWYgKGl0ZW1Db250ZW50cy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgaXRlbUNvbnRlbnRzLmZvckVhY2goKGl0ZW1Db250ZW50KSA9PiB7XG5cbiAgICBsZXQgdHdlZXRfcmVzdWx0cyA9IGl0ZW1Db250ZW50LnR3ZWV0X3Jlc3VsdHM7XG4gICAgaWYgKHR3ZWV0X3Jlc3VsdHMgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgdHdlZXRfcmVzdWx0cy5yZXN1bHQgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgIVsnVHdlZXQnXS5pbmNsdWRlcyh0d2VldF9yZXN1bHRzLnJlc3VsdC5fX3R5cGVuYW1lKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zb2xlLmxvZygndHdlZXQnLCBpdGVtQ29udGVudCk7XG4gIFxuICAgIGNvbnN0IHR3ZWV0UmVmID0gdHdlZXRfcmVzdWx0cy5yZXN1bHQ7XG4gICAgY29uc3QgdXNlclJlZiA9IHR3ZWV0X3Jlc3VsdHMucmVzdWx0LmNvcmUudXNlcl9yZXN1bHRzLnJlc3VsdDtcbiAgICBjb25zdCB0d2VldF9pZF9zdHIgPSB0d2VldFJlZi5yZXN0X2lkO1xuICAgIGNvbnN0IHVzZXJfaWRfc3RyID0gdXNlclJlZi5yZXN0X2lkO1xuXG4gICAgbGV0IHVybCA9IHVzZXJSZWYubGVnYWN5LmVudGl0aWVzLmRlc2NyaXB0aW9uLnVybHMubGVuZ3RoID4gMCA/IHVzZXJSZWYubGVnYWN5LmVudGl0aWVzLmRlc2NyaXB0aW9uLnVybHNbMF0uZXhwYW5kZWRfdXJsIDogdW5kZWZpbmVkO1xuXG4gICAgbGV0IHJldHdlZXRfaWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcbiAgICBsZXQgcmV0d2VldF91c2VyX2lkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XG4gICAgbGV0IHJldHdlZXRfbmFtZTogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICAgIGxldCByZXR3ZWV0X3NjcmVlbl9uYW1lOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gICAgbGV0IHJldHdlZXRfZGVzY3JpcHRpb246IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgICBsZXQgcmV0d2VldF91cmw6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgICBsZXQgcmV0d2VldF9mdWxsdGV4dDogc3RyaW5nIHwgdW5kZWZpbmVkO1xuXG4gICAgaWYgKHR3ZWV0UmVmLmxlZ2FjeS5yZXR3ZWV0ZWRfc3RhdHVzX3Jlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR3ZWV0X2lkID0gdHdlZXRSZWYubGVnYWN5LnJldHdlZXRlZF9zdGF0dXNfcmVzdWx0LnJlc3VsdC5yZXN0X2lkO1xuICAgICAgcmV0d2VldF91c2VyX2lkID0gdHdlZXRSZWYubGVnYWN5LnJldHdlZXRlZF9zdGF0dXNfcmVzdWx0LnJlc3VsdC5jb3JlLnVzZXJfcmVzdWx0cy5yZXN1bHQucmVzdF9pZDtcbiAgICAgIGlmICh0d2VldFJlZi5sZWdhY3kuZW50aXRpZXMudXNlcl9tZW50aW9ucyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHdlZXRfbmFtZSA9IHR3ZWV0UmVmLmxlZ2FjeS5lbnRpdGllcy51c2VyX21lbnRpb25zWzBdLm5hbWU7XG4gICAgICAgIHJldHdlZXRfc2NyZWVuX25hbWUgPSB0d2VldFJlZi5sZWdhY3kuZW50aXRpZXMudXNlcl9tZW50aW9uc1swXS5zY3JlZW5fbmFtZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHdlZXRfbmFtZSA9ICcnO1xuICAgICAgICByZXR3ZWV0X3NjcmVlbl9uYW1lID0gJyc7XG4gICAgICB9XG4gICAgICByZXR3ZWV0X2Rlc2NyaXB0aW9uID0gdHdlZXRSZWYubGVnYWN5LnJldHdlZXRlZF9zdGF0dXNfcmVzdWx0LnJlc3VsdC5sZWdhY3kuZGVzY3JpcHRpb247XG4gICAgICBpZiAodHdlZXRSZWYubGVnYWN5LnJldHdlZXRlZF9zdGF0dXNfcmVzdWx0LnJlc3VsdC5sZWdhY3kuZW50aXRpZXMuZGVzY3JpcHRpb24gIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICB0d2VldFJlZi5sZWdhY3kucmV0d2VldGVkX3N0YXR1c19yZXN1bHQucmVzdWx0LmxlZ2FjeS5lbnRpdGllcy5kZXNjcmlwdGlvbi51cmwgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICB0d2VldFJlZi5sZWdhY3kucmV0d2VldGVkX3N0YXR1c19yZXN1bHQucmVzdWx0LmxlZ2FjeS5lbnRpdGllcy5kZXNjcmlwdGlvbj8udXJsPy51cmxzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0d2VldF91cmwgPSB0d2VldFJlZi5sZWdhY3kucmV0d2VldGVkX3N0YXR1c19yZXN1bHQucmVzdWx0LmxlZ2FjeS5lbnRpdGllcy5kZXNjcmlwdGlvbi51cmwudXJsc1swXS51cmw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR3ZWV0X3VybCA9ICcnO1xuICAgICAgfVxuICAgICAgcmV0d2VldF9mdWxsdGV4dCA9IHR3ZWV0UmVmLmxlZ2FjeS5yZXR3ZWV0ZWRfc3RhdHVzX3Jlc3VsdC5yZXN1bHQubGVnYWN5LmZ1bGxfdGV4dDtcbiAgICB9XG5cbiAgICBsZXQgbWVkaWEgPSBBcnJheTxUd2VldE1lZGlhPigpO1xuICAgIGlmICh0d2VldFJlZi5sZWdhY3kuZXh0ZW5kZWRfZW50aXRpZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgZm9yIChsZXQgbWVkaXVtIG9mIHR3ZWV0UmVmLmxlZ2FjeS5leHRlbmRlZF9lbnRpdGllcy5tZWRpYSkge1xuICAgICAgICBpZiAobWVkaXVtLnR5cGUgPT09ICdwaG90bycpIHtcbiAgICAgICAgICBtZWRpYS5wdXNoKHtcbiAgICAgICAgICAgIG1lZGlhX3R5cGU6IFwicGhvdG9cIixcbiAgICAgICAgICAgIHVybDogbWVkaXVtLm1lZGlhX3VybF9odHRwcyxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmIChbJ2FuaW1hdGVkX2dpZicsICd2aWRlbyddLmluY2x1ZGVzKG1lZGl1bS50eXBlKSkge1xuICAgICAgICAgIGxldCBtZWRpdW1JbmZvID0gbWVkaXVtLnZpZGVvX2luZm8udmFyaWFudHMuZmlsdGVyKCh2YXJpYW50KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdmFyaWFudC5iaXRyYXRlICE9PSB1bmRlZmluZWQ7XG4gICAgICAgICAgfSkuc29ydCgocmhzLCBsaHMpID0+IHtcbiAgICAgICAgICAgIGlmIChyaHMuYml0cmF0ZSEgPiBsaHMuYml0cmF0ZSEpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChyaHMuYml0cmF0ZSEgPCBsaHMuYml0cmF0ZSEpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICB9KVswXTtcbiAgICAgICAgICBtZWRpYS5wdXNoKHtcbiAgICAgICAgICAgIG1lZGlhX3R5cGU6IG1lZGl1bS50eXBlIGFzICdhbmltYXRlZF9naWYnIHwgJ3ZpZGVvJyxcbiAgICAgICAgICAgIHVybDogbWVkaXVtSW5mby51cmwsXG4gICAgICAgICAgICBtZXRhZGF0YTogbWVkaXVtSW5mby5jb250ZW50X3R5cGVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGB1bmtub3duIG1lZGlhIHR5cGU6ICR7bWVkaXVtLnR5cGV9YCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgdHdlZXQ6IFR3ZWV0ID0ge1xuICAgICAgdXNlcjoge1xuICAgICAgICBpZDogcmV0d2VldF91c2VyX2lkID09PSB1bmRlZmluZWQgPyBwYXJzZUludCh1c2VyX2lkX3N0cikgOiBwYXJzZUludChyZXR3ZWV0X3VzZXJfaWQpLFxuICAgICAgICBpZF9zdHI6IHJldHdlZXRfdXNlcl9pZCA9PT0gdW5kZWZpbmVkID8gdXNlcl9pZF9zdHIgOiByZXR3ZWV0X3VzZXJfaWQsXG4gICAgICAgIG5hbWU6IHJldHdlZXRfbmFtZSA/PyB1c2VyUmVmLmxlZ2FjeS5uYW1lLFxuICAgICAgICBzY3JlZW5fbmFtZTogcmV0d2VldF9zY3JlZW5fbmFtZSA/PyB1c2VyUmVmLmxlZ2FjeS5zY3JlZW5fbmFtZSxcbiAgICAgICAgZGVzY3JpcHRpb246IHJldHdlZXRfZGVzY3JpcHRpb24gPz8gdXNlclJlZi5sZWdhY3kuZGVzY3JpcHRpb24sXG4gICAgICAgIHVybDogcmV0d2VldF91cmwgPz8gdXJsXG4gICAgICB9LFxuICAgICAgaWQ6IHJldHdlZXRfaWQgPT09IHVuZGVmaW5lZCA/IHBhcnNlSW50KHR3ZWV0X2lkX3N0cikgOiBwYXJzZUludChyZXR3ZWV0X2lkKSxcbiAgICAgIGlkX3N0cjogcmV0d2VldF9pZCA/PyB0d2VldF9pZF9zdHIsXG4gICAgICB1c2VyX2lkOiByZXR3ZWV0X3VzZXJfaWQgPT09IHVuZGVmaW5lZCA/IHBhcnNlSW50KHVzZXJfaWRfc3RyKSA6IHBhcnNlSW50KHJldHdlZXRfdXNlcl9pZCksXG4gICAgICB1c2VyX2lkX3N0cjogcmV0d2VldF91c2VyX2lkID8/IHVzZXJfaWRfc3RyLFxuICAgICAgZnVsbF90ZXh0OiByZXR3ZWV0X2Z1bGx0ZXh0ID8/IHR3ZWV0UmVmLmxlZ2FjeS5mdWxsX3RleHQsXG4gICAgICBtZWRpYTogbWVkaWFcbiAgICB9O1xuXG4gICAgcmVzdWx0LnB1c2godHdlZXQpO1xuICB9KTtcblxuICBpdGVtQ29udGVudHMuZm9yRWFjaCgoaXRlbUNvbnRlbnQpID0+IHtcbiAgICBsZXQgdHdlZXRfcmVzdWx0cyA9IGl0ZW1Db250ZW50LnR3ZWV0X3Jlc3VsdHM7XG4gICAgaWYgKHR3ZWV0X3Jlc3VsdHMgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgdHdlZXRfcmVzdWx0cy5yZXN1bHQgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgIVsnVHdlZXRXaXRoVmlzaWJpbGl0eVJlc3VsdHMnXS5pbmNsdWRlcyh0d2VldF9yZXN1bHRzLnJlc3VsdC5fX3R5cGVuYW1lKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zb2xlLmxvZyhgdmlzaWJpbGl0eSByZXN1bHRgLCBpdGVtQ29udGVudCk7XG5cbiAgICBjb25zdCB0d2VldFJlZiA9IHR3ZWV0X3Jlc3VsdHMucmVzdWx0LnR3ZWV0O1xuICAgIGNvbnN0IHVzZXJSZWYgPSB0d2VldF9yZXN1bHRzLnJlc3VsdC50d2VldC5jb3JlLnVzZXJfcmVzdWx0cy5yZXN1bHQ7XG4gICAgY29uc3QgdHdlZXRfaWRfc3RyID0gdHdlZXRSZWYucmVzdF9pZDtcbiAgICBjb25zdCB1c2VyX2lkX3N0ciA9IHVzZXJSZWYucmVzdF9pZDtcblxuICAgIGxldCB1cmwgPSB1c2VyUmVmLmxlZ2FjeS5lbnRpdGllcy5kZXNjcmlwdGlvbi51cmxzLmxlbmd0aCA+IDAgPyB1c2VyUmVmLmxlZ2FjeS5lbnRpdGllcy5kZXNjcmlwdGlvbi51cmxzWzBdLmV4cGFuZGVkX3VybCA6IHVuZGVmaW5lZDtcblxuICAgIGxldCByZXR3ZWV0X2lkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XG4gICAgbGV0IHJldHdlZXRfdXNlcl9pZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuICAgIGxldCByZXR3ZWV0X25hbWU6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgICBsZXQgcmV0d2VldF9zY3JlZW5fbmFtZTogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICAgIGxldCByZXR3ZWV0X2Rlc2NyaXB0aW9uOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gICAgbGV0IHJldHdlZXRfdXJsOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gICAgbGV0IHJldHdlZXRfZnVsbHRleHQ6IHN0cmluZyB8IHVuZGVmaW5lZDtcblxuICAgIGlmICh0d2VldFJlZi5sZWdhY3kucmV0d2VldGVkX3N0YXR1c19yZXN1bHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0d2VldF9pZCA9IHR3ZWV0UmVmLmxlZ2FjeS5yZXR3ZWV0ZWRfc3RhdHVzX3Jlc3VsdC5yZXN1bHQudHdlZXQucmVzdF9pZDtcbiAgICAgIHJldHdlZXRfdXNlcl9pZCA9IHR3ZWV0UmVmLmxlZ2FjeS5yZXR3ZWV0ZWRfc3RhdHVzX3Jlc3VsdC5yZXN1bHQudHdlZXQuY29yZS51c2VyX3Jlc3VsdHMucmVzdWx0LnJlc3RfaWQ7XG5cbiAgICAgIGlmICh0d2VldFJlZi5sZWdhY3kuZW50aXRpZXMudXNlcl9tZW50aW9ucyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHdlZXRfbmFtZSA9IHR3ZWV0UmVmLmxlZ2FjeS5lbnRpdGllcy51c2VyX21lbnRpb25zWzBdLm5hbWU7XG4gICAgICAgIHJldHdlZXRfc2NyZWVuX25hbWUgPSB0d2VldFJlZi5sZWdhY3kuZW50aXRpZXMudXNlcl9tZW50aW9uc1swXS5zY3JlZW5fbmFtZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHdlZXRfbmFtZSA9ICcnO1xuICAgICAgICByZXR3ZWV0X3NjcmVlbl9uYW1lID0gJyc7XG4gICAgICB9XG5cbiAgICAgIHJldHdlZXRfZGVzY3JpcHRpb24gPSB0d2VldFJlZi5sZWdhY3kucmV0d2VldGVkX3N0YXR1c19yZXN1bHQucmVzdWx0LnR3ZWV0LmNvcmUudXNlcl9yZXN1bHRzLnJlc3VsdC5sZWdhY3kuZGVzY3JpcHRpb247XG4gICAgICBpZiAodHdlZXRSZWYubGVnYWN5LnJldHdlZXRlZF9zdGF0dXNfcmVzdWx0LnJlc3VsdC50d2VldC5sZWdhY3kuZW50aXRpZXMudXJscyAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgIHR3ZWV0UmVmLmxlZ2FjeS5yZXR3ZWV0ZWRfc3RhdHVzX3Jlc3VsdC5yZXN1bHQudHdlZXQubGVnYWN5LmVudGl0aWVzLnVybHMgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICB0d2VldFJlZi5sZWdhY3kucmV0d2VldGVkX3N0YXR1c19yZXN1bHQucmVzdWx0LnR3ZWV0LmxlZ2FjeS5lbnRpdGllcy51cmxzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0d2VldF91cmwgPSB0d2VldFJlZi5sZWdhY3kucmV0d2VldGVkX3N0YXR1c19yZXN1bHQucmVzdWx0LnR3ZWV0LmxlZ2FjeS5lbnRpdGllcy51cmxzWzBdLnVybDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHdlZXRfdXJsID0gJyc7XG4gICAgICB9XG4gICAgICByZXR3ZWV0X2Z1bGx0ZXh0ID0gdHdlZXRSZWYubGVnYWN5LnJldHdlZXRlZF9zdGF0dXNfcmVzdWx0LnJlc3VsdC50d2VldC5sZWdhY3kuZnVsbF90ZXh0O1xuICAgIH1cblxuICAgIGxldCBtZWRpYSA9IEFycmF5PFR3ZWV0TWVkaWE+KCk7XG4gICAgaWYgKHR3ZWV0UmVmLmxlZ2FjeS5leHRlbmRlZF9lbnRpdGllcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBmb3IgKGxldCBtZWRpdW0gb2YgdHdlZXRSZWYubGVnYWN5LmV4dGVuZGVkX2VudGl0aWVzLm1lZGlhKSB7XG4gICAgICAgIGlmIChtZWRpdW0udHlwZSA9PT0gJ3Bob3RvJykge1xuICAgICAgICAgIG1lZGlhLnB1c2goe1xuICAgICAgICAgICAgbWVkaWFfdHlwZTogXCJwaG90b1wiLFxuICAgICAgICAgICAgdXJsOiBtZWRpdW0ubWVkaWFfdXJsX2h0dHBzLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKFsnYW5pbWF0ZWRfZ2lmJywgJ3ZpZGVvJ10uaW5jbHVkZXMobWVkaXVtLnR5cGUpKSB7XG4gICAgICAgICAgbGV0IG1lZGl1bUluZm8gPSBtZWRpdW0udmlkZW9faW5mby52YXJpYW50cy5maWx0ZXIoKHZhcmlhbnQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB2YXJpYW50LmJpdHJhdGUgIT09IHVuZGVmaW5lZDtcbiAgICAgICAgICB9KS5zb3J0KChyaHMsIGxocykgPT4ge1xuICAgICAgICAgICAgaWYgKHJocy5iaXRyYXRlISA+IGxocy5iaXRyYXRlISkge1xuICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHJocy5iaXRyYXRlISA8IGxocy5iaXRyYXRlISkge1xuICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgIH0pWzBdO1xuICAgICAgICAgIG1lZGlhLnB1c2goe1xuICAgICAgICAgICAgbWVkaWFfdHlwZTogbWVkaXVtLnR5cGUgYXMgJ2FuaW1hdGVkX2dpZicgfCAndmlkZW8nLFxuICAgICAgICAgICAgdXJsOiBtZWRpdW1JbmZvLnVybCxcbiAgICAgICAgICAgIG1ldGFkYXRhOiBtZWRpdW1JbmZvLmNvbnRlbnRfdHlwZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYHVua25vd24gbWVkaWEgdHlwZTogJHttZWRpdW0udHlwZX1gKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGxldCB0d2VldDogVHdlZXQgPSB7XG4gICAgICB1c2VyOiB7XG4gICAgICAgIGlkOiByZXR3ZWV0X3VzZXJfaWQgPT09IHVuZGVmaW5lZCA/IHBhcnNlSW50KHVzZXJfaWRfc3RyKSA6IHBhcnNlSW50KHJldHdlZXRfdXNlcl9pZCksXG4gICAgICAgIGlkX3N0cjogcmV0d2VldF91c2VyX2lkID09PSB1bmRlZmluZWQgPyB1c2VyX2lkX3N0ciA6IHJldHdlZXRfdXNlcl9pZCxcbiAgICAgICAgbmFtZTogcmV0d2VldF9uYW1lID8/IHVzZXJSZWYubGVnYWN5Lm5hbWUsXG4gICAgICAgIHNjcmVlbl9uYW1lOiByZXR3ZWV0X3NjcmVlbl9uYW1lID8/IHVzZXJSZWYubGVnYWN5LnNjcmVlbl9uYW1lLFxuICAgICAgICBkZXNjcmlwdGlvbjogcmV0d2VldF9kZXNjcmlwdGlvbiA/PyB1c2VyUmVmLmxlZ2FjeS5kZXNjcmlwdGlvbixcbiAgICAgICAgdXJsOiByZXR3ZWV0X3VybCA/PyB1cmxcbiAgICAgIH0sXG4gICAgICBpZDogcmV0d2VldF9pZCA9PT0gdW5kZWZpbmVkID8gcGFyc2VJbnQodHdlZXRfaWRfc3RyKSA6IHBhcnNlSW50KHJldHdlZXRfaWQpLFxuICAgICAgaWRfc3RyOiByZXR3ZWV0X2lkID8/IHR3ZWV0X2lkX3N0cixcbiAgICAgIHVzZXJfaWQ6IHJldHdlZXRfdXNlcl9pZCA9PT0gdW5kZWZpbmVkID8gcGFyc2VJbnQodXNlcl9pZF9zdHIpIDogcGFyc2VJbnQocmV0d2VldF91c2VyX2lkKSxcbiAgICAgIHVzZXJfaWRfc3RyOiByZXR3ZWV0X3VzZXJfaWQgPz8gdXNlcl9pZF9zdHIsXG4gICAgICBmdWxsX3RleHQ6IHJldHdlZXRfZnVsbHRleHQgPz8gdHdlZXRSZWYubGVnYWN5LmZ1bGxfdGV4dCxcbiAgICAgIG1lZGlhOiBtZWRpYVxuICAgIH07XG5cbiAgICBjb25zb2xlLmxvZyhgdHdlZXQgaWQ6ICR7dHdlZXQuaWRfc3RyfWApO1xuICAgIHJlc3VsdC5wdXNoKHR3ZWV0KTtcbiAgfSk7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gcGFyc2VEYXRhKGRhdGE6IERhdGEpOiBBcnJheTxUd2VldD4ge1xuXG4gIGxldCByZXN1bHRzID0gbmV3IEFycmF5PFR3ZWV0PigpO1xuXG4gIGlmIChkYXRhLnR5cGUgPT09ICdUaW1lbGluZVBpbkVudHJ5Jykge1xuICAgIGxldCBtYXlCZVR3ZWV0ID0gcGFyc2VFbnRyeShkYXRhLmVudHJ5KTtcbiAgICBpZiAobWF5QmVUd2VldCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXN1bHRzID0gcmVzdWx0cy5jb25jYXQobWF5QmVUd2VldCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKGRhdGEudHlwZSA9PT0gJ1RpbWVsaW5lQWRkRW50cmllcycpIHtcbiAgICBmb3IgKGxldCBlbnRyeSBvZiBkYXRhLmVudHJpZXMpIHtcbiAgICAgIGxldCBtYXlCZVR3ZWV0ID0gcGFyc2VFbnRyeShlbnRyeSk7XG4gICAgICBpZiAobWF5QmVUd2VldCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlc3VsdHMgPSByZXN1bHRzLmNvbmNhdChtYXlCZVR3ZWV0KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0cztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlKGpzb246IEdyYXBoKTogQXJyYXk8VHdlZXQ+IHtcbiAgbGV0IHJlc3VsdHMgPSBuZXcgQXJyYXk8VHdlZXQ+KCk7XG5cbiAgaWYgKGpzb24uZGF0YS51c2VyICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAoanNvbi5kYXRhLnVzZXIucmVzdWx0LnRpbWVsaW5lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGZvciAobGV0IGRhdGEgb2YganNvbi5kYXRhLnVzZXIucmVzdWx0LnRpbWVsaW5lLnRpbWVsaW5lLmluc3RydWN0aW9ucykge1xuICAgICAgICBsZXQgdHdlZXRzID0gcGFyc2VEYXRhKGRhdGEpO1xuICAgICAgICBpZiAodHdlZXRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICByZXN1bHRzID0gcmVzdWx0cy5jb25jYXQodHdlZXRzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoanNvbi5kYXRhLnVzZXIucmVzdWx0LnRpbWVsaW5lX3YyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGZvciAobGV0IGRhdGEgb2YganNvbi5kYXRhLnVzZXIucmVzdWx0LnRpbWVsaW5lX3YyLnRpbWVsaW5lLmluc3RydWN0aW9ucykge1xuICAgICAgICBsZXQgdHdlZXRzID0gcGFyc2VEYXRhKGRhdGEpO1xuICAgICAgICBpZiAodHdlZXRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICByZXN1bHRzID0gcmVzdWx0cy5jb25jYXQodHdlZXRzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChqc29uLmRhdGEuaG9tZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZm9yIChsZXQgZGF0YSBvZiBqc29uLmRhdGEuaG9tZS5ob21lX3RpbWVsaW5lX3VydC5pbnN0cnVjdGlvbnMpIHtcbiAgICAgIGxldCB0d2VldHMgPSBwYXJzZURhdGEoZGF0YSk7XG4gICAgICBpZiAodHdlZXRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmVzdWx0cyA9IHJlc3VsdHMuY29uY2F0KHR3ZWV0cyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKGpzb24uZGF0YS50aHJlYWRlZF9jb252ZXJzYXRpb25fd2l0aF9pbmplY3Rpb25zICE9PSB1bmRlZmluZWQpIHtcbiAgICBmb3IgKGxldCBkYXRhIG9mIGpzb24uZGF0YS50aHJlYWRlZF9jb252ZXJzYXRpb25fd2l0aF9pbmplY3Rpb25zLmluc3RydWN0aW9ucykge1xuICAgICAgbGV0IHR3ZWV0cyA9IHBhcnNlRGF0YShkYXRhKTtcbiAgICAgIGlmICh0d2VldHMubGVuZ3RoID4gMCkge1xuICAgICAgICByZXN1bHRzID0gcmVzdWx0cy5jb25jYXQodHdlZXRzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoanNvbi5kYXRhLnRocmVhZGVkX2NvbnZlcnNhdGlvbl93aXRoX2luamVjdGlvbnNfdjIgIT09IHVuZGVmaW5lZCkge1xuICAgIGZvciAobGV0IGRhdGEgb2YganNvbi5kYXRhLnRocmVhZGVkX2NvbnZlcnNhdGlvbl93aXRoX2luamVjdGlvbnNfdjIuaW5zdHJ1Y3Rpb25zKSB7XG4gICAgICBsZXQgdHdlZXRzID0gcGFyc2VEYXRhKGRhdGEpO1xuICAgICAgaWYgKHR3ZWV0cy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJlc3VsdHMgPSByZXN1bHRzLmNvbmNhdCh0d2VldHMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChqc29uLmRhdGEuYm9va21hcmtfdGltZWxpbmUgIT09IHVuZGVmaW5lZCkge1xuICAgIGZvciAobGV0IGRhdGEgb2YganNvbi5kYXRhLmJvb2ttYXJrX3RpbWVsaW5lLnRpbWVsaW5lLmluc3RydWN0aW9ucykge1xuICAgICAgbGV0IHR3ZWV0cyA9IHBhcnNlRGF0YShkYXRhKTtcbiAgICAgIGlmICh0d2VldHMubGVuZ3RoID4gMCkge1xuICAgICAgICByZXN1bHRzID0gcmVzdWx0cy5jb25jYXQodHdlZXRzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoanNvbi5kYXRhLmxpc3Q/LnR3ZWV0c190aW1lbGluZS50aW1lbGluZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZm9yIChsZXQgZGF0YSBvZiBqc29uLmRhdGEubGlzdC50d2VldHNfdGltZWxpbmUudGltZWxpbmUuaW5zdHJ1Y3Rpb25zKSB7XG4gICAgICBsZXQgdHdlZXRzID0gcGFyc2VEYXRhKGRhdGEpO1xuICAgICAgaWYgKHR3ZWV0cy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJlc3VsdHMgPSByZXN1bHRzLmNvbmNhdCh0d2VldHMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHRzO1xufVxuIiwiaW1wb3J0IHsgWEhSVHdlZXRPYmplY3QgYXMgeGhyLCBVc2VycywgVXNlciBhcyB4aHJVc2VyLCBUd2VldHMsIEdsb2JhbFR3ZWV0LCBNZWRpdW0sIEVudHJpZXMsIEV4dGVuZGVkRW50aXRpZXMsIFZpZGVvSW5mbywgVmFyaWFudCB9IGZyb20gJy4uL3R5cGVzL3hocic7XG5pbXBvcnQgeyBVc2VyLCBUd2VldCwgVHdlZXRNZWRpYSB9IGZyb20gJy4uL3R5cGVzL3R3ZWV0cyc7XG5cbmZ1bmN0aW9uIHBhcnNlX3VzZXIodXNlcjogeGhyVXNlcik6IFVzZXIge1xuXG4gIGxldCB1cmwgPSB1c2VyLmVudGl0aWVzLnVybCAhPSB1bmRlZmluZWQgPyB1c2VyLmVudGl0aWVzLnVybC51cmxzWzBdLmV4cGFuZGVkX3VybCA6IHVuZGVmaW5lZDtcbiAgbGV0IHJlc3VsdDogVXNlciA9IHtcbiAgICBpZDogdXNlci5pZCxcbiAgICBpZF9zdHI6IHVzZXIuaWRfc3RyLFxuICAgIG5hbWU6IHVzZXIubmFtZSxcbiAgICBzY3JlZW5fbmFtZTogdXNlci5zY3JlZW5fbmFtZSxcbiAgICBkZXNjcmlwdGlvbjogdXNlci5kZXNjcmlwdGlvbiA/IHVzZXIuZGVzY3JpcHRpb24gOiB1bmRlZmluZWQsXG4gICAgdXJsOiB1cmxcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBwYXJzZV91c2Vycyh1c2VyczogVXNlcnMpOiBBcnJheTxVc2VyPiB7XG4gIGxldCByZXN1bHRzID0gbmV3IEFycmF5PFVzZXI+KCk7XG5cbiAgZm9yIChsZXQga2V5IG9mIE9iamVjdC5rZXlzKHVzZXJzKSkge1xuICAgIGxldCB1c2VyID0gdXNlcnNba2V5XTtcbiAgICByZXN1bHRzLnB1c2gocGFyc2VfdXNlcih1c2VyKSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdHM7XG59XG5cbmludGVyZmFjZSByZXNvdXJjZV9pbmZvIHtcbiAgdXJsOiBzdHJpbmc7XG4gIG1pbWVfdHlwZTogc3RyaW5nO1xuICBleHRlbnNpb246IHN0cmluZztcbn07XG5cbmZ1bmN0aW9uIHJlc291cmNlX2luZm8odmluZm86IFZpZGVvSW5mbyk6IFR3ZWV0TWVkaWEge1xuICBsZXQgY2FuZGlkYXRlID0gdmluZm8udmFyaWFudHMuZmlsdGVyKCh2YXJpYW50KSA9PiB7XG4gICAgcmV0dXJuIHZhcmlhbnQuYml0cmF0ZSAhPT0gdW5kZWZpbmVkO1xuICB9KS5yZWR1Y2UoKGFjYzogVmFyaWFudCB8IHVuZGVmaW5lZCwgY3VyOiBWYXJpYW50KTogVmFyaWFudCA9PiB7XG4gICAgaWYgKGFjYyA9PT0gdW5kZWZpbmVkIHx8IGN1ci5iaXRyYXRlISA+IGFjYy5iaXRyYXRlISkge1xuICAgICAgcmV0dXJuIGN1cjtcbiAgICB9XG4gICAgcmV0dXJuIGFjYztcbiAgfSwgdW5kZWZpbmVkKTtcblxuICByZXR1cm4ge1xuICAgIG1lZGlhX3R5cGU6ICd2aWRlbycsXG4gICAgdXJsOiBjYW5kaWRhdGUhLnVybCxcbiAgICBtZXRhZGF0YTogY2FuZGlkYXRlIS5jb250ZW50X3R5cGVcbiAgfTtcbn1cblxuZnVuY3Rpb24gcGFyc2VfbWVkaXVtKG1lZGl1bTogTWVkaXVtKTogVHdlZXRNZWRpYSB7XG4gIGlmIChtZWRpdW0udHlwZSAhPT0gJ3Bob3RvJykge1xuICAgIHJldHVybiByZXNvdXJjZV9pbmZvKG1lZGl1bS52aWRlb19pbmZvISk7XG4gIH1cbiAgbGV0IHJlc3VsdDogVHdlZXRNZWRpYSA9IHtcbiAgICBtZWRpYV90eXBlOiBtZWRpdW0udHlwZSxcbiAgICB1cmw6IG1lZGl1bS5tZWRpYV91cmxfaHR0cHMsXG4gIH07XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gcGFyc2VfZW50cmllcyhlbnRyaWVzPzogRW50cmllcyk6IEFycmF5PFR3ZWV0TWVkaWE+IHtcbiAgbGV0IHJlc3VsdHMgPSBuZXcgQXJyYXk8VHdlZXRNZWRpYT4oKTtcblxuICBpZiAoZW50cmllcyAhPT0gdW5kZWZpbmVkICYmIGVudHJpZXMubWVkaWEgIT09IHVuZGVmaW5lZCkge1xuICAgIGZvciAobGV0IG1lZGl1bSBvZiBlbnRyaWVzLm1lZGlhKSB7XG4gICAgICByZXN1bHRzLnB1c2gocGFyc2VfbWVkaXVtKG1lZGl1bSkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0cztcbn1cblxuZnVuY3Rpb24gcGFyc2VfZXh0ZW5kZWRfZW50cmllcyhlbnRyaWVzPzogRXh0ZW5kZWRFbnRpdGllcyk6IEFycmF5PFR3ZWV0TWVkaWE+IHtcbiAgbGV0IHJlc3VsdHMgPSBuZXcgQXJyYXk8VHdlZXRNZWRpYT4oKTtcblxuICBpZiAoZW50cmllcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZm9yIChsZXQgbWVkaXVtIG9mIGVudHJpZXMubWVkaWEpIHtcbiAgICAgIHJlc3VsdHMucHVzaChwYXJzZV9tZWRpdW0obWVkaXVtKSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHRzO1xufVxuXG5mdW5jdGlvbiBwYXJzZV90d2VldCh0d2VldDogR2xvYmFsVHdlZXQpOiBUd2VldCB7XG5cbiAgbGV0IHJlc3VsdDogVHdlZXQgPSB7XG4gICAgdXNlcjogdW5kZWZpbmVkIGFzIHVua25vd24gYXMgVXNlcixcbiAgICBpZDogdHdlZXQuaWQsXG4gICAgaWRfc3RyOiB0d2VldC5pZF9zdHIsXG4gICAgdXNlcl9pZDogdHdlZXQudXNlcl9pZCxcbiAgICB1c2VyX2lkX3N0cjogdHdlZXQudXNlcl9pZF9zdHIsXG4gICAgZnVsbF90ZXh0OiB0d2VldC5mdWxsX3RleHQsXG4gICAgcmV0d2VldF9pZF9zdHI6IHR3ZWV0LnJldHdlZXRlZF9zdGF0dXNfaWRfc3RyID8gdHdlZXQucmV0d2VldGVkX3N0YXR1c19pZF9zdHIgOiB1bmRlZmluZWQsXG4gICAgbWVkaWE6IHBhcnNlX2V4dGVuZGVkX2VudHJpZXModHdlZXQuZXh0ZW5kZWRfZW50aXRpZXMpXG4gIH07XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gcGFyc2VfdHdlZXRzKHR3ZWV0czogVHdlZXRzKTogQXJyYXk8VHdlZXQ+IHtcbiAgbGV0IHJlc3VsdHMgPSBuZXcgQXJyYXk8VHdlZXQ+KCk7XG5cbiAgZm9yIChsZXQga2V5IG9mIE9iamVjdC5rZXlzKHR3ZWV0cyBhcyBhbnkpKSB7XG4gICAgbGV0IHR3ZWV0ID0gdHdlZXRzW2tleV07XG4gICAgcmVzdWx0cy5wdXNoKHBhcnNlX3R3ZWV0KHR3ZWV0KSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdHM7XG59XG5cbmZ1bmN0aW9uIGluamVjdFVzZXIodHdlZXRzOiBBcnJheTxUd2VldD4sIHVzZXJzOiBBcnJheTxVc2VyPik6IEFycmF5PFR3ZWV0PiB7XG4gIGxldCB1c2VyTWFwID0gbmV3IE1hcDxzdHJpbmcsIFVzZXI+KCk7XG4gIHVzZXJzLmZvckVhY2goKHVzZXIpID0+IHtcbiAgICB1c2VyTWFwLnNldCh1c2VyLmlkX3N0ciwgdXNlcik7XG4gIH0pO1xuXG4gIHJldHVybiB0d2VldHMubWFwKCh0d2VldCkgPT4ge1xuICAgIGxldCByZXN1bHQgPSB0d2VldDtcbiAgICByZXN1bHQudXNlciA9IHVzZXJNYXAuZ2V0KHR3ZWV0LnVzZXJfaWRfc3RyKSE7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZShqc29uOiB4aHIpOiBBcnJheTxUd2VldD4ge1xuXG4gIGxldCB1c2VyczogQXJyYXk8VXNlcj4gPSBbXTtcbiAgaWYgKGpzb24uZ2xvYmFsT2JqZWN0cy51c2VycyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdXNlcnMgPSBwYXJzZV91c2Vycyhqc29uLmdsb2JhbE9iamVjdHMudXNlcnMpO1xuICB9XG4gIGlmICh1c2Vycy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICBsZXQgdHdlZXRzOiBBcnJheTxUd2VldD4gPSBbXTtcbiAgaWYgKGpzb24uZ2xvYmFsT2JqZWN0cy50d2VldHMgIT09IHVuZGVmaW5lZCkge1xuICAgIHR3ZWV0cyA9IHBhcnNlX3R3ZWV0cyhqc29uLmdsb2JhbE9iamVjdHMudHdlZXRzKTtcbiAgfVxuICBpZiAodHdlZXRzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIHJldHVybiBpbmplY3RVc2VyKHR3ZWV0cywgdXNlcnMpO1xufVxuIiwiZXhwb3J0IGNvbnN0IE5PTlNBVkVfQ09MT1IgPSAnZ3JheSc7XG5leHBvcnQgY29uc3QgU0FWRURfQ09MT1IgPSAnZ3JlZW4nO1xuIiwiZXhwb3J0IHR5cGUgeyBHcmFwaERhdGEsIERhdGEsIEVudHJ5LCBJdGVtQ29udGVudCB9IGZyb20gJy4vZ3JhcGhxbCc7XG5leHBvcnQgdHlwZSB7IFVzZXIsIE1ldGFkYXRhLCBUd2VldE1lZGlhLCBUd2VldCB9IGZyb20gJy4vdHdlZXRzJztcbmV4cG9ydCB0eXBlIHsgRG93bmxvYWROb3RpZnksIEFyY2hpdmVOb3RpZnkgfSBmcm9tICcuL25vdGlmeSc7XG5leHBvcnQgdHlwZSB7IE92ZXJ3cml0ZVF1ZXJ5Q2FsbGJhY2sgfSBmcm9tICcuL2Z1bmN0aW9ucyc7XG5leHBvcnQgeyBOT05TQVZFX0NPTE9SLCBTQVZFRF9DT0xPUiB9IGZyb20gJy4vY29uc3RhbnRzJztcbiIsImNvbnN0IGV4dFBhdHRlcm4gPSBuZXcgUmVnRXhwKCdeLipbLl0oW14uP10rKSg/Ols/XS4qKT8kJyk7XG5leHBvcnQgZnVuY3Rpb24gZXh0ZW5zaW9uKHVybDogc3RyaW5nKTogc3RyaW5nIHtcbiAgbGV0IG1hdGNoID0gZXh0UGF0dGVybi5leGVjKHVybCk7XG4gIGlmIChtYXRjaCA9PT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYGV4dCBwYXR0ZXJuIG5vdCBmb3VuZDogJHt1cmx9YCk7XG4gIH1cblxuICByZXR1cm4gbWF0Y2hbMV07XG59XG4iLCJpbXBvcnQgeyB0b2FzdCB9IGZyb20gJ3JlYWN0LWhvdC10b2FzdCc7XG5pbXBvcnQgeyBnZXRJZCB9IGZyb20gJy4vaWRzJztcbmltcG9ydCB7IGdldE1hcmssIG1hcmsgfSBmcm9tICcuL21hcmsnO1xuaW1wb3J0IHsgc3RvcmUsIGxvYWQgfSBmcm9tICcuL2xvY2FsLXN0b3JhZ2UnO1xuaW1wb3J0IHsgc2F2ZSB9IGZyb20gJy4vc2F2ZSc7XG5pbXBvcnQgeyBzYXZlQXMgfSBmcm9tICdmaWxlLXNhdmVyJztcbi8vLyA8cmVmZXJlbmNlIHR5cGVzPVwiLi4vLi4vbGliL2dtLWdvb2RpZXMvaW5kZXguZC50c1wiIC8+XG5pbXBvcnQgeyB4aHJIb29rIH0gZnJvbSAnLi4vLi4vbGliL2dtLWdvb2RpZXMnO1xuaW1wb3J0IHsgcGFyc2UgYXMgeGhyUGFyc2UgfSBmcm9tICcuLi9wYXJzZXIvWEhSVHdlZXRQYXJzZXInO1xuaW1wb3J0IHsgcGFyc2UgYXMgZ3JhcGhQYXJzZSB9IGZyb20gJy4uL3BhcnNlci9HcmFwaFR3ZWV0UGFyc2VyJztcbmltcG9ydCB0eXBlIHsgVHdlZXQgfSBmcm9tICcuLi90eXBlcyc7XG5cbmltcG9ydCB7IE5PTlNBVkVfQ09MT1IsIFNBVkVEX0NPTE9SIH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5leHBvcnQgZnVuY3Rpb24gY2hhbmdlQ29sb3IoYnV0dG9uOiBIVE1MQnV0dG9uRWxlbWVudCwgc2F2ZWQ6IGJvb2xlYW4pIHtcbiAgaWYgKHNhdmVkKSB7XG4gICAgYnV0dG9uLnN0eWxlLmJhY2tncm91bmQgPSBTQVZFRF9DT0xPUjtcbiAgICBidXR0b24uaW5uZXJUZXh0ID0gJ2FscmVhZHkgc2F2ZWQnO1xuICAgIGJ1dHRvbi5kYXRhc2V0LmRvd25sb2FkZWQgPSAndHJ1ZSc7XG4gIH0gZWxzZSB7XG4gICAgYnV0dG9uLnN0eWxlLmJhY2tncm91bmQgPSBOT05TQVZFX0NPTE9SO1xuICAgIGJ1dHRvbi5pbm5lclRleHQgPSAnc2F2ZSc7XG4gICAgYnV0dG9uLmRhdGFzZXQuZG93bmxvYWRlZCA9ICdmYWxzZSc7XG4gIH1cbn1cblxudHlwZSBDcmVhdGVFbGVtZW50RnVuY3Rpb25UeXBlPEsgZXh0ZW5kcyBrZXlvZiBIVE1MRWxlbWVudFRhZ05hbWVNYXAgPSBrZXlvZiBIVE1MRWxlbWVudFRhZ05hbWVNYXA+ID1cbiAgKG5hbWU6IEssIG9wdGlvbnM/OiBFbGVtZW50Q3JlYXRpb25PcHRpb25zKSA9PiBIVE1MRWxlbWVudFRhZ05hbWVNYXBbS107XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFbGVtZW50SG9vayhvcmlnOiBDcmVhdGVFbGVtZW50RnVuY3Rpb25UeXBlLCBkb2M6IERvY3VtZW50KTogQ3JlYXRlRWxlbWVudEZ1bmN0aW9uVHlwZSB7XG5cbiAgY29uc3QgaG9va2VkQ3JlYXRlRWxlbWVudCA9IDxLIGV4dGVuZHMga2V5b2YgSFRNTEVsZW1lbnRUYWdOYW1lTWFwPihcbiAgICBuYW1lOiBLLFxuICAgIG9wdGlvbnM/OiBFbGVtZW50Q3JlYXRpb25PcHRpb25zXG4gICk6IEhUTUxFbGVtZW50VGFnTmFtZU1hcFtLXSA9PiB7XG5cbiAgICBsZXQgZWxlbSA9IG9yaWcuY2FsbChkb2MsIG5hbWUsIG9wdGlvbnMpO1xuICAgIGxldCB0YWdOYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgaWYgKHRhZ05hbWUgPT09ICdhcnRpY2xlJykge1xuICAgICAgZWxlbS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICAgIGxldCBoYW5kbGVyID0gKGVsZW06IEVsZW1lbnQpID0+IHtcbiAgICAgICAgbGV0IGlkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIGxldCB0aW1lID0gZWxlbS5xdWVyeVNlbGVjdG9yKCdhIHRpbWUnKTtcbiAgICAgICAgaWYgKHRpbWUgIT09IG51bGwpIHtcbiAgICAgICAgICBpZCA9IGdldElkKCh0aW1lLnBhcmVudE5vZGUhIGFzIEhUTUxBbmNob3JFbGVtZW50KS5ocmVmKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZCA9IGdldElkKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmV0dXJuIGVsZW07XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgYnV0dG9uID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgICBidXR0b24uc3R5bGUud2lkdGggPSAnMTAwJSc7XG4gICAgICAgIGJ1dHRvbi5kYXRhc2V0LnR5cGUgPSAnZG93bmxvYWQnO1xuICAgICAgICBidXR0b24uZGF0YXNldC50d2VldElkID0gaWQ7XG5cbiAgICAgICAgaWYgKGdldE1hcmsoaWQpKSB7XG4gICAgICAgICAgY2hhbmdlQ29sb3IoYnV0dG9uLCB0cnVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjaGFuZ2VDb2xvcihidXR0b24sIGZhbHNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHVwZGF0ZUJ1dHRvblRleHQgPSAodGV4dDogc3RyaW5nKTogdm9pZCA9PiB7XG4gICAgICAgICAgYnV0dG9uLmlubmVyVGV4dCA9IHRleHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgbGV0IHRvdGFsID0gMDtcbiAgICAgICAgY29uc3QgdXBkYXRlRG93bmxvYWRQcm9ncmVzcyA9IChkZWx0YTogbnVtYmVyKTogdm9pZCA9PiB7XG4gICAgICAgICAgdG90YWwgKz0gZGVsdGE7XG4gICAgICAgICAgdXBkYXRlQnV0dG9uVGV4dChgJHt0b3RhbH0gYnl0ZXMgZG93bmxvYWRlZGApO1xuICAgICAgICB9XG5cbiAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgIGlmIChpZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0b2FzdC5lcnJvcignaWQgaXMgdW5kZWZpbmVkJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGxldCB0d2VldCA9IGxvYWQoaWQpO1xuXG4gICAgICAgICAgaWYgKHR3ZWV0ICE9PSB1bmRlZmluZWQpIHtcblxuICAgICAgICAgICAgc2F2ZSh0d2VldCwgdXBkYXRlRG93bmxvYWRQcm9ncmVzcywgdXBkYXRlQnV0dG9uVGV4dCkudGhlbigoW2Jsb2IsIGZpbGVuYW1lXSkgPT4ge1xuICAgICAgICAgICAgICBzYXZlQXMoYmxvYiwgZmlsZW5hbWUpO1xuICAgICAgICAgICAgfSkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgIG1hcmsodHdlZXQhKTtcbiAgICAgICAgICAgICAgYnV0dG9uLnN0eWxlLmJhY2tncm91bmQgPSBTQVZFRF9DT0xPUjtcbiAgICAgICAgICAgICAgYnV0dG9uLmRhdGFzZXQuZG93bmxvYWRlZCA9ICdkb3dubG9hZGVkJztcbiAgICAgICAgICAgICAgcG9zdE1lc3NhZ2UoeyB0d2VldDogdHdlZXQgfSwgJyonKTtcbiAgICAgICAgICAgIH0pLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICAgICAgYWxlcnQoZXJyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGVsZW0uYXBwZW5kQ2hpbGQoYnV0dG9uKTtcbiAgICAgIH07XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgaGFuZGxlcihlbGVtKTtcbiAgICAgIH0sIDApO1xuICAgIH1cblxuICAgIHJldHVybiBlbGVtIGFzIEhUTUxFbGVtZW50VGFnTmFtZU1hcFtLXTtcbiAgfVxuXG4gIHJldHVybiBob29rZWRDcmVhdGVFbGVtZW50O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJYSFJIb29rKCkge1xuICB4aHJIb29rKGFzeW5jICh4aHI6IFhNTEh0dHBSZXF1ZXN0LCAuLi5fYXJnczogYW55KSA9PiB7XG5cbiAgICBjb25zdCBob21lID0gbmV3IFJlZ0V4cCgnXmh0dHBzOi8vdHdpdHRlclsuXWNvbS9pL2FwaS8yL3RpbWVsaW5lL2hvbWVfbGF0ZXN0Wy5danNvbi4qJCcpO1xuICAgIGNvbnN0IGFsbCA9IG5ldyBSZWdFeHAoJ15odHRwczovL3R3aXR0ZXJbLl1jb20vaS9hcGkvMi9ub3RpZmljYXRpb25zL2FsbFsuXWpzb24uKiQnKTtcbiAgICBjb25zdCBydXggPSBuZXcgUmVnRXhwKCdeaHR0cHM6Ly90d2l0dGVyWy5dY29tL2kvYXBpLzIvcnV4Wy5danNvbi4qJCcpO1xuICAgIGNvbnN0IGRldGFpbCA9IG5ldyBSZWdFeHAoJ15odHRwczovL3R3aXR0ZXJbLl1jb20vaS9hcGkvZ3JhcGhxbC9bXi9dKy9Ud2VldERldGFpbC4qJCcpO1xuICAgIGNvbnN0IHVzZXJNZWRpYSA9IG5ldyBSZWdFeHAoJ15odHRwczovL3R3aXR0ZXIuY29tL2kvYXBpL2dyYXBocWwvW14vXSsvVXNlck1lZGlhLiokJyk7XG4gICAgY29uc3QgdXNlclR3ZWV0cyA9IG5ldyBSZWdFeHAoJ15odHRwczovL3R3aXR0ZXIuY29tL2kvYXBpL2dyYXBocWwvW14vXSsvVXNlclR3ZWV0cy4qJCcpO1xuICAgIGNvbnN0IGJvb2ttYXJrcyA9IG5ldyBSZWdFeHAoJ15odHRwczovL3R3aXR0ZXIuY29tL2kvYXBpL2dyYXBocWwvW14vXSsvQm9va21hcmtzLiokJyk7XG4gICAgY29uc3QgaG9tZUxhdGVzdCA9IG5ldyBSZWdFeHAoJ15odHRwczovL3R3aXR0ZXIuY29tL2kvYXBpL2dyYXBocWwvW14vXSsvSG9tZUxhdGVzdFRpbWVsaW5lLiokJyk7XG4gICAgY29uc3QgbGlzdExhdGVzdCA9IG5ldyBSZWdFeHAoJ15odHRwczovL3R3aXR0ZXIuY29tL2kvYXBpL2dyYXBocWwvW14vXSsvTGlzdExhdGVzdFR3ZWV0c1RpbWVsaW5lLiokJyk7XG5cbiAgICBsZXQgdHdlZXRzOiBUd2VldFtdIHwgdW5kZWZpbmVkO1xuXG4gICAgdHJ5IHtcbiAgICAgIGlmIChob21lLnRlc3QoeGhyLnJlc3BvbnNlVVJMKSkge1xuICAgICAgICBjb25zb2xlLmxvZyhgaG9tZTogJHt4aHIucmVzcG9uc2VVUkx9YCk7XG4gICAgICAgIHR3ZWV0cyA9IHhoclBhcnNlKEpTT04ucGFyc2UoeGhyLnJlc3BvbnNlVGV4dCkpO1xuICAgICAgfSBlbHNlIGlmIChhbGwudGVzdCh4aHIucmVzcG9uc2VVUkwpKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGBhbGw6ICR7eGhyLnJlc3BvbnNlVVJMfWApO1xuICAgICAgICB0d2VldHMgPSB4aHJQYXJzZShKU09OLnBhcnNlKHhoci5yZXNwb25zZVRleHQpKTtcbiAgICAgIH0gZWxzZSBpZiAocnV4LnRlc3QoeGhyLnJlc3BvbnNlVVJMKSkge1xuICAgICAgICBjb25zb2xlLmxvZyhgcnV4OiAke3hoci5yZXNwb25zZVVSTH1gKTtcbiAgICAgICAgdHdlZXRzID0geGhyUGFyc2UoSlNPTi5wYXJzZSh4aHIucmVzcG9uc2VUZXh0KSk7XG4gICAgICB9IGVsc2UgaWYgKGRldGFpbC50ZXN0KHhoci5yZXNwb25zZVVSTCkpIHtcbiAgICAgICAgY29uc29sZS5sb2coYGRldGFpbDogJHt4aHIucmVzcG9uc2VVUkx9YCk7XG4gICAgICAgIHR3ZWV0cyA9IGdyYXBoUGFyc2UoSlNPTi5wYXJzZSh4aHIucmVzcG9uc2VUZXh0KSk7XG4gICAgICB9IGVsc2UgaWYgKHVzZXJNZWRpYS50ZXN0KHhoci5yZXNwb25zZVVSTCkpIHtcbiAgICAgICAgY29uc29sZS5sb2coYHVzZXJNZWRpYTogJHt4aHIucmVzcG9uc2VVUkx9YCk7XG4gICAgICAgIHR3ZWV0cyA9IGdyYXBoUGFyc2UoSlNPTi5wYXJzZSh4aHIucmVzcG9uc2VUZXh0KSk7XG4gICAgICB9IGVsc2UgaWYgKHVzZXJUd2VldHMudGVzdCh4aHIucmVzcG9uc2VVUkwpKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGB1c2VyVHdlZXRzOiAke3hoci5yZXNwb25zZVVSTH1gKTtcbiAgICAgICAgdHdlZXRzID0gZ3JhcGhQYXJzZShKU09OLnBhcnNlKHhoci5yZXNwb25zZVRleHQpKTtcbiAgICAgIH0gZWxzZSBpZiAoYm9va21hcmtzLnRlc3QoeGhyLnJlc3BvbnNlVVJMKSkge1xuICAgICAgICBjb25zb2xlLmxvZyhgYm9va21hcms6ICR7eGhyLnJlc3BvbnNlVVJMfWApO1xuICAgICAgICB0d2VldHMgPSBncmFwaFBhcnNlKEpTT04ucGFyc2UoeGhyLnJlc3BvbnNlVGV4dCkpO1xuICAgICAgfSBlbHNlIGlmIChob21lTGF0ZXN0LnRlc3QoeGhyLnJlc3BvbnNlVVJMKSkge1xuICAgICAgICBjb25zb2xlLmxvZyhgSG9tZUxhdGVzdFRpbWVsaW5lOiAke3hoci5yZXNwb25zZVVSTH1gKTtcbiAgICAgICAgdHdlZXRzID0gZ3JhcGhQYXJzZShKU09OLnBhcnNlKHhoci5yZXNwb25zZVRleHQpKTtcbiAgICAgIH0gZWxzZSBpZiAobGlzdExhdGVzdC50ZXN0KHhoci5yZXNwb25zZVVSTCkpIHtcbiAgICAgICAgY29uc29sZS5sb2coYExpc3RMYXRlc3RUd2VldHNUaW1lbGluZTogJHt4aHIucmVzcG9uc2VVUkx9YCk7XG4gICAgICAgIHR3ZWV0cyA9IGdyYXBoUGFyc2UoSlNPTi5wYXJzZSh4aHIucmVzcG9uc2VUZXh0KSk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdG9hc3QuZXJyb3IoYGVycm9yIHVybDogJHt4aHIucmVzcG9uc2VVUkx9YCk7XG4gICAgICB0b2FzdC5lcnJvcihTdHJpbmcoZSkpO1xuICAgICAgY29uc29sZS5lcnJvcihgZXJyb3IgdXJsOiAke3hoci5yZXNwb25zZVVSTH1gKTtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGlmICh0d2VldHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBhd2FpdCBQcm9taXNlLmFsbCh0d2VldHMubWFwKCh0d2VldCkgPT4ge1xuICAgICAgICAgIGNvbnNvbGUubG9nKGB0d2VldDogJHt0d2VldC5pZH0gJHt0d2VldC5pZF9zdHJ9YCk7XG4gICAgICAgICAgcmV0dXJuIHN0b3JlKHR3ZWV0LmlkX3N0ciwgdHdlZXQpO1xuICAgICAgICB9KSk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKGUgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICBlLmZpbHRlcihlID0+IGUgaW5zdGFuY2VvZiBFcnJvcikuZm9yRWFjaCgoZTogRXJyb3IpID0+IHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgICAgIHRvYXN0LmVycm9yKFN0cmluZyhlKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgICAgdG9hc3QuZXJyb3IoU3RyaW5nKGUpKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufVxuIiwiY29uc3QgcGF0dGVybiA9IG5ldyBSZWdFeHAoJ14oPzpodHRwczovL3R3aXR0ZXIuY29tKT8vKD86W14vXSspL3N0YXR1cy8oWzAtOV0rKSg/Oig/Ols/XXxcXC8pLiopPyQnKTtcbmV4cG9ydCBmdW5jdGlvbiBnZXRJZChsaW5rOiBzdHJpbmcpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICBsZXQgbWF0Y2ggPSBwYXR0ZXJuLmV4ZWMobGluayk7XG4gIGlmIChtYXRjaCAhPT0gbnVsbCkge1xuICAgIHJldHVybiBtYXRjaFsxXTtcbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuIiwiaW1wb3J0IHsgVHdlZXQgfSBmcm9tICcuLi90eXBlcyc7XG5cbmludGVyZmFjZSBUaW1lIHtcbiAgdGltZTogbnVtYmVyO1xufTtcblxuY29uc3QgaXRlcmF0ZUNvdW50ID0gMTAwO1xuYXN5bmMgZnVuY3Rpb24gcmVtb3ZlT2xkS2V5cyh0aHJlc2hvbGQ6IG51bWJlciwgcmVzdEtleXM6IEFycmF5PHN0cmluZz4pOiBQcm9taXNlPHZvaWQ+IHtcblxuICBjb25zdCBjdXJyZW50ID0gcmVzdEtleXMuc2xpY2UoMCwgaXRlcmF0ZUNvdW50KTtcbiAgY29uc3QgcmVzdCA9IHJlc3RLZXlzLnNsaWNlKGl0ZXJhdGVDb3VudCk7XG5cbiAgZm9yIChjb25zdCBrZXkgb2YgY3VycmVudCkge1xuICAgIGNvbnN0IHZhbHVlID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KTtcbiAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKGtleSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBjb25zdCBvYmogPSBKU09OLnBhcnNlKHZhbHVlKSBhcyBUd2VldCAmIFBhcnRpYWw8VGltZT47XG4gICAgaWYgKHR5cGVvZiBvYmoudGltZSAhPT0gJ251bWJlcicpIHtcbiAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKGtleSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAob2JqLnRpbWUgPCB0aHJlc2hvbGQpIHtcbiAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKGtleSk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHJlc3QubGVuZ3RoID4gMCkge1xuICAgIGF3YWl0IG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlKSA9PiB7IHJlc29sdmUoKTsgfSk7XG4gICAgcmV0dXJuIHJlbW92ZU9sZEtleXModGhyZXNob2xkLCByZXN0KTtcbiAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc3RvcmUoa2V5OiBzdHJpbmcsIHZhbHVlOiBUd2VldCkge1xuICBjb25zdCBvYmogPSB2YWx1ZSBhcyBUd2VldCAmIFRpbWU7XG4gIG9iai50aW1lID0gRGF0ZS5ub3coKTtcbiAgdHJ5IHtcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShrZXksIEpTT04uc3RyaW5naWZ5KG9iaikpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc3Qga2V5czogQXJyYXk8c3RyaW5nPiA9IFtdO1xuICAgIGZvciAobGV0IG9mZnNldCA9IDA7IG9mZnNldCA8IGxvY2FsU3RvcmFnZS5sZW5ndGg7ICsrb2Zmc2V0KSB7XG4gICAgICBrZXlzLnB1c2gobG9jYWxTdG9yYWdlLmtleShvZmZzZXQpIGFzIHN0cmluZyk7XG4gICAgfVxuICAgIGNvbnN0IHRocmVzaG9sZCA9IERhdGUubm93KCkgLSAyNCAqIDYwICogNjAgKiAxMDAwICogNzsgLy8gYXMgN2RheXMgYWdvXG4gICAgYXdhaXQgcmVtb3ZlT2xkS2V5cyh0aHJlc2hvbGQsIGtleXMpO1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGtleSwgSlNPTi5zdHJpbmdpZnkob2JqKSk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxvYWQoa2V5OiBzdHJpbmcpOiBUd2VldCB8IHVuZGVmaW5lZCB7XG5cbiAgbGV0IHZhbHVlOiBzdHJpbmcgfCBudWxsID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KTtcbiAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuICByZXR1cm4gSlNPTi5wYXJzZSh2YWx1ZSkgYXMgVHdlZXQ7XG59XG4iLCJpbXBvcnQgdHlwZSB7IFR3ZWV0IH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5leHBvcnQgZnVuY3Rpb24gbWFyayh0d2VldDogVHdlZXQgfCBzdHJpbmcgfCBudW1iZXIpOiB2b2lkIHtcbiAgaWYgKHR5cGVvZiB0d2VldCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHR3ZWV0ID09PSAnbnVtYmVyJykge1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGBzYXZlZDoke3R3ZWV0fWAsICd0cnVlJyk7XG4gIH0gZWxzZSB7XG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oYHNhdmVkOiR7dHdlZXQuaWRfc3RyfWAsICd0cnVlJyk7XG4gIH1cbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TWFyayhpZF9zdHI6IHN0cmluZyk6IGJvb2xlYW4ge1xuICByZXR1cm4gbG9jYWxTdG9yYWdlLmdldEl0ZW0oYHNhdmVkOiR7aWRfc3RyfWApICE9PSBudWxsO1xufVxuIiwiaW1wb3J0IHR5cGUgeyBUd2VldCwgRG93bmxvYWROb3RpZnksIEFyY2hpdmVOb3RpZnksIE92ZXJ3cml0ZVF1ZXJ5Q2FsbGJhY2sgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgSlNaaXAgZnJvbSAnanN6aXAnO1xuaW1wb3J0IHsgR01fZmV0Y2ggfSBmcm9tICcuLi8uLi9saWIvZ20tZ29vZGllcyc7XG5pbXBvcnQgeyB0b2FzdCB9IGZyb20gJ3JlYWN0LWhvdC10b2FzdCc7XG5pbXBvcnQgeyBleHRlbnNpb24gfSBmcm9tICcuL2V4dGVuc2lvbnMnO1xuaW1wb3J0IHsgbG9hZCB9IGZyb20gJy4vbG9jYWwtc3RvcmFnZSc7XG5pbXBvcnQgeyBtYXJrIH0gZnJvbSAnLi9tYXJrJztcbmltcG9ydCB7IGNoYW5nZUNvbG9yIH0gZnJvbSAnLi9ob29rcyc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzYXZlKFxuICB0d2VldDogVHdlZXQsXG4gIGRvd25sb2FkTm90aWZ5PzogRG93bmxvYWROb3RpZnksXG4gIGFyY2hpdmVOb3RpZnk/OiBBcmNoaXZlTm90aWZ5XG4pOiBQcm9taXNlPFtCbG9iLCBzdHJpbmddPiB7XG5cbiAgbGV0IHppcCA9IG5ldyBKU1ppcCgpO1xuICBjb25zdCB1c2VySWQgPSB0d2VldC51c2VyLmlkX3N0cjtcbiAgY29uc3QgdHdlZXRJZCA9IHR3ZWV0LmlkX3N0cjtcbiAgY29uc3QgbmFtZSA9IHR3ZWV0LnVzZXIubmFtZTtcblxuICBjb25zdCBmaWxlbmFtZSA9IGAke3VzZXJJZH1fJHt0d2VldElkfV8ke25hbWV9LnppcGA7XG5cbiAgemlwLmZpbGUoJ3R3ZWV0LnR4dCcsIHR3ZWV0LmZ1bGxfdGV4dCk7XG4gIGxldCBpbmRleCA9IDA7XG4gIGxldCBqb2JzID0gdHdlZXQubWVkaWEubWFwKGFzeW5jIChtZWRpdW0pOiBQcm9taXNlPHZvaWQ+ID0+IHtcblxuICAgIGxldCB1cmwgPSBtZWRpdW0udXJsO1xuICAgIGlmIChtZWRpdW0ubWVkaWFfdHlwZSA9PT0gJ3Bob3RvJykge1xuICAgICAgbGV0IGV4dCA9IGV4dGVuc2lvbihtZWRpdW0udXJsKTtcbiAgICAgIHVybCA9IHVybC5zdWJzdHJpbmcoMCwgdXJsLmxlbmd0aCAtIChleHQubGVuZ3RoICsgMSkpO1xuICAgICAgdXJsID0gYCR7dXJsfT9mb3JtYXQ9JHtleHR9Jm5hbWU9b3JpZ2A7XG4gICAgfVxuXG4gICAgbGV0IHByZXZpb3VzOiBudW1iZXIgPSAwO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgR01fZmV0Y2godXJsLCB7XG4gICAgICBvbkRvd25sb2FkUHJvZ3Jlc3M6IChldjogeyBsb2FkZWQ6IG51bWJlciB9KSA9PiB7XG4gICAgICAgIGxldCB0b3RhbEluRnJhbWUgPSBldi5sb2FkZWQgLSBwcmV2aW91cztcbiAgICAgICAgcHJldmlvdXMgPSBldi5sb2FkZWQ7XG4gICAgICAgIGlmIChkb3dubG9hZE5vdGlmeSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgZG93bmxvYWROb3RpZnkodG90YWxJbkZyYW1lKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChyZXNwb25zZS5vaykge1xuICAgICAgemlwLmZpbGUoYCR7aW5kZXgrK30uJHtleHRlbnNpb24obWVkaXVtLnVybCl9YCwgcmVzcG9uc2UuYmxvYigpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihyZXNwb25zZS5zdGF0dXNUZXh0KTtcbiAgfSk7XG5cbiAgYXdhaXQgUHJvbWlzZS5hbGwoam9icyk7XG5cbiAgICBjb25zdCBibG9iID0gYXdhaXQgemlwLmdlbmVyYXRlQXN5bmMoeyB0eXBlOiAnYmxvYicgfSxcbiAgICAgIChtZXRhZGF0YTogeyBwZXJjZW50OiBudW1iZXIsIGN1cnJlbnRGaWxlOiBzdHJpbmcgfCBudWxsIH0pID0+IHtcbiAgICAgICAgaWYgKGFyY2hpdmVOb3RpZnkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmIChtZXRhZGF0YS5jdXJyZW50RmlsZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgYXJjaGl2ZU5vdGlmeShgJHttZXRhZGF0YS5wZXJjZW50LnRvUHJlY2lzaW9uKDUpfSAlYCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFyY2hpdmVOb3RpZnkoYCR7bWV0YWRhdGEuY3VycmVudEZpbGV9OiAke21ldGFkYXRhLnBlcmNlbnQudG9QcmVjaXNpb24oNSl9ICVgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICByZXR1cm4gW2Jsb2IsIGZpbGVuYW1lXTtcbn1cblxuZnVuY3Rpb24gcmVwbGFjZUJhZENoYXJhY3RlckZvckZpbGVuYW1lKGZpbGVuYW1lOiBzdHJpbmcpOiBzdHJpbmcge1xuXG4gIC8vIDovXFw/Kn58W10oKTw+IVwiJyMkJSZcbiAgLy8gL1s6XFwvXFxcXD8qflxcfFxcW1xcXVxcKFxcKVxcPFxcPlxcIVxcXCJcXCcjXFwkJSZdL2dcbiAgcmV0dXJuIGZpbGVuYW1lLnJlcGxhY2UoL1s6XFwvXFxcXD8qflxcfFxcW1xcXVxcKFxcKVxcPFxcPlxcIVxcXCJcXCcjXFwkJSZdL2csICdfJyk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBkb3dubG9hZE5vU2F2ZUNvbnRlbnRzKGRpcjogRmlsZVN5c3RlbURpcmVjdG9yeUhhbmRsZSwgY2FsbGJhY2s6IE92ZXJ3cml0ZVF1ZXJ5Q2FsbGJhY2spOiBQcm9taXNlPG51bWJlcj4ge1xuXG4gIGxldCBzYXZlZCA9IDA7XG4gIHRyeSB7XG4gICAgLy8gICAgICBidXR0b24uZGF0YXNldC5kb3dubG9hZGVkID0gJ2ZhbHNlJztcbiAgICBjb25zdCBkb3dubG9hZGFibGVzID0gQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdidXR0b25bZGF0YS1kb3dubG9hZGVkPWZhbHNlXVtkYXRhLXR3ZWV0LWlkXScpKTtcbiAgICB0b2FzdC5zdWNjZXNzKGB0cnkgc2F2aW5nICR7ZG93bmxvYWRhYmxlcy5sZW5ndGh9IHR3ZWV0c2ApO1xuICAgIGNvbnNvbGUubG9nKCdjYW5kaWRhdGVzJywgZG93bmxvYWRhYmxlcy5sZW5ndGgpO1xuXG4gICAgY29uc3QgdHdlZXRzOiBBcnJheTxUd2VldD4gPSBbXTtcbiAgICBmb3IgKGNvbnN0IGJ1dHRvbiBvZiBkb3dubG9hZGFibGVzKSB7XG4gICAgICBjb25zdCBpZCA9IChidXR0b24gYXMgSFRNTEJ1dHRvbkVsZW1lbnQpLmRhdGFzZXQudHdlZXRJZCE7XG4gICAgICBjb25zdCB0d2VldCA9IGxvYWQoaWQpO1xuICAgICAgaWYgKHR3ZWV0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdG9hc3QuZXJyb3IoYHR3ZWV0IGlkICR7aWR9IGRvZXMgbm90IGNhY2hlZC5gKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICB0d2VldHMucHVzaCh0d2VldCk7XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCBQcm9taXNlLmFsbCh0d2VldHMubWFwKCh0d2VldCkgPT4gc2F2ZSh0d2VldCkudGhlbigoW2Jsb2IsIGZpbGVuYW1lXSkgPT4gW3R3ZWV0LmlkX3N0ciwgYmxvYiwgZmlsZW5hbWVdIGFzIFtzdHJpbmcsIEJsb2IsIHN0cmluZ10pKSk7XG4gICAgZm9yIGF3YWl0IChjb25zdCBbdHdlZXRJZCwgYmxvYiwgZmlsZW5hbWVdIG9mIHJlc3VsdHMpIHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHNhdmVPbkRpcmVjdG9yeShkaXIsIHJlcGxhY2VCYWRDaGFyYWN0ZXJGb3JGaWxlbmFtZShmaWxlbmFtZSksIGJsb2IsIGNhbGxiYWNrKTtcbiAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgbWFyayh0d2VldElkKTtcbiAgICAgICAgKytzYXZlZDtcbiAgICAgICAgY29uc3QgYnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgYnV0dG9uW2RhdGEtdHlwZT1kb3dubG9hZF1bZGF0YS10d2VldC1pZD1cIiR7dHdlZXRJZH1cIl1gKSBhcyBIVE1MQnV0dG9uRWxlbWVudCB8IG51bGw7XG4gICAgICAgIGlmIChidXR0b24gIT09IG51bGwpIHtcbiAgICAgICAgICBjaGFuZ2VDb2xvcihidXR0b24sIHRydWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgdG9hc3QuZXJyb3IoU3RyaW5nKGUpKTtcbiAgfVxuICByZXR1cm4gc2F2ZWQ7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBmaWxlRXhpc3RzKGRpcjogRmlsZVN5c3RlbURpcmVjdG9yeUhhbmRsZSwgZmlsZW5hbWU6IHN0cmluZyk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICB0cnkge1xuICAgIGF3YWl0IGRpci5nZXRGaWxlSGFuZGxlKGZpbGVuYW1lKTtcbiAgICBjb25zb2xlLmRlYnVnKGBmaWxlIGV4aXN0czogJHtmaWxlbmFtZX1gKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBjYXRjaCAoXykge1xuICAgIGNvbnNvbGUuZGVidWcoYGZpbGUgbm90IGV4aXN0c2ApO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzdHJUb1VpbnQxNkFycmF5KHN0cjogc3RyaW5nKSB7XG4gIGNvbnN0IGFycmF5OiBBcnJheTxudW1iZXI+ID0gW107XG4gIGZvciAobGV0IG9mZnNldCA9IDA7IG9mZnNldCA8IHN0ci5sZW5ndGg7ICsrb2Zmc2V0KSB7XG4gICAgYXJyYXkucHVzaChzdHJbb2Zmc2V0XS5jaGFyQ29kZUF0KDApKTtcbiAgfVxuXG4gIHJldHVybiBuZXcgVWludDE2QXJyYXkoYXJyYXkpO1xufVxuXG5mdW5jdGlvbiByZXBsYWNlQmFkQ2hhcmFjdGVyKHN0cjogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9cXHUyMDBkL2csICdfJyk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzYXZlT25EaXJlY3RvcnkoXG4gIGRpcjogRmlsZVN5c3RlbURpcmVjdG9yeUhhbmRsZSxcbiAgZmlsZW5hbWU6IHN0cmluZyxcbiAgYmxvYjogQmxvYixcbiAgcXVlcnlDYWxsYmFjazogT3ZlcndyaXRlUXVlcnlDYWxsYmFja1xuKTogUHJvbWlzZTxib29sZWFuPiB7XG5cbiAgZmlsZW5hbWUgPSByZXBsYWNlQmFkQ2hhcmFjdGVyKGZpbGVuYW1lKTtcbiAgY29uc29sZS5sb2coYGZpbGVuYW1lOiAke2ZpbGVuYW1lfWAsIHN0clRvVWludDE2QXJyYXkoZmlsZW5hbWUpKTtcbiAgaWYgKGF3YWl0IGZpbGVFeGlzdHMoZGlyLCBmaWxlbmFtZSkgJiYgIWF3YWl0IHF1ZXJ5Q2FsbGJhY2soZmlsZW5hbWUpKSB7XG4gICAgZGVidWdnZXI7XG4gICAgY29uc29sZS53YXJuKGBmaWxlbmFtZTogJHtmaWxlbmFtZX0gZG9lcyBub3Qgc2F2ZWRgKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgY29uc29sZS5sb2coYGZpbGVuYW1lOiAke2ZpbGVuYW1lfSBkb2VzIG5vdCBleGlzdHNgKTtcblxuICBjb25zdCBmaWxlID0gYXdhaXQgZGlyLmdldEZpbGVIYW5kbGUoZmlsZW5hbWUsIHsgY3JlYXRlOiB0cnVlIH0pO1xuICBjb25zdCBzdHJlYW0gPSBhd2FpdCBmaWxlLmNyZWF0ZVdyaXRhYmxlKHsga2VlcEV4aXN0aW5nRGF0YTogZmFsc2UgfSk7XG4gIHRyeSB7XG4gICAgYXdhaXQgc3RyZWFtLndyaXRlKGJsb2IpO1xuICAgIHRvYXN0LnN1Y2Nlc3MoYCR7ZmlsZW5hbWV9IHNhdmVkYCk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZmluYWxseSB7XG4gICAgYXdhaXQgc3RyZWFtLmNsb3NlKCk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldExvYWRlZFR3ZWV0cyhkb2M6IERvY3VtZW50KTogTWFwPHN0cmluZywgVHdlZXQ+IHtcblxuICBjb25zdCBidXR0b25zID0gQXJyYXkuZnJvbShkb2MucXVlcnlTZWxlY3RvckFsbCgnYnV0dG9uW2RhdGEtdHlwZT1kb3dubG9hZF1bZGF0YS10d2VldC1pZF0nKSkgYXMgQXJyYXk8SFRNTEJ1dHRvbkVsZW1lbnQ+O1xuICBjb25zdCB0d2VldHMgPSBidXR0b25zLm1hcCgoYnV0dG9uKSA9PiBidXR0b24uZGF0YXNldC50d2VldElkKS5tYXAoaWQgPT4ge1xuICAgIGNvbnN0IHR3ZWV0ID0gbG9hZChpZCEpO1xuICAgIGlmICh0d2VldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0b2FzdC5lcnJvcihgdHdlZXQgaWQ6ICR7aWR9IGlzIG5vdCBjYWNoZWRgKTtcbiAgICB9XG4gICAgcmV0dXJuIHR3ZWV0O1xuICB9KS5maWx0ZXIodHdlZXQgPT4gdHdlZXQgIT09IHVuZGVmaW5lZCkgYXMgQXJyYXk8VHdlZXQ+O1xuXG4gIHJldHVybiBuZXcgTWFwPHN0cmluZywgVHdlZXQ+KHR3ZWV0cy5tYXAodHdlZXQgPT4gW3R3ZWV0LmlkX3N0ciwgdHdlZXRdKSk7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gc2Nyb2xsQm90dG9tVHdlZXQoKSB7XG4gIGNvbnN0IGFydGljbGVzID0gQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdhcnRpY2xlJykpO1xuICBpZiAoYXJ0aWNsZXMubGVuZ3RoID4gMCkge1xuICAgIGFydGljbGVzLnNsaWNlKC0xKVswXS5zY3JvbGxJbnRvVmlldyh7IGJlaGF2aW9yOiAnc21vb3RoJyB9KTtcbiAgfVxufVxuIiwibGV0IGU9e2RhdGE6XCJcIn0sdD10PT5cIm9iamVjdFwiPT10eXBlb2Ygd2luZG93PygodD90LnF1ZXJ5U2VsZWN0b3IoXCIjX2dvb2JlclwiKTp3aW5kb3cuX2dvb2Jlcil8fE9iamVjdC5hc3NpZ24oKHR8fGRvY3VtZW50LmhlYWQpLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKSkse2lubmVySFRNTDpcIiBcIixpZDpcIl9nb29iZXJcIn0pKS5maXJzdENoaWxkOnR8fGUscj0vKD86KFtcXHUwMDgwLVxcdUZGRkZcXHctJUBdKykgKjo/ICooW157O10rPyk7fChbXjt9e10qPykgKnspfCh9XFxzKikvZyxsPS9cXC9cXCpbXl0qP1xcKlxcL3wgICsvZyxhPS9cXG4rL2cscz0oZSx0KT0+e2xldCByPVwiXCIsbD1cIlwiLGE9XCJcIjtmb3IobGV0IG4gaW4gZSl7bGV0IG89ZVtuXTtcIkBcIj09blswXT9cImlcIj09blsxXT9yPW4rXCIgXCIrbytcIjtcIjpsKz1cImZcIj09blsxXT9zKG8sbik6bitcIntcIitzKG8sXCJrXCI9PW5bMV0/XCJcIjp0KStcIn1cIjpcIm9iamVjdFwiPT10eXBlb2Ygbz9sKz1zKG8sdD90LnJlcGxhY2UoLyhbXixdKSsvZyxlPT5uLnJlcGxhY2UoLyheOi4qKXwoW14sXSkrL2csdD0+LyYvLnRlc3QodCk/dC5yZXBsYWNlKC8mL2csZSk6ZT9lK1wiIFwiK3Q6dCkpOm4pOm51bGwhPW8mJihuPS9eLS0vLnRlc3Qobik/bjpuLnJlcGxhY2UoL1tBLVpdL2csXCItJCZcIikudG9Mb3dlckNhc2UoKSxhKz1zLnA/cy5wKG4sbyk6bitcIjpcIitvK1wiO1wiKX1yZXR1cm4gcisodCYmYT90K1wie1wiK2ErXCJ9XCI6YSkrbH0sbj17fSxvPWU9PntpZihcIm9iamVjdFwiPT10eXBlb2YgZSl7bGV0IHQ9XCJcIjtmb3IobGV0IHIgaW4gZSl0Kz1yK28oZVtyXSk7cmV0dXJuIHR9cmV0dXJuIGV9LGM9KGUsdCxjLHAsaSk9PntsZXQgdT1vKGUpLGQ9blt1XXx8KG5bdV09KGU9PntsZXQgdD0wLHI9MTE7Zm9yKDt0PGUubGVuZ3RoOylyPTEwMSpyK2UuY2hhckNvZGVBdCh0KyspPj4+MDtyZXR1cm5cImdvXCIrcn0pKHUpKTtpZighbltkXSl7bGV0IHQ9dSE9PWU/ZTooZT0+e2xldCB0LHMsbj1be31dO2Zvcig7dD1yLmV4ZWMoZS5yZXBsYWNlKGwsXCJcIikpOyl0WzRdP24uc2hpZnQoKTp0WzNdPyhzPXRbM10ucmVwbGFjZShhLFwiIFwiKS50cmltKCksbi51bnNoaWZ0KG5bMF1bc109blswXVtzXXx8e30pKTpuWzBdW3RbMV1dPXRbMl0ucmVwbGFjZShhLFwiIFwiKS50cmltKCk7cmV0dXJuIG5bMF19KShlKTtuW2RdPXMoaT97W1wiQGtleWZyYW1lcyBcIitkXTp0fTp0LGM/XCJcIjpcIi5cIitkKX1sZXQgZj1jJiZuLmc/bi5nOm51bGw7cmV0dXJuIGMmJihuLmc9bltkXSksKChlLHQscixsKT0+e2w/dC5kYXRhPXQuZGF0YS5yZXBsYWNlKGwsZSk6LTE9PT10LmRhdGEuaW5kZXhPZihlKSYmKHQuZGF0YT1yP2UrdC5kYXRhOnQuZGF0YStlKX0pKG5bZF0sdCxwLGYpLGR9LHA9KGUsdCxyKT0+ZS5yZWR1Y2UoKGUsbCxhKT0+e2xldCBuPXRbYV07aWYobiYmbi5jYWxsKXtsZXQgZT1uKHIpLHQ9ZSYmZS5wcm9wcyYmZS5wcm9wcy5jbGFzc05hbWV8fC9eZ28vLnRlc3QoZSkmJmU7bj10P1wiLlwiK3Q6ZSYmXCJvYmplY3RcIj09dHlwZW9mIGU/ZS5wcm9wcz9cIlwiOnMoZSxcIlwiKTohMT09PWU/XCJcIjplfXJldHVybiBlK2wrKG51bGw9PW4/XCJcIjpuKX0sXCJcIik7ZnVuY3Rpb24gaShlKXtsZXQgcj10aGlzfHx7fSxsPWUuY2FsbD9lKHIucCk6ZTtyZXR1cm4gYyhsLnVuc2hpZnQ/bC5yYXc/cChsLFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLDEpLHIucCk6bC5yZWR1Y2UoKGUsdCk9Pk9iamVjdC5hc3NpZ24oZSx0JiZ0LmNhbGw/dChyLnApOnQpLHt9KTpsLHQoci50YXJnZXQpLHIuZyxyLm8sci5rKX1sZXQgdSxkLGYsZz1pLmJpbmQoe2c6MX0pLGI9aS5iaW5kKHtrOjF9KTtleHBvcnRzLmNzcz1pLGV4cG9ydHMuZXh0cmFjdENzcz1lPT57bGV0IHI9dChlKSxsPXIuZGF0YTtyZXR1cm4gci5kYXRhPVwiXCIsbH0sZXhwb3J0cy5nbG9iPWcsZXhwb3J0cy5rZXlmcmFtZXM9YixleHBvcnRzLnNldHVwPWZ1bmN0aW9uKGUsdCxyLGwpe3MucD10LHU9ZSxkPXIsZj1sfSxleHBvcnRzLnN0eWxlZD1mdW5jdGlvbihlLHQpe2xldCByPXRoaXN8fHt9O3JldHVybiBmdW5jdGlvbigpe2xldCBsPWFyZ3VtZW50cztmdW5jdGlvbiBhKHMsbil7bGV0IG89T2JqZWN0LmFzc2lnbih7fSxzKSxjPW8uY2xhc3NOYW1lfHxhLmNsYXNzTmFtZTtyLnA9T2JqZWN0LmFzc2lnbih7dGhlbWU6ZCYmZCgpfSxvKSxyLm89LyAqZ29cXGQrLy50ZXN0KGMpLG8uY2xhc3NOYW1lPWkuYXBwbHkocixsKSsoYz9cIiBcIitjOlwiXCIpLHQmJihvLnJlZj1uKTtsZXQgcD1lO3JldHVybiBlWzBdJiYocD1vLmFzfHxlLGRlbGV0ZSBvLmFzKSxmJiZwWzBdJiZmKG8pLHUocCxvKX1yZXR1cm4gdD90KGEpOmF9fTtcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdGxvYWRlZDogZmFsc2UsXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuXHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5ubWQgPSAobW9kdWxlKSA9PiB7XG5cdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdHJldHVybiBtb2R1bGU7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiaW1wb3J0IHsgY3JlYXRlUm9vdCB9IGZyb20gJ3JlYWN0LWRvbS9jbGllbnQnO1xuaW1wb3J0IHsgVG9hc3RlciB9IGZyb20gJ3JlYWN0LWhvdC10b2FzdCc7XG5pbXBvcnQgeyBSZWNvaWxSb290IH0gZnJvbSAncmVjb2lsJztcblxuaW1wb3J0IHsgQXBwIH0gZnJvbSAnLi9jb21wb25lbnRzL2FwcCc7XG5pbXBvcnQgeyBEaWFsb2cgfSBmcm9tICcuL2NvbXBvbmVudHMvZGlhbG9nJztcblxuaW1wb3J0IHsgY3JlYXRlRWxlbWVudEhvb2sgfSBmcm9tICcuL3V0aWxzL2hvb2tzJztcbmltcG9ydCAnLi9pbmRleC5jc3MnO1xuXG5kZWNsYXJlIHZhciB1bnNhZmVXaW5kb3c6IFdpbmRvdztcbmRlY2xhcmUgdmFyIHdpbmRvdzogV2luZG93O1xuXG51bnNhZmVXaW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCA9IGNyZWF0ZUVsZW1lbnRIb29rKHVuc2FmZVdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50LCB1bnNhZmVXaW5kb3cuZG9jdW1lbnQpO1xuXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsICgpID0+IHtcbiAgY29uc29sZS5sb2coJ0RPTUNvbnRlbnQgbG9hZGVkJyk7XG5cbiAgY29uc3QgZGl2ID0gdW5zYWZlV2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBkaXYuaWQgPSAnZXh0ZW5zaW9uJztcbiAgZGl2LmlubmVyVGV4dCA9ICdiYXRjaCBkb3dubG9hZCc7XG4gIGRpdi5jbGFzc05hbWUgPSAnYmctd2hpdGUgZml4ZWQgdG9wLTE2IHJpZ2h0LTE2IHotMTAgbWluLXctMjAgbWluLWgtMydcbiAgdW5zYWZlV2luZG93LmRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZGl2KTtcblxuICBjb25zdCByb290ID0gY3JlYXRlUm9vdChkaXYpO1xuICByb290LnJlbmRlcig8UmVjb2lsUm9vdD5cbiAgICA8VG9hc3RlciBwb3NpdGlvbj0ndG9wLWNlbnRlcicgLz5cbiAgICA8RGlhbG9nIGRpYWxvZ0lkPXsyNTd9IC8+XG4gICAgPEFwcCAvPlxuICA8L1JlY29pbFJvb3Q+KTtcbn0pO1xuXG5pbXBvcnQgeyByZWdpc3RlclhIUkhvb2sgfSBmcm9tICcuL3V0aWxzL2hvb2tzJztcblxucmVnaXN0ZXJYSFJIb29rKCk7XG5cbiJdLCJuYW1lcyI6WyJQcm9taXNlIiwid2luZG93IiwiQmx1ZWJpcmQiLCJzZWxmIiwidW5kZWZpbmVkIiwiZyIsIkdNX2ZldGNoIiwiSGVhZGVycyIsInByb3RvdHlwZSIsImFwcGVuZCIsIm5hbWUiLCJ2YWx1ZSIsIm5vcm1hbGl6ZU5hbWUiLCJub3JtYWxpemVWYWx1ZSIsImxpc3QiLCJ0aGlzIiwibWFwIiwicHVzaCIsImdldCIsInZhbHVlcyIsImdldEFsbCIsImhhcyIsImhhc093blByb3BlcnR5Iiwic2V0IiwiZm9yRWFjaCIsImNhbGxiYWNrIiwidGhpc0FyZyIsIk9iamVjdCIsImdldE93blByb3BlcnR5TmFtZXMiLCJjYWxsIiwic3VwcG9ydCIsIkJsb2IiLCJlIiwibWV0aG9kcyIsIkJvZHkiLCJSZXF1ZXN0IiwiUmVzcG9uc2UiLCJpbnB1dCIsImluaXQiLCJyZXF1ZXN0IiwiaXNQcm90b3R5cGVPZiIsInJlc29sdmUiLCJyZWplY3QiLCJfcGFyc2VkUmVzcEhlYWRlcnMiLCJ4aHJfZGV0YWlscyIsInJlc3BvbnNlVVJMIiwiZmluYWxVcmwiLCJyYXdSZXNwSGVhZGVycyIsInJlc3BIZWFkZXJzIiwidGVzdCIsIm1ldGhvZCIsInVybCIsInN5bmNocm9ub3VzIiwib25sb2FkIiwicmVzcCIsInN0YXR1cyIsIlR5cGVFcnJvciIsInJlc3BvbnNlSGVhZGVycyIsImhlYWQiLCJ0cmltIiwic3BsaXQiLCJoZWFkZXIiLCJrZXkiLCJzaGlmdCIsImpvaW4iLCJvcHRpb25zIiwic3RhdHVzVGV4dCIsImhlYWRlcnMiLCJib2R5IiwicmVzcG9uc2UiLCJvbmVycm9yIiwiX2JvZHlJbml0IiwiZGF0YSIsIm9ucHJvZ3Jlc3MiLCJvbkRvd25sb2FkUHJvZ3Jlc3MiLCJyZXNwb25zZVR5cGUiLCJHTV94bWxodHRwUmVxdWVzdCIsInBvbHlmaWxsIiwiY29uc29sZSIsImxvZyIsIm1vZHVsZSIsImV4cG9ydHMiLCJ0b1N0cmluZyIsInRvTG93ZXJDYXNlIiwiY29uc3VtZWQiLCJib2R5VXNlZCIsImZpbGVSZWFkZXJSZWFkeSIsInJlYWRlciIsInJlc3VsdCIsImVycm9yIiwicmVhZEJsb2JBc0FycmF5QnVmZmVyIiwiYmxvYiIsIkZpbGVSZWFkZXIiLCJyZWFkQXNBcnJheUJ1ZmZlciIsIl9pbml0Qm9keSIsIl9ib2R5VGV4dCIsIl9ib2R5QmxvYiIsIkZvcm1EYXRhIiwiX2JvZHlGb3JtRGF0YSIsIkVycm9yIiwicmVqZWN0ZWQiLCJhcnJheUJ1ZmZlciIsInRoZW4iLCJ0ZXh0IiwicmVhZEFzVGV4dCIsImZvcm1EYXRhIiwiZGVjb2RlIiwianNvbiIsIkpTT04iLCJwYXJzZSIsInVwY2FzZWQiLCJjcmVkZW50aWFscyIsInRvVXBwZXJDYXNlIiwiaW5kZXhPZiIsIm1vZGUiLCJyZWZlcnJlciIsImZvcm0iLCJieXRlcyIsInJlcGxhY2UiLCJkZWNvZGVVUklDb21wb25lbnQiLCJib2R5SW5pdCIsInR5cGUiLCJvayIsInhockhvb2siLCJ4aHJIb29rMiIsImhvb2siLCJhZGRFdmVudExpc3RlbmVyIiwiZXYiLCJyZXNUeXBlIiwiY29udGVudCIsInNjciIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsIm9yaWdTZW5kIiwiWE1MSHR0cFJlcXVlc3QiLCJzZW5kIiwieGhyIiwiYXJncyIsIkFycmF5IiwiZnJvbSIsImFyZ3VtZW50cyIsInBvc3RNZXNzYWdlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImFwcGx5IiwidW5zYWZlV2luZG93IiwiZG9jdW1lbnRFbGVtZW50IiwiYXBwZW5kQ2hpbGQiLCJ4bWxodHRwUmVxdWVzdCIsIm1ldGhvZEhvb2siLCJwcm9wIiwiX3Byb3h5IiwiZnVuY09yVmFsdWUiLCJzYXZlZE9ubG9hZCIsImNvbmNhdCIsImNvbnN0cnVjdG9ySG9vayIsImNvbnN0cnVjdCIsIlByb3h5IiwiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJpZCIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJpdGVtIiwibmVlZExheWVyIiwibGVuZ3RoIiwiaSIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsInN0cmluZ2lmeSIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZSIsInNvdXJjZVJvb3QiLCJiIiwiYSIsImF1dG9Cb20iLCJ3YXJuIiwiYyIsImQiLCJvcGVuIiwiZGlzcGF0Y2hFdmVudCIsIk1vdXNlRXZlbnQiLCJjcmVhdGVFdmVudCIsImluaXRNb3VzZUV2ZW50IiwiZiIsImdsb2JhbCIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsInNhdmVBcyIsIkhUTUxBbmNob3JFbGVtZW50IiwiaCIsIlVSTCIsIndlYmtpdFVSTCIsImoiLCJkb3dubG9hZCIsInJlbCIsImhyZWYiLCJvcmlnaW4iLCJsb2NhdGlvbiIsInRhcmdldCIsImNyZWF0ZU9iamVjdFVSTCIsInNldFRpbWVvdXQiLCJyZXZva2VPYmplY3RVUkwiLCJtc1NhdmVPck9wZW5CbG9iIiwidGl0bGUiLCJpbm5lclRleHQiLCJIVE1MRWxlbWVudCIsInNhZmFyaSIsIm9ubG9hZGVuZCIsInJlYWRBc0RhdGFVUkwiLCJsIiwibSIsInMiLCJvIiwidSIsInIiLCJuIiwiY29kZSIsInQiLCJKU1ppcCIsInAiLCJlbmNvZGUiLCJnZXRUeXBlT2YiLCJjaGFyQ29kZUF0IiwiY2hhckF0Iiwic3Vic3RyIiwidWludDhhcnJheSIsIlVpbnQ4QXJyYXkiLCJjb21wcmVzc2VkU2l6ZSIsInVuY29tcHJlc3NlZFNpemUiLCJjcmMzMiIsImNvbXByZXNzaW9uIiwiY29tcHJlc3NlZENvbnRlbnQiLCJnZXRDb250ZW50V29ya2VyIiwicGlwZSIsInVuY29tcHJlc3NXb3JrZXIiLCJvbiIsInN0cmVhbUluZm8iLCJkYXRhX2xlbmd0aCIsImdldENvbXByZXNzZWRXb3JrZXIiLCJ3aXRoU3RyZWFtSW5mbyIsImNyZWF0ZVdvcmtlckZyb20iLCJjb21wcmVzc1dvcmtlciIsIlNUT1JFIiwibWFnaWMiLCJERUZMQVRFIiwiYmluYXJ5IiwiZGlyIiwiY3JlYXRlRm9sZGVycyIsImRhdGUiLCJjb21wcmVzc2lvbk9wdGlvbnMiLCJjb21tZW50IiwidW5peFBlcm1pc3Npb25zIiwiZG9zUGVybWlzc2lvbnMiLCJsaWUiLCJVaW50MTZBcnJheSIsIlVpbnQzMkFycmF5IiwiX3Bha28iLCJfcGFrb0FjdGlvbiIsIl9wYWtvT3B0aW9ucyIsIm1ldGEiLCJpbmhlcml0cyIsInByb2Nlc3NDaHVuayIsIl9jcmVhdGVQYWtvIiwidHJhbnNmb3JtVG8iLCJmbHVzaCIsImNsZWFuVXAiLCJyYXciLCJsZXZlbCIsIm9uRGF0YSIsInBha28iLCJPIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiZmlsZSIsIkQiLCJ1dGY4ZW5jb2RlIiwiSSIsIl8iLCJ3IiwidiIsInkiLCJ4IiwiUyIsIkUiLCJ6IiwiQyIsImdldFVUQ0hvdXJzIiwiZ2V0VVRDTWludXRlcyIsImdldFVUQ1NlY29uZHMiLCJnZXRVVENGdWxsWWVhciIsImdldFVUQ01vbnRoIiwiZ2V0VVRDRGF0ZSIsIkIiLCJBIiwiZmlsZVJlY29yZCIsIlQiLCJMT0NBTF9GSUxFX0hFQURFUiIsImRpclJlY29yZCIsIkNFTlRSQUxfRklMRV9IRUFERVIiLCJieXRlc1dyaXR0ZW4iLCJ6aXBDb21tZW50IiwiemlwUGxhdGZvcm0iLCJlbmNvZGVGaWxlTmFtZSIsInN0cmVhbUZpbGVzIiwiYWNjdW11bGF0ZSIsImNvbnRlbnRCdWZmZXIiLCJkaXJSZWNvcmRzIiwiY3VycmVudFNvdXJjZU9mZnNldCIsImVudHJpZXNDb3VudCIsImN1cnJlbnRGaWxlIiwiX3NvdXJjZXMiLCJwZXJjZW50Iiwib3BlbmVkU291cmNlIiwiY2xvc2VkU291cmNlIiwiREFUQV9ERVNDUklQVE9SIiwiQ0VOVFJBTF9ESVJFQ1RPUllfRU5EIiwicHJlcGFyZU5leHRTb3VyY2UiLCJwcmV2aW91cyIsImlzUGF1c2VkIiwicGF1c2UiLCJyZXN1bWUiLCJyZWdpc3RlclByZXZpb3VzIiwiZW5kIiwiZ2VuZXJhdGVkRXJyb3IiLCJsb2NrIiwiZ2VuZXJhdGVXb3JrZXIiLCJwbGF0Zm9ybSIsIl9jb21wcmVzc1dvcmtlciIsImZpbGVzIiwicm9vdCIsImNsb25lIiwibG9hZEFzeW5jIiwiZGVmYXVsdHMiLCJ2ZXJzaW9uIiwiZXh0ZXJuYWwiLCJkZWNvbXByZXNzZWQiLCJleHRlbmQiLCJjaGVja0NSQzMyIiwib3B0aW1pemVkQmluYXJ5U3RyaW5nIiwiZGVjb2RlRmlsZU5hbWUiLCJ1dGY4ZGVjb2RlIiwiaXNOb2RlIiwiaXNTdHJlYW0iLCJwcmVwYXJlQ29udGVudCIsImxvYWQiLCJhbGwiLCJmaWxlTmFtZVN0ciIsImZpbGVDb21tZW50U3RyIiwiX3Vwc3RyZWFtRW5kZWQiLCJfYmluZFN0cmVhbSIsIl9zdHJlYW0iLCJSZWFkYWJsZSIsIl9oZWxwZXIiLCJlbWl0IiwiX3JlYWQiLCJCdWZmZXIiLCJuZXdCdWZmZXJGcm9tIiwiYWxsb2NCdWZmZXIiLCJhbGxvYyIsImZpbGwiLCJpc0J1ZmZlciIsIkRhdGUiLCJwYXJzZUludCIsInNsaWNlIiwic3Vic3RyaW5nIiwibGFzdEluZGV4T2YiLCJmaWx0ZXIiLCJmb2xkZXIiLCJyZW1vdmUiLCJnZW5lcmF0ZSIsImdlbmVyYXRlSW50ZXJuYWxTdHJlYW0iLCJtaW1lVHlwZSIsImNoZWNrU3VwcG9ydCIsImdlbmVyYXRlQXN5bmMiLCJnZW5lcmF0ZU5vZGVTdHJlYW0iLCJ0b05vZGVqc1N0cmVhbSIsInN0cmVhbSIsImJ5dGVBdCIsInplcm8iLCJsYXN0SW5kZXhPZlNpZ25hdHVyZSIsInJlYWRBbmRDaGVja1NpZ25hdHVyZSIsInJlYWREYXRhIiwiY2hlY2tPZmZzZXQiLCJpbmRleCIsImNoZWNrSW5kZXgiLCJzZXRJbmRleCIsInNraXAiLCJyZWFkSW50IiwicmVhZFN0cmluZyIsInJlYWREYXRlIiwiVVRDIiwic3ViYXJyYXkiLCJaSVA2NF9DRU5UUkFMX0RJUkVDVE9SWV9MT0NBVE9SIiwiWklQNjRfQ0VOVFJBTF9ESVJFQ1RPUllfRU5EIiwiZGVzdFR5cGUiLCJwcm9wTmFtZSIsImRhdGFJc1JlYWR5IiwibWF4IiwiX3RpY2tTY2hlZHVsZWQiLCJfdGlja0FuZFJlcGVhdCIsImRlbGF5IiwiaXNGaW5pc2hlZCIsIl90aWNrIiwiTWF0aCIsIm1pbiIsImV4dHJhU3RyZWFtSW5mbyIsImlzTG9ja2VkIiwiX2xpc3RlbmVycyIsIm1lcmdlU3RyZWFtSW5mbyIsIm5vZGVzdHJlYW0iLCJfaW50ZXJuYWxUeXBlIiwiX291dHB1dFR5cGUiLCJfbWltZVR5cGUiLCJfd29ya2VyIiwibmV3QmxvYiIsIm9iamVjdE1vZGUiLCJhcnJheSIsInN0cmluZyIsImFycmF5YnVmZmVyIiwiQXJyYXlCdWZmZXIiLCJub2RlYnVmZmVyIiwic2l6ZSIsIkJsb2JCdWlsZGVyIiwiV2ViS2l0QmxvYkJ1aWxkZXIiLCJNb3pCbG9iQnVpbGRlciIsIk1TQmxvYkJ1aWxkZXIiLCJnZXRCbG9iIiwibGVmdE92ZXIiLCJhcHBseUZyb21DaGFyQ29kZSIsIlV0ZjhEZWNvZGVXb3JrZXIiLCJVdGY4RW5jb2RlV29ya2VyIiwic3RyaW5naWZ5QnlDaHVuayIsInN0cmluZ2lmeUJ5Q2hhciIsImFwcGx5Q2FuQmVVc2VkIiwiZmxvb3IiLCJidWZmZXIiLCJieXRlTGVuZ3RoIiwiTUFYX1ZBTFVFXzE2QklUUyIsIk1BWF9WQUxVRV8zMkJJVFMiLCJwcmV0dHkiLCJsb2FkT3B0aW9ucyIsImNoZWNrU2lnbmF0dXJlIiwiaXNTaWduYXR1cmUiLCJyZWFkQmxvY2tFbmRPZkNlbnRyYWwiLCJkaXNrTnVtYmVyIiwiZGlza1dpdGhDZW50cmFsRGlyU3RhcnQiLCJjZW50cmFsRGlyUmVjb3Jkc09uVGhpc0Rpc2siLCJjZW50cmFsRGlyUmVjb3JkcyIsImNlbnRyYWxEaXJTaXplIiwiY2VudHJhbERpck9mZnNldCIsInppcENvbW1lbnRMZW5ndGgiLCJyZWFkQmxvY2taaXA2NEVuZE9mQ2VudHJhbCIsInppcDY0RW5kT2ZDZW50cmFsU2l6ZSIsInppcDY0RXh0ZW5zaWJsZURhdGEiLCJyZWFkQmxvY2taaXA2NEVuZE9mQ2VudHJhbExvY2F0b3IiLCJkaXNrV2l0aFppcDY0Q2VudHJhbERpclN0YXJ0IiwicmVsYXRpdmVPZmZzZXRFbmRPZlppcDY0Q2VudHJhbERpciIsImRpc2tzQ291bnQiLCJyZWFkTG9jYWxGaWxlcyIsImxvY2FsSGVhZGVyT2Zmc2V0IiwicmVhZExvY2FsUGFydCIsImhhbmRsZVVURjgiLCJwcm9jZXNzQXR0cmlidXRlcyIsInJlYWRDZW50cmFsRGlyIiwiemlwNjQiLCJyZWFkQ2VudHJhbFBhcnQiLCJyZWFkRW5kT2ZDZW50cmFsIiwiYWJzIiwicHJlcGFyZVJlYWRlciIsImlzRW5jcnlwdGVkIiwiYml0RmxhZyIsInVzZVVURjgiLCJmaWxlTmFtZUxlbmd0aCIsImZpbGVOYW1lIiwiY29tcHJlc3Npb25NZXRob2QiLCJ2ZXJzaW9uTWFkZUJ5IiwiZXh0cmFGaWVsZHNMZW5ndGgiLCJmaWxlQ29tbWVudExlbmd0aCIsImRpc2tOdW1iZXJTdGFydCIsImludGVybmFsRmlsZUF0dHJpYnV0ZXMiLCJleHRlcm5hbEZpbGVBdHRyaWJ1dGVzIiwicmVhZEV4dHJhRmllbGRzIiwicGFyc2VaSVA2NEV4dHJhRmllbGQiLCJmaWxlQ29tbWVudCIsImV4dHJhRmllbGRzIiwiZmluZEV4dHJhRmllbGRVbmljb2RlUGF0aCIsImZpbmRFeHRyYUZpZWxkVW5pY29kZUNvbW1lbnQiLCJfZGF0YSIsIl9kYXRhQmluYXJ5IiwiaW50ZXJuYWxTdHJlYW0iLCJfZGVjb21wcmVzc1dvcmtlciIsImFzeW5jIiwibm9kZVN0cmVhbSIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJXZWJLaXRNdXRhdGlvbk9ic2VydmVyIiwiY3JlYXRlVGV4dE5vZGUiLCJvYnNlcnZlIiwiY2hhcmFjdGVyRGF0YSIsInNldEltbWVkaWF0ZSIsIk1lc3NhZ2VDaGFubmVsIiwib25yZWFkeXN0YXRlY2hhbmdlIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3J0MiIsInN0YXRlIiwicXVldWUiLCJvdXRjb21lIiwicHJvbWlzZSIsIm9uRnVsZmlsbGVkIiwiY2FsbEZ1bGZpbGxlZCIsIm90aGVyQ2FsbEZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJjYWxsUmVqZWN0ZWQiLCJvdGhlckNhbGxSZWplY3RlZCIsImZpbmFsbHkiLCJjb25zdHJ1Y3RvciIsImNhdGNoIiwicmFjZSIsImltbWVkaWF0ZSIsImFzc2lnbiIsImNodW5rU2l6ZSIsIndpbmRvd0JpdHMiLCJtZW1MZXZlbCIsInN0cmF0ZWd5IiwidG8iLCJnemlwIiwiZXJyIiwibXNnIiwiZW5kZWQiLCJjaHVua3MiLCJzdHJtIiwiYXZhaWxfb3V0IiwiZGVmbGF0ZUluaXQyIiwiZGVmbGF0ZVNldEhlYWRlciIsImRpY3Rpb25hcnkiLCJzdHJpbmcyYnVmIiwiZGVmbGF0ZVNldERpY3Rpb25hcnkiLCJfZGljdF9zZXQiLCJuZXh0X2luIiwiYXZhaWxfaW4iLCJvdXRwdXQiLCJCdWY4IiwibmV4dF9vdXQiLCJkZWZsYXRlIiwib25FbmQiLCJidWYyYmluc3RyaW5nIiwic2hyaW5rQnVmIiwiZGVmbGF0ZUVuZCIsImZsYXR0ZW5DaHVua3MiLCJEZWZsYXRlIiwiZGVmbGF0ZVJhdyIsImluZmxhdGVJbml0MiIsIlpfT0siLCJpbmZsYXRlR2V0SGVhZGVyIiwiWl9GSU5JU0giLCJaX05PX0ZMVVNIIiwiYmluc3RyaW5nMmJ1ZiIsImluZmxhdGUiLCJaX05FRURfRElDVCIsImluZmxhdGVTZXREaWN0aW9uYXJ5IiwiWl9CVUZfRVJST1IiLCJaX1NUUkVBTV9FTkQiLCJaX1NZTkNfRkxVU0giLCJ1dGY4Ym9yZGVyIiwiYnVmMnN0cmluZyIsImFycmF5U2V0IiwiaW5mbGF0ZUVuZCIsIkluZmxhdGUiLCJpbmZsYXRlUmF3IiwidW5nemlwIiwiSW50MzJBcnJheSIsInNldFR5cGVkIiwiQnVmMTYiLCJCdWYzMiIsIlpfUEFSVElBTF9GTFVTSCIsIlpfRlVMTF9GTFVTSCIsIlpfQkxPQ0siLCJaX1RSRUVTIiwiWl9FUlJOTyIsIlpfU1RSRUFNX0VSUk9SIiwiWl9EQVRBX0VSUk9SIiwiWl9OT19DT01QUkVTU0lPTiIsIlpfQkVTVF9TUEVFRCIsIlpfQkVTVF9DT01QUkVTU0lPTiIsIlpfREVGQVVMVF9DT01QUkVTU0lPTiIsIlpfRklMVEVSRUQiLCJaX0hVRkZNQU5fT05MWSIsIlpfUkxFIiwiWl9GSVhFRCIsIlpfREVGQVVMVF9TVFJBVEVHWSIsIlpfQklOQVJZIiwiWl9URVhUIiwiWl9VTktOT1dOIiwiWl9ERUZMQVRFRCIsInBlbmRpbmciLCJwZW5kaW5nX2J1ZiIsInBlbmRpbmdfb3V0IiwidG90YWxfb3V0IiwiX3RyX2ZsdXNoX2Jsb2NrIiwiYmxvY2tfc3RhcnQiLCJzdHJzdGFydCIsIm1heF9jaGFpbl9sZW5ndGgiLCJwcmV2X2xlbmd0aCIsIm5pY2VfbWF0Y2giLCJ3X3NpemUiLCJ3X21hc2siLCJwcmV2IiwiZ29vZF9tYXRjaCIsImxvb2thaGVhZCIsIm1hdGNoX3N0YXJ0Iiwid2luZG93X3NpemUiLCJoYXNoX3NpemUiLCJ3cmFwIiwiYWRsZXIiLCJ0b3RhbF9pbiIsImluc2VydCIsImluc19oIiwiaGFzaF9zaGlmdCIsImhhc2hfbWFzayIsIm1hdGNoX2xlbmd0aCIsIl90cl90YWxseSIsIm1heF9sYXp5X21hdGNoIiwibGFzdF9saXQiLCJSIiwicHJldl9tYXRjaCIsIm1hdGNoX2F2YWlsYWJsZSIsIkYiLCJnb29kX2xlbmd0aCIsIm1heF9sYXp5IiwibmljZV9sZW5ndGgiLCJtYXhfY2hhaW4iLCJmdW5jIiwiTiIsInBlbmRpbmdfYnVmX3NpemUiLCJnemhlYWQiLCJnemluZGV4IiwibGFzdF9mbHVzaCIsIndfYml0cyIsImhhc2hfYml0cyIsImR5bl9sdHJlZSIsImR5bl9kdHJlZSIsImJsX3RyZWUiLCJsX2Rlc2MiLCJkX2Rlc2MiLCJibF9kZXNjIiwiYmxfY291bnQiLCJoZWFwIiwiaGVhcF9sZW4iLCJoZWFwX21heCIsImRlcHRoIiwibF9idWYiLCJsaXRfYnVmc2l6ZSIsImRfYnVmIiwib3B0X2xlbiIsInN0YXRpY19sZW4iLCJtYXRjaGVzIiwiYmlfYnVmIiwiYmlfdmFsaWQiLCJVIiwiZGF0YV90eXBlIiwiX3RyX2luaXQiLCJMIiwiUCIsImRlZmxhdGVJbml0IiwiZGVmbGF0ZVJlc2V0IiwiZGVmbGF0ZVJlc2V0S2VlcCIsImhjcmMiLCJleHRyYSIsInRpbWUiLCJvcyIsIl90cl9hbGlnbiIsIl90cl9zdG9yZWRfYmxvY2siLCJkZWZsYXRlSW5mbyIsInhmbGFncyIsImV4dHJhX2xlbiIsImRvbmUiLCJkbWF4Iiwid3NpemUiLCJ3aGF2ZSIsInduZXh0IiwiaG9sZCIsImJpdHMiLCJsZW5jb2RlIiwiZGlzdGNvZGUiLCJsZW5iaXRzIiwiZGlzdGJpdHMiLCJzYW5lIiwibGFzdCIsImhhdmVkaWN0IiwiZmxhZ3MiLCJjaGVjayIsInRvdGFsIiwid2JpdHMiLCJvZmZzZXQiLCJuY29kZSIsIm5sZW4iLCJuZGlzdCIsImhhdmUiLCJuZXh0IiwibGVucyIsIndvcmsiLCJsZW5keW4iLCJkaXN0ZHluIiwiYmFjayIsIndhcyIsIloiLCJpbmZsYXRlUmVzZXQiLCJpbmZsYXRlUmVzZXQyIiwiaW5mbGF0ZVJlc2V0S2VlcCIsImluZmxhdGVJbml0IiwiaW5mbGF0ZUluZm8iLCJzdGF0aWNfdHJlZSIsImV4dHJhX2JpdHMiLCJleHRyYV9iYXNlIiwiZWxlbXMiLCJtYXhfbGVuZ3RoIiwiaGFzX3N0cmVlIiwiZHluX3RyZWUiLCJtYXhfY29kZSIsInN0YXRfZGVzYyIsInNwbGljZSIsImFhIiwiY2EiLCJkYSIsIlNldCIsImVhIiwiZmEiLCJoYSIsImFkZCIsImlhIiwiamEiLCJrYSIsImxhIiwibWEiLCJhY2NlcHRzQm9vbGVhbnMiLCJhdHRyaWJ1dGVOYW1lIiwiYXR0cmlidXRlTmFtZXNwYWNlIiwibXVzdFVzZVByb3BlcnR5IiwicHJvcGVydHlOYW1lIiwic2FuaXRpemVVUkwiLCJyZW1vdmVFbXB0eVN0cmluZyIsInJhIiwic2EiLCJ0YSIsInBhIiwiaXNOYU4iLCJxYSIsIm9hIiwicmVtb3ZlQXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwic2V0QXR0cmlidXRlTlMiLCJ4bGlua0hyZWYiLCJ1YSIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwidmEiLCJTeW1ib2wiLCJmb3IiLCJ3YSIsInlhIiwiemEiLCJBYSIsIkJhIiwiQ2EiLCJEYSIsIkVhIiwiRmEiLCJHYSIsIkhhIiwiSWEiLCJKYSIsIml0ZXJhdG9yIiwiS2EiLCJMYSIsIk1hIiwic3RhY2siLCJtYXRjaCIsIk5hIiwiT2EiLCJwcmVwYXJlU3RhY2tUcmFjZSIsImRlZmluZVByb3BlcnR5IiwiUmVmbGVjdCIsImRpc3BsYXlOYW1lIiwiaW5jbHVkZXMiLCJQYSIsInRhZyIsInJlbmRlciIsIlFhIiwiJCR0eXBlb2YiLCJfY29udGV4dCIsIl9wYXlsb2FkIiwiX2luaXQiLCJSYSIsIlNhIiwiVGEiLCJub2RlTmFtZSIsIlZhIiwiX3ZhbHVlVHJhY2tlciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXRWYWx1ZSIsInNldFZhbHVlIiwic3RvcFRyYWNraW5nIiwiVWEiLCJXYSIsImNoZWNrZWQiLCJYYSIsImFjdGl2ZUVsZW1lbnQiLCJZYSIsImRlZmF1bHRDaGVja2VkIiwiZGVmYXVsdFZhbHVlIiwiX3dyYXBwZXJTdGF0ZSIsImluaXRpYWxDaGVja2VkIiwiWmEiLCJpbml0aWFsVmFsdWUiLCJjb250cm9sbGVkIiwiYWIiLCJiYiIsImNiIiwiZGIiLCJvd25lckRvY3VtZW50IiwiZWIiLCJpc0FycmF5IiwiZmIiLCJzZWxlY3RlZCIsImRlZmF1bHRTZWxlY3RlZCIsImRpc2FibGVkIiwiZ2IiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsImNoaWxkcmVuIiwiaGIiLCJpYiIsImpiIiwidGV4dENvbnRlbnQiLCJrYiIsImxiIiwibWIiLCJuYiIsIm5hbWVzcGFjZVVSSSIsImlubmVySFRNTCIsInZhbHVlT2YiLCJmaXJzdENoaWxkIiwiTVNBcHAiLCJleGVjVW5zYWZlTG9jYWxGdW5jdGlvbiIsIm9iIiwibGFzdENoaWxkIiwibm9kZVR5cGUiLCJub2RlVmFsdWUiLCJwYiIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYXNwZWN0UmF0aW8iLCJib3JkZXJJbWFnZU91dHNldCIsImJvcmRlckltYWdlU2xpY2UiLCJib3JkZXJJbWFnZVdpZHRoIiwiYm94RmxleCIsImJveEZsZXhHcm91cCIsImJveE9yZGluYWxHcm91cCIsImNvbHVtbkNvdW50IiwiY29sdW1ucyIsImZsZXgiLCJmbGV4R3JvdyIsImZsZXhQb3NpdGl2ZSIsImZsZXhTaHJpbmsiLCJmbGV4TmVnYXRpdmUiLCJmbGV4T3JkZXIiLCJncmlkQXJlYSIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1NwYW4iLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwiZm9udFdlaWdodCIsImxpbmVDbGFtcCIsImxpbmVIZWlnaHQiLCJvcGFjaXR5Iiwib3JkZXIiLCJvcnBoYW5zIiwidGFiU2l6ZSIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJmaWxsT3BhY2l0eSIsImZsb29kT3BhY2l0eSIsInN0b3BPcGFjaXR5Iiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VPcGFjaXR5Iiwic3Ryb2tlV2lkdGgiLCJxYiIsInJiIiwic2IiLCJzdHlsZSIsInNldFByb3BlcnR5Iiwia2V5cyIsInRiIiwibWVudWl0ZW0iLCJhcmVhIiwiYmFzZSIsImJyIiwiY29sIiwiZW1iZWQiLCJociIsImltZyIsImtleWdlbiIsImxpbmsiLCJwYXJhbSIsInRyYWNrIiwid2JyIiwidWIiLCJ2YiIsImlzIiwid2IiLCJ4YiIsInNyY0VsZW1lbnQiLCJjb3JyZXNwb25kaW5nVXNlRWxlbWVudCIsInliIiwiemIiLCJBYiIsIkJiIiwiQ2IiLCJzdGF0ZU5vZGUiLCJEYiIsIkViIiwiRmIiLCJHYiIsIkhiIiwiSWIiLCJKYiIsIktiIiwiTGIiLCJNYiIsIk5iIiwib25FcnJvciIsIk9iIiwiUGIiLCJRYiIsIlJiIiwiU2IiLCJUYiIsIlZiIiwiYWx0ZXJuYXRlIiwicmV0dXJuIiwiV2IiLCJtZW1vaXplZFN0YXRlIiwiZGVoeWRyYXRlZCIsIlhiIiwiWmIiLCJjaGlsZCIsInNpYmxpbmciLCJjdXJyZW50IiwiWWIiLCIkYiIsImFjIiwidW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayIsImJjIiwidW5zdGFibGVfY2FuY2VsQ2FsbGJhY2siLCJjYyIsInVuc3RhYmxlX3Nob3VsZFlpZWxkIiwiZGMiLCJ1bnN0YWJsZV9yZXF1ZXN0UGFpbnQiLCJ1bnN0YWJsZV9ub3ciLCJlYyIsInVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsIiwiZmMiLCJ1bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSIsImdjIiwidW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkiLCJoYyIsInVuc3RhYmxlX05vcm1hbFByaW9yaXR5IiwiaWMiLCJ1bnN0YWJsZV9Mb3dQcmlvcml0eSIsImpjIiwidW5zdGFibGVfSWRsZVByaW9yaXR5Iiwia2MiLCJsYyIsIm9jIiwiY2x6MzIiLCJwYyIsInFjIiwiTE4yIiwicmMiLCJzYyIsInRjIiwidWMiLCJwZW5kaW5nTGFuZXMiLCJzdXNwZW5kZWRMYW5lcyIsInBpbmdlZExhbmVzIiwiZW50YW5nbGVkTGFuZXMiLCJlbnRhbmdsZW1lbnRzIiwidmMiLCJ4YyIsInljIiwiemMiLCJBYyIsImV2ZW50VGltZXMiLCJDYyIsIkRjIiwiRWMiLCJGYyIsIkdjIiwiSGMiLCJJYyIsIkpjIiwiS2MiLCJMYyIsIk1jIiwiTmMiLCJPYyIsIk1hcCIsIlBjIiwiUWMiLCJSYyIsIlNjIiwiZGVsZXRlIiwicG9pbnRlcklkIiwiVGMiLCJuYXRpdmVFdmVudCIsImJsb2NrZWRPbiIsImRvbUV2ZW50TmFtZSIsImV2ZW50U3lzdGVtRmxhZ3MiLCJ0YXJnZXRDb250YWluZXJzIiwiVmMiLCJXYyIsInByaW9yaXR5IiwiaXNEZWh5ZHJhdGVkIiwiY29udGFpbmVySW5mbyIsIlhjIiwiWWMiLCJaYyIsIiRjIiwiYWQiLCJiZCIsImNkIiwiUmVhY3RDdXJyZW50QmF0Y2hDb25maWciLCJkZCIsImVkIiwidHJhbnNpdGlvbiIsImZkIiwiZ2QiLCJoZCIsIlVjIiwic3RvcFByb3BhZ2F0aW9uIiwiamQiLCJrZCIsImxkIiwibWQiLCJuZCIsIm9kIiwia2V5Q29kZSIsImNoYXJDb2RlIiwicGQiLCJxZCIsInJkIiwiX3JlYWN0TmFtZSIsIl90YXJnZXRJbnN0IiwiY3VycmVudFRhcmdldCIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJyZXR1cm5WYWx1ZSIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwicHJldmVudERlZmF1bHQiLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiaXNQZXJzaXN0ZW50Iiwid2QiLCJ4ZCIsInlkIiwic2QiLCJldmVudFBoYXNlIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJ0aW1lU3RhbXAiLCJub3ciLCJpc1RydXN0ZWQiLCJ0ZCIsInVkIiwidmlldyIsImRldGFpbCIsInZkIiwiQWQiLCJzY3JlZW5YIiwic2NyZWVuWSIsImNsaWVudFgiLCJjbGllbnRZIiwicGFnZVgiLCJwYWdlWSIsImN0cmxLZXkiLCJzaGlmdEtleSIsImFsdEtleSIsIm1ldGFLZXkiLCJnZXRNb2RpZmllclN0YXRlIiwiemQiLCJidXR0b24iLCJidXR0b25zIiwicmVsYXRlZFRhcmdldCIsImZyb21FbGVtZW50IiwidG9FbGVtZW50IiwibW92ZW1lbnRYIiwibW92ZW1lbnRZIiwiQmQiLCJEZCIsImRhdGFUcmFuc2ZlciIsIkZkIiwiSGQiLCJhbmltYXRpb25OYW1lIiwiZWxhcHNlZFRpbWUiLCJwc2V1ZG9FbGVtZW50IiwiSWQiLCJjbGlwYm9hcmREYXRhIiwiSmQiLCJMZCIsIk1kIiwiRXNjIiwiU3BhY2ViYXIiLCJMZWZ0IiwiVXAiLCJSaWdodCIsIkRvd24iLCJEZWwiLCJXaW4iLCJNZW51IiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsIk5kIiwiT2QiLCJBbHQiLCJDb250cm9sIiwiTWV0YSIsIlNoaWZ0IiwiUGQiLCJRZCIsInJlcGVhdCIsImxvY2FsZSIsIndoaWNoIiwiUmQiLCJUZCIsIndpZHRoIiwiaGVpZ2h0IiwicHJlc3N1cmUiLCJ0YW5nZW50aWFsUHJlc3N1cmUiLCJ0aWx0WCIsInRpbHRZIiwidHdpc3QiLCJwb2ludGVyVHlwZSIsImlzUHJpbWFyeSIsIlZkIiwidG91Y2hlcyIsInRhcmdldFRvdWNoZXMiLCJjaGFuZ2VkVG91Y2hlcyIsIlhkIiwiWWQiLCJkZWx0YVgiLCJ3aGVlbERlbHRhWCIsImRlbHRhWSIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YSIsImRlbHRhWiIsImRlbHRhTW9kZSIsIlpkIiwiJGQiLCJhZSIsImJlIiwiZG9jdW1lbnRNb2RlIiwiY2UiLCJkZSIsImVlIiwiZmUiLCJnZSIsImhlIiwiaWUiLCJsZSIsImNvbG9yIiwiZGF0ZXRpbWUiLCJlbWFpbCIsIm1vbnRoIiwibnVtYmVyIiwicGFzc3dvcmQiLCJyYW5nZSIsInNlYXJjaCIsInRlbCIsIndlZWsiLCJtZSIsIm5lIiwib2UiLCJldmVudCIsImxpc3RlbmVycyIsInBlIiwicWUiLCJyZSIsInNlIiwidGUiLCJ1ZSIsInZlIiwid2UiLCJ4ZSIsInllIiwiemUiLCJvbmlucHV0IiwiQWUiLCJkZXRhY2hFdmVudCIsIkJlIiwiQ2UiLCJhdHRhY2hFdmVudCIsIkRlIiwiRWUiLCJGZSIsIkhlIiwiSWUiLCJKZSIsIktlIiwibm9kZSIsIm5leHRTaWJsaW5nIiwiTGUiLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiTWUiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnRXaW5kb3ciLCJOZSIsImNvbnRlbnRFZGl0YWJsZSIsIk9lIiwiZm9jdXNlZEVsZW0iLCJzZWxlY3Rpb25SYW5nZSIsInN0YXJ0Iiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJkZWZhdWx0VmlldyIsImdldFNlbGVjdGlvbiIsInJhbmdlQ291bnQiLCJhbmNob3JOb2RlIiwiYW5jaG9yT2Zmc2V0IiwiZm9jdXNOb2RlIiwiZm9jdXNPZmZzZXQiLCJjcmVhdGVSYW5nZSIsInNldFN0YXJ0IiwicmVtb3ZlQWxsUmFuZ2VzIiwiYWRkUmFuZ2UiLCJzZXRFbmQiLCJlbGVtZW50IiwibGVmdCIsInNjcm9sbExlZnQiLCJ0b3AiLCJzY3JvbGxUb3AiLCJmb2N1cyIsIlBlIiwiUWUiLCJSZSIsIlNlIiwiVGUiLCJVZSIsIlZlIiwiV2UiLCJhbmltYXRpb25lbmQiLCJhbmltYXRpb25pdGVyYXRpb24iLCJhbmltYXRpb25zdGFydCIsInRyYW5zaXRpb25lbmQiLCJYZSIsIlllIiwiWmUiLCJhbmltYXRpb24iLCIkZSIsImFmIiwiYmYiLCJjZiIsImRmIiwiZWYiLCJmZiIsImdmIiwiaGYiLCJsZiIsIm1mIiwibmYiLCJVYiIsImluc3RhbmNlIiwibGlzdGVuZXIiLCJvZiIsInBmIiwicWYiLCJyZiIsInJhbmRvbSIsInNmIiwiYmluZCIsImNhcHR1cmUiLCJwYXNzaXZlIiwiSiIsInRmIiwidWYiLCJwYXJlbnRXaW5kb3ciLCJ2ZiIsIndmIiwibmEiLCJ4YSIsIiRhIiwiYmEiLCJqZSIsImNoYXIiLCJrZSIsInVuc2hpZnQiLCJ4ZiIsInlmIiwiemYiLCJBZiIsIkJmIiwiQ2YiLCJEZiIsIkVmIiwiX19odG1sIiwiRmYiLCJHZiIsImNsZWFyVGltZW91dCIsIkhmIiwiSmYiLCJxdWV1ZU1pY3JvdGFzayIsIklmIiwiS2YiLCJMZiIsIk1mIiwicHJldmlvdXNTaWJsaW5nIiwiTmYiLCJPZiIsIlBmIiwiUWYiLCJSZiIsIlNmIiwiVGYiLCJVZiIsIkciLCJWZiIsIkgiLCJXZiIsIlhmIiwiWWYiLCJjb250ZXh0VHlwZXMiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJaZiIsImNoaWxkQ29udGV4dFR5cGVzIiwiJGYiLCJhZyIsImJnIiwiZ2V0Q2hpbGRDb250ZXh0IiwiY2ciLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCIsImRnIiwiZWciLCJmZyIsImdnIiwiaGciLCJqZyIsImtnIiwibGciLCJtZyIsIm5nIiwib2ciLCJwZyIsInFnIiwicmciLCJzZyIsInRnIiwidWciLCJ2ZyIsIndnIiwieGciLCJ5ZyIsInpnIiwiQWciLCJCZyIsImVsZW1lbnRUeXBlIiwiZGVsZXRpb25zIiwiQ2ciLCJwZW5kaW5nUHJvcHMiLCJvdmVyZmxvdyIsInRyZWVDb250ZXh0IiwicmV0cnlMYW5lIiwiRGciLCJFZyIsIkZnIiwiR2ciLCJtZW1vaXplZFByb3BzIiwiSGciLCJJZyIsIkpnIiwiS2ciLCJMZyIsImRlZmF1bHRQcm9wcyIsIk1nIiwiTmciLCJPZyIsIlBnIiwiUWciLCJSZyIsIl9jdXJyZW50VmFsdWUiLCJTZyIsImNoaWxkTGFuZXMiLCJUZyIsImRlcGVuZGVuY2llcyIsImZpcnN0Q29udGV4dCIsImxhbmVzIiwiVWciLCJWZyIsImNvbnRleHQiLCJtZW1vaXplZFZhbHVlIiwiV2ciLCJYZyIsIllnIiwiaW50ZXJsZWF2ZWQiLCJaZyIsIiRnIiwiYWgiLCJ1cGRhdGVRdWV1ZSIsImJhc2VTdGF0ZSIsImZpcnN0QmFzZVVwZGF0ZSIsImxhc3RCYXNlVXBkYXRlIiwic2hhcmVkIiwiZWZmZWN0cyIsImJoIiwiY2giLCJldmVudFRpbWUiLCJsYW5lIiwicGF5bG9hZCIsImRoIiwiSyIsImVoIiwiZmgiLCJnaCIsInEiLCJoaCIsImloIiwiamgiLCJDb21wb25lbnQiLCJyZWZzIiwia2giLCJuaCIsImlzTW91bnRlZCIsIl9yZWFjdEludGVybmFscyIsImVucXVldWVTZXRTdGF0ZSIsImxoIiwibWgiLCJlbnF1ZXVlUmVwbGFjZVN0YXRlIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwib2giLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJpc1B1cmVSZWFjdENvbXBvbmVudCIsInBoIiwiY29udGV4dFR5cGUiLCJ1cGRhdGVyIiwicWgiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJyaCIsInByb3BzIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50RGlkTW91bnQiLCJzaCIsInJlZiIsIl9vd25lciIsIl9zdHJpbmdSZWYiLCJ0aCIsInVoIiwidmgiLCJ3aCIsInhoIiwieWgiLCJpbXBsZW1lbnRhdGlvbiIsInpoIiwiQWgiLCJCaCIsIkNoIiwiRGgiLCJFaCIsIkZoIiwiR2giLCJIaCIsIkloIiwidGFnTmFtZSIsIkpoIiwiS2giLCJMaCIsIk0iLCJNaCIsInJldmVhbE9yZGVyIiwiTmgiLCJPaCIsIl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5IiwiUGgiLCJSZWFjdEN1cnJlbnREaXNwYXRjaGVyIiwiUWgiLCJSaCIsIlNoIiwiVGgiLCJVaCIsIlZoIiwiUSIsIldoIiwiWGgiLCJZaCIsIlpoIiwiJGgiLCJhaSIsImJpIiwiY2kiLCJiYXNlUXVldWUiLCJkaSIsImVpIiwiZmkiLCJsYXN0UmVuZGVyZWRSZWR1Y2VyIiwiYWN0aW9uIiwiaGFzRWFnZXJTdGF0ZSIsImVhZ2VyU3RhdGUiLCJsYXN0UmVuZGVyZWRTdGF0ZSIsImRpc3BhdGNoIiwiZ2kiLCJoaSIsImlpIiwiamkiLCJraSIsImdldFNuYXBzaG90IiwibGkiLCJtaSIsIm5pIiwibGFzdEVmZmVjdCIsInN0b3JlcyIsIm9pIiwicGkiLCJxaSIsInJpIiwiY3JlYXRlIiwiZGVzdHJveSIsImRlcHMiLCJzaSIsInRpIiwidWkiLCJ2aSIsIndpIiwieGkiLCJ5aSIsInppIiwiQWkiLCJCaSIsIkNpIiwiRGkiLCJFaSIsIkZpIiwiR2kiLCJIaSIsIklpIiwiSmkiLCJyZWFkQ29udGV4dCIsInVzZUNhbGxiYWNrIiwidXNlQ29udGV4dCIsInVzZUVmZmVjdCIsInVzZUltcGVyYXRpdmVIYW5kbGUiLCJ1c2VJbnNlcnRpb25FZmZlY3QiLCJ1c2VMYXlvdXRFZmZlY3QiLCJ1c2VNZW1vIiwidXNlUmVkdWNlciIsInVzZVJlZiIsInVzZVN0YXRlIiwidXNlRGVidWdWYWx1ZSIsInVzZURlZmVycmVkVmFsdWUiLCJ1c2VUcmFuc2l0aW9uIiwidXNlTXV0YWJsZVNvdXJjZSIsInVzZVN5bmNFeHRlcm5hbFN0b3JlIiwidXNlSWQiLCJ1bnN0YWJsZV9pc05ld1JlY29uY2lsZXIiLCJpZGVudGlmaWVyUHJlZml4IiwiS2kiLCJtZXNzYWdlIiwiZGlnZXN0IiwiTGkiLCJNaSIsIk5pIiwiV2Vha01hcCIsIk9pIiwiUGkiLCJRaSIsIlJpIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yIiwiY29tcG9uZW50RGlkQ2F0Y2giLCJTaSIsImNvbXBvbmVudFN0YWNrIiwiVGkiLCJwaW5nQ2FjaGUiLCJVaSIsIlZpIiwiV2kiLCJYaSIsIlJlYWN0Q3VycmVudE93bmVyIiwiWWkiLCJaaSIsIiRpIiwiYWoiLCJiaiIsImNvbXBhcmUiLCJjaiIsImRqIiwiZWoiLCJiYXNlTGFuZXMiLCJjYWNoZVBvb2wiLCJ0cmFuc2l0aW9ucyIsImZqIiwiZ2oiLCJoaiIsImlqIiwiamoiLCJVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnREaWRVcGRhdGUiLCJraiIsImxqIiwicGVuZGluZ0NvbnRleHQiLCJtaiIsIkFqIiwiQ2oiLCJEaiIsIm5qIiwib2oiLCJwaiIsImZhbGxiYWNrIiwicWoiLCJyaiIsInRqIiwiZGF0YXNldCIsImRnc3QiLCJ1aiIsInZqIiwiX3JlYWN0UmV0cnkiLCJzaiIsInN1YnRyZWVGbGFncyIsIndqIiwieGoiLCJpc0JhY2t3YXJkcyIsInJlbmRlcmluZyIsInJlbmRlcmluZ1N0YXJ0VGltZSIsInRhaWwiLCJ0YWlsTW9kZSIsInlqIiwiRWoiLCJGaiIsIkdqIiwid2FzTXVsdGlwbGUiLCJtdWx0aXBsZSIsInN1cHByZXNzSHlkcmF0aW9uV2FybmluZyIsIm9uQ2xpY2siLCJvbmNsaWNrIiwiY3JlYXRlRWxlbWVudE5TIiwiYXV0b0ZvY3VzIiwiSGoiLCJJaiIsIkpqIiwiS2oiLCJMaiIsIldlYWtTZXQiLCJWIiwiTWoiLCJXIiwiTmoiLCJPaiIsIlFqIiwiUmoiLCJTaiIsIlRqIiwiVWoiLCJWaiIsIldqIiwiaW5zZXJ0QmVmb3JlIiwiX3JlYWN0Um9vdENvbnRhaW5lciIsIlhqIiwiWCIsIllqIiwiWmoiLCJhayIsIm9uQ29tbWl0RmliZXJVbm1vdW50IiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJiayIsImNrIiwiZGsiLCJlayIsImZrIiwiaXNIaWRkZW4iLCJnayIsImhrIiwiZGlzcGxheSIsImlrIiwiamsiLCJrayIsImxrIiwiX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUiLCJzcmMiLCJXayIsIm1rIiwiY2VpbCIsIm5rIiwicGsiLCJZIiwicWsiLCJyayIsInNrIiwidGsiLCJ1ayIsIkluZmluaXR5IiwidmsiLCJ3ayIsInhrIiwieWsiLCJ6ayIsIkFrIiwiQmsiLCJDayIsIkRrIiwiRWsiLCJjYWxsYmFja05vZGUiLCJleHBpcmF0aW9uVGltZXMiLCJleHBpcmVkTGFuZXMiLCJ3YyIsImNhbGxiYWNrUHJpb3JpdHkiLCJpZyIsIkZrIiwiR2siLCJIayIsIklrIiwiSmsiLCJLayIsIkxrIiwiTWsiLCJOayIsIk9rIiwiUGsiLCJmaW5pc2hlZFdvcmsiLCJmaW5pc2hlZExhbmVzIiwiUWsiLCJ0aW1lb3V0SGFuZGxlIiwiUmsiLCJTayIsIlRrIiwiVWsiLCJWayIsIm11dGFibGVSZWFkTGFuZXMiLCJCYyIsIlBqIiwib25Db21taXRGaWJlclJvb3QiLCJtYyIsIm9uUmVjb3ZlcmFibGVFcnJvciIsIlhrIiwib25Qb3N0Q29tbWl0RmliZXJSb290IiwiWWsiLCJaayIsImFsIiwiaXNSZWFjdENvbXBvbmVudCIsInBlbmRpbmdDaGlsZHJlbiIsImJsIiwibXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YSIsImNsIiwiY2FjaGUiLCJwZW5kaW5nU3VzcGVuc2VCb3VuZGFyaWVzIiwiZGwiLCJlbCIsImZsIiwiZ2wiLCJobCIsImlsIiwiamwiLCJ6aiIsIiRrIiwibGwiLCJyZXBvcnRFcnJvciIsIm1sIiwiX2ludGVybmFsUm9vdCIsIm5sIiwib2wiLCJwbCIsInFsIiwic2wiLCJybCIsInVubW91bnQiLCJ1bnN0YWJsZV9zY2hlZHVsZUh5ZHJhdGlvbiIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJ0bCIsInVzaW5nQ2xpZW50RW50cnlQb2ludCIsIkV2ZW50cyIsInVsIiwiZmluZEZpYmVyQnlIb3N0SW5zdGFuY2UiLCJidW5kbGVUeXBlIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsInZsIiwicmVuZGVyZXJDb25maWciLCJvdmVycmlkZUhvb2tTdGF0ZSIsIm92ZXJyaWRlSG9va1N0YXRlRGVsZXRlUGF0aCIsIm92ZXJyaWRlSG9va1N0YXRlUmVuYW1lUGF0aCIsIm92ZXJyaWRlUHJvcHMiLCJvdmVycmlkZVByb3BzRGVsZXRlUGF0aCIsIm92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoIiwic2V0RXJyb3JIYW5kbGVyIiwic2V0U3VzcGVuc2VIYW5kbGVyIiwic2NoZWR1bGVVcGRhdGUiLCJjdXJyZW50RGlzcGF0Y2hlclJlZiIsImZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyIiwiZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoIiwic2NoZWR1bGVSZWZyZXNoIiwic2NoZWR1bGVSb290Iiwic2V0UmVmcmVzaEhhbmRsZXIiLCJnZXRDdXJyZW50RmliZXIiLCJyZWNvbmNpbGVyVmVyc2lvbiIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsIndsIiwiaXNEaXNhYmxlZCIsInN1cHBvcnRzRmliZXIiLCJpbmplY3QiLCJjcmVhdGVQb3J0YWwiLCJjcmVhdGVSb290IiwidW5zdGFibGVfc3RyaWN0TW9kZSIsImZpbmRET01Ob2RlIiwiZmx1c2hTeW5jIiwiaHlkcmF0ZSIsImh5ZHJhdGVSb290IiwiaHlkcmF0ZWRTb3VyY2VzIiwiX2dldFZlcnNpb24iLCJfc291cmNlIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJjaGVja0RDRSIsImdldFByb3RvdHlwZU9mIiwiX19lc01vZHVsZSIsIkNoZWNrbWFya0ljb24iLCJFcnJvckljb24iLCJMb2FkZXJJY29uIiwiVG9hc3RCYXIiLCIkIiwiVG9hc3RJY29uIiwiVG9hc3RlciIsImRlZmF1bHQiLCJfZSIsInJlc29sdmVWYWx1ZSIsInRvYXN0IiwidXNlVG9hc3RlciIsInVzZVRvYXN0ZXJTdG9yZSIsIm1hdGNoTWVkaWEiLCJ0b2FzdElkIiwidG9hc3RzIiwiZmluZCIsInZpc2libGUiLCJwYXVzZWRBdCIsInBhdXNlRHVyYXRpb24iLCJibGFuayIsInN1Y2Nlc3MiLCJsb2FkaW5nIiwiY3VzdG9tIiwiZHVyYXRpb24iLCJjcmVhdGVkQXQiLCJhcmlhUHJvcHMiLCJyb2xlIiwiZGlzbWlzcyIsInJldmVyc2VPcmRlciIsImd1dHRlciIsImRlZmF1bHRQb3NpdGlvbiIsInBvc2l0aW9uIiwiZmluZEluZGV4IiwicmVkdWNlIiwiaGFuZGxlcnMiLCJ1cGRhdGVIZWlnaHQiLCJzdGFydFBhdXNlIiwiZW5kUGF1c2UiLCJjYWxjdWxhdGVPZmZzZXQiLCJrZXlmcmFtZXMiLCJzdHlsZWQiLCJwcmltYXJ5Iiwic2Vjb25kYXJ5IiwiaWNvbiIsImljb25UaGVtZSIsIm1lbW8iLCJjbGFzc05hbWUiLCJGcmFnbWVudCIsInNldHVwIiwib25IZWlnaHRVcGRhdGUiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJzdWJ0cmVlIiwiY2hpbGRMaXN0IiwiY3NzIiwidG9hc3RPcHRpb25zIiwiY29udGFpbmVyU3R5bGUiLCJjb250YWluZXJDbGFzc05hbWUiLCJyaWdodCIsImJvdHRvbSIsInBvaW50ZXJFdmVudHMiLCJvbk1vdXNlRW50ZXIiLCJvbk1vdXNlTGVhdmUiLCJqdXN0aWZ5Q29udGVudCIsInRyYW5zZm9ybSIsIl9fc2VsZiIsIl9fc291cmNlIiwianN4IiwianN4cyIsInNldFN0YXRlIiwiZm9yY2VVcGRhdGUiLCJlc2NhcGUiLCJfc3RhdHVzIiwiX3Jlc3VsdCIsIkNoaWxkcmVuIiwiY291bnQiLCJ0b0FycmF5Iiwib25seSIsIlByb2ZpbGVyIiwiUHVyZUNvbXBvbmVudCIsIlN0cmljdE1vZGUiLCJTdXNwZW5zZSIsImNsb25lRWxlbWVudCIsImNyZWF0ZUNvbnRleHQiLCJfY3VycmVudFZhbHVlMiIsIl90aHJlYWRDb3VudCIsIlByb3ZpZGVyIiwiQ29uc3VtZXIiLCJfZGVmYXVsdFZhbHVlIiwiX2dsb2JhbE5hbWUiLCJjcmVhdGVGYWN0b3J5IiwiY3JlYXRlUmVmIiwiZm9yd2FyZFJlZiIsImlzVmFsaWRFbGVtZW50IiwibGF6eSIsInN0YXJ0VHJhbnNpdGlvbiIsInVuc3RhYmxlX2FjdCIsIlJlY29pbF9lcnIiLCJSZWNvaWxfaXNQcm9taXNlIiwiUmVjb2lsX251bGx0aHJvd3MiLCJfZGVmaW5lUHJvcGVydHkiLCJvYmoiLCJ3cml0YWJsZSIsIkJhc2VMb2FkYWJsZSIsInRvUHJvbWlzZSIsInZhbHVlTWF5YmUiLCJ2YWx1ZU9yVGhyb3ciLCJwcm9taXNlTWF5YmUiLCJwcm9taXNlT3JUaHJvdyIsImVycm9yTWF5YmUiLCJlcnJvck9yVGhyb3ciLCJvdGhlciIsImNvbnRlbnRzIiwiX21hcCIsIlZhbHVlTG9hZGFibGUiLCJzdXBlciIsImxvYWRhYmxlV2l0aFByb21pc2UiLCJpc0xvYWRhYmxlIiwibG9hZGFibGVXaXRoVmFsdWUiLCJsb2FkYWJsZVdpdGhFcnJvciIsIkVycm9yTG9hZGFibGUiLCJMb2FkaW5nTG9hZGFibGUiLCJuZXh0TG9hZGFibGUiLCJmcmVlemUiLCJsb2FkYWJsZUxvYWRpbmciLCJsb2FkYWJsZUFsbCIsImlucHV0cyIsImV2ZXJ5Iiwic29tZSIsImxvYWRhYmxlQWxsQXJyYXkiLCJvdXRwdXRzIiwib3V0IiwiaWR4IiwiTG9hZGFibGVTdGF0aWNJbnRlcmZhY2UiLCJSZWNvaWxfTG9hZGFibGUiLCJSZWNvaWxMb2FkYWJsZSIsIlJlY29pbF9Mb2FkYWJsZV8xIiwiUmVjb2lsX0xvYWRhYmxlXzIiLCJSZWNvaWxfTG9hZGFibGVfMyIsIlJlY29pbF9Mb2FkYWJsZV80IiwiUmVjb2lsX0xvYWRhYmxlXzUiLCJSZWNvaWxfTG9hZGFibGVfNiIsIlJlY29pbF9Mb2FkYWJsZV83IiwiUmVjb2lsX0xvYWRhYmxlJDEiLCJfX3Byb3RvX18iLCJna3MiLCJSZWNvaWxfZ2t4X09TUyIsIl9na3MkZ2V0Iiwic2V0UGFzcyIsInNldEZhaWwiLCJjbGVhciIsIlJlY29pbF9na3giLCJfY3JlYXRlTXV0YWJsZVNvdXJjZSIsIl91c2VNdXRhYmxlU291cmNlIiwiX3VzZVN5bmNFeHRlcm5hbFN0b3JlIiwiUmVjb2lsX3JlY292ZXJhYmxlVmlvbGF0aW9uIiwiX3Byb2plY3ROYW1lIiwiY3JlYXRlTXV0YWJsZVNvdXJjZSIsIlJlYWN0UmVuZGVyZXJWZXJzaW9uTWlzbWF0Y2hXYXJuT25jZSIsIlJlY29pbF9SZWFjdE1vZGUiLCJjdXJyZW50UmVuZGVyZXJTdXBwb3J0c1VzZVN5bmNFeHRlcm5hbFN0b3JlIiwiX1JlYWN0Q3VycmVudERpc3BhdGNoIiwiaXNVc2VTeW5jRXh0ZXJuYWxTdG9yZVN1cHBvcnRlZCIsImN1cnJlbnREaXNwYXRjaGVyIiwicmVhY3RNb2RlIiwiZWFybHkiLCJjb25jdXJyZW50IiwiJGRpc2FibGVSZWNvaWxWYWx1ZU11dGFibGVTb3VyY2VfVEVNUF9IQUNLX0RPX05PVF9VU0UiLCJpc0Zhc3RSZWZyZXNoRW5hYmxlZCIsImVudiIsIlJFQ09JTF9EVVBMSUNBVEVfQVRPTV9LRVlfQ0hFQ0tJTkdfRU5BQkxFRCIsIl9wcm9jZXNzIiwiX3Byb2Nlc3MkZW52JFJFQ09JTF9EIiwiX3Byb2Nlc3MkZW52JFJFQ09JTF9EMiIsInByb2Nlc3MiLCJzYW5pdGl6ZWRWYWx1ZSIsImFwcGx5UHJvY2Vzc0VudkZsYWdPdmVycmlkZXMiLCJSZWNvaWxfUmVjb2lsRW52IiwiQWJzdHJhY3RSZWNvaWxWYWx1ZSIsIm5ld0tleSIsInRvSlNPTiIsIlJlY29pbFN0YXRlIiwiUmVjb2lsVmFsdWVSZWFkT25seSIsIlJlY29pbF9SZWNvaWxWYWx1ZSIsImlzUmVjb2lsVmFsdWUiLCJSZWNvaWxfUmVjb2lsVmFsdWVfMSIsIlJlY29pbF9SZWNvaWxWYWx1ZV8yIiwiUmVjb2lsX1JlY29pbFZhbHVlXzMiLCJSZWNvaWxfUmVjb2lsVmFsdWVfNCIsIlJlY29pbF9SZWNvaWxWYWx1ZSQxIiwiUmVjb2lsX2V4cGVjdGF0aW9uVmlvbGF0aW9uIiwiZm9ybWF0IiwiUmVjb2lsX21hcEl0ZXJhYmxlIiwiaXRlcmFibGUiLCJpc0Zhc3RSZWZyZXNoRW5hYmxlZCQxIiwiRGVmYXVsdFZhbHVlIiwiREVGQVVMVF9WQUxVRSIsIm5vZGVzIiwicmVjb2lsVmFsdWVzIiwiTm9kZU1pc3NpbmdFcnJvciIsImNvbmZpZ0RlbGV0aW9uSGFuZGxlcnMiLCJnZXRDb25maWdEZWxldGlvbkhhbmRsZXIiLCJSZWNvaWxfTm9kZSIsInJlZ2lzdGVyTm9kZSIsImNoZWNrRm9yRHVwbGljYXRlQXRvbUtleSIsInJlY29pbFZhbHVlIiwiZ2V0Tm9kZSIsImdldE5vZGVNYXliZSIsImRlbGV0ZU5vZGVDb25maWdJZlBvc3NpYmxlIiwiX25vZGUkc2hvdWxkRGVsZXRlQ29uIiwiX2dldENvbmZpZ0RlbGV0aW9uSGFuIiwic2hvdWxkRGVsZXRlQ29uZmlnT25SZWxlYXNlIiwic2V0Q29uZmlnRGVsZXRpb25IYW5kbGVyIiwiZm4iLCJyZWNvaWxWYWx1ZXNGb3JLZXlzIiwiUmVjb2lsX1F1ZXVlIiwiZW5xdWV1ZUV4ZWN1dGlvbiIsImhhbXRfMSIsIl90eXBlb2YiLCJoYW10IiwiQlVDS0VUX1NJWkUiLCJwb3ciLCJNQVNLIiwiTUFYX0lOREVYX05PREUiLCJNSU5fQVJSQVlfTk9ERSIsIm5vdGhpbmciLCJjb25zdGFudCIsImhhc2giLCJzdHIiLCJsZW4iLCJoYXNoRnJhZ21lbnQiLCJ0b0JpdG1hcCIsImZyb21CaXRtYXAiLCJiaXRtYXAiLCJiaXQiLCJhcnJheVVwZGF0ZSIsIm11dGF0ZSIsImF0IiwiYXJyIiwiYXJyYXlTcGxpY2VPdXQiLCJuZXdMZW4iLCJlbXB0eSIsIl9faGFtdF9pc0VtcHR5IiwiaXNFbXB0eU5vZGUiLCJMZWFmIiwiZWRpdCIsIl9tb2RpZnkiLCJMZWFmX19tb2RpZnkiLCJDb2xsaXNpb24iLCJDb2xsaXNpb25fX21vZGlmeSIsIkluZGV4ZWROb2RlIiwibWFzayIsIkluZGV4ZWROb2RlX19tb2RpZnkiLCJBcnJheU5vZGUiLCJBcnJheU5vZGVfX21vZGlmeSIsIm1lcmdlTGVhdmVzIiwiaDEiLCJuMSIsImgyIiwibjIiLCJzdWJIMSIsInN1YkgyIiwiY2FuRWRpdE5vZGUiLCJrZXlFcSIsIl92IiwiX25ld1ZhbHVlIiwibmV3VmFsdWUiLCJ1cGRhdGVDb2xsaXNpb25MaXN0IiwiZnJhZyIsImluZHgiLCJleGlzdHMiLCJjYW5FZGl0IiwibmV3Q2hpbGRyZW4iLCJzdWJOb2RlcyIsImV4cGFuZCIsIl9pIiwiYXJyYXlTcGxpY2VJbiIsIm5ld0NoaWxkIiwicmVtb3ZlZCIsImVsZW1lbnRzIiwiZWxlbSIsInBhY2siLCJlZGl0YWJsZSIsImNvbmZpZyIsIl9lZGl0YWJsZSIsIl9lZGl0IiwiX2NvbmZpZyIsIl9yb290IiwiX3NpemUiLCJzZXRUcmVlIiwibmV3Um9vdCIsIm5ld1NpemUiLCJ0cnlHZXRIYXNoIiwiYWx0IiwidHJ5R2V0IiwiZ2V0SGFzaCIsImhhc0hhc2giLCJkZWZLZXlDb21wYXJlIiwibWFrZSIsImlzRW1wdHkiLCJtb2RpZnlIYXNoIiwiTmFOIiwibW9kaWZ5Iiwic2V0SGFzaCIsImRlbCIsInJlbW92ZUhhc2giLCJkZWxldGVIYXNoIiwiYmVnaW5NdXRhdGlvbiIsImVuZE11dGF0aW9uIiwidHJhbnNpZW50IiwiYXBwayIsImxhenlWaXNpdENoaWxkcmVuIiwibGF6eVZpc2l0IiwicmVzdCIsIkRPTkUiLCJNYXBJdGVyYXRvciIsInYwIiwidmlzaXQiLCJidWlsZFBhaXJzIiwiZW50cmllcyIsImJ1aWxkS2V5cyIsImJ1aWxkVmFsdWVzIiwiZm9sZCIsInRvVmlzaXQiLCJwb3AiLCJCdWlsdEluTWFwIiwiZXhpc3RpbmciLCJwZXJzaXN0ZW50TWFwIiwidG9NYXAiLCJIYXNoQXJyYXlNYXBwZWRUcmllTWFwIiwiX2hhbXQiLCJSZWNvaWxfUGVyc2lzdGVudE1hcF8xIiwiUmVjb2lsX1BlcnNpc3RlbnRNYXAkMSIsIlJlY29pbF9kaWZmZXJlbmNlU2V0cyIsInNldHNXaXRoVmFsdWVzVG9SZW1vdmUiLCJyZXQiLCJGSVJTVCIsIm90aGVyU2V0IiwiUmVjb2lsX21hcE1hcCIsIm1lcmdlRGVwc0ludG9HcmFwaCIsIm5ld0RlcHMiLCJncmFwaCIsIm9sZGVyR3JhcGgiLCJub2RlRGVwcyIsIm5vZGVUb05vZGVTdWJzY3JpcHRpb25zIiwib2xkRGVwcyIsImFkZGVkRGVwcyIsImRlcCIsInJlbW92ZWREZXBzIiwiUmVjb2lsX0dyYXBoIiwiY2xvbmVHcmFwaCIsInNhdmVEZXBzVG9TdG9yZSIsInN0b3JlIiwiX3N0b3JlU3RhdGUkbmV4dFRyZWUiLCJfc3RvcmVTdGF0ZSRwcmV2aW91c1QiLCJfc3RvcmVTdGF0ZSRwcmV2aW91c1QyIiwiX3N0b3JlU3RhdGUkcHJldmlvdXNUMyIsInN0b3JlU3RhdGUiLCJnZXRTdGF0ZSIsImN1cnJlbnRUcmVlIiwibmV4dFRyZWUiLCJwcmV2aW91c1RyZWUiLCJnZXRHcmFwaCIsIl9zdG9yZVN0YXRlJG5leHRUcmVlMiIsIm5leHRWZXJzaW9uIiwibmV4dFRyZWVTdGF0ZVZlcnNpb24iLCJuZXh0U3RvcmVJRCIsIm5leHRDb21wb25lbnRJRCIsIlJlY29pbF9LZXlzIiwiZ2V0TmV4dFRyZWVTdGF0ZVZlcnNpb24iLCJnZXROZXh0U3RvcmVJRCIsImdldE5leHRDb21wb25lbnRJRCIsInBlcnNpc3RlbnRNYXAkMSIsImdldE5leHRUcmVlU3RhdGVWZXJzaW9uJDEiLCJtYWtlRW1wdHlUcmVlU3RhdGUiLCJzdGF0ZUlEIiwidHJhbnNhY3Rpb25NZXRhZGF0YSIsImRpcnR5QXRvbXMiLCJhdG9tVmFsdWVzIiwibm9udmFsaWRhdGVkQXRvbXMiLCJSZWNvaWxfU3RhdGUiLCJtYWtlRW1wdHlTdG9yZVN0YXRlIiwiY29tbWl0RGVwdGgiLCJrbm93bkF0b21zIiwia25vd25TZWxlY3RvcnMiLCJ0cmFuc2FjdGlvblN1YnNjcmlwdGlvbnMiLCJub2RlVHJhbnNhY3Rpb25TdWJzY3JpcHRpb25zIiwibm9kZVRvQ29tcG9uZW50U3Vic2NyaXB0aW9ucyIsInF1ZXVlZENvbXBvbmVudENhbGxiYWNrc19ERVBSRUNBVEVEIiwic3VzcGVuZGVkQ29tcG9uZW50UmVzb2x2ZXJzIiwiZ3JhcGhzQnlWZXJzaW9uIiwicmV0ZW50aW9uIiwicmVmZXJlbmNlQ291bnRzIiwibm9kZXNSZXRhaW5lZEJ5Wm9uZSIsInJldGFpbmFibGVzVG9DaGVja0ZvclJlbGVhc2UiLCJub2RlQ2xlYW51cEZ1bmN0aW9ucyIsIlJldGVudGlvblpvbmUiLCJSZWNvaWxfUmV0ZW50aW9uWm9uZSIsInJldGVudGlvblpvbmUiLCJSZWNvaWxfQ29weU9uV3JpdGUiLCJzZXRCeUFkZGluZ1RvU2V0Iiwic2V0QnlEZWxldGluZ0Zyb21TZXQiLCJtYXBCeVNldHRpbmdJbk1hcCIsIm1hcEJ5VXBkYXRpbmdJbk1hcCIsIm1hcEJ5RGVsZXRpbmdGcm9tTWFwIiwibWFwQnlEZWxldGluZ011bHRpcGxlRnJvbU1hcCIsImtzIiwiUmVjb2lsX2ZpbHRlckl0ZXJhYmxlIiwicHJlZGljYXRlIiwiUmVjb2lsX2xhenlQcm94eSIsImZhY3RvcmllcyIsIm93bktleXMiLCJnZXROb2RlJDEiLCJnZXROb2RlTWF5YmUkMSIsInJlY29pbFZhbHVlc0ZvcktleXMkMSIsIlJldGVudGlvblpvbmUkMSIsInNldEJ5QWRkaW5nVG9TZXQkMSIsImVtcHR5U2V0IiwiUmVhZE9ubHlSZWNvaWxWYWx1ZUVycm9yIiwiaW5pdGlhbGl6ZU5vZGVJZk5ld1RvU3RvcmUiLCJ0cmVlU3RhdGUiLCJ0cmlnZ2VyIiwicmV0ZW50aW9uQ2xlYW51cCIsIm5vZGVLZXkiLCJyZXRhaW5lZEJ5IiwiYWRkVG9ab25lIiwiem9uZSIsImRlbGV0ZUZyb21ab25lIiwiaW5pdGlhbGl6ZVJldGVudGlvbkZvck5vZGUiLCJub2RlQ2xlYW51cCIsInBlZWtOb2RlTG9hZGFibGUiLCJwZWVrIiwiZ2V0RG93bnN0cmVhbU5vZGVzIiwidmlzaXRlZE5vZGVzIiwidmlzaXRpbmdOb2RlcyIsIl9ncmFwaCRub2RlVG9Ob2RlU3VicyIsInN1YnNjcmliZWROb2RlcyIsImRvd25zdHJlYW1Ob2RlIiwiUmVjb2lsX0Z1bmN0aW9uYWxDb3JlIiwiZ2V0Tm9kZUxvYWRhYmxlIiwic2V0Tm9kZVZhbHVlIiwiaW5pdGlhbGl6ZU5vZGUiLCJjbGVhblVwTm9kZSIsIl9zdGF0ZSRub2RlQ2xlYW51cEZ1biIsInNldFVudmFsaWRhdGVkQXRvbVZhbHVlX0RFUFJFQ0FURUQiLCJfbm9kZSRpbnZhbGlkYXRlIiwiaW52YWxpZGF0ZSIsInBlZWtOb2RlSW5mbyIsImxvYWRhYmxlIiwiaXNBY3RpdmUiLCJpc1NldCIsImlzTW9kaWZpZWQiLCJfZ3JhcGgkbm9kZURlcHMkZ2V0Iiwic3Vic2NyaWJlcnMiLCJfc3RvcmVTdGF0ZSRub2RlVG9Db20iLCJfc3RvcmVTdGF0ZSRub2RlVG9Db20yIiwiY29tcG9uZW50cyIsIl9pbnZhbGlkYXRlTWVtb2l6ZWRTbmFwc2hvdCIsIlJlY29pbF9TbmFwc2hvdENhY2hlIiwic2V0SW52YWxpZGF0ZU1lbW9pemVkU25hcHNob3QiLCJpbnZhbGlkYXRlTWVtb2l6ZWRTbmFwc2hvdCIsIl9pbnZhbGlkYXRlTWVtb2l6ZWRTbiIsImdldERvd25zdHJlYW1Ob2RlcyQxIiwiZ2V0Tm9kZUxvYWRhYmxlJDEiLCJzZXROb2RlVmFsdWUkMSIsImdldE5leHRDb21wb25lbnRJRCQxIiwiZ2V0Tm9kZSQyIiwiZ2V0Tm9kZU1heWJlJDIiLCJEZWZhdWx0VmFsdWUkMSIsInJlYWN0TW9kZSQxIiwiQWJzdHJhY3RSZWNvaWxWYWx1ZSQxIiwiUmVjb2lsU3RhdGUkMSIsIlJlY29pbFZhbHVlUmVhZE9ubHkkMSIsImlzUmVjb2lsVmFsdWUkMSIsImludmFsaWRhdGVNZW1vaXplZFNuYXBzaG90JDEiLCJhcHBseUFjdGlvbiIsInZhbHVlT3JVcGRhdGVyIiwidmFsdWVGcm9tVmFsdWVPclVwZGF0ZXIiLCJ3cml0ZXMiLCJ3cml0ZUxvYWRhYmxlVG9UcmVlU3RhdGUiLCJ1bnZhbGlkYXRlZFZhbHVlIiwiYXBwbHlBY3Rpb25zVG9TdG9yZSIsImFjdGlvbnMiLCJyZXBsYWNlU3RhdGUiLCJuZXdTdGF0ZSIsImNvcHlUcmVlU3RhdGUiLCJpbnZhbGlkYXRlRG93bnN0cmVhbXMiLCJxdWV1ZU9yUGVyZm9ybVN0YXRlVXBkYXRlIiwiYmF0Y2hTdGFjayIsImFjdGlvbnNCeVN0b3JlIiwiZG93bnN0cmVhbXMiLCJfZ2V0Tm9kZU1heWJlIiwiX2dldE5vZGVNYXliZSRpbnZhbGlkIiwic2V0UmVjb2lsVmFsdWUiLCJSZWNvaWxfUmVjb2lsVmFsdWVJbnRlcmZhY2UiLCJnZXRSZWNvaWxWYWx1ZUFzTG9hZGFibGUiLCJzZXRSZWNvaWxWYWx1ZUxvYWRhYmxlIiwibWFya1JlY29pbFZhbHVlTW9kaWZpZWQiLCJzZXRVbnZhbGlkYXRlZFJlY29pbFZhbHVlIiwic3Vic2NyaWJlVG9SZWNvaWxWYWx1ZSIsImNvbXBvbmVudERlYnVnTmFtZSIsInN1YklEIiwicmVsZWFzZSIsInJlbGVhc2VTdG9yZVN0YXRlIiwic3VicyIsImFwcGx5QXRvbVZhbHVlV3JpdGVzIiwiYmF0Y2hTdGFydCIsInJlZnJlc2hSZWNvaWxWYWx1ZSIsIl9ub2RlJGNsZWFyQ2FjaGUiLCJjbGVhckNhY2hlIiwiUmVjb2lsX3NvbWVTZXQiLCJlbnRyeSIsImNsZWFuVXBOb2RlJDEiLCJkZWxldGVOb2RlQ29uZmlnSWZQb3NzaWJsZSQxIiwiZ2V0Tm9kZSQzIiwiUmV0ZW50aW9uWm9uZSQyIiwiZW1wdHlTZXQkMSIsInJlbGVhc2VSZXRhaW5hYmxlc05vd09uQ3VycmVudFRyZWUiLCJyZXRhaW5hYmxlcyIsInJlbGVhc2FibGVOb2RlcyIsInNlYXJjaEZyb21Ob2RlcyIsIm5vblJlbGVhc2FibGVOb2RlcyIsImZpbmRSZWxlYXNhYmxlTm9kZXNJbm5lciIsInJlbGVhc2FibGVOb2Rlc0ZvdW5kVGhpc0l0ZXJhdGlvbiIsImRvTm90RGVzY2VuZEludG8xIiwiZG9Ob3REZXNjZW5kSW50bzIiLCJhbnN3ZXIiLCJ2aXNpdGVkIiwiZ2V0RG93bnN0cmVhbU5vZGVzSW5Ub3BvbG9naWNhbE9yZGVyIiwiX3N0b3JlU3RhdGUkcmV0ZW50aW9uIiwiem9uZXNUaGF0Q291bGRSZXRhaW5Ob2RlIiwibm9kZUNoaWxkcmVuIiwicGFyZW50cyIsInBhcmVudCIsImZpbmRSZWxlYXNhYmxlTm9kZXMiLCJyZWxlYXNlTm9kZSIsInpvbmVzIiwiX3N0b3JlU3RhdGUkcmV0ZW50aW9uMiIsIl9zdG9yZVN0YXRlJHJldGVudGlvbjMiLCJ1cGRhdGVSZXRhaW5Db3VudFRvWmVybyIsInJldGFpbmFibGUiLCJzY2hlZHVsZU9yUGVyZm9ybVBvc3NpYmxlUmVsZWFzZU9mUmV0YWluYWJsZSIsIlJlY29pbF9SZXRlbnRpb24iLCJTVVNQRU5TRV9USU1FT1VUX01TIiwidXBkYXRlUmV0YWluQ291bnQiLCJkZWx0YSIsIl9tYXAkZ2V0IiwibmV3Q291bnQiLCJyZWxlYXNlU2NoZWR1bGVkUmV0YWluYWJsZXNOb3ciLCJyZXRhaW5lZEJ5T3B0aW9uV2l0aERlZmF1bHQiLCJSZWFjdEJhdGNoZWRVcGRhdGVzIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMkMSIsIlJlY29pbF9SZWFjdEJhdGNoZWRVcGRhdGVzIiwiYmF0Y2hTdGFydCQxIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMkMiIsImJhdGNoZXIiLCJSZWNvaWxfQmF0Y2hpbmciLCJnZXRCYXRjaGVyIiwic2V0QmF0Y2hlciIsIm5ld0JhdGNoZXIiLCJiYXRjaFVwZGF0ZXMiLCJiYXRjaEVuZCIsIlJlY29pbF9jb25jYXRJdGVyYWJsZXMiLCJpdGVycyIsIml0ZXIiLCJ2YWwiLCJpc1NTUiIsIldpbmRvdyIsImlzUmVhY3ROYXRpdmUiLCJwcm9kdWN0IiwiUmVjb2lsX0Vudmlyb25tZW50IiwiaXNXaW5kb3ciLCJSZWNvaWxfTWVtb2l6ZSIsIm1lbW9pemVXaXRoQXJnc0hhc2giLCJoYXNoRnVuY3Rpb24iLCJtZW1vaXplT25lV2l0aEFyZ3NIYXNoIiwibGFzdEtleSIsImxhc3RSZXN1bHQiLCJtZW1vaXplT25lV2l0aEFyZ3NIYXNoQW5kSW52YWxpZGF0aW9uIiwiYmF0Y2hVcGRhdGVzJDEiLCJpbml0aWFsaXplTm9kZSQxIiwicGVla05vZGVJbmZvJDEiLCJncmFwaCQxIiwiZ2V0TmV4dFN0b3JlSUQkMSIsIkRFRkFVTFRfVkFMVUUkMSIsInJlY29pbFZhbHVlcyQxIiwicmVjb2lsVmFsdWVzRm9yS2V5cyQyIiwiQWJzdHJhY3RSZWNvaWxWYWx1ZSQyIiwiZ2V0UmVjb2lsVmFsdWVBc0xvYWRhYmxlJDEiLCJzZXRSZWNvaWxWYWx1ZSQxIiwic2V0VW52YWxpZGF0ZWRSZWNvaWxWYWx1ZSQxIiwidXBkYXRlUmV0YWluQ291bnQkMSIsInNldEludmFsaWRhdGVNZW1vaXplZFNuYXBzaG90JDEiLCJnZXROZXh0VHJlZVN0YXRlVmVyc2lvbiQyIiwibWFrZUVtcHR5U3RvcmVTdGF0ZSQxIiwiaXNTU1IkMSIsIm1lbW9pemVPbmVXaXRoQXJnc0hhc2hBbmRJbnZhbGlkYXRpb24kMSIsIlNuYXBzaG90IiwicGFyZW50U3RvcmVJRCIsImNoZWNrUmVmQ291bnRfSU5URVJOQUwiLCJfc3RvcmUiLCJnZXRMb2FkYWJsZSIsIm9wdCIsImlzSW5pdGlhbGl6ZWQiLCJtYXBwZXIiLCJtdXRhYmxlU25hcHNob3QiLCJNdXRhYmxlU25hcHNob3QiLCJyZXRhaW4iLCJhdXRvUmVsZWFzZV9JTlRFUk5BTCIsInN0b3JlSUQiLCJyZXBsYWNlciIsImdyYXBocyIsIm5ld0dyYXBoIiwic3Vic2NyaWJlVG9UcmFuc2FjdGlvbnMiLCJhZGRUcmFuc2FjdGlvbk1ldGFkYXRhIiwiX3JlZkNvdW50IiwicmVsZWFzZWQiLCJfcmVsZWFzZSIsImNsZWFudXAiLCJpc1JldGFpbmVkIiwiZ2V0U3RvcmVfSU5URVJOQUwiLCJnZXRJRCIsImdldFN0b3JlSUQiLCJjbG9uZVN0b3JlU3RhdGUiLCJidW1wVmVyc2lvbiIsIm1lbW9pemVkQ2xvbmVTbmFwc2hvdCIsImludmFsaWRhdGVNZW1vaXplZFNuYXBzaG90JDIiLCJfc3RvcmUkZ2V0U3RhdGUkbmV4dFQiLCJfc3RvcmUkZ2V0U3RhdGUkcHJldmkiLCJzbmFwc2hvdCIsImJhdGNoIiwicmVjb2lsU3RhdGUiLCJuZXdWYWx1ZU9yVXBkYXRlciIsIl9iYXRjaCIsIlJlY29pbF9TbmFwc2hvdCIsImZyZXNoU25hcHNob3QiLCJpbml0aWFsaXplU3RhdGUiLCJjbG9uZVNuYXBzaG90IiwiUmVjb2lsX1NuYXBzaG90XzEiLCJSZWNvaWxfU25hcHNob3RfMiIsIlJlY29pbF9TbmFwc2hvdF8zIiwiUmVjb2lsX1NuYXBzaG90XzQiLCJSZWNvaWxfU25hcHNob3QkMSIsIlJlY29pbF91bmlvblNldHMiLCJzZXRzIiwiUmVjb2lsX3VzZVJlZkluaXRPbmNlIiwiZ2V0TmV4dFRyZWVTdGF0ZVZlcnNpb24kMyIsIm1ha2VFbXB0eVN0b3JlU3RhdGUkMiIsImNsZWFuVXBOb2RlJDIiLCJnZXREb3duc3RyZWFtTm9kZXMkMiIsImluaXRpYWxpemVOb2RlJDIiLCJzZXROb2RlVmFsdWUkMiIsInNldFVudmFsaWRhdGVkQXRvbVZhbHVlX0RFUFJFQ0FURUQkMSIsImdyYXBoJDIiLCJjbG9uZUdyYXBoJDEiLCJnZXROZXh0U3RvcmVJRCQyIiwiY3JlYXRlTXV0YWJsZVNvdXJjZSQxIiwicmVhY3RNb2RlJDIiLCJhcHBseUF0b21WYWx1ZVdyaXRlcyQxIiwicmVsZWFzZVNjaGVkdWxlZFJldGFpbmFibGVzTm93JDEiLCJmcmVzaFNuYXBzaG90JDEiLCJ1c2VSZWYkMSIsIm5vdEluQUNvbnRleHQiLCJkZWZhdWx0U3RvcmUiLCJzdGF0ZVJlcGxhY2VySXNCZWluZ0V4ZWN1dGVkIiwic3RhcnROZXh0VHJlZUlmTmVlZGVkIiwiQXBwQ29udGV4dCIsInVzZVN0b3JlUmVmIiwiTXV0YWJsZVNvdXJjZUNvbnRleHQiLCJub3RpZnlDb21wb25lbnRzIiwiZGVwZW5kZW50Tm9kZXMiLCJjb21wcyIsIl9zdWJJRCIsIl9kZWJ1Z05hbWUiLCJzZW5kRW5kT2ZCYXRjaE5vdGlmaWNhdGlvbnMiLCJzdWJzY3JpcHRpb25zIiwic3Vic2NyaXB0aW9uIiwiQmF0Y2hlciIsInNldE5vdGlmeUJhdGNoZXJPZkNoYW5nZSIsInN0b3JlUmVmIiwiZW5kQmF0Y2giLCJuZXh0SUQiLCJSZWNvaWxSb290X0lOVEVSTkFMIiwiaW5pdGlhbGl6ZVN0YXRlX0RFUFJFQ0FURUQiLCJzdG9yZV9JTlRFUk5BTCIsInN0b3JlUHJvcCIsInN0b3JlU3RhdGVSZWYiLCJtZXRhZGF0YSIsInJlcGxhY2VkIiwibm90aWZ5QmF0Y2hlck9mQ2hhbmdlIiwiaW5pdGlhbCIsImF0b20iLCJ3cml0dGVuTm9kZXMiLCJzZXRVbnZhbGlkYXRlZEF0b21WYWx1ZXMiLCJpbml0aWFsU3RvcmVTdGF0ZV9ERVBSRUNBVEVEIiwiaW5pdGlhbFN0b3JlU3RhdGUiLCJtdXRhYmxlU291cmNlIiwiYXRvbUtleSIsIlJlY29pbF9SZWNvaWxSb290IiwiUmVjb2lsUm9vdCIsIm92ZXJyaWRlIiwicHJvcHNFeGNlcHRPdmVycmlkZSIsImFuY2VzdG9yU3RvcmVSZWYiLCJ1c2VSZWNvaWxNdXRhYmxlU291cmNlIiwidXNlUmVjb2lsU3RvcmVJRCIsIm5vdGlmeUNvbXBvbmVudHNfRk9SX1RFU1RJTkciLCJzZW5kRW5kT2ZCYXRjaE5vdGlmaWNhdGlvbnNfRk9SX1RFU1RJTkciLCJSZWNvaWxfc2hhbGxvd0FycmF5RXF1YWwiLCJ1c2VFZmZlY3QkMSIsInVzZVJlZiQyIiwiUmVjb2lsX3VzZVByZXZpb3VzIiwidXNlU3RvcmVSZWYkMSIsIlNVU1BFTlNFX1RJTUVPVVRfTVMkMSIsInVwZGF0ZVJldGFpbkNvdW50JDIiLCJSZXRlbnRpb25ab25lJDMiLCJ1c2VFZmZlY3QkMiIsInVzZVJlZiQzIiwiaXNTU1IkMiIsIlJlY29pbF91c2VSZXRhaW4iLCJ0b1JldGFpbiIsInRpbWVvdXRJRCIsInByZXZpb3VzUmV0YWluYWJsZXMiLCJ1c2VSZXRhaW5fQUNUVUFMIiwiUmVjb2lsX3VzZUNvbXBvbmVudE5hbWUiLCJiYXRjaFVwZGF0ZXMkMiIsIkRFRkFVTFRfVkFMVUUkMiIsImN1cnJlbnRSZW5kZXJlclN1cHBvcnRzVXNlU3luY0V4dGVybmFsU3RvcmUkMSIsInJlYWN0TW9kZSQzIiwidXNlTXV0YWJsZVNvdXJjZSQxIiwidXNlU3luY0V4dGVybmFsU3RvcmUkMSIsInVzZVJlY29pbE11dGFibGVTb3VyY2UkMSIsInVzZVN0b3JlUmVmJDIiLCJpc1JlY29pbFZhbHVlJDIiLCJBYnN0cmFjdFJlY29pbFZhbHVlJDMiLCJnZXRSZWNvaWxWYWx1ZUFzTG9hZGFibGUkMiIsInNldFJlY29pbFZhbHVlJDIiLCJzZXRVbnZhbGlkYXRlZFJlY29pbFZhbHVlJDIiLCJzdWJzY3JpYmVUb1JlY29pbFZhbHVlJDEiLCJ1c2VDYWxsYmFjayQxIiwidXNlRWZmZWN0JDMiLCJ1c2VNZW1vJDEiLCJ1c2VSZWYkNCIsInVzZVN0YXRlJDEiLCJzZXRCeUFkZGluZ1RvU2V0JDIiLCJoYW5kbGVMb2FkYWJsZSIsInVzZVJlY29pbFZhbHVlTG9hZGFibGVfU1lOQ19FWFRFUk5BTF9TVE9SRSIsImNvbXBvbmVudE5hbWUiLCJtZW1vaXplUHJldmlvdXNTbmFwc2hvdCIsInByZXZTdGF0ZSIsIl9wcmV2U3RhdGUiLCJfcHJldlN0YXRlMiIsIm5leHRTdGF0ZSIsImdldE1lbW9pemVkU25hcHNob3QiLCJzdWJzY3JpYmUiLCJub3RpZnkiLCJ1c2VSZWNvaWxWYWx1ZUxvYWRhYmxlX01VVEFCTEVfU09VUkNFIiwiX3N0b3JlU3RhdGUkbmV4dFRyZWUzIiwiZ2V0TG9hZGFibGVXaXRoVGVzdGluZyIsIl9zdG9yZVN0YXRlIiwibmV3TG9hZGFibGUiLCJwcmV2TG9hZGFibGVSZWYiLCJ1c2VSZWNvaWxWYWx1ZUxvYWRhYmxlX1RSQU5TSVRJT05fU1VQUE9SVCIsIl9zdG9yZVN0YXRlJG5leHRUcmVlNCIsInVwZGF0ZVN0YXRlIiwiX3N0YXRlIiwidXNlUmVjb2lsVmFsdWVMb2FkYWJsZV9MRUdBQ1kiLCJfc3RvcmVTdGF0ZSRuZXh0VHJlZTUiLCJfcHJldkxvYWRhYmxlUmVmJGN1cnIiLCJfcHJldkxvYWRhYmxlUmVmJGN1cnIyIiwidXNlUmVjb2lsVmFsdWVMb2FkYWJsZSIsIlRSQU5TSVRJT05fU1VQUE9SVCIsIlNZTkNfRVhURVJOQUxfU1RPUkUiLCJNVVRBQkxFX1NPVVJDRSIsIkxFR0FDWSIsInVzZVJlY29pbFZhbHVlIiwidXNlU2V0UmVjb2lsU3RhdGUiLCJ1c2VSZWNvaWxWYWx1ZUxvYWRhYmxlX1RSQU5TSVRJT05fU1VQUE9SVF9VTlNUQUJMRSIsInVzZVJlY29pbFZhbHVlX1RSQU5TSVRJT05fU1VQUE9SVF9VTlNUQUJMRSIsIlJlY29pbF9Ib29rcyIsInJlY29pbENvbXBvbmVudEdldFJlY29pbFZhbHVlQ291bnRfRk9SX1RFU1RJTkciLCJ1c2VSZWNvaWxJbnRlcmZhY2UiLCJyZWNvaWxWYWx1ZXNVc2VkIiwicHJldmlvdXNTdWJzY3JpcHRpb25zIiwidW5zdWJzY3JpYmVGcm9tIiwic3ViIiwiY3VycmVudFN1YnNjcmlwdGlvbnMiLCJnZXRSZWNvaWxWYWx1ZSIsImdldFJlY29pbFZhbHVlTG9hZGFibGUiLCJnZXRSZWNvaWxTdGF0ZSIsImdldFJlY29pbFN0YXRlTG9hZGFibGUiLCJnZXRTZXRSZWNvaWxTdGF0ZSIsImdldFJlc2V0UmVjb2lsU3RhdGUiLCJ1c2VSZWNvaWxTdGF0ZSIsInVzZVJlY29pbFN0YXRlTG9hZGFibGUiLCJ1c2VSZXNldFJlY29pbFN0YXRlIiwidXNlU2V0VW52YWxpZGF0ZWRBdG9tVmFsdWVzIiwidXNlUmVjb2lsU3RhdGVfVFJBTlNJVElPTl9TVVBQT1JUX1VOU1RBQkxFIiwiUmVjb2lsX2ZpbHRlck1hcCIsIlJlY29pbF9maWx0ZXJTZXQiLCJSZWNvaWxfbWVyZ2VNYXBzIiwibWFwcyIsIm5leHRLZXkiLCJiYXRjaFVwZGF0ZXMkMyIsIkRFRkFVTFRfVkFMVUUkMyIsImdldE5vZGUkNCIsIm5vZGVzJDEiLCJ1c2VTdG9yZVJlZiQzIiwiQWJzdHJhY3RSZWNvaWxWYWx1ZSQ0Iiwic2V0UmVjb2lsVmFsdWVMb2FkYWJsZSQxIiwiU1VTUEVOU0VfVElNRU9VVF9NUyQyIiwiY2xvbmVTbmFwc2hvdCQxIiwidXNlQ2FsbGJhY2skMiIsInVzZUVmZmVjdCQ0IiwidXNlUmVmJDUiLCJ1c2VTdGF0ZSQyIiwiaXNTU1IkMyIsInVzZVRyYW5zYWN0aW9uU3Vic2NyaXB0aW9uIiwiZXh0ZXJuYWxseVZpc2libGVBdG9tVmFsdWVzSW5TdGF0ZSIsInBlcnNpc3RlZEF0b21Db250ZW50c1ZhbHVlcyIsInBlcnNpc3RlbmNlIiwicGVyc2lzdGVuY2VfVU5TVEFCTEUiLCJnb3RvU25hcHNob3QiLCJrZXlzVG9VcGRhdGUiLCJfcHJldiRhdG9tVmFsdWVzJGdldCIsIl9uZXh0JGF0b21WYWx1ZXMkZ2V0Iiwic2hvdWxkUmVzdG9yZUZyb21TbmFwc2hvdHMiLCJSZWNvaWxfU25hcHNob3RIb29rcyIsInVzZVJlY29pbFNuYXBzaG90Iiwic2V0U25hcHNob3QiLCJwcmV2aW91c1NuYXBzaG90IiwicmVsZWFzZVJlZiIsIl9yZWxlYXNlUmVmJGN1cnJlbnQiLCJfcmVsZWFzZVJlZiRjdXJyZW50MiIsIl9yZWxlYXNlUmVmJGN1cnJlbnQzIiwidXNlR290b1JlY29pbFNuYXBzaG90IiwidXNlUmVjb2lsVHJhbnNhY3Rpb25PYnNlcnZlciIsInVzZVRyYW5zYWN0aW9uT2JzZXJ2YXRpb25fREVQUkVDQVRFRCIsInByZXZpb3VzQXRvbVZhbHVlcyIsImF0b21JbmZvIiwiX25vZGUkcGVyc2lzdGVuY2VfVU5TIiwiX25vZGUkcGVyc2lzdGVuY2VfVU5TMiIsIl9ub2RlJHBlcnNpc3RlbmNlX1VOUzMiLCJfbm9kZSRwZXJzaXN0ZW5jZV9VTlM0IiwiYmFja0J1dHRvbiIsIm1vZGlmaWVkQXRvbXMiLCJ1c2VUcmFuc2FjdGlvblN1YnNjcmlwdGlvbl9ERVBSRUNBVEVEIiwicGVla05vZGVJbmZvJDIiLCJ1c2VTdG9yZVJlZiQ0IiwiUmVjb2lsX3VzZUdldFJlY29pbFZhbHVlSW5mbyIsInJlYWN0TW9kZSQ0IiwiUmVjb2lsUm9vdCQxIiwidXNlU3RvcmVSZWYkNSIsInVzZU1lbW8kMiIsIlJlY29pbF91c2VSZWNvaWxCcmlkZ2VBY3Jvc3NSZWFjdFJvb3RzIiwibG9hZGFibGVXaXRoVmFsdWUkMSIsImluaXRpYWxpemVOb2RlJDMiLCJERUZBVUxUX1ZBTFVFJDQiLCJnZXROb2RlJDUiLCJjb3B5VHJlZVN0YXRlJDEiLCJnZXRSZWNvaWxWYWx1ZUFzTG9hZGFibGUkMyIsImludmFsaWRhdGVEb3duc3RyZWFtcyQxIiwid3JpdGVMb2FkYWJsZVRvVHJlZVN0YXRlJDEiLCJpc0F0b20iLCJUcmFuc2FjdGlvbkludGVyZmFjZUltcGwiLCJfY2hhbmdlcyIsIl90cmVlU3RhdGUiLCJuZXdUcmVlU3RhdGVfSU5URVJOQUwiLCJSZWNvaWxfQXRvbWljVXBkYXRlcyIsImNoYW5nZXNldCIsIlJlY29pbF9BdG9taWNVcGRhdGVzXzEiLCJSZWNvaWxfQXRvbWljVXBkYXRlcyQxIiwiYXRvbWljVXBkYXRlciIsIlJlY29pbF9pbnZhcmlhbnQiLCJjb25kaXRpb24iLCJhdG9taWNVcGRhdGVyJDEiLCJiYXRjaFVwZGF0ZXMkNCIsIkRFRkFVTFRfVkFMVUUkNSIsInVzZVN0b3JlUmVmJDYiLCJyZWZyZXNoUmVjb2lsVmFsdWUkMSIsInNldFJlY29pbFZhbHVlJDMiLCJjbG9uZVNuYXBzaG90JDIiLCJnb3RvU25hcHNob3QkMSIsInVzZUNhbGxiYWNrJDMiLCJTZW50aW5lbCIsIlNFTlRJTkVMIiwicmVjb2lsQ2FsbGJhY2siLCJleHRyYUludGVyZmFjZSIsInJlbGVhc2VTbmFwc2hvdCIsIl9yZWxlYXNlU25hcHNob3QyIiwiZXJyTXNnIiwiY2FsbGJhY2tJbnRlcmZhY2UiLCJyZXNldCIsInJlZnJlc2giLCJ0cmFuc2FjdF9VTlNUQUJMRSIsInRyYW5zYWN0aW9uIiwiX3JlbGVhc2VTbmFwc2hvdCIsIlJlY29pbF91c2VSZWNvaWxDYWxsYmFjayIsInVzZVJlY29pbENhbGxiYWNrIiwidXNlU3RvcmVSZWYkNyIsInJlZnJlc2hSZWNvaWxWYWx1ZSQyIiwidXNlQ2FsbGJhY2skNCIsIlJlY29pbF91c2VSZWNvaWxSZWZyZXNoZXIiLCJhdG9taWNVcGRhdGVyJDIiLCJ1c2VTdG9yZVJlZiQ4IiwidXNlTWVtbyQzIiwiUmVjb2lsX3VzZVJlY29pbFRyYW5zYWN0aW9uIiwiYXRvbWljVXBkYXRlIiwidHJhbnNhY3Rpb25JbnRlcmZhY2UiLCJSZWNvaWxfV3JhcHBlcl8xIiwiUmVjb2lsX1dyYXBwZXIkMSIsIldyYXBwZWRWYWx1ZSIsImlzRmFzdFJlZnJlc2hFbmFibGVkJDIiLCJDaGFuZ2VkUGF0aEVycm9yIiwiUmVjb2lsX1RyZWVDYWNoZV8xIiwiX29wdGlvbnMkb25IaXQiLCJfb3B0aW9ucyRvblNldCIsIl9vcHRpb25zJG1hcE5vZGVWYWx1ZSIsIl9uYW1lIiwiX251bUxlYWZzIiwiX29uSGl0Iiwib25IaXQiLCJfb25TZXQiLCJvblNldCIsIl9tYXBOb2RlVmFsdWUiLCJtYXBOb2RlVmFsdWUiLCJnZXROb2RlVmFsdWUiLCJfdGhpcyRnZXRMZWFmTm9kZSIsImdldExlYWZOb2RlIiwib25Ob2RlVmlzaXQiLCJicmFuY2hlcyIsInJvdXRlIiwiYWRkTGVhZiIsIl9ub2RlMiIsIl9ub2RlMyIsIl90aGlzJF9yb290MiIsIl9oYW5kbGVycyRvbk5vZGVWaXNpdDIiLCJicmFuY2hLZXkiLCJfbm9kZSIsIl9oYW5kbGVycyRvbk5vZGVWaXNpdCIsIl90aGlzJF9yb290IiwiaW52YWxpZENhY2hlRXJyb3IiLCJvbGRMZWFmIiwibGVhZk5vZGUiLCJsZWFmIiwiX25vZGU0IiwiQ0hBTkdFRF9QQVRIX0VSUk9SX01FU1NBR0UiLCJSZWNvaWxfVHJlZUNhY2hlJDEiLCJUcmVlQ2FjaGUiLCJSZWNvaWxfTFJVQ2FjaGVfMSIsIl9vcHRpb25zJG1hcEtleSIsIl9tYXhTaXplIiwibWF4U2l6ZSIsIl9oZWFkIiwiX3RhaWwiLCJfa2V5TWFwcGVyIiwibWFwS2V5IiwibWFwcGVkS2V5IiwiX21heWJlRGVsZXRlTFJVIiwiZGVsZXRlTHJ1IiwiUmVjb2lsX0xSVUNhY2hlJDEiLCJMUlVDYWNoZSIsIkxSVUNhY2hlJDEiLCJUcmVlQ2FjaGUkMSIsIlJlY29pbF90cmVlQ2FjaGVMUlUiLCJscnVDYWNoZSIsImxydU5vZGUiLCJhbGxvd0Z1bmN0aW9ucyIsIl9KU09OJHN0cmluZ2lmeSIsInNvcnQiLCJsb2NhbGVDb21wYXJlIiwiUmVjb2lsX3N0YWJsZVN0cmluZ2lmeSIsIlRyZWVDYWNoZSQyIiwiZGVmYXVsdFBvbGljeSIsImVxdWFsaXR5IiwiZXZpY3Rpb24iLCJSZWNvaWxfdHJlZUNhY2hlRnJvbVBvbGljeSIsInZhbHVlTWFwcGVyIiwiZ2V0VmFsdWVNYXBwZXIiLCJnZXRUcmVlQ2FjaGUiLCJpc1JlYWN0TmF0aXZlJDEiLCJpc1dpbmRvdyQxIiwiUmVjb2lsX1BlcmZvcm1hbmNlVGltaW5ncyIsInN0YXJ0UGVyZkJsb2NrIiwiX2lkIiwiaXNMb2FkYWJsZSQxIiwibG9hZGFibGVXaXRoRXJyb3IkMSIsImxvYWRhYmxlV2l0aFByb21pc2UkMSIsImxvYWRhYmxlV2l0aFZhbHVlJDIiLCJXcmFwcGVkVmFsdWUkMSIsImdldE5vZGVMb2FkYWJsZSQyIiwicGVla05vZGVMb2FkYWJsZSQxIiwic2V0Tm9kZVZhbHVlJDMiLCJzYXZlRGVwc1RvU3RvcmUkMSIsIkRFRkFVTFRfVkFMVUUkNiIsImdldENvbmZpZ0RlbGV0aW9uSGFuZGxlciQxIiwiZ2V0Tm9kZSQ2IiwicmVnaXN0ZXJOb2RlJDEiLCJpc1JlY29pbFZhbHVlJDMiLCJtYXJrUmVjb2lsVmFsdWVNb2RpZmllZCQxIiwicmV0YWluZWRCeU9wdGlvbldpdGhEZWZhdWx0JDEiLCJyZWNvaWxDYWxsYmFjayQxIiwic3RhcnRQZXJmQmxvY2skMSIsIkNhbmNlbGVkIiwiQ0FOQ0VMRUQiLCJkZXBlbmRlbmN5U3RhY2siLCJ3YWl0aW5nU3RvcmVzIiwiZ2V0TmV3RXhlY3V0aW9uSUQiLCJleGVjdXRpb25JRCIsInNlbGVjdG9yIiwiY2FjaGVQb2xpY3lfVU5TVEFCTEUiLCJjYWNoZVBvbGljeSIsImRpc2NvdmVyZWREZXBlbmRlbmN5Tm9kZUtleXMiLCJyZXRhaW5lZEJ5X1VOU1RBQkxFIiwiZXhlY3V0aW9uSW5mb01hcCIsImxpdmVTdG9yZXNDb3VudCIsInNlbGVjdG9ySXNMaXZlIiwic2VsZWN0b3JJbml0Iiwic2VsZWN0b3JTaG91bGREZWxldGVDb25maWdPblJlbGVhc2UiLCJyZXNvbHZlQXN5bmMiLCJkZXBWYWx1ZXMiLCJzZXRDYWNoZSIsIm5vdGlmeVN0b3Jlc09mUmVzb2x2ZWRBc3luYyIsImlzTGF0ZXN0RXhlY3V0aW9uIiwiY2xlYXJFeGVjdXRpb25JbmZvIiwibm90aWZ5V2FpdGluZ1N0b3JlcyIsImNsZWFyV2FpdGxpc3QiLCJ3YWl0aW5nU3RvcmUiLCJtYXJrU3RvcmVXYWl0aW5nRm9yUmVzb2x2ZWRBc3luYyIsIndyYXBQZW5kaW5nRGVwZW5kZW5jeVByb21pc2UiLCJleGlzdGluZ0RlcHMiLCJsb2FkaW5nRGVwc1N0YXRlIiwicmVzb2x2ZWREZXAiLCJsb2FkaW5nRGVwS2V5IiwibG9hZGluZ0RlcFByb21pc2UiLCJjYWNoZWRMb2FkYWJsZSIsImdldExvYWRhYmxlRnJvbUNhY2hlQW5kVXBkYXRlRGVwcyIsImdldEV4ZWN1dGlvbkluZm8iLCJleGVjdXRpb25JbmZvIiwiZ2V0SW5Qcm9ncmVzc0V4ZWN1dGlvbkluZm8iLCJsb2FkaW5nTG9hZGFibGUiLCJldmFsdWF0ZVNlbGVjdG9yR2V0dGVyIiwidXBkYXRlRGVwcyIsIl9zdG9yZSRnZXRTdGF0ZSIsIl9zdG9yZSRnZXRTdGF0ZSRjdXJyZSIsIl9zdG9yZSRnZXRTdGF0ZTIiLCJfc3RvcmUkZ2V0U3RhdGUyJG5leHQiLCJfc3RvcmUkZ2V0U3RhdGUzIiwiX3N0b3JlJGdldFN0YXRlMyRuZXh0IiwiZW5kUGVyZkJsb2NrIiwiZHVyaW5nU3luY2hyb25vdXNFeGVjdXRpb24iLCJkdXJpbmdBc3luY2hyb25vdXNFeGVjdXRpb24iLCJmaW5pc2hFdmFsdWF0aW9uIiwicmVzdWx0SXNFcnJvciIsImRlcEtleSIsImRlcExvYWRhYmxlIiwic3RhdGVWZXJzaW9ucyIsIm5vdGlmeVN0b3Jlc09mTmV3QXN5bmNEZXAiLCJnZXRDYWxsYmFjayIsImVycm9yT3JQcm9taXNlIiwid3JhcFJlc3VsdFByb21pc2UiLCJlcnJvck9yRGVwUHJvbWlzZSIsImRlcFZhbHVlc0Rpc2NvdmVyZWRTb0ZhckR1cmluZ0FzeW5jV29yayIsInVwZGF0ZUV4ZWN1dGlvbkluZm9EZXBWYWx1ZXMiLCJkZXBzQWZ0ZXJDYWNoZUxvb2t1cCIsIl9nZXRFeGVjdXRpb25JbmZvIiwiZ2V0U2VsZWN0b3JMb2FkYWJsZUFuZFVwZGF0ZURlcHMiLCJjYWNoZWRWYWwiLCJpblByb2dyZXNzRXhlY3V0aW9uSW5mbyIsIl9pblByb2dyZXNzRXhlY3V0aW9uSSIsIm5ld0V4ZWN1dGlvbklEIiwibmV3RGVwVmFsdWVzIiwic2V0RXhlY3V0aW9uSW5mbyIsInBlbmRpbmdFeGVjdXRpb25zIiwiZXhlY0luZm8iLCJhbnlEZXBDaGFuZ2VkIiwiZXhlY0RlcFZhbHVlcyIsImV4ZWNMb2FkYWJsZSIsIl9nZXRFeGVjdXRpb25JbmZvMiIsInZhbExvYWRhYmxlIiwiZGVwVmFsdWVzVG9EZXBSb3V0ZSIsInNlbGVjdG9yUGVlayIsIl9wZWVrTm9kZUxvYWRhYmxlIiwic2VsZWN0b3JHZXQiLCJkZXRlY3RDaXJjdWxhckRlcGVuZGVuY2llcyIsImludmFsaWRhdGVTZWxlY3RvciIsImNsZWFyU2VsZWN0b3JDYWNoZSIsInN5bmNTZWxlY3RvclNldEZpbmlzaGVkIiwic2V0UmVjb2lsU3RhdGUiLCJkYW5nZXJvdXNseUFsbG93TXV0YWJpbGl0eSIsIlJlY29pbF9zZWxlY3RvciIsImlzTG9hZGFibGUkMiIsImxvYWRhYmxlV2l0aEVycm9yJDIiLCJsb2FkYWJsZVdpdGhQcm9taXNlJDIiLCJsb2FkYWJsZVdpdGhWYWx1ZSQzIiwiV3JhcHBlZFZhbHVlJDIiLCJwZWVrTm9kZUluZm8kMyIsIkRFRkFVTFRfVkFMVUUkNyIsIkRlZmF1bHRWYWx1ZSQyIiwiZ2V0Q29uZmlnRGVsZXRpb25IYW5kbGVyJDIiLCJyZWdpc3Rlck5vZGUkMiIsInNldENvbmZpZ0RlbGV0aW9uSGFuZGxlciQxIiwiaXNSZWNvaWxWYWx1ZSQ0IiwiZ2V0UmVjb2lsVmFsdWVBc0xvYWRhYmxlJDQiLCJtYXJrUmVjb2lsVmFsdWVNb2RpZmllZCQyIiwic2V0UmVjb2lsVmFsdWUkNCIsInNldFJlY29pbFZhbHVlTG9hZGFibGUkMiIsInJldGFpbmVkQnlPcHRpb25XaXRoRGVmYXVsdCQyIiwidW53cmFwIiwiYmFzZUF0b20iLCJ1bndyYXBQcm9taXNlIiwiZGVmYXVsdExvYWRhYmxlIiwiY2FjaGVkQW5zd2VyRm9yVW52YWxpZGF0ZWRWYWx1ZSIsIm1heWJlRnJlZXplVmFsdWVPclByb21pc2UiLCJjbGVhbnVwRWZmZWN0c0J5U3RvcmUiLCJ2YWx1ZU9yUHJvbWlzZSIsInBlZWtBdG9tIiwiX3JlZiIsIl9zdGF0ZSRhdG9tVmFsdWVzJGdldDMiLCJub252YWxpZGF0ZWRWYWx1ZSIsInZhbGlkYXRvclJlc3VsdCIsInZhbGlkYXRvciIsInZhbGlkYXRlZFZhbHVlTG9hZGFibGUiLCJpbml0U3RhdGUiLCJfb3B0aW9ucyRlZmZlY3RzIiwibm90aWZ5RGVmYXVsdFN1YnNjcmliZXJzIiwiX3N0b3JlJGdldFN0YXRlJG5leHRUMyIsImVmZmVjdHNfVU5TVEFCTEUiLCJpbml0VmFsdWUiLCJpc0R1cmluZ0luaXQiLCJpc0luaXRFcnJvciIsInBlbmRpbmdTZXRTZWxmIiwicmV0VmFsdWUiLCJnZXRQcm9taXNlIiwiZ2V0SW5mb19VTlNUQUJMRSIsIl9zdG9yZSRnZXRTdGF0ZSRuZXh0VDQiLCJpbmZvIiwic2V0U2VsZiIsImVmZmVjdCIsImN1cnJlbnRMb2FkYWJsZSIsImN1cnJlbnRWYWx1ZSIsInJlc2V0U2VsZiIsImhhbmRsZXIiLCJfY2xlYW51cEVmZmVjdHNCeVN0b3IyIiwiY3VycmVudFN0b3JlIiwiX2N1cnJlbnRUcmVlJGF0b21WYWx1IiwiX3ByZXZpb3VzVHJlZSRhdG9tVmFsIiwiX3BlbmRpbmdTZXRTZWxmIiwiX3BlbmRpbmdTZXRTZWxmMiIsIl9wZW5kaW5nU2V0U2VsZjMiLCJvbGRMb2FkYWJsZSIsIm9sZFZhbHVlIiwicGFyZW50U3RvcmVJRF9VTlNUQUJMRSIsIl9jbGVhbnVwRWZmZWN0c0J5U3RvcjMiLCJfc3RvcmUkZ2V0U3RhdGUkbmV4dFQ1IiwiaW5pdExvYWRhYmxlIiwid3JhcHBlZFByb21pc2UiLCJfc3RhdGUkYXRvbVZhbHVlcyRnZXQiLCJfc3RvcmUkZ2V0U3RhdGUkbmV4dFQyIiwiX3N0YXRlJGF0b21WYWx1ZXMkZ2V0MiIsIndyYXBQZW5kaW5nUHJvbWlzZSIsIl9jbGVhbnVwRWZmZWN0c0J5U3RvciIsInJlc3RPcHRpb25zIiwib3B0aW9uc0RlZmF1bHQiLCJzdG9yZWRWYWx1ZSIsInNlbCIsImJhc2VWYWx1ZSIsImF0b21XaXRoRmFsbGJhY2siLCJSZWNvaWxfYXRvbSIsIlJlY29pbF9NYXBDYWNoZV8xIiwiUmVjb2lsX01hcENhY2hlJDEiLCJNYXBDYWNoZSIsIkxSVUNhY2hlJDIiLCJNYXBDYWNoZSQxIiwiZGVmYXVsdFBvbGljeSQxIiwiUmVjb2lsX2NhY2hlRnJvbVBvbGljeSIsImdldFZhbHVlTWFwcGVyJDEiLCJnZXRDYWNoZSIsInNldENvbmZpZ0RlbGV0aW9uSGFuZGxlciQyIiwiUmVjb2lsX2F0b21GYW1pbHkiLCJfb3B0aW9ucyRjYWNoZVBvbGljeUYiLCJfb3B0aW9ucyRjYWNoZVBvbGljeUYyIiwiYXRvbUNhY2hlIiwiY2FjaGVQb2xpY3lGb3JQYXJhbXNfVU5TVEFCTEUiLCJwYXJhbXMiLCJfc3RhYmxlU3RyaW5naWZ5IiwiY2FjaGVkQXRvbSIsImF0b21PcHRpb25zIiwibmV3QXRvbSIsInNldENvbmZpZ0RlbGV0aW9uSGFuZGxlciQzIiwibmV4dEluZGV4IiwiUmVjb2lsX3NlbGVjdG9yRmFtaWx5Iiwic2VsZWN0b3JDYWNoZSIsImNhY2hlZFNlbGVjdG9yIiwibXlLZXkiLCJteUdldCIsImNhbGxiYWNrcyIsIm15Q2FjaGVQb2xpY3kiLCJuZXdTZWxlY3RvciIsImNvbnN0YW50U2VsZWN0b3IiLCJSZWNvaWxfY29uc3RTZWxlY3RvciIsInRocm93aW5nU2VsZWN0b3IiLCJSZWNvaWxfZXJyb3JTZWxlY3RvciIsIlJlY29pbF9yZWFkT25seVNlbGVjdG9yIiwibG9hZGFibGVXaXRoRXJyb3IkMyIsImxvYWRhYmxlV2l0aFByb21pc2UkMyIsImxvYWRhYmxlV2l0aFZhbHVlJDQiLCJjb25jdXJyZW50UmVxdWVzdHMiLCJyZXN1bHRzIiwiZXhjZXB0aW9ucyIsImlzRXJyb3IiLCJleHAiLCJ1bndyYXBEZXBlbmRlbmNpZXMiLCJ3cmFwUmVzdWx0cyIsIndyYXBMb2FkYWJsZXMiLCJleGNlcHRpb24iLCJSZWNvaWxfV2FpdEZvciIsIndhaXRGb3JOb25lIiwid2FpdEZvckFueSIsIndhaXRGb3JBbGwiLCJleGNlcHRpb25SZXN1bHRzIiwic3luY1Jlc3VsdHMiLCJ3YWl0Rm9yQWxsU2V0dGxlZCIsIm5vV2FpdCIsImRlcGVuZGVuY3kiLCJEZWZhdWx0VmFsdWUkMyIsIlJlY29pbFJvb3QkMiIsInVzZVJlY29pbFN0b3JlSUQkMSIsImlzUmVjb2lsVmFsdWUkNSIsInJldGVudGlvblpvbmUkMSIsImZyZXNoU25hcHNob3QkMiIsInVzZVJlY29pbFN0YXRlJDEiLCJ1c2VSZWNvaWxTdGF0ZV9UUkFOU0lUSU9OX1NVUFBPUlRfVU5TVEFCTEUkMSIsInVzZVJlY29pbFN0YXRlTG9hZGFibGUkMSIsInVzZVJlY29pbFZhbHVlJDEiLCJ1c2VSZWNvaWxWYWx1ZV9UUkFOU0lUSU9OX1NVUFBPUlRfVU5TVEFCTEUkMSIsInVzZVJlY29pbFZhbHVlTG9hZGFibGUkMSIsInVzZVJlY29pbFZhbHVlTG9hZGFibGVfVFJBTlNJVElPTl9TVVBQT1JUX1VOU1RBQkxFJDEiLCJ1c2VSZXNldFJlY29pbFN0YXRlJDEiLCJ1c2VTZXRSZWNvaWxTdGF0ZSQxIiwidXNlR290b1JlY29pbFNuYXBzaG90JDEiLCJ1c2VSZWNvaWxTbmFwc2hvdCQxIiwidXNlUmVjb2lsVHJhbnNhY3Rpb25PYnNlcnZlciQxIiwidXNlUmVjb2lsQ2FsbGJhY2skMSIsIm5vV2FpdCQxIiwid2FpdEZvckFsbCQxIiwid2FpdEZvckFsbFNldHRsZWQkMSIsIndhaXRGb3JBbnkkMSIsIndhaXRGb3JOb25lJDEiLCJSZWNvaWxfaW5kZXgiLCJSZWNvaWxFbnYiLCJ1c2VSZWNvaWxCcmlkZ2VBY3Jvc3NSZWFjdFJvb3RzX1VOU1RBQkxFIiwiYXRvbUZhbWlseSIsInNlbGVjdG9yRmFtaWx5IiwiY29uc3RTZWxlY3RvciIsImVycm9yU2VsZWN0b3IiLCJyZWFkT25seVNlbGVjdG9yIiwidXNlR2V0UmVjb2lsVmFsdWVJbmZvX1VOU1RBQkxFIiwidXNlUmVjb2lsUmVmcmVzaGVyX1VOU1RBQkxFIiwidXNlUmVjb2lsVHJhbnNhY3Rpb25fVU5TVEFCTEUiLCJ1c2VSZWNvaWxUcmFuc2FjdGlvbk9ic2VydmVyX1VOU1RBQkxFIiwic25hcHNob3RfVU5TVEFCTEUiLCJ1c2VSZXRhaW4iLCJSZWNvaWxfaW5kZXhfMSIsIlJlY29pbF9pbmRleF8yIiwiUmVjb2lsX2luZGV4XzMiLCJSZWNvaWxfaW5kZXhfNCIsIlJlY29pbF9pbmRleF81IiwiUmVjb2lsX2luZGV4XzYiLCJSZWNvaWxfaW5kZXhfNyIsIlJlY29pbF9pbmRleF84IiwiUmVjb2lsX2luZGV4XzkiLCJSZWNvaWxfaW5kZXhfMTAiLCJSZWNvaWxfaW5kZXhfMTEiLCJSZWNvaWxfaW5kZXhfMTIiLCJSZWNvaWxfaW5kZXhfMTMiLCJSZWNvaWxfaW5kZXhfMTQiLCJSZWNvaWxfaW5kZXhfMTUiLCJSZWNvaWxfaW5kZXhfMTYiLCJSZWNvaWxfaW5kZXhfMTciLCJSZWNvaWxfaW5kZXhfMTgiLCJSZWNvaWxfaW5kZXhfMTkiLCJSZWNvaWxfaW5kZXhfMjAiLCJSZWNvaWxfaW5kZXhfMjEiLCJSZWNvaWxfaW5kZXhfMjIiLCJSZWNvaWxfaW5kZXhfMjMiLCJSZWNvaWxfaW5kZXhfMjQiLCJSZWNvaWxfaW5kZXhfMjUiLCJSZWNvaWxfaW5kZXhfMjYiLCJSZWNvaWxfaW5kZXhfMjciLCJSZWNvaWxfaW5kZXhfMjgiLCJSZWNvaWxfaW5kZXhfMjkiLCJSZWNvaWxfaW5kZXhfMzAiLCJSZWNvaWxfaW5kZXhfMzEiLCJSZWNvaWxfaW5kZXhfMzIiLCJSZWNvaWxfaW5kZXhfMzMiLCJSZWNvaWxfaW5kZXhfMzQiLCJSZWNvaWxfaW5kZXhfMzUiLCJSZWNvaWxfaW5kZXhfMzYiLCJSZWNvaWxfaW5kZXhfMzciLCJSZWNvaWxfaW5kZXhfMzgiLCJzb3J0SW5kZXgiLCJwZXJmb3JtYW5jZSIsInN0YXJ0VGltZSIsImV4cGlyYXRpb25UaW1lIiwicHJpb3JpdHlMZXZlbCIsInNjaGVkdWxpbmciLCJpc0lucHV0UGVuZGluZyIsInVuc3RhYmxlX1Byb2ZpbGluZyIsInVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uIiwidW5zdGFibGVfZm9yY2VGcmFtZVJhdGUiLCJ1bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZSIsInVuc3RhYmxlX25leHQiLCJ1bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbiIsInVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSIsInVuc3RhYmxlX3dyYXBDYWxsYmFjayIsInN0eWxlVGFnVHJhbnNmb3JtIiwic2V0QXR0cmlidXRlcyIsImRvbUFQSSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwibW9kdWxlc1RvRG9tIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiaW5kZXhCeUlkZW50aWZpZXIiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwiYWRkRWxlbWVudFN0eWxlIiwiYnlJbmRleCIsImFwaSIsInVwZGF0ZSIsIm5ld09iaiIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaW5kZXgiLCJhdHRyaWJ1dGVzIiwic3R5bGVFbGVtZW50Iiwibm9uY2UiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImRpcmVjdG9yeSIsInNldERpcmVjdG9yeSIsImxvYWREaXJlY3RvcnkiLCJkaXJlY3RvcnlIYW5kbGUiLCJzaG93RGlyZWN0b3J5UGlja2VyIiwiZGlhbG9nIiwidXNlRGlhbG9nIiwic2F2ZUFjdGlvbiIsImNoZWNrT3ZlcndyaXRlIiwiZmlsZW5hbWUiLCJzaG93TW9kYWwiLCJjbG9zZSIsInR3ZWV0cyIsImdldExvYWRlZFR3ZWV0cyIsImRvd25sb2FkTm9TYXZlQ29udGVudHMiLCJzY3JvbGxCb3R0b21Ud2VldCIsImRpYWxvZ01hcCIsIkRpYWxvZ0NvbnRyb2xsZXIiLCJkaWFsb2dJZCIsImRpYWxvZ1JlZiIsInBhcnNlRW50cnkiLCJpdGVtQ29udGVudHMiLCJpdGVtQ29udGVudCIsIml0ZW1zIiwiZ2V0SXRlbUNvbnRlbnQiLCJ0d2VldF9yZXN1bHRzIiwiX190eXBlbmFtZSIsInR3ZWV0UmVmIiwidXNlclJlZiIsImNvcmUiLCJ1c2VyX3Jlc3VsdHMiLCJ0d2VldF9pZF9zdHIiLCJyZXN0X2lkIiwidXNlcl9pZF9zdHIiLCJyZXR3ZWV0X2lkIiwicmV0d2VldF91c2VyX2lkIiwicmV0d2VldF9uYW1lIiwicmV0d2VldF9zY3JlZW5fbmFtZSIsInJldHdlZXRfZGVzY3JpcHRpb24iLCJyZXR3ZWV0X3VybCIsInJldHdlZXRfZnVsbHRleHQiLCJsZWdhY3kiLCJlbnRpdGllcyIsImRlc2NyaXB0aW9uIiwidXJscyIsImV4cGFuZGVkX3VybCIsInJldHdlZXRlZF9zdGF0dXNfcmVzdWx0IiwidXNlcl9tZW50aW9ucyIsInNjcmVlbl9uYW1lIiwiZnVsbF90ZXh0IiwiZXh0ZW5kZWRfZW50aXRpZXMiLCJtZWRpdW0iLCJtZWRpYV90eXBlIiwibWVkaWFfdXJsX2h0dHBzIiwibWVkaXVtSW5mbyIsInZpZGVvX2luZm8iLCJ2YXJpYW50cyIsInZhcmlhbnQiLCJiaXRyYXRlIiwicmhzIiwibGhzIiwiY29udGVudF90eXBlIiwidHdlZXQiLCJ1c2VyIiwiaWRfc3RyIiwidXNlcl9pZCIsInBhcnNlRGF0YSIsIm1heUJlVHdlZXQiLCJ0aW1lbGluZSIsImluc3RydWN0aW9ucyIsInRpbWVsaW5lX3YyIiwiaG9tZSIsImhvbWVfdGltZWxpbmVfdXJ0IiwidGhyZWFkZWRfY29udmVyc2F0aW9uX3dpdGhfaW5qZWN0aW9ucyIsInRocmVhZGVkX2NvbnZlcnNhdGlvbl93aXRoX2luamVjdGlvbnNfdjIiLCJib29rbWFya190aW1lbGluZSIsInR3ZWV0c190aW1lbGluZSIsInBhcnNlX3VzZXIiLCJwYXJzZV9tZWRpdW0iLCJ2aW5mbyIsImNhbmRpZGF0ZSIsImFjYyIsImN1ciIsInJlc291cmNlX2luZm8iLCJwYXJzZV9leHRlbmRlZF9lbnRyaWVzIiwicGFyc2VfdHdlZXQiLCJyZXR3ZWV0X2lkX3N0ciIsInJldHdlZXRlZF9zdGF0dXNfaWRfc3RyIiwidXNlcnMiLCJnbG9iYWxPYmplY3RzIiwicGFyc2VfdXNlcnMiLCJwYXJzZV90d2VldHMiLCJ1c2VyTWFwIiwiaW5qZWN0VXNlciIsIk5PTlNBVkVfQ09MT1IiLCJTQVZFRF9DT0xPUiIsImV4dFBhdHRlcm4iLCJSZWdFeHAiLCJleGVjIiwiY2hhbmdlQ29sb3IiLCJzYXZlZCIsImJhY2tncm91bmQiLCJkb3dubG9hZGVkIiwib3JpZyIsImRvYyIsInF1ZXJ5U2VsZWN0b3IiLCJnZXRJZCIsInR3ZWV0SWQiLCJnZXRNYXJrIiwidXBkYXRlQnV0dG9uVGV4dCIsInVwZGF0ZURvd25sb2FkUHJvZ3Jlc3MiLCJzYXZlIiwibWFyayIsImFsZXJ0IiwiX2FyZ3MiLCJydXgiLCJ1c2VyTWVkaWEiLCJ1c2VyVHdlZXRzIiwiYm9va21hcmtzIiwiaG9tZUxhdGVzdCIsImxpc3RMYXRlc3QiLCJyZXNwb25zZVRleHQiLCJwYXR0ZXJuIiwicmVtb3ZlT2xkS2V5cyIsInRocmVzaG9sZCIsInJlc3RLZXlzIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsInJlbW92ZUl0ZW0iLCJzZXRJdGVtIiwiZG93bmxvYWROb3RpZnkiLCJhcmNoaXZlTm90aWZ5IiwiemlwIiwiam9icyIsImV4dCIsImV4dGVuc2lvbiIsInRvdGFsSW5GcmFtZSIsImxvYWRlZCIsInRvUHJlY2lzaW9uIiwicmVwbGFjZUJhZENoYXJhY3RlckZvckZpbGVuYW1lIiwiZmlsZUV4aXN0cyIsImdldEZpbGVIYW5kbGUiLCJkZWJ1ZyIsInNhdmVPbkRpcmVjdG9yeSIsInF1ZXJ5Q2FsbGJhY2siLCJzdHJUb1VpbnQxNkFycmF5IiwiY3JlYXRlV3JpdGFibGUiLCJrZWVwRXhpc3RpbmdEYXRhIiwid3JpdGUiLCJkb3dubG9hZGFibGVzIiwiYXJ0aWNsZXMiLCJzY3JvbGxJbnRvVmlldyIsImJlaGF2aW9yIiwiX2dvb2JlciIsImV4dHJhY3RDc3MiLCJnbG9iIiwidGhlbWUiLCJhcyIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJnZXR0ZXIiLCJkZWZpbml0aW9uIiwiZ2xvYmFsVGhpcyIsIkZ1bmN0aW9uIiwidG9TdHJpbmdUYWciLCJubWQiLCJwYXRocyIsIm5jIiwiY3JlYXRlRWxlbWVudEhvb2siLCJkaXYiLCJEaWFsb2ciLCJBcHAiLCJyZWdpc3RlclhIUkhvb2siXSwic291cmNlUm9vdCI6IiJ9